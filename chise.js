/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["chise"] = factory();
	else
		root["chise"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function () {\n  var chise = function chise(_options) {\n    var param = {};\n\n    // Access the libs\n    var libs = (__webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n    var optionUtilities = __webpack_require__(/*! ./utilities/option-utilities-factory */ \"./src/utilities/option-utilities-factory.js\")();\n    var options = optionUtilities.extendOptions(_options); // Extends the default options with the given options\n\n    // Create an sbgnviz instance\n    var sbgnvizInstanceUtilities = __webpack_require__(/*! ./utilities/sbgnviz-instance-utilities-factory */ \"./src/utilities/sbgnviz-instance-utilities-factory.js\")();\n    var sbgnvizInstance = sbgnvizInstanceUtilities(options);\n\n    // Register undo/redo actions\n    var registerUndoRedoActions = __webpack_require__(/*! ./utilities/register-undo-redo-actions-factory */ \"./src/utilities/register-undo-redo-actions-factory.js\")();\n    var mainUtilities = __webpack_require__(/*! ./utilities/main-utilities-factory */ \"./src/utilities/main-utilities-factory.js\")();\n    var elementUtilitiesExtender = __webpack_require__(/*! ./utilities/element-utilities-extender-factory */ \"./src/utilities/element-utilities-extender-factory.js\")();\n    var undoRedoActionFunctionsExtender = __webpack_require__(/*! ./utilities/ur-action-functions-extender-factory */ \"./src/utilities/ur-action-functions-extender-factory.js\")();\n    var sifTopologyGrouping = __webpack_require__(/*! ./utilities/topology-grouping-factory */ \"./src/utilities/topology-grouping-factory.js\")();\n    var elementUtilities = sbgnvizInstance.elementUtilities;\n    var undoRedoActionFunctions = sbgnvizInstance.undoRedoActionFunctions;\n    param.sbgnvizInstanceUtilities = sbgnvizInstanceUtilities;\n    param.optionUtilities = optionUtilities;\n    param.elementUtilities = elementUtilities;\n    param.undoRedoActionFunctions = undoRedoActionFunctions;\n    param.sifTopologyGrouping = sifTopologyGrouping;\n    var shouldApply = function shouldApply() {\n      return param.elementUtilities.mapType === 'SIF';\n    };\n    undoRedoActionFunctionsExtender(param);\n    elementUtilitiesExtender(param);\n    registerUndoRedoActions(param);\n    mainUtilities(param);\n    sifTopologyGrouping(param, {\n      metaEdgeIdentifier: 'sif-meta',\n      lockGraphTopology: true,\n      shouldApply: shouldApply\n    });\n\n    // Expose the api\n    var api = {};\n\n    // Expose the properties inherited from sbgnviz\n    // then override some of these properties and expose some new properties\n    for (var prop in sbgnvizInstance) {\n      api[prop] = sbgnvizInstance[prop];\n    }\n\n    // Expose each main utility seperately\n    for (var prop in mainUtilities) {\n      api[prop] = mainUtilities[prop];\n    }\n\n    // Expose getSbgnvizInstance()\n    api.getSbgnvizInstance = sbgnvizInstanceUtilities.getInstance;\n\n    // Expose elementUtilities and undoRedoActionFunctions as is\n    api.elementUtilities = elementUtilities;\n    api.undoRedoActionFunctions = undoRedoActionFunctions;\n    api.sifTopologyGrouping = sifTopologyGrouping;\n    return api;\n  };\n\n  // Register chise with given libraries\n  chise.register = function (_libs) {\n    var libs = {};\n    libs.jQuery = _libs.jQuery || jQuery;\n    libs.cytoscape = _libs.cytoscape || cytoscape;\n    libs.sbgnviz = _libs.sbgnviz || sbgnviz;\n    libs.saveAs = _libs.filesaver ? _libs.filesaver.saveAs : saveAs;\n    libs.sbgnviz.register(_libs); // Register sbgnviz with the given libs\n\n    // inherit exposed static properties of sbgnviz other than register\n    for (var prop in libs.sbgnviz) {\n      if (prop !== 'register') {\n        chise[prop] = libs.sbgnviz[prop];\n      }\n    }\n\n    // Set the libraries to access them from any file\n    var libUtilities = __webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\");\n    libUtilities.setLibs(libs);\n  };\n  if ( true && module.exports) {\n    module.exports = chise;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/utilities/element-utilities-extender-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/element-utilities-extender-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n// Extends sbgnviz.elementUtilities\nvar libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var options, sbgnvizInstance, elementUtilities, cy;\n  function elementUtilitiesExtender(param) {\n    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();\n    options = param.optionUtilities.getOptions();\n    elementUtilities = sbgnvizInstance.elementUtilities;\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    extend();\n\n    // Return the extended elementUtilities\n    return elementUtilities;\n  }\n\n  // Extends elementUtilities with chise specific facilities\n  function extend() {\n    // Section Start\n    // Add remove utilities\n\n    elementUtilities.addNode = function (x, y, nodeParams, id, parent, visibility) {\n      if (_typeof(nodeParams) != \"object\") {\n        var sbgnclass = nodeParams;\n      } else {\n        var sbgnclass = nodeParams[\"class\"];\n        var language = nodeParams.language;\n      }\n      var css = {};\n      //('sbgnclass', sbgnclass)\n      // if there is no specific default width or height for\n      // sbgnclass these sizes are used\n      var defaultWidth = 50;\n      var defaultHeight = 50;\n      if (visibility) {\n        css.visibility = visibility;\n      }\n      var data = {\n        \"class\": sbgnclass,\n        language: language,\n        bbox: {\n          w: defaultWidth,\n          h: defaultHeight,\n          x: x,\n          y: y\n        },\n        statesandinfos: [],\n        ports: []\n      };\n\n      //console.log(\"data\", data)\n      if (id) {\n        data.id = id;\n      } else {\n        data.id = elementUtilities.generateNodeId();\n      }\n      if (parent) {\n        data.parent = parent;\n      }\n      this.extendNodeDataWithClassDefaults(data, sbgnclass);\n\n      // some defaults are not set by extendNodeDataWithClassDefaults()\n      //console.log(\"sbgnclass\", sbgnclass)\n      var defaults = this.getDefaultProperties(sbgnclass);\n      if (defaults[\"multimer\"]) {\n        data[\"class\"] += \" multimer\";\n      }\n      if (defaults[\"clonemarker\"]) {\n        data[\"clonemarker\"] = true;\n      }\n      if (defaults[\"hypothetical\"]) {\n        data[\"class\"] = \"hypothetical \" + data[\"class\"];\n      }\n      if (defaults[\"active\"]) {\n        data[\"class\"] = \"active \" + data[\"class\"];\n      }\n      data.bbox[\"w\"] = defaults[\"width\"];\n      data.bbox[\"h\"] = defaults[\"height\"];\n\n      //console.log(\"data\", data)\n      var eles = cy.add({\n        group: \"nodes\",\n        data: data,\n        css: css,\n        position: {\n          x: x,\n          y: y\n        }\n      });\n\n      //console.log('eles', eles)\n\n      var newNode = eles[eles.length - 1];\n      // Get the default ports ordering for the nodes with given sbgnclass\n      var ordering = defaults[\"ports-ordering\"];\n\n      // If there is a default ports ordering for the nodes with given sbgnclass and it is different than 'none' set the ports ordering to that ordering\n      if (ordering && ordering !== \"none\") {\n        this.setPortsOrdering(newNode, ordering);\n      }\n      if (language == \"AF\" && !elementUtilities.canHaveMultipleUnitOfInformation(newNode)) {\n        if (sbgnclass != \"BA plain\") {\n          // if AF node can have label i.e: not plain biological activity\n          var uoi_obj = {\n            clazz: \"unit of information\"\n          };\n          uoi_obj.label = {\n            text: \"\"\n          };\n          uoi_obj.bbox = {\n            w: 12,\n            h: 12\n          };\n          elementUtilities.addStateOrInfoBox(newNode, uoi_obj);\n        }\n      }\n\n      // node bg image was unexpectedly not rendered until it is clicked\n      // use this dirty hack until finding a solution to the problem\n      var bgImage = newNode.data(\"background-image\");\n      //alert('bgImage', bgImage)\n      if (bgImage) {\n        newNode.data(\"background-image\", bgImage);\n      }\n      return newNode;\n    };\n\n    //Saves old aux units of given node\n    elementUtilities.saveUnits = function (node) {\n      var tempData = [];\n      var index = 0;\n      node.data(\"statesandinfos\").forEach(function (ele) {\n        tempData.push({\n          x: ele.bbox.x,\n          y: ele.bbox.y,\n          anchorSide: ele.anchorSide\n        });\n        index++;\n      });\n      return tempData;\n    };\n\n    //Restores from given data\n    elementUtilities.restoreUnits = function (node, data) {\n      var index = 0;\n      node.data(\"statesandinfos\").forEach(function (ele) {\n        if (data !== undefined) {\n          ele.bbox.x = data[index].x;\n          ele.bbox.y = data[index].y;\n          var anchorSide = ele.anchorSide;\n          ele.anchorSide = data[index].anchorSide;\n          elementUtilities.modifyUnits(node, ele, anchorSide);\n          index++;\n        }\n      });\n    };\n\n    //Modify aux unit layouts\n    elementUtilities.modifyUnits = function (node, ele, anchorSide) {\n      console.log(\"elementUtilities.modifyUnits\", node);\n      instance.classes.AuxUnitLayout.modifyUnits(node, ele, anchorSide, cy);\n    };\n\n    //For reversible reactions both side of the process can be input/output\n    //Group ID identifies to which group of nodes the edge is going to be connected for reversible reactions(0: group 1 ID and 1:group 2 ID)\n    elementUtilities.addEdge = function (source, target, edgeParams, id, visibility, groupID) {\n      console.log(source, target, edgeParams, id, visibility, groupID);\n      if (_typeof(edgeParams) != \"object\") {\n        var sbgnclass = edgeParams;\n      } else {\n        var sbgnclass = edgeParams[\"class\"];\n        var language = edgeParams.language;\n      }\n      var css = {};\n      if (visibility) {\n        css.visibility = visibility;\n      }\n      var data = {\n        source: source,\n        target: target,\n        \"class\": sbgnclass,\n        language: language\n      };\n      var defaults = elementUtilities.getDefaultProperties(sbgnclass);\n      // extend the data with default properties of edge style\n      Object.keys(defaults).forEach(function (prop) {\n        data[prop] = defaults[prop];\n      });\n      if (id) {\n        data.id = id;\n      } else {\n        data.id = elementUtilities.generateEdgeId();\n      }\n      if (elementUtilities.canHaveSBGNCardinality(sbgnclass)) {\n        data.cardinality = 0;\n      }\n      var sourceNode = cy.getElementById(source); // The original source node\n      var targetNode = cy.getElementById(target); // The original target node\n      var sourceHasPorts = sourceNode.data(\"ports\").length === 2;\n      var targetHasPorts = targetNode.data(\"ports\").length === 2;\n      // The portsource and porttarget variables\n      var portsource;\n      var porttarget;\n\n      /*\n       * Get input/output port id's of a node with the assumption that the node has valid ports.\n       */\n      var getIOPortIds = function getIOPortIds(node) {\n        var nodeInputPortId, nodeOutputPortId;\n        var nodePortsOrdering = sbgnvizInstance.elementUtilities.getPortsOrdering(node);\n        var nodePorts = node.data(\"ports\");\n        if (nodePortsOrdering === \"L-to-R\" || nodePortsOrdering === \"R-to-L\") {\n          var leftPortId = nodePorts[0].x < 0 ? nodePorts[0].id : nodePorts[1].id; // The x value of left port is supposed to be negative\n          var rightPortId = nodePorts[0].x > 0 ? nodePorts[0].id : nodePorts[1].id; // The x value of right port is supposed to be positive\n          /*\n           * If the port ordering is left to right then the input port is the left port and the output port is the right port.\n           * Else if it is right to left it is vice versa\n           */\n          nodeInputPortId = nodePortsOrdering === \"L-to-R\" ? leftPortId : rightPortId;\n          nodeOutputPortId = nodePortsOrdering === \"R-to-L\" ? leftPortId : rightPortId;\n        } else if (nodePortsOrdering === \"T-to-B\" || nodePortsOrdering === \"B-to-T\") {\n          var topPortId = nodePorts[0].y < 0 ? nodePorts[0].id : nodePorts[1].id; // The y value of top port is supposed to be negative\n          var bottomPortId = nodePorts[0].y > 0 ? nodePorts[0].id : nodePorts[1].id; // The y value of bottom port is supposed to be positive\n          /*\n           * If the port ordering is top to bottom then the input port is the top port and the output port is the bottom port.\n           * Else if it is right to left it is vice versa\n           */\n          nodeInputPortId = nodePortsOrdering === \"T-to-B\" ? topPortId : bottomPortId;\n          nodeOutputPortId = nodePortsOrdering === \"B-to-T\" ? topPortId : bottomPortId;\n        }\n\n        // Return an object containing the IO ports of the node\n        return {\n          inputPortId: nodeInputPortId,\n          outputPortId: nodeOutputPortId\n        };\n      };\n      // If at least one end of the edge has ports then we should determine the ports where the edge should be connected.\n      if (sourceHasPorts || targetHasPorts) {\n        var sourceNodeInputPortId, sourceNodeOutputPortId, targetNodeInputPortId, targetNodeOutputPortId;\n\n        // If source node has ports set the variables dedicated for its IO ports\n        if (sourceHasPorts) {\n          var ioPorts = getIOPortIds(sourceNode);\n          sourceNodeInputPortId = ioPorts.inputPortId;\n          sourceNodeOutputPortId = ioPorts.outputPortId;\n        }\n\n        // && (elementUtilities.isModulationArcClass(sbgnclass) && )\n        // If target node has ports set the variables dedicated for its IO ports\n        if (targetHasPorts && !(elementUtilities.isModulationArcClass(sbgnclass) && elementUtilities.isProcessNode(targetNode.data('class')))) {\n          var ioPorts = getIOPortIds(targetNode);\n          targetNodeInputPortId = ioPorts.inputPortId;\n          targetNodeOutputPortId = ioPorts.outputPortId;\n        }\n        if (sbgnclass === \"consumption\" || sbgnclass === \"translation consumption\" || sbgnclass === \"transcription consumption\") {\n          // A consumption edge should be connected to the input port of the target node which is supposed to be a process (any kind of)\n          portsource = sourceNodeOutputPortId;\n          porttarget = targetNodeInputPortId;\n        } else if (sbgnclass === \"production\" || sbgnclass === \"translation production\" || sbgnclass === \"transcription production\" || sbgnclass === \"transport\") {\n          // A production edge should be connected to the output port of the source node which is supposed to be a process (any kind of)\n          // A modulation edge may have a logical operator as source node in this case the edge should be connected to the output port of it\n          // The below assignment satisfy all of these condition\n          if (groupID == 0 || groupID == undefined) {\n            // groupID 0 for reversible reactions group 0\n            portsource = sourceNodeOutputPortId;\n            porttarget = targetNodeInputPortId;\n          } else {\n            //if reaction is reversible and edge belongs to group 1\n            portsource = sourceNodeInputPortId;\n          }\n        } else if (elementUtilities.isModulationArcClass(sbgnclass) || elementUtilities.isAFArcClass(sbgnclass) || elementUtilities.isSBMLArcClass(sbgnclass) || elementUtilities.isLogicArc(sbgnclass)) {\n          portsource = sourceNodeOutputPortId;\n          porttarget = targetNodeInputPortId;\n        }\n      }\n\n      // The default portsource/porttarget are the source/target themselves. If they are not set use these defaults.\n      // The portsource and porttarget are determined set them in data object.\n      data.portsource = portsource || source;\n      data.porttarget = porttarget || target;\n      var eles = cy.add({\n        group: \"edges\",\n        data: data,\n        css: css\n      });\n      var newEdge = eles[eles.length - 1];\n      return newEdge;\n    };\n    elementUtilities.addProcessWithConvenientEdges = function (_source, _target, nodeParams) {\n      // If source and target IDs are given get the elements by IDs\n      var source = typeof _source === \"string\" ? cy.getElementById(_source) : _source;\n      var target = typeof _target === \"string\" ? cy.getElementById(_target) : _target;\n\n      // Process parent should be the closest common ancestor of the source and target nodes\n      var processParent = cy.collection([source[0], target[0]]).commonAncestors().first();\n\n      // Process should be at the middle of the source and target nodes\n      var x = (source.position(\"x\") + target.position(\"x\")) / 2;\n      var y = (source.position(\"y\") + target.position(\"y\")) / 2;\n\n      // Create the process with given/calculated variables\n      var process = elementUtilities.addNode(x, y, nodeParams, undefined, processParent.id());\n      var xdiff = source.position(\"x\") - target.position(\"x\");\n      var ydiff = source.position(\"y\") - target.position(\"y\");\n      if (Math.abs(xdiff) >= Math.abs(ydiff)) {\n        if (xdiff < 0) elementUtilities.setPortsOrdering(process, \"L-to-R\");else elementUtilities.setPortsOrdering(process, \"R-to-L\");\n      } else {\n        if (ydiff < 0) elementUtilities.setPortsOrdering(process, \"T-to-B\");else elementUtilities.setPortsOrdering(process, \"B-to-T\");\n      }\n\n      // Create the edges one is between the process and the source node (which should be a consumption),\n      // the other one is between the process and the target node (which should be a production).\n      // For more information please refer to SBGN-PD reference card.\n      var edgeBtwSrc = elementUtilities.addEdge(source.id(), process.id(), {\n        \"class\": \"consumption\",\n        language: nodeParams.language\n      });\n      var edgeBtwTgt = elementUtilities.addEdge(process.id(), target.id(), {\n        \"class\": \"production\",\n        language: nodeParams.language\n      });\n\n      // Create a collection including the elements and to be returned\n      var collection = cy.collection([process[0], edgeBtwSrc[0], edgeBtwTgt[0]]);\n      return collection;\n    };\n\n    /*\n     * This method assumes that param.nodesToMakeCompound contains at least one node\n     * and all of the nodes including in it have the same parent. It creates a compound fot the given nodes an having the given type.\n     */\n    elementUtilities.createCompoundForGivenNodes = function (nodesToMakeCompound, compoundType) {\n      var oldParentId = nodesToMakeCompound[0].data(\"parent\");\n      var language = nodesToMakeCompound[0].data(\"language\");\n      // if nodesToMakeCompound contain both PD and AF nodes, then set language of compound as Unknown\n      for (var i = 1; i < nodesToMakeCompound.length; i++) {\n        if (nodesToMakeCompound[i] != language) {\n          language = \"Unknown\";\n          break;\n        }\n      }\n      // The parent of new compound will be the old parent of the nodes to make compound. x, y and id parameters are not set.\n      var newCompound = elementUtilities.addNode(undefined, undefined, {\n        \"class\": compoundType,\n        language: language\n      }, undefined, oldParentId);\n      var newCompoundId = newCompound.id();\n      var newEles = elementUtilities.changeParent(nodesToMakeCompound, newCompoundId);\n      newEles = newEles.union(newCompound);\n      return newEles;\n    };\n    elementUtilities.createTranslationReaction = function (mRnaName, proteinName, processPosition, edgeLength) {\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"translation\");\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data(\"justAdded\", true);\n      var xPosOfSourceAndSinkNode = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var yPosOfSourceAndSinkNode = processPosition.y;\n      var sourceAndSinkNode = elementUtilities.addNode(xPosOfSourceAndSinkNode, yPosOfSourceAndSinkNode, {\n        \"class\": \"empty set\",\n        language: \"PD\"\n      });\n      sourceAndSinkNode.data(\"justAdded\", true);\n      var consumptionEdge = elementUtilities.addEdge(sourceAndSinkNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      consumptionEdge.data(\"justAdded\", true);\n      var xPosOfmRnaNode = processPosition.x;\n      var yPosOfmRnaNode = processPosition.y - edgeLength - processHeight / 2 - nucleicAcidFeatureHeight / 2;\n      var mRnaNode = elementUtilities.addNode(xPosOfmRnaNode, yPosOfmRnaNode, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      mRnaNode.data(\"justAdded\", true);\n      mRnaNode.data(\"label\", mRnaName);\n      var infoboxObjectOfGene = {\n        clazz: \"unit of information\",\n        label: {\n          text: \"ct:mRNA\"\n        },\n        bbox: {\n          w: 45,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(mRnaNode, infoboxObjectOfGene);\n      var necessaryStimulationEdge = elementUtilities.addEdge(mRnaNode.id(), processNode.id(), {\n        \"class\": \"necessary stimulation\",\n        language: \"PD\"\n      });\n      necessaryStimulationEdge.data(\"justAdded\", true);\n      var xPosOfProteinNode = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPostOfProteinNode = processPosition.y;\n      var proteinNode = elementUtilities.addNode(xPosOfProteinNode, yPostOfProteinNode, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      proteinNode.data(\"justAdded\", true);\n      proteinNode.data(\"label\", proteinName);\n      var productionEdge = elementUtilities.addEdge(processNode.id(), proteinNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      productionEdge.data(\"justAdded\", true);\n      cy.endBatch();\n\n      //filter the just added elememts to return them and remove just added mark\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n    elementUtilities.createTranscriptionReaction = function (geneName, mRnaName, processPosition, edgeLength) {\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"transcription\");\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data(\"justAdded\", true);\n      var xPosOfSourceAndSinkNode = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var yPosOfSourceAndSinkNode = processPosition.y;\n      var sourceAndSinkNode = elementUtilities.addNode(xPosOfSourceAndSinkNode, yPosOfSourceAndSinkNode, {\n        \"class\": \"empty set\",\n        language: \"PD\"\n      });\n      sourceAndSinkNode.data(\"justAdded\", true);\n      var consumptionEdge = elementUtilities.addEdge(sourceAndSinkNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      consumptionEdge.data(\"justAdded\", true);\n      var xPosOfGeneNode = processPosition.x;\n      var yPosOfGeneNode = processPosition.y - edgeLength - processHeight / 2 - nucleicAcidFeatureHeight / 2;\n      var geneNode = elementUtilities.addNode(xPosOfGeneNode, yPosOfGeneNode, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      geneNode.data(\"justAdded\", true);\n      geneNode.data(\"label\", geneName);\n      var infoboxObjectOfGene = {\n        clazz: \"unit of information\",\n        label: {\n          text: \"ct:gene\"\n        },\n        bbox: {\n          w: 36,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(geneNode, infoboxObjectOfGene);\n      var necessaryStimulationEdge = elementUtilities.addEdge(geneNode.id(), processNode.id(), {\n        \"class\": \"necessary stimulation\",\n        language: \"PD\"\n      });\n      necessaryStimulationEdge.data(\"justAdded\", true);\n      var xPosOfmRnaNode = processPosition.x + edgeLength + processWidth / 2 + nucleicAcidFeatureWidth / 2;\n      var yPostOfmRnaNode = processPosition.y;\n      var mRnaNode = elementUtilities.addNode(xPosOfmRnaNode, yPostOfmRnaNode, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      mRnaNode.data(\"justAdded\", true);\n      mRnaNode.data(\"label\", mRnaName);\n      var infoboxObjectOfmRna = {\n        clazz: \"unit of information\",\n        label: {\n          text: \"ct:mRNA\"\n        },\n        bbox: {\n          w: 45,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(mRnaNode, infoboxObjectOfmRna);\n      var productionEdge = elementUtilities.addEdge(processNode.id(), mRnaNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      productionEdge.data(\"justAdded\", true);\n      cy.endBatch();\n\n      //filter the just added elememts to return them and remove just added mark\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n    elementUtilities.rotate90 = function (point, center) {\n      var relativeX = center.x - point.x;\n      var relativeY = center.y - point.y;\n      var relativeRotatedX = relativeY;\n      var relativeRotatedY = -1 * relativeX;\n      var resultX = relativeRotatedX + center.x;\n      var resultY = relativeRotatedY + center.y;\n      return {\n        x: resultX,\n        y: resultY\n      };\n    };\n    elementUtilities.createTranslation = function (regulatorLabel, outputLabel, orientation) {\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var defaultMacromoleculePropeties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"process\");\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var macromoleculeWidth = defaultMacromoleculePropeties.width || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var vertical = orientation === \"vertical\";\n      var processPortsOrdering = vertical ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 15;\n      var widthPerChar = 6;\n      var regulatorInfoboxLabel = \"ct:mRNA\";\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"empty set\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", label);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", outputLabel);\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputEdge.data(\"justAdded\", true);\n      var xPosOfRegulator = processPosition.x;\n      var dimension = vertical ? nucleicAcidFeatureWidth : nucleicAcidFeatureHeight;\n      var yPosOfRegulator = processPosition.y - (processHeight / 2 + dimension / 2 + edgeLength);\n      nodePosition = {\n        x: xPosOfRegulator,\n        y: yPosOfRegulator\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      regulatorNode.data(\"justAdded\", true);\n      regulatorNode.data(\"label\", regulatorLabel);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: regulatorInfoboxLabel\n        },\n        bbox: {\n          w: Math.max(regulatorInfoboxLabel.length * widthPerChar, minInfoboxDimension),\n          h: minInfoboxDimension\n        }\n      };\n      elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n      var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n        \"class\": \"necessary stimulation\",\n        language: \"PD\"\n      });\n      regulatorEdge.data(\"justAdded\", true);\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createTranscription = function (label, orientation) {\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"process\");\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var vertical = orientation === \"vertical\";\n      var processPortsOrdering = vertical ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 15;\n      var widthPerChar = 6;\n      var outputInfoboxLabel = \"ct:mRNA\";\n      var regulatorInfoboxLabel = \"ct:gene\";\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + nucleicAcidFeatureWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"empty set\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", label);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: outputInfoboxLabel\n        },\n        bbox: {\n          w: Math.max(outputInfoboxLabel.length * widthPerChar, minInfoboxDimension),\n          h: minInfoboxDimension\n        }\n      };\n      elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputEdge.data(\"justAdded\", true);\n      var xPosOfRegulator = processPosition.x;\n      var dimension = vertical ? nucleicAcidFeatureWidth : nucleicAcidFeatureHeight;\n      var yPosOfRegulator = processPosition.y - (processHeight / 2 + dimension / 2 + edgeLength);\n      nodePosition = {\n        x: xPosOfRegulator,\n        y: yPosOfRegulator\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      regulatorNode.data(\"justAdded\", true);\n      regulatorNode.data(\"label\", label);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: regulatorInfoboxLabel\n        },\n        bbox: {\n          w: Math.max(regulatorInfoboxLabel.length * widthPerChar, minInfoboxDimension),\n          h: minInfoboxDimension\n        }\n      };\n      elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n      var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n        \"class\": \"necessary stimulation\",\n        language: \"PD\"\n      });\n      regulatorEdge.data(\"justAdded\", true);\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createDegradation = function (macromolecule, orientation) {\n      var macromoleculeName = macromolecule.name;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var vertical = orientation === \"vertical\";\n      var processPortsOrdering = vertical ? \"T-to-B\" : \"L-to-R\";\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", macromoleculeName);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"empty set\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputEdge.data(\"justAdded\", true);\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createComplexProteinFormation = function (proteinLabels, complexLabel, regulator, orientation, reverse) {\n      var hasRegulator = regulator.name !== undefined;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 20;\n      var widthPerChar = 6;\n      var tilingPaddingVertical = 15;\n      var tilingPaddingHorizontal = 15;\n      var multimerOffset = 6;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var offsetX = processWidth / 2 + edgeLength + macromoleculeWidth / 2;\n      var xPosOfProtein = reverse ? processPosition.x + offsetX : processPosition.x - offsetX;\n      var proteinCount = proteinLabels.length;\n      var macromoleculeDimension = orientation === \"vertical\" ? macromoleculeWidth : macromoleculeHeight;\n      var stepOffset = macromoleculeDimension + tilingPaddingVertical;\n      var offsetY = (proteinCount - 1) / 2 * (macromoleculeDimension + tilingPaddingVertical);\n      var horizontalOffsetX = (proteinCount - 1) / 2 * (macromoleculeDimension + tilingPaddingHorizontal);\n      var yPosOfProtein = processPosition.y - offsetY;\n      proteinLabels.forEach(function (label) {\n        var nodePosition = {\n          x: xPosOfProtein,\n          y: yPosOfProtein\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n        var node = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": \"macromolecule\",\n          language: \"PD\"\n        });\n        node.data(\"label\", label);\n        node.data(\"justAdded\", true);\n        yPosOfProtein += stepOffset;\n        var source = reverse ? processNode.id() : node.id();\n        var target = reverse ? node.id() : processNode.id();\n        var edgeClass = reverse ? \"production\" : \"consumption\";\n        var edge = elementUtilities.addEdge(source, target, {\n          \"class\": edgeClass,\n          language: \"PD\"\n        });\n        edge.data(\"justAdded\", true);\n      });\n      var complexPos = {\n        x: processPosition.x + (reverse ? -1 : 1) * offsetX,\n        y: processPosition.y\n      };\n      if (orientation === \"vertical\") {\n        complexPos = elementUtilities.rotate90(complexPos, processPosition);\n      }\n      var complex = elementUtilities.addNode(complexPos.x, complexPos.y, {\n        \"class\": \"complex\",\n        language: \"PD\"\n      });\n      complex.data(\"label\", complexLabel);\n      complex.data(\"justAdded\", true);\n      var source = reverse ? complex.id() : processNode.id();\n      var target = reverse ? processNode.id() : complex.id();\n      var edgeClass = reverse ? \"consumption\" : \"production\";\n      var complexEdge = elementUtilities.addEdge(source, target, {\n        \"class\": edgeClass,\n        language: \"PD\"\n      });\n      complexEdge.data(\"justAdded\", true);\n      if (orientation === \"vertical\") {\n        xPosOfProtein = complex.position(\"x\") - horizontalOffsetX;\n        yPosOfProtein = complex.position(\"y\");\n      } else {\n        xPosOfProtein = complex.position(\"x\");\n        yPosOfProtein = complex.position(\"y\") - offsetY;\n      }\n      proteinLabels.forEach(function (label) {\n        var nodePosition = {\n          x: xPosOfProtein,\n          y: yPosOfProtein\n        };\n        var node = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": \"macromolecule\",\n          language: \"PD\"\n        }, undefined, complex.id());\n        node.data(\"label\", label);\n        node.data(\"justAdded\", true);\n        if (orientation === \"vertical\") {\n          xPosOfProtein += stepOffset;\n        } else {\n          yPosOfProtein += stepOffset;\n        }\n      });\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var regulatorEdgeType = regulator.edgeType;\n        var regulatorMultimer = regulator.multimer;\n        var xPosOfRegulator = processPosition.x;\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": regulatorType,\n          language: \"PD\"\n        });\n        regulatorNode.data(\"justAdded\", true);\n        regulatorNode.data(\"label\", regulatorName);\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var cardinality = regulatorMultimer.cardinality;\n          if (cardinality != \"\") {\n            var infoboxLabel = \"N:\" + cardinality;\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: infoboxLabel\n              },\n              bbox: {\n                w: infoboxLabel.length * widthPerChar,\n                h: minInfoboxDimension\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": regulatorEdgeType,\n          language: \"PD\"\n        });\n        regulatorEdge.data(\"justAdded\", true);\n      }\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createMultimerization = function (macromolecule, regulator, regulatorMultimer, orientation) {\n      var hasRegulator = regulator.name !== undefined;\n      var macromoleculeName = macromolecule.name;\n      var macromoleculeMultimerCardinality = macromolecule.cardinality;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 20;\n      var widthPerChar = 6;\n      var multimerOffset = 6;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", macromoleculeName);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputEdge.data(\"justAdded\", true);\n      var cardinality = macromoleculeMultimerCardinality;\n      if (cardinality !== \"\") {\n        inputEdge.data(\"cardinality\", cardinality);\n      }\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", macromoleculeName);\n      elementUtilities.setMultimerStatus(outputNode, true);\n      if (cardinality !== \"\") {\n        var infoboxLabel = \"N:\" + cardinality;\n        infoboxObject = {\n          clazz: \"unit of information\",\n          label: {\n            text: infoboxLabel\n          },\n          bbox: {\n            w: infoboxLabel.length * widthPerChar,\n            h: minInfoboxDimension\n          }\n        };\n        elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      }\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputEdge.data(\"justAdded\", true);\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var regulatorEdgeType = regulator.edgeType;\n        var xPosOfRegulator = processPosition.x;\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": regulatorType,\n          language: \"PD\"\n        });\n        regulatorNode.data(\"justAdded\", true);\n        regulatorNode.data(\"label\", regulatorName);\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var _cardinality = regulatorMultimer.cardinality;\n          if (_cardinality != \"\") {\n            var _infoboxLabel = \"N:\" + _cardinality;\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: _infoboxLabel\n              },\n              bbox: {\n                w: _infoboxLabel.length * widthPerChar,\n                h: minInfoboxDimension\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": regulatorEdgeType,\n          language: \"PD\"\n        });\n        regulatorEdge.data(\"justAdded\", true);\n      }\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createConversion = function (macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels) {\n      var hasRegulator = regulator.name !== undefined;\n      var macromoleculeName = macromolecule.name;\n      var macromoleculeIsMultimer = macromolecule.multimer.enabled;\n      var macromoleculeMultimerCardinality = macromolecule.multimer.cardinality;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 20;\n      var widthPerChar = 6;\n      var multimerOffset = 6;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", macromoleculeName);\n      if (macromoleculeIsMultimer) {\n        elementUtilities.setMultimerStatus(inputNode, true);\n        var cardinality = macromoleculeMultimerCardinality;\n        if (cardinality != \"\") {\n          var infoboxLabel = \"N:\" + cardinality;\n          infoboxObject = {\n            clazz: \"unit of information\",\n            label: {\n              text: infoboxLabel\n            },\n            bbox: {\n              w: infoboxLabel.length * widthPerChar,\n              h: minInfoboxDimension\n            }\n          };\n          elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);\n        }\n      }\n      inputInfoboxLabels.forEach(function (label) {\n        var inputInfoboxWidth = label.length > 0 ? Math.max(widthPerChar * label.length, minInfoboxDimension) : minInfoboxDimension;\n        var infoboxObject = {\n          clazz: \"unit of information\",\n          label: {\n            text: label\n          },\n          bbox: {\n            w: inputInfoboxWidth,\n            h: minInfoboxDimension\n          },\n          style: {\n            \"shape-name\": \"ellipse\"\n          }\n        };\n        elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);\n      });\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", macromoleculeName);\n      if (macromoleculeIsMultimer) {\n        elementUtilities.setMultimerStatus(outputNode, true);\n        var _cardinality2 = macromoleculeMultimerCardinality;\n        if (_cardinality2 != \"\") {\n          var _infoboxLabel2 = \"N:\" + _cardinality2;\n          infoboxObject = {\n            clazz: \"unit of information\",\n            label: {\n              text: _infoboxLabel2\n            },\n            bbox: {\n              w: _infoboxLabel2.length * widthPerChar,\n              h: minInfoboxDimension\n            }\n          };\n          elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n        }\n      }\n      outputInfoboxLabels.forEach(function (label) {\n        var outputInfoboxWidth = label.length > 0 ? Math.max(widthPerChar * label.length, minInfoboxDimension) : minInfoboxDimension;\n        infoboxObject = {\n          clazz: \"unit of information\",\n          label: {\n            text: label\n          },\n          bbox: {\n            w: outputInfoboxWidth,\n            h: minInfoboxDimension\n          },\n          style: {\n            \"shape-name\": \"ellipse\"\n          }\n        };\n        elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      });\n      [inputNode, outputNode].forEach(function (node) {\n        var width = elementUtilities.calculateMinWidth(node);\n        elementUtilities.resizeNodes(node, width, macromoleculeHeight, false, true);\n      });\n      if (orientation === \"horizontal\") {\n        var newInputXPos = processPosition.x - edgeLength - processWidth / 2 - inputNode.data(\"bbox\").w / 2;\n        inputNode.position(\"x\", newInputXPos);\n        var newOutputXPos = processPosition.x + edgeLength + processWidth / 2 + outputNode.data(\"bbox\").w / 2;\n        outputNode.position(\"x\", newOutputXPos);\n      } else {\n        var newInputYPos = processPosition.y - edgeLength - processWidth / 2 - inputNode.data(\"bbox\").h / 2;\n        inputNode.position(\"y\", newInputYPos);\n        var newOutputYPos = processPosition.y + edgeLength + processWidth / 2 + outputNode.data(\"bbox\").h / 2;\n        outputNode.position(\"y\", newOutputYPos);\n      }\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputEdge.data(\"justAdded\", true);\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var xPosOfRegulator = processPosition.x;\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": regulatorType,\n          language: \"PD\"\n        });\n        regulatorNode.data(\"justAdded\", true);\n        regulatorNode.data(\"label\", regulatorName);\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var _cardinality3 = regulatorMultimer.cardinality;\n          if (_cardinality3 != \"\") {\n            var _infoboxLabel3 = \"N:\" + _cardinality3;\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: _infoboxLabel3\n              },\n              bbox: {\n                w: _infoboxLabel3.length * widthPerChar,\n                h: minInfoboxDimension\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": \"catalysis\",\n          language: \"PD\"\n        });\n        regulatorEdge.data(\"justAdded\", true);\n      }\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createMetabolicReaction = function (inputs, outputs, reversible, regulator, regulatorMultimer, orientation) {\n      var rotate90 = function rotate90(point, center) {\n        var relativeX = center.x - point.x;\n        var relativeY = center.y - point.y;\n        var relativeRotatedX = relativeY;\n        var relativeRotatedY = -1 * relativeX;\n        var resultX = relativeRotatedX + center.x;\n        var resultY = relativeRotatedY + center.y;\n        return {\n          x: resultX,\n          y: resultY\n        };\n      };\n      var hasRegulator = regulator.name !== undefined;\n      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties(\"simple chemical\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;\n      var simpleChemicalWidth = defaultSimpleChemicalProperties.width || 35;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var tilingPaddingVertical = 15;\n      var edgeLength = 30;\n      var processLeftSideEdgeType = reversible ? \"production\" : \"consumption\";\n      var processRightSideEdgeType = \"production\";\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var multimerOffset = 6;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - simpleChemicalWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + simpleChemicalWidth / 2;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var numOfInputNodes = inputs.length;\n      var numOfOutputNodes = outputs.length;\n      var yPosOfInput = processPosition.y - (numOfInputNodes - 1) / 2 * (simpleChemicalHeight + tilingPaddingVertical);\n      inputs.forEach(function (data, index) {\n        var nodeName = data.name;\n        var nodeType = data.type;\n        if (index === 0) {\n          yPosOfInput = processPosition.y;\n        } else if (index % 2 === 1) {\n          yPosOfInput = processPosition.y - (simpleChemicalHeight + tilingPaddingVertical) * Math.ceil(index / 2);\n        } else {\n          yPosOfInput = processPosition.y + (simpleChemicalHeight + tilingPaddingVertical) * (index / 2);\n        }\n        var nodePosition = {\n          x: xPosOfInput,\n          y: yPosOfInput\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = rotate90(nodePosition, processPosition);\n        }\n        var newNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": nodeType.toLowerCase(),\n          language: \"PD\"\n        });\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", nodeName);\n        var newEdge;\n        if (reversible) {\n          newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {\n            \"class\": processLeftSideEdgeType,\n            language: \"PD\"\n          }, undefined, undefined, 1);\n        } else {\n          newEdge = elementUtilities.addEdge(newNode.id(), processNode.id(), {\n            \"class\": processLeftSideEdgeType,\n            language: \"PD\"\n          });\n        }\n        newEdge.data(\"justAdded\", true);\n      });\n      var yPosOfOutput = processPosition.y - (numOfOutputNodes - 1) / 2 * (simpleChemicalHeight + tilingPaddingVertical);\n      outputs.forEach(function (data, index) {\n        var nodeName = data.name;\n        var nodeType = data.type;\n        if (index === 0) {\n          yPosOfOutput = processPosition.y;\n        } else if (index % 2 === 1) {\n          yPosOfOutput = processPosition.y - (simpleChemicalHeight + tilingPaddingVertical) * Math.ceil(index / 2);\n        } else {\n          yPosOfOutput = processPosition.y + (simpleChemicalHeight + tilingPaddingVertical) * (index / 2);\n        }\n        var nodePosition = {\n          x: xPosOfOutput,\n          y: yPosOfOutput\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = rotate90(nodePosition, processPosition);\n        }\n        var newNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": nodeType.toLowerCase(),\n          language: \"PD\"\n        });\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", nodeName);\n        var newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {\n          \"class\": processRightSideEdgeType,\n          language: \"PD\"\n        }, undefined, undefined, 0);\n        newEdge.data(\"justAdded\", true);\n      });\n\n      // add regulator node\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var xPosOfRegulator = processPosition.x;\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        var _nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n        if (orientation === \"vertical\") {\n          _nodePosition = rotate90(_nodePosition, processPosition);\n        }\n        var regulatorNode = elementUtilities.addNode(_nodePosition.x, _nodePosition.y, {\n          \"class\": regulatorType,\n          language: \"PD\"\n        });\n        regulatorNode.data(\"justAdded\", true);\n        regulatorNode.data(\"label\", regulatorName);\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var cardinality = regulatorMultimer.cardinality;\n          if (cardinality != \"\") {\n            var infoboxLabel = \"N:\" + cardinality;\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: infoboxLabel\n              },\n              bbox: {\n                w: infoboxLabel.length * 6,\n                h: 15\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": \"catalysis\",\n          language: \"PD\"\n        });\n        regulatorEdge.data(\"justAdded\", true);\n      }\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createMetabolicCatalyticActivity = function (inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength) {\n      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties(\"simple chemical\");\n      var defaultCatalystTypeProperties = elementUtilities.getDefaultProperties(catalystType);\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;\n      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculProperties.height || 50;\n      var catalystHeight = defaultCatalystTypeProperties.height || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var tilingPaddingVertical = tilingPaddingVertical || 15;\n      var tilingPaddingHorizontal = tilingPaddingHorizontal || 15;\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data(\"justAdded\", true);\n      var numOfInputNodes = inputNodeList.length;\n      var numOfOutputNodes = outputNodeList.length;\n      var yPosOfInput = processPosition.y - (numOfInputNodes - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical);\n\n      // add input side nodes\n      for (var i = 0; i < numOfInputNodes; i++) {\n        if (inputNodeList[i].type == \"Simple Chemical\") {\n          var newNode = elementUtilities.addNode(xPosOfInput, yPosOfInput, {\n            \"class\": \"simple chemical\",\n            language: \"PD\"\n          });\n          yPosOfInput += simpleChemicalHeight + tilingPaddingVertical;\n        } else {\n          var newNode = elementUtilities.addNode(xPosOfInput, yPosOfInput, {\n            \"class\": \"macromolecule\",\n            language: \"PD\"\n          });\n          //update the y position\n          yPosOfInput += macromoleculeHeight + tilingPaddingVertical;\n        }\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", inputNodeList[i].name);\n        var newEdge = elementUtilities.addEdge(newNode.id(), processNode.id(), {\n          \"class\": \"consumption\",\n          language: \"PD\"\n        });\n        newEdge.data(\"justAdded\", true);\n      }\n      var yPosOfOutput = processPosition.y - (numOfOutputNodes - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical);\n\n      // add output side nodes\n      for (var i = 0; i < numOfOutputNodes; i++) {\n        if (outputNodeList[i].type == \"Simple Chemical\") {\n          var newNode = elementUtilities.addNode(xPosOfOutput, yPosOfOutput, {\n            \"class\": \"simple chemical\",\n            language: \"PD\"\n          });\n          yPosOfOutput += simpleChemicalHeight + tilingPaddingVertical;\n        } else {\n          var newNode = elementUtilities.addNode(xPosOfOutput, yPosOfOutput, {\n            \"class\": \"macromolecule\",\n            language: \"PD\"\n          });\n          //update the y position\n          yPosOfOutput += macromoleculeHeight + tilingPaddingVertical;\n        }\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", outputNodeList[i].name);\n        var newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {\n          \"class\": \"production\",\n          language: \"PD\"\n        });\n        newEdge.data(\"justAdded\", true);\n      }\n\n      // add catalyst node\n      var xPosOfCatalyst = processPosition.x;\n      var yPosOfCatalyst = processPosition.y - (processHeight + catalystHeight + tilingPaddingVertical);\n      var catalystNode = elementUtilities.addNode(xPosOfCatalyst, yPosOfCatalyst, {\n        \"class\": catalystType,\n        language: \"PD\"\n      });\n      catalystNode.data(\"justAdded\", true);\n      catalystNode.data(\"label\", catalystName);\n      var catalystEdge = elementUtilities.addEdge(catalystNode.id(), processNode.id(), {\n        \"class\": \"catalysis\",\n        language: \"PD\"\n      });\n      catalystEdge.data(\"justAdded\", true);\n      cy.endBatch();\n\n      //filter the just added elememts to return them and remove just added mark\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n    elementUtilities.createActivationReaction = function (proteinName, processPosition, edgeLength, reverse) {\n      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"activation\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data(\"justAdded\", true);\n      var yPosition = processPosition.y;\n      var inputNode = elementUtilities.addNode(xPosOfInput, yPosition, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", proteinName);\n      var infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: reverse ? \"active\" : \"inactive\"\n        },\n        style: {\n          \"shape-name\": \"ellipse\"\n        },\n        bbox: {\n          w: 36,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);\n      var outputNode = elementUtilities.addNode(xPosOfOutput, yPosition, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", proteinName);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: reverse ? \"inactive\" : \"active\"\n        },\n        style: {\n          \"shape-name\": \"ellipse\"\n        },\n        bbox: {\n          w: 36,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      var inputSideEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputSideEdge.data(\"justAdded\", true);\n      var outputSideEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputSideEdge.data(\"justAdded\", true);\n      cy.endBatch();\n\n      //filter the just added elememts to return them and remove just added mark\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n\n    /*\n     * Creates a template reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n     * in the complex. Parameters are explained below.\n     * templateType: The type of the template reaction. It may be 'association', 'dissociation', 'reversible' or 'irreversible'.\n     * nodeList: The list of the names and types of molecules which will involve in the reaction.\n     * complexName: The name of the complex in the reaction.\n     * processPosition: The modal position of the process in the reaction. The default value is the center of the canvas.\n     * tilingPaddingVertical: This option will be passed to the cose-bilkent layout with the same name. The default value is 15.\n     * tilingPaddingHorizontal: This option will be passed to the cose-bilkent layout with the same name. The default value is 15.\n     * edgeLength: The distance between the process and the macromolecules at the both sides.\n     */\n    elementUtilities.createTemplateReaction = function (templateType, nodeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam) {\n      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties(\"simple chemical\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(templateType);\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculProperties.height || 50;\n      var simpleChemicalWidth = defaultSimpleChemicalProperties.width || 35;\n      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var nodeList = nodeList;\n      var complexName = complexName;\n      var numOfMolecules = nodeList.length;\n      var tilingPaddingVertical = tilingPaddingVertical || 15;\n      var tilingPaddingHorizontal = tilingPaddingHorizontal || 15;\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPositionOfFreeMacromolecules;\n      var xPositionOfInputMacromolecules;\n      if (templateType === \"association\") {\n        xPositionOfFreeMacromolecules = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      } else if (templateType === \"dissociation\") {\n        xPositionOfFreeMacromolecules = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      } else {\n        xPositionOfFreeMacromolecules = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n        xPositionOfInputMacromolecules = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      }\n\n      //Create the process in template type\n      var process;\n      if (templateType === \"reversible\" || templateType === \"irreversible\") {\n        process = elementUtilities.addNode(processPosition.x, processPosition.y, {\n          \"class\": \"process\",\n          language: \"PD\"\n        });\n        elementUtilities.setPortsOrdering(process, \"L-to-R\");\n      } else {\n        process = elementUtilities.addNode(processPosition.x, processPosition.y, {\n          \"class\": templateType,\n          language: \"PD\"\n        });\n        elementUtilities.setPortsOrdering(process, \"L-to-R\");\n      }\n      process.data(\"justAdded\", true);\n\n      //Define the starting y position\n      var yPosition = processPosition.y - (numOfMolecules - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical);\n\n      //Create the free molecules\n      for (var i = 0; i < numOfMolecules; i++) {\n        // node addition operation is determined by molecule type\n        if (nodeList[i].type == \"Simple Chemical\") {\n          var newNode = elementUtilities.addNode(xPositionOfFreeMacromolecules, yPosition, {\n            \"class\": \"simple chemical\",\n            language: \"PD\"\n          });\n          //update the y position\n          yPosition += simpleChemicalHeight + tilingPaddingVertical;\n        } else {\n          var newNode = elementUtilities.addNode(xPositionOfFreeMacromolecules, yPosition, {\n            \"class\": \"macromolecule\",\n            language: \"PD\"\n          });\n          //update the y position\n          yPosition += macromoleculeHeight + tilingPaddingVertical;\n        }\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", nodeList[i].name);\n\n        //create the edge connected to the new molecule\n        var newEdge;\n        if (templateType === \"association\") {\n          newEdge = elementUtilities.addEdge(newNode.id(), process.id(), {\n            \"class\": \"consumption\",\n            language: \"PD\"\n          });\n        } else if (templateType === \"dissociation\") {\n          newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n            \"class\": \"production\",\n            language: \"PD\"\n          });\n        } else {\n          //Group right or top elements in group id 1\n          if (templateType === \"irreversible\") {\n            newEdge = elementUtilities.addEdge(newNode.id(), process.id(), {\n              \"class\": \"consumption\",\n              language: \"PD\"\n            });\n          } else {\n            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n              \"class\": \"production\",\n              language: \"PD\"\n            }, undefined, undefined, 1);\n          }\n        }\n        newEdge.data(\"justAdded\", true);\n      }\n      if (templateType === \"association\" || templateType == \"dissociation\") {\n        //Create the complex including macromolecules inside of it\n        //Temprorarily add it to the process position we will move it according to the last size of it\n        var complex = elementUtilities.addNode(processPosition.x, processPosition.y, {\n          \"class\": \"complex\",\n          language: \"PD\"\n        });\n        complex.data(\"justAdded\", true);\n        complex.data(\"justAddedLayoutNode\", true);\n\n        //If a name is specified for the complex set its label accordingly\n        if (complexName) {\n          complex.data(\"label\", complexName);\n        }\n\n        //create the edge connnected to the complex\n        var edgeOfComplex;\n        if (templateType === \"association\") {\n          edgeOfComplex = elementUtilities.addEdge(process.id(), complex.id(), {\n            \"class\": \"production\",\n            language: \"PD\"\n          });\n        } else {\n          edgeOfComplex = elementUtilities.addEdge(complex.id(), process.id(), {\n            \"class\": \"consumption\",\n            language: \"PD\"\n          });\n        }\n        edgeOfComplex.data(\"justAdded\", true);\n        for (var i = 0; i < numOfMolecules; i++) {\n          // Add a molecule(dependent on it's type) not having a previously defined id and having the complex created in this reaction as parent\n          if (nodeList[i].type == \"Simple Chemical\") {\n            var newNode = elementUtilities.addNode(complex.position(\"x\"), complex.position(\"y\"), {\n              \"class\": \"simple chemical\",\n              language: \"PD\"\n            }, undefined, complex.id());\n          } else {\n            var newNode = elementUtilities.addNode(complex.position(\"x\"), complex.position(\"y\"), {\n              \"class\": \"macromolecule\",\n              language: \"PD\"\n            }, undefined, complex.id());\n          }\n          newNode.data(\"justAdded\", true);\n          newNode.data(\"label\", nodeList[i].name);\n          newNode.data(\"justAddedLayoutNode\", true);\n        }\n      } else {\n        //Create the input macromolecules\n        var numOfInputMacromolecules = complexName.length;\n        yPosition = processPosition.y - (numOfInputMacromolecules - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical);\n        for (var i = 0; i < numOfInputMacromolecules; i++) {\n          if (complexName[i].type == \"Simple Chemical\") {\n            var newNode = elementUtilities.addNode(xPositionOfInputMacromolecules, yPosition, {\n              \"class\": \"simple chemical\",\n              language: \"PD\"\n            });\n            yPosition += simpleChemicalHeight + tilingPaddingVertical;\n          } else {\n            var newNode = elementUtilities.addNode(xPositionOfInputMacromolecules, yPosition, {\n              \"class\": \"macromolecule\",\n              language: \"PD\"\n            });\n            yPosition += macromoleculeHeight + tilingPaddingVertical;\n          }\n          newNode.data(\"justAdded\", true);\n          newNode.data(\"label\", complexName[i].name);\n\n          //create the edge connected to the new macromolecule\n          var newEdge;\n\n          //Group the left or bottom elements in group id 0 if reversible\n          if (templateType === \"irreversible\") {\n            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n              \"class\": \"production\",\n              language: \"PD\"\n            });\n          } else {\n            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n              \"class\": \"production\",\n              language: \"PD\"\n            }, undefined, undefined, 0);\n          }\n          newEdge.data(\"justAdded\", true);\n        }\n      }\n      cy.endBatch();\n      var layoutNodes = cy.nodes(\"[justAddedLayoutNode]\");\n      layoutNodes.removeData(\"justAddedLayoutNode\");\n      var layout = layoutNodes.layout({\n        name: layoutParam.name,\n        randomize: false,\n        fit: false,\n        animate: false,\n        tilingPaddingVertical: tilingPaddingVertical,\n        tilingPaddingHorizontal: tilingPaddingHorizontal,\n        stop: function stop() {\n          //If it is a reversible reaction no need to re-position complexes\n          if (templateType === \"reversible\") return;\n          //re-position the nodes inside the complex\n          var supposedXPosition;\n          var supposedYPosition = processPosition.y;\n          if (templateType === \"association\") {\n            supposedXPosition = processPosition.x + edgeLength + processWidth / 2 + complex.outerWidth() / 2;\n          } else {\n            supposedXPosition = processPosition.x - edgeLength - processWidth / 2 - complex.outerWidth() / 2;\n          }\n          var positionDiffX = (supposedXPosition - complex.position(\"x\")) / 2;\n          var positionDiffY = (supposedYPosition - complex.position(\"y\")) / 2;\n          elementUtilities.moveNodes({\n            x: positionDiffX,\n            y: positionDiffY\n          }, complex);\n        }\n      });\n\n      // Do this check for cytoscape.js backward compatibility\n      if (layout && layout.run && templateType !== \"reversible\" && templateType !== \"irreversible\") {\n        layout.run();\n      }\n\n      //filter the just added elememts to return them and remove just added mark\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n\n    /*\n     * Move the nodes to a new parent and change their position if possDiff params are set.\n     */\n    elementUtilities.changeParent = function (nodes, newParent, posDiffX, posDiffY) {\n      var newParentId = newParent == undefined || typeof newParent === \"string\" ? newParent : newParent.id();\n      var movedEles = nodes.move({\n        parent: newParentId\n      });\n      if (typeof posDiffX != \"undefined\" || typeof posDiffY != \"undefined\") {\n        elementUtilities.moveNodes({\n          x: posDiffX,\n          y: posDiffY\n        }, nodes);\n      }\n      elementUtilities.maintainPointer(movedEles);\n      return movedEles;\n    };\n    elementUtilities.updateInfoboxStyle = function (node, index, newProps) {\n      var infoboxObj = node.data(\"statesandinfos\")[index];\n      $.extend(infoboxObj.style, newProps);\n      cy.style().update();\n    };\n    elementUtilities.updateInfoboxObj = function (node, index, newProps) {\n      var infoboxObj = node.data(\"statesandinfos\")[index];\n      $.extend(infoboxObj, newProps);\n    };\n\n    // Resize given nodes if useAspectRatio is truthy one of width or height should not be set.\n    elementUtilities.resizeNodes = function (nodes, width, height, useAspectRatio, preserveRelativePos) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var ratio = undefined;\n        var eleMustBeSquare = elementUtilities.mustBeSquare(node.data(\"class\"));\n        if (preserveRelativePos === true) {\n          var oldWidth = node.data(\"bbox\").w;\n          var oldHeight = node.data(\"bbox\").h;\n        }\n\n        // Note that both width and height should not be set if useAspectRatio is truthy\n        if (!node.isParent()) {\n          if (width) {\n            if (useAspectRatio || eleMustBeSquare) {\n              ratio = width / node.width();\n            }\n            node.data(\"bbox\").w = width;\n          }\n          if (height) {\n            if (useAspectRatio || eleMustBeSquare) {\n              ratio = height / node.height();\n            }\n            node.data(\"bbox\").h = height;\n          }\n          if (ratio && !height) {\n            node.data(\"bbox\").h = node.height() * ratio;\n          } else if (ratio && !width) {\n            node.data(\"bbox\").w = node.width() * ratio;\n          }\n        } else {\n          node.data(\"minHeight\", \"\" + height);\n          node.data(\"minWidth\", \"\" + width);\n          node.data(\"minWidthBiasLeft\", \"50%\");\n          node.data(\"minWidthBiasRight\", \"50%\");\n          node.data(\"minHeightBiasTop\", \"50%\");\n          node.data(\"minHeightBiasBottom\", \"50%\");\n        }\n\n        /*    if (preserveRelativePos === true) {\n          var statesandinfos = node.data('statesandinfos');\n          var topBottom = statesandinfos.filter(box => (box.anchorSide === \"top\" || box.anchorSide === \"bottom\"));\n          var rightLeft = statesandinfos.filter(box => (box.anchorSide === \"right\" || box.anchorSide === \"left\"));\n           topBottom.forEach(function(box){\n            if (box.bbox.x < 0) {\n              box.bbox.x = 0;\n            }\n            else if (box.bbox.x > oldWidth) {\n              box.bbox.x = oldWidth;\n            }\n            box.bbox.x = node.data(\"bbox\").w * box.bbox.x / oldWidth;\n          });\n           rightLeft.forEach(function(box){\n            if (box.bbox.y < 0) {\n              box.bbox.y = 0;\n            }\n            else if (box.bbox.y > oldHeight) {\n              box.bbox.y = oldHeight;\n            }\n            box.bbox.y = node.data(\"bbox\").h * box.bbox.y / oldHeight;\n          });\n        } */\n      }\n    };\n    elementUtilities.calculateMinWidth = function (node) {\n      var defaultWidth = this.getDefaultProperties(node.data(\"class\")).width;\n\n      // Label width calculation\n      var style = node.style();\n      var fontFamiliy = style[\"font-family\"];\n      var fontSize = style[\"font-size\"];\n      var labelText = style[\"label\"];\n      if (labelText === \"\" && node.data(\"label\") && node.data(\"label\") !== \"\") {\n        labelText = node.data(\"label\");\n      }\n      var labelWidth = elementUtilities.getWidthByContent(labelText, fontFamiliy, fontSize);\n      var statesandinfos = node.data(\"statesandinfos\");\n      //Top and bottom infoBoxes\n      //var topInfoBoxes = statesandinfos.filter(box => (box.anchorSide === \"top\" || ((box.anchorSide === \"right\" || box.anchorSide === \"left\") && (box.bbox.y <= 12))));\n      //var bottomInfoBoxes = statesandinfos.filter(box => (box.anchorSide === \"bottom\" || ((box.anchorSide === \"right\" || box.anchorSide === \"left\") && (box.bbox.y >= node.data('bbox').h - 12))));\n      var unitGap = 5;\n      var topIdealWidth = unitGap;\n      var bottomIdealWidth = unitGap;\n      var rightMaxWidth = 0;\n      var leftMaxWidth = 0;\n      statesandinfos.forEach(function (box) {\n        if (box.anchorSide === \"top\") {\n          topIdealWidth += box.bbox.w + unitGap;\n        } else if (box.anchorSide === \"bottom\") {\n          bottomIdealWidth += box.bbox.w + unitGap;\n        } else if (box.anchorSide === \"right\") {\n          rightMaxWidth = box.bbox.w > rightMaxWidth ? box.bbox.w : rightMaxWidth;\n        } else {\n          leftMaxWidth = box.bbox.w > leftMaxWidth ? box.bbox.w : leftMaxWidth;\n        }\n      });\n      var middleWidth = labelWidth + 2 * Math.max(rightMaxWidth / 2, leftMaxWidth / 2);\n      var compoundWidth = 0;\n      if (node.isParent()) {\n        compoundWidth = node.children().boundingBox().w;\n      }\n      return Math.max(middleWidth, defaultWidth / 2, topIdealWidth, bottomIdealWidth, compoundWidth);\n    };\n    elementUtilities.calculateMinHeight = function (node) {\n      var statesandinfos = node.data(\"statesandinfos\");\n      var margin = 7;\n      var unitGap = 5;\n      var defaultHeight = this.getDefaultProperties(node.data(\"class\")).height;\n      var leftInfoBoxes = statesandinfos.filter(function (box) {\n        return box.anchorSide === \"left\";\n      });\n      var leftHeight = unitGap;\n      leftInfoBoxes.forEach(function (box) {\n        leftHeight += box.bbox.h + unitGap;\n      });\n      var rightInfoBoxes = statesandinfos.filter(function (box) {\n        return box.anchorSide === \"right\";\n      });\n      var rightHeight = unitGap;\n      rightInfoBoxes.forEach(function (box) {\n        rightHeight += box.bbox.h + unitGap;\n      });\n      var style = node.style();\n      var labelText = style[\"label\"].split(\"\\n\").filter(function (text) {\n        return text !== \"\";\n      });\n      var fontSize = parseFloat(style[\"font-size\"].substring(0, style[\"font-size\"].length - 2));\n      var totalHeight = labelText.length * fontSize + 2 * margin;\n      var compoundHeight = 0;\n      if (node.isParent()) {\n        compoundHeight = node.children().boundingBox().h;\n      }\n      return Math.max(totalHeight, defaultHeight / 2, leftHeight, rightHeight, compoundHeight);\n    };\n    elementUtilities.isResizedToContent = function (node) {\n      if (!node || !node.isNode() || !node.data(\"bbox\")) {\n        return false;\n      }\n\n      //var w = node.data('bbox').w;\n      //var h = node.data('bbox').h;\n      var w = node.width();\n      var h = node.height();\n      var minW = elementUtilities.calculateMinWidth(node);\n      var minH = elementUtilities.calculateMinHeight(node);\n      if (w === minW && h === minH) return true;else return false;\n    };\n\n    // Section End\n    // Add remove utilities\n\n    // Relocates state and info boxes. This function is expected to be called after add/remove state and info boxes\n    elementUtilities.relocateStateAndInfos = function (ele) {\n      var stateAndInfos = ele.isNode && ele.isNode() ? ele.data(\"statesandinfos\") : ele;\n      var length = stateAndInfos.length;\n      if (length == 0) {\n        return;\n      } else if (length == 1) {\n        stateAndInfos[0].bbox.x = 0;\n        stateAndInfos[0].bbox.y = -50;\n      } else if (length == 2) {\n        stateAndInfos[0].bbox.x = 0;\n        stateAndInfos[0].bbox.y = -50;\n        stateAndInfos[1].bbox.x = 0;\n        stateAndInfos[1].bbox.y = 50;\n      } else if (length == 3) {\n        stateAndInfos[0].bbox.x = -25;\n        stateAndInfos[0].bbox.y = -50;\n        stateAndInfos[1].bbox.x = 25;\n        stateAndInfos[1].bbox.y = -50;\n        stateAndInfos[2].bbox.x = 0;\n        stateAndInfos[2].bbox.y = 50;\n      } else {\n        stateAndInfos[0].bbox.x = -25;\n        stateAndInfos[0].bbox.y = -50;\n        stateAndInfos[1].bbox.x = 25;\n        stateAndInfos[1].bbox.y = -50;\n        stateAndInfos[2].bbox.x = -25;\n        stateAndInfos[2].bbox.y = 50;\n        stateAndInfos[3].bbox.x = 25;\n        stateAndInfos[3].bbox.y = 50;\n      }\n    };\n\n    // Change state value or unit of information box of given nodes with given index.\n    // Type parameter indicates whether to change value or variable, it is valid if the box at the given index is a state variable.\n    // Value parameter is the new value to set.\n    // This method returns the old value of the changed data (We assume that the old value of the changed data was the same for all nodes).\n    // Each character assumed to occupy 8 unit\n    // Each infobox can have at most 32 units of width\n    elementUtilities.changeStateOrInfoBox = function (nodes, index, value, type) {\n      var result;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data(\"class\");\n        var stateAndInfos = node.data(\"statesandinfos\");\n        var box = stateAndInfos[index];\n        var oldLength = box.bbox.w;\n        var newLength = 0;\n        var content = \"\";\n        if (box.clazz == \"state variable\") {\n          if (!result) {\n            result = box.state[type];\n          }\n          box.state[type] = value;\n          if (box.state[\"value\"] !== undefined) {\n            content += box.state[\"value\"];\n          }\n          if (box.state[\"variable\"] !== undefined && box.state[\"variable\"].length > 0) {\n            content += box.state[\"variable\"] + \"@\";\n          }\n        } else if (box.clazz == \"unit of information\") {\n          if (!result) {\n            result = box.label.text;\n          }\n          content += value;\n          box.label.text = value;\n        } else if (box.clazz == \"residue variable\") {\n          if (!result) {\n            result = box.residue[type];\n          }\n          box.residue[type] = value;\n          if (box.residue[\"variable\"] !== undefined && box.residue[\"variable\"].length > 0) {\n            content += box.residue[\"variable\"];\n          }\n        } else if (box.clazz == \"binding region\") {\n          if (!result) {\n            result = box.region[type];\n          }\n          box.region[type] = value;\n          if (box.region[\"variable\"] !== undefined && box.region[\"variable\"].length > 0) {\n            content += box.region[\"variable\"];\n          }\n        }\n        var min = sbgnclass === \"SIF macromolecule\" || sbgnclass === \"SIF simple chemical\" ? 15 : 12;\n        var fontFamily = box.style[\"font-family\"];\n        var fontSize = box.style[\"font-size\"];\n        var borderWidth = box.style[\"border-width\"];\n        var opts = {\n          min: min,\n          max: 48,\n          margin: borderWidth / 2 + 0.5\n        };\n        var previousWidth = box.bbox.w;\n        box.bbox.w = elementUtilities.getWidthByContent(content, fontFamily, fontSize, opts);\n        if (box.anchorSide == \"top\" || box.anchorSide == \"bottom\") {\n          var unitLayout = node.data()[\"auxunitlayouts\"][box.anchorSide];\n          if (unitLayout.units[unitLayout.units.length - 1].id == box.id) {\n            var borderWidth = node.data()[\"border-width\"];\n            var shiftAmount = (box.bbox.w - previousWidth) / 2 * 100 / (node.outerWidth() - borderWidth);\n            if (shiftAmount >= 0) {\n              if (box.bbox.x + shiftAmount <= 100) {\n                box.bbox.x = box.bbox.x + shiftAmount;\n              }\n            }\n            /*  else{\n              var previousInfoBbox = {x : 0, w:0};\n              if(unitLayout.units.length > 1){\n                previousInfoBbox= unitLayout.units[unitLayout.units.length-2].bbox;      \n              }\n               \n              \n              sbgnvizInstance.classes.AuxUnitLayout.setIdealGap(node, box.anchorSide);\n              var idealGap = sbgnvizInstance.classes.AuxUnitLayout.getCurrentGap(box.anchorSide);\n              var newPosition = previousInfoBbox.x + (previousInfoBbox.w/2 + idealGap + box.bbox.w/2)*100 / (node.outerWidth() - borderWidth);\n              box.bbox.x = newPosition;\n              \n            } */\n          }\n        }\n\n        /* if (box.anchorSide === \"top\" || box.anchorSide === \"bottom\") {\n          box.bbox.x += (box.bbox.w - oldLength) / 2;\n          var units = (node.data('auxunitlayouts')[box.anchorSide]).units;\n          var shiftIndex = 0;\n          for (var i = 0; i < units.length; i++) {\n            if(units[i] === box){\n              shiftIndex = i;\n              break;\n            }\n          }\n          for (var j = shiftIndex+1; j < units.length; j++) {\n              units[j].bbox.x += (box.bbox.w - oldLength);\n          }\n        } */\n      }\n\n      //TODO find a way to elimate this redundancy to update info-box positions\n      node.data(\"border-width\", node.data(\"border-width\"));\n      return result;\n    };\n\n    // Add a new state or info box to given nodes.\n    // The box is represented by the parameter obj.\n    // This method returns the index of the just added box.\n    elementUtilities.addStateOrInfoBox = function (nodes, obj) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var locationObj;\n        var defaultProps = elementUtilities.getDefaultProperties(node.data(\"class\"));\n        var infoboxProps = defaultProps[obj.clazz];\n        var bbox = obj.bbox || {\n          w: infoboxProps.width,\n          h: infoboxProps.height\n        };\n        var style = elementUtilities.getDefaultInfoboxStyle(node.data(\"class\"), obj.clazz);\n        if (obj.style) {\n          $.extend(style, obj.style);\n        }\n        if (obj.clazz == \"unit of information\") {\n          locationObj = sbgnvizInstance.classes.UnitOfInformation.create(node, cy, obj.label.text, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        } else if (obj.clazz == \"state variable\") {\n          locationObj = sbgnvizInstance.classes.StateVariable.create(node, cy, obj.state.value, obj.state.variable, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        } else if (obj.clazz == \"residue variable\") {\n          locationObj = sbgnvizInstance.classes.ResidueVariable.create(node, cy, obj.residue.value, obj.residue.variable, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        } else if (obj.clazz == \"binding region\") {\n          locationObj = sbgnvizInstance.classes.BindingRegion.create(node, cy, obj.region.value, obj.region.variable, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        }\n      }\n      return locationObj;\n    };\n\n    // Remove the state or info boxes of the given nodes at given index.\n    // Returns the removed box.\n    elementUtilities.removeStateOrInfoBox = function (nodes, locationObj) {\n      var obj;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var stateAndInfos = node.data(\"statesandinfos\");\n        var unit = stateAndInfos[locationObj.index];\n        var unitClass = sbgnvizInstance.classes.getAuxUnitClass(unit);\n        obj = unitClass.remove(unit, cy);\n      }\n      return obj;\n    };\n\n    //Tiles informations boxes for given anchorSides\n    elementUtilities.fitUnits = function (node, locations) {\n      var obj = [];\n      node.data(\"statesandinfos\").forEach(function (ele) {\n        obj.push({\n          x: ele.bbox.x,\n          y: ele.bbox.y,\n          anchorSide: ele.anchorSide\n        });\n      });\n      sbgnvizInstance.classes.AuxUnitLayout.fitUnits(node, cy, locations);\n      return obj;\n    };\n\n    //Check which anchorsides fits\n    elementUtilities.checkFit = function (node, location) {\n      //if no location given, it checks all possible locations\n      console.log(\"elementUtilities.checkFit\", node);\n      return sbgnvizInstance.classes.AuxUnitLayout.checkFit(node, cy, location);\n    };\n\n    //Modify array of aux layout units\n    elementUtilities.modifyUnits = function (node, unit, anchorSide) {\n      sbgnvizInstance.classes.AuxUnitLayout.modifyUnits(node, unit, anchorSide, cy);\n    };\n\n    // Set multimer status of the given nodes to the given status.\n    elementUtilities.setMultimerStatus = function (nodes, status) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data(\"class\");\n        var isMultimer = node.data(\"class\").endsWith(\" multimer\");\n        if (status) {\n          // Make multimer status true\n          if (!isMultimer) {\n            node.data(\"class\", sbgnclass + \" multimer\");\n          }\n        } else {\n          // Make multimer status false\n          if (isMultimer) {\n            node.data(\"class\", sbgnclass.replace(\" multimer\", \"\"));\n          }\n        }\n      }\n    };\n\n    //Need to add this to doc : TO-DO\n    elementUtilities.setActiveStatus = function (nodes, status) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data(\"class\");\n        var isActive = node.data(\"class\").startsWith(\"active \");\n        if (status) {\n          // Make multimer status true\n          if (!isActive) {\n            node.data(\"class\", \"active \" + sbgnclass);\n            //node.data('class', sbgnclass + ' multimer');\n          }\n        } else {\n          // Make multimer status false\n          if (isActive) {\n            node.data(\"class\", sbgnclass.replace(\"active \", \"\"));\n            //node.data('class', sbgnclass.replace(' multimer', ''));\n          }\n        }\n      }\n    };\n\n    //Need to add this to doc : TO-DO\n    elementUtilities.setHypotheticalStatus = function (nodes, status) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data(\"class\");\n        var isHypothetical = node.data(\"class\").includes(\"hypothetical\");\n        var isActive = node.data(\"class\").startsWith(\"active \");\n        if (status) {\n          // Make multimer status true\n          if (!isHypothetical) {\n            if (isActive) {\n              var tmp = sbgnclass.substring(7);\n              node.data(\"class\", \"active hypothetical \" + tmp);\n            } else {\n              node.data(\"class\", \"hypothetical \" + sbgnclass);\n            }\n            //node.data('class', sbgnclass + ' multimer');\n          }\n        } else {\n          // Make multimer status false\n          if (isHypothetical) {\n            node.data(\"class\", sbgnclass.replace(\"hypothetical \", \"\"));\n            //node.data('class', sbgnclass.replace(' multimer', ''));\n          }\n        }\n      }\n    };\n\n    // Change font properties of the given elements with given font data\n    elementUtilities.changeFontProperties = function (eles, data) {\n      for (var prop in data) {\n        eles.data(prop, data[prop]);\n      }\n    };\n\n    // This function gets an edge, and ends of that edge (Optionally it may take just the classes of the edge as well) as parameters.\n    // It may return 'valid' (that ends is valid for that edge), 'reverse' (that ends is not valid for that edge but they would be valid\n    // if you reverse the source and target), 'invalid' (that ends are totally invalid for that edge).\n    elementUtilities.validateArrowEnds = function (edge, source, target, isReplacement) {\n      // if map type is Unknown -- no rules applied\n      if (elementUtilities.getMapType() == \"HybridAny\" || elementUtilities.getMapType() == \"HybridSbgn\" || !elementUtilities.getMapType()) return \"valid\";\n      var edgeclass = typeof edge === \"string\" ? edge : edge.data(\"class\");\n      var sourceclass = source.data(\"class\");\n      var targetclass = target.data(\"class\");\n      var mapType = elementUtilities.getMapType();\n      var edgeConstraints = elementUtilities[mapType].connectivityConstraints[edgeclass];\n      if (mapType == \"AF\") {\n        if (sourceclass.startsWith(\"BA\"))\n          // we have separate classes for each biological activity\n          sourceclass = \"biological activity\"; // but same rule applies to all of them\n\n        if (targetclass.startsWith(\"BA\"))\n          // we have separate classes for each biological activity\n          targetclass = \"biological activity\"; // but same rule applies to all of them\n      } else if (mapType == \"PD\") {\n        sourceclass = sourceclass.replace(/\\s*multimer$/, \"\");\n        targetclass = targetclass.replace(/\\s*multimer$/, \"\");\n      } else if (mapType == \"SBML\") {\n        sourceclass = sourceclass.replace(/\\s*multimer$/, \"\");\n        targetclass = targetclass.replace(/\\s*multimer$/, \"\");\n        sourceclass = sourceclass.replace(\"active \", \"\");\n        targetclass = targetclass.replace(\"active \", \"\");\n        sourceclass = sourceclass.replace(\"hypothetical \", \"\");\n        targetclass = targetclass.replace(\"hypothetical \", \"\");\n      }\n\n      // given a node, acting as source or target, returns boolean wether or not it has too many edges already\n      function hasTooManyEdges(node, sourceOrTarget) {\n        var nodeclass = node.data(\"class\");\n        nodeclass = nodeclass.replace(/\\s*multimer$/, \"\");\n        nodeclass = nodeclass.replace(\"active \", \"\");\n        nodeclass = nodeclass.replace(\"hypothetical \", \"\");\n        if (nodeclass.startsWith(\"BA\")) nodeclass = \"biological activity\";\n\n        /*\n          On the logic below:\n           Current edge count (incoming or outgoing) of nodes should be strictly less \n          than the maximum allowed if we are adding an edge to the node. This way\n          it will never exceed the max count.\n          \n          Edges can be added in two different ways. Either they are added directly or\n          they are added by being replaced from another node, i.e disconnected from\n          one and connected to another.\n           We can detect if the edge being added is added from a replacement by checking\n          whether the source stayed the same when checking edge counts of the source node,\n          and whether the target stayed the same when checking edge counts of the\n          target node.\n           Current edge count of nodes can be allowed to be equal to the maximum in \n          cases where a replacement is made. But we should be careful that this\n          replacement operation is not also an addition operation as described above.\n        */\n\n        var totalTooMany = true;\n        var edgeTooMany = true;\n        if (sourceOrTarget == \"source\") {\n          var sameEdgeCountOut = node.outgoers('edge[class=\"' + edgeclass + '\"]').size();\n          var totalEdgeCountOut = node.outgoers(\"edge\").size();\n          var maxTotal = edgeConstraints[nodeclass].asSource.maxTotal;\n          var maxEdge = edgeConstraints[nodeclass].asSource.maxEdge;\n          var compareStrict = !(isReplacement && edge.source() === source);\n          var withinLimits = !maxTotal || compareStrict && totalEdgeCountOut < maxTotal || !compareStrict && totalEdgeCountOut <= maxTotal;\n          if (withinLimits) {\n            totalTooMany = false;\n          }\n          // then check limits for this specific edge class\n\n          withinLimits = !maxEdge || compareStrict && sameEdgeCountOut < maxEdge || !compareStrict && sameEdgeCountOut <= maxEdge;\n          if (withinLimits) {\n            edgeTooMany = false;\n          }\n\n          // if only one of the limits is reached then edge is invalid\n          return totalTooMany || edgeTooMany;\n        } else {\n          // node is used as target\n          var sameEdgeCountIn = node.incomers('edge[class=\"' + edgeclass + '\"]').size();\n          var totalEdgeCountIn = node.incomers(\"edge\").size();\n          var maxTotal = edgeConstraints[nodeclass].asTarget.maxTotal;\n          var maxEdge = edgeConstraints[nodeclass].asTarget.maxEdge;\n          var compareStrict = !(isReplacement && edge.target() === target);\n          var withinLimits = !maxTotal || compareStrict && totalEdgeCountIn < maxTotal || !compareStrict && totalEdgeCountIn <= maxTotal;\n          if (withinLimits) {\n            totalTooMany = false;\n          }\n          withinLimits = !maxEdge || compareStrict && sameEdgeCountIn < maxEdge || !compareStrict && sameEdgeCountIn <= maxEdge;\n          if (withinLimits) {\n            edgeTooMany = false;\n          }\n          return totalTooMany || edgeTooMany;\n        }\n      }\n      function isInComplex(node) {\n        var parentClass = node.parent().data(\"class\");\n        return parentClass && parentClass.startsWith(\"complex\");\n      }\n      if (isInComplex(source) || isInComplex(target)) {\n        // subunits of a complex are no longer EPNs, no connection allowed\n        return \"invalid\";\n      }\n\n      // check nature of connection\n      if (edgeConstraints[sourceclass].asSource.isAllowed && edgeConstraints[targetclass].asTarget.isAllowed) {\n        // check amount of connections\n        if (!hasTooManyEdges(source, \"source\") && !hasTooManyEdges(target, \"target\")) {\n          return \"valid\";\n        }\n      }\n      // try to reverse\n      if (edgeConstraints[targetclass].asSource.isAllowed && edgeConstraints[sourceclass].asTarget.isAllowed) {\n        if (!hasTooManyEdges(target, \"source\") && !hasTooManyEdges(source, \"target\")) {\n          return \"reverse\";\n        }\n      }\n      return \"invalid\";\n    };\n    elementUtilities.deleteAndPerformLayout = function (eles, layoutparam) {\n      var result = eles.remove();\n      if (typeof layoutparam === \"function\") {\n        layoutparam(); // If layoutparam is a function execute it\n      } else {\n        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.\n\n        // Do this check for cytoscape.js backward compatibility\n        if (layout && layout.run) {\n          layout.run();\n        }\n      }\n      return result;\n    };\n\n    /*\n     * Hide given eles and perform given layout afterward. Layout parameter may be layout options\n     * or a function to call.\n     */\n    elementUtilities.hideAndPerformLayout = function (eles, layoutparam) {\n      var result = cy.viewUtilities().hide(eles); // Hide given eles\n      if (typeof layoutparam === \"function\") {\n        layoutparam(); // If layoutparam is a function execute it\n      } else {\n        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.\n\n        // Do this check for cytoscape.js backward compatibility\n        if (layout && layout.run) {\n          layout.run();\n        }\n      }\n      return result;\n    };\n\n    /*\n     * Unhide given eles and perform given layout afterward. Layout parameter may be layout options\n     * or a function to call.\n     */\n    elementUtilities.showAndPerformLayout = function (eles, layoutparam) {\n      var result = cy.viewUtilities().show(eles); // Show given eles\n      if (typeof layoutparam === \"function\") {\n        layoutparam(); // If layoutparam is a function execute it\n      } else {\n        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.\n\n        // Do this check for cytoscape.js backward compatibility\n        if (layout && layout.run) {\n          layout.run();\n        }\n      }\n      return result;\n    };\n\n    /*\n     * Change style/css of given eles by setting getting property name to the given value/values (Note that valueMap parameter may be\n     * a single string or an id to value map).\n     */\n    elementUtilities.changeCss = function (eles, name, valueMap) {\n      if (_typeof(valueMap) === \"object\") {\n        cy.startBatch();\n        for (var i = 0; i < eles.length; i++) {\n          var ele = cy.getElementById(eles[i].id());\n          ele.css(name, valueMap[ele.id()]); // valueMap is an id to value map use it in this way\n        }\n        cy.endBatch();\n      } else {\n        eles.css(name, valueMap); // valueMap is just a string set css('name') for all eles to this value\n      }\n    };\n\n    /*\n     * Change data of given eles by setting getting property name to the given value/values (Note that valueMap parameter may be\n     * a single string or an id to value map).\n     */\n    elementUtilities.changeData = function (eles, name, valueMap) {\n      console.log(\"changing data in chise\");\n      if (_typeof(valueMap) === \"object\") {\n        cy.startBatch();\n        for (var i = 0; i < eles.length; i++) {\n          var ele = cy.getElementById(eles[i].id());\n          ele.data(name, valueMap[ele.id()]); // valueMap is an id to value map use it in this way\n        }\n        cy.endBatch();\n      } else {\n        eles.data(name, valueMap); // valueMap is just a string set css('name') for all eles to this value\n      }\n    };\n    elementUtilities.updateSetField = function (ele, fieldName, toDelete, toAdd, callback) {\n      var set = ele.data(fieldName);\n      if (!set) {\n        return;\n      }\n      var updates = {};\n      if (toDelete != null && set[toDelete]) {\n        delete set[toDelete];\n        updates.deleted = toDelete;\n      }\n      if (toAdd != null) {\n        set[toAdd] = true;\n        updates.added = toAdd;\n      }\n      if (callback && (updates[\"deleted\"] != null || updates[\"added\"] != null)) {\n        callback();\n      }\n      return updates;\n    };\n\n    /*\n     * Return the set of all nodes present under the given position\n     * renderedPos must be a point defined relatively to cytoscape container\n     * (like renderedPosition field of a node)\n     */\n    elementUtilities.getNodesAt = function (renderedPos) {\n      var nodes = cy.nodes();\n      var x = renderedPos.x;\n      var y = renderedPos.y;\n      var resultNodes = [];\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var renderedBbox = node.renderedBoundingBox({\n          includeNodes: true,\n          includeEdges: false,\n          includeLabels: false,\n          includeShadows: false\n        });\n        if (x >= renderedBbox.x1 && x <= renderedBbox.x2) {\n          if (y >= renderedBbox.y1 && y <= renderedBbox.y2) {\n            resultNodes.push(node);\n          }\n        }\n      }\n      return resultNodes;\n    };\n    elementUtilities.demultimerizeClass = function (sbgnclass) {\n      return sbgnclass.replace(\" multimer\", \"\");\n    };\n\n    /**\n     * @param mapType - type of the current map (PD, AF or Unknown)\n     */\n    elementUtilities.setMapType = function (mapType) {\n      elementUtilities.mapType = mapType;\n      return mapType;\n    };\n\n    /**\n     * return - map type\n     */\n    elementUtilities.getMapType = function () {\n      return elementUtilities.mapType;\n    };\n    /**\n     * Resets map type\n     */\n    elementUtilities.resetMapType = function () {\n      elementUtilities.mapType = undefined;\n    };\n\n    /**\n     * Keep consistency of links to self inside the data() structure.\n     * This is needed whenever a node changes parents, for example,\n     * as it is destroyed and recreated. But the data() stays identical.\n     * This creates inconsistencies for the pointers stored in data(),\n     * as they now point to a deleted node.\n     */\n    elementUtilities.maintainPointer = function (eles) {\n      eles.nodes().forEach(function (ele) {\n        // restore background images\n        ele.emit(\"data\");\n\n        // skip nodes without any auxiliary units\n        if (!ele.data(\"statesandinfos\") || ele.data(\"statesandinfos\").length == 0) {\n          return;\n        }\n        for (var side in ele.data(\"auxunitlayouts\")) {\n          ele.data(\"auxunitlayouts\")[side].parentNode = ele.id();\n        }\n        for (var i = 0; i < ele.data(\"statesandinfos\").length; i++) {\n          ele.data(\"statesandinfos\")[i].parent = ele.id();\n        }\n      });\n    };\n    elementUtilities.anyHasBackgroundImage = function (eles) {\n      var obj = elementUtilities.getBackgroundImageObjs(eles);\n      if (obj === undefined) return false;else {\n        for (var key in obj) {\n          var value = obj[key];\n          if (value && !$.isEmptyObject(value)) return true;\n        }\n        return false;\n      }\n    };\n    elementUtilities.hasBackgroundImage = function (ele) {\n      if (!ele.isNode() || !ele.data(\"background-image\")) {\n        return false;\n      }\n      var bg;\n      if (typeof ele.data(\"background-image\") === \"string\") {\n        bg = ele.data(\"background-image\").split(\" \");\n      } else if (Array.isArray(obj[\"background-image\"])) {\n        bg = ele.data(\"background-image\");\n      }\n      if (!bg) return false;\n      var cloneImg = \"data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E\";\n      // If cloneImg is not the only image or there are multiple images there is a background image\n      var onlyHasCloneMarkerAsBgImage = bg.length === 1 && bg.indexOf(cloneImg) === 0;\n      if (bg.length > 1 || !onlyHasCloneMarkerAsBgImage) return true;\n      return false;\n    };\n    elementUtilities.getBackgroundImageURL = function (eles) {\n      \"getting background images\";\n      if (!eles || eles.length < 1) return;\n      var commonURL = \"\";\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        if (!ele.isNode() || !elementUtilities.hasBackgroundImage(ele)) return;\n        var url = ele.data(\"background-image\").split(\" \").pop();\n        if (!url || url.indexOf(\"http\") !== 0 || commonURL !== \"\" && commonURL !== url) return;else if (commonURL === \"\") commonURL = url;\n      }\n      return commonURL;\n    };\n    elementUtilities.getBackgroundImageObjs = function (eles) {\n      if (!eles || eles.length < 1) return;\n      var list = {};\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        var obj = getBgObj(ele);\n        if (Object.keys(obj).length < 1) return;\n        list[ele.data(\"id\")] = obj;\n      }\n      return list;\n      function getBgObj(ele) {\n        if (ele.isNode() && elementUtilities.hasBackgroundImage(ele)) {\n          var keys = [\"background-image\", \"background-fit\", \"background-image-opacity\", \"background-position-x\", \"background-position-y\", \"background-height\", \"background-width\"];\n          var obj = {};\n          keys.forEach(function (key) {\n            var value;\n            if (ele.data(key) && typeof ele.data(key) === \"string\") {\n              value = ele.data(key).split(\" \")[0];\n            } else {\n              value = ele.data(key);\n            }\n            obj[key] = value;\n          });\n          return obj;\n        } else if (ele.isNode()) return {};\n      }\n    };\n    elementUtilities.getBackgroundFitOptions = function (eles) {\n      if (!eles || eles.length < 1) return;\n      var commonFit = \"\";\n      for (var i = 0; i < eles.length; i++) {\n        var node = eles[i];\n        if (!node.isNode()) return;\n        var fit = getFitOption(node);\n        if (!fit || commonFit !== \"\" && fit !== commonFit) return;else if (commonFit === \"\") commonFit = fit;\n      }\n      var options = '<option value=\"none\">None</option>' + '<option value=\"fit\">Fit</option>' + '<option value=\"cover\">Cover</option>' + '<option value=\"contain\">Contain</option>';\n      var searchKey = 'value=\"' + commonFit + '\"';\n      var index = options.indexOf(searchKey) + searchKey.length;\n      return options.substr(0, index) + \" selected\" + options.substr(index);\n      function getFitOption(node) {\n        if (!elementUtilities.hasBackgroundImage(node)) return;\n        var f = node.data(\"background-fit\");\n        var h = node.data(\"background-height\");\n        if (!f || !h) return;\n        f = f.split(\" \");\n        h = h.split(\" \");\n        if (f[f.length - 1] === \"none\") return h[h.length - 1] === \"auto\" ? \"none\" : \"fit\";else return f[f.length - 1];\n      }\n    };\n    elementUtilities.updateBackgroundImage = function (nodes, bgObj) {\n      if (!nodes || nodes.length == 0 || !bgObj) return;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var obj = bgObj[node.data(\"id\")];\n        if (!obj || $.isEmptyObject(obj)) continue;\n        var imgs = node.data(\"background-image\") ? node.data(\"background-image\").split(\" \") : [];\n        var xPos = node.data(\"background-position-x\") ? node.data(\"background-position-x\").split(\" \") : [];\n        var yPos = node.data(\"background-position-y\") ? node.data(\"background-position-y\").split(\" \") : [];\n        var widths = node.data(\"background-width\") ? node.data(\"background-width\").split(\" \") : [];\n        var heights = node.data(\"background-height\") ? node.data(\"background-height\").split(\" \") : [];\n        var fits = node.data(\"background-fit\") ? node.data(\"background-fit\").split(\" \") : [];\n        var opacities = node.data(\"background-image-opacity\") ? (\"\" + node.data(\"background-image-opacity\")).split(\" \") : [];\n        var index = -1;\n        if (typeof obj[\"background-image\"] === \"string\") index = imgs.indexOf(obj[\"background-image\"]);else if (Array.isArray(obj[\"background-image\"])) index = imgs.indexOf(obj[\"background-image\"][0]);\n        if (index < 0) continue;\n        if (obj[\"background-image\"] && imgs.length > index) {\n          var tmp = imgs[index];\n          imgs[index] = obj[\"background-image\"];\n          obj[\"background-image\"] = tmp;\n        }\n        if (obj[\"background-fit\"] && fits.length > index) {\n          var tmp = fits[index];\n          fits[index] = obj[\"background-fit\"];\n          obj[\"background-fit\"] = tmp;\n        }\n        if (obj[\"background-width\"] && widths.length > index) {\n          var tmp = widths[index];\n          widths[index] = obj[\"background-width\"];\n          obj[\"background-width\"] = tmp;\n        }\n        if (obj[\"background-height\"] && heights.length > index) {\n          var tmp = heights[index];\n          heights[index] = obj[\"background-height\"];\n          obj[\"background-height\"] = tmp;\n        }\n        if (obj[\"background-position-x\"] && xPos.length > index) {\n          var tmp = xPos[index];\n          xPos[index] = obj[\"background-position-x\"];\n          obj[\"background-position-x\"] = tmp;\n        }\n        if (obj[\"background-position-y\"] && yPos.length > index) {\n          var tmp = yPos[index];\n          yPos[index] = obj[\"background-position-y\"];\n          obj[\"background-position-y\"] = tmp;\n        }\n        if (obj[\"background-image-opacity\"] && opacities.length > index) {\n          var tmp = opacities[index];\n          opacities[index] = obj[\"background-image-opacity\"];\n          obj[\"background-image-opacity\"] = tmp;\n        }\n        node.data(\"background-image\", imgs.join(\" \"));\n        node.data(\"background-position-x\", xPos.join(\" \"));\n        node.data(\"background-position-y\", yPos.join(\" \"));\n        node.data(\"background-width\", widths.join(\" \"));\n        node.data(\"background-height\", heights.join(\" \"));\n        node.data(\"background-fit\", fits.join(\" \"));\n        node.data(\"background-image-opacity\", opacities.join(\" \"));\n      }\n      return bgObj;\n    };\n    elementUtilities.changeBackgroundImage = function (nodes, oldImg, newImg, firstTime, updateInfo, promptInvalidImage, validateURL) {\n      if (!nodes || nodes.length == 0 || !oldImg || !newImg) return;\n      elementUtilities.removeBackgroundImage(nodes, oldImg);\n      for (var key in newImg) {\n        newImg[key][\"firstTime\"] = firstTime;\n      }\n      elementUtilities.addBackgroundImage(nodes, newImg, updateInfo, promptInvalidImage, validateURL);\n      return {\n        nodes: nodes,\n        oldImg: newImg,\n        newImg: oldImg,\n        firstTime: false,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n    };\n\n    // Add a background image to given nodes.\n    elementUtilities.addBackgroundImage = function (nodes, bgObj, updateInfo, promptInvalidImage, validateURL) {\n      if (!nodes || nodes.length == 0 || !bgObj) return;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var obj = bgObj[node.data(\"id\")];\n        if (!obj || $.isEmptyObject(obj)) continue;\n\n        // Load the image from local, else just put the URL\n        if (obj[\"fromFile\"]) loadBackgroundThenApply(node, obj);\n        // Validity of given URL should be checked before applying it\n        else if (obj[\"firstTime\"]) {\n          if (typeof validateURL === \"function\") validateURL(node, obj, applyBackground, promptInvalidImage);else checkGivenURL(node, obj);\n        } else applyBackground(node, obj);\n      }\n      function loadBackgroundThenApply(node, bgObj) {\n        var reader = new FileReader();\n        var imgFile = bgObj[\"background-image\"];\n\n        // Check whether given file is an image file\n        if (imgFile.type.indexOf(\"image\") !== 0) {\n          if (promptInvalidImage) promptInvalidImage(\"Invalid image file is given!\");\n          return;\n        }\n        reader.readAsDataURL(imgFile);\n        reader.onload = function (e) {\n          var img = reader.result;\n          if (img) {\n            bgObj[\"background-image\"] = img;\n            bgObj[\"fromFile\"] = false;\n            applyBackground(node, bgObj);\n          } else {\n            if (promptInvalidImage) promptInvalidImage(\"Given file could not be read!\");\n          }\n        };\n      }\n      function checkGivenURL(node, bgObj) {\n        var url = bgObj[\"background-image\"];\n        var extension = url.split(/[?#]/)[0].split(\".\").pop();\n        var validExtensions = [\"png\", \"svg\", \"jpg\", \"jpeg\"];\n        if (!validExtensions.includes(extension)) {\n          if (typeof promptInvalidImage === \"function\") promptInvalidImage(\"Invalid URL is given!\");\n          return;\n        }\n        $.ajax({\n          url: url,\n          type: \"GET\",\n          success: function success(result, status, xhr) {\n            applyBackground(node, bgObj);\n          },\n          error: function error(xhr, status, _error) {\n            if (promptInvalidImage) promptInvalidImage(\"Invalid URL is given!\");\n          }\n        });\n      }\n      function applyBackground(node, bgObj) {\n        if (elementUtilities.hasBackgroundImage(node)) return;\n        var imgs = node.data(\"background-image\") ? node.data(\"background-image\").split(\" \") : [];\n        var xPos = node.data(\"background-position-x\") ? node.data(\"background-position-x\").split(\" \") : [];\n        var yPos = node.data(\"background-position-y\") ? node.data(\"background-position-y\").split(\" \") : [];\n        var widths = node.data(\"background-width\") ? node.data(\"background-width\").split(\" \") : [];\n        var heights = node.data(\"background-height\") ? node.data(\"background-height\").split(\" \") : [];\n        var fits = node.data(\"background-fit\") ? node.data(\"background-fit\").split(\" \") : [];\n        var opacities = node.data(\"background-image-opacity\") ? (\"\" + node.data(\"background-image-opacity\")).split(\" \") : [];\n        var indexToInsert = imgs.length;\n\n        // insert to length-1\n        if (elementUtilities.hasCloneMarker(imgs)) {\n          indexToInsert--;\n        }\n        imgs.splice(indexToInsert, 0, bgObj[\"background-image\"]);\n        fits.splice(indexToInsert, 0, bgObj[\"background-fit\"]);\n        opacities.splice(indexToInsert, 0, bgObj[\"background-image-opacity\"]);\n        xPos.splice(indexToInsert, 0, bgObj[\"background-position-x\"]);\n        yPos.splice(indexToInsert, 0, bgObj[\"background-position-y\"]);\n        widths.splice(indexToInsert, 0, bgObj[\"background-width\"]);\n        heights.splice(indexToInsert, 0, bgObj[\"background-height\"]);\n        node.data(\"background-image\", imgs.join(\" \"));\n        node.data(\"background-position-x\", xPos.join(\" \"));\n        node.data(\"background-position-y\", yPos.join(\" \"));\n        node.data(\"background-width\", widths.join(\" \"));\n        node.data(\"background-height\", heights.join(\" \"));\n        node.data(\"background-fit\", fits.join(\" \"));\n        node.data(\"background-image-opacity\", opacities.join(\" \"));\n        bgObj[\"firstTime\"] = false;\n        if (updateInfo) updateInfo();\n      }\n    };\n    elementUtilities.hasCloneMarker = function (imgs) {\n      var cloneImg = \"data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E\";\n      return imgs.indexOf(cloneImg) > -1;\n    };\n\n    // Remove a background image from given nodes.\n    elementUtilities.removeBackgroundImage = function (nodes, bgObj) {\n      if (!nodes || nodes.length == 0 || !bgObj) return;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var obj = bgObj[node.data(\"id\")];\n        if (!obj) continue;\n        var imgs = node.data(\"background-image\") ? node.data(\"background-image\").split(\" \") : [];\n        var xPos = node.data(\"background-position-x\") ? node.data(\"background-position-x\").split(\" \") : [];\n        var yPos = node.data(\"background-position-y\") ? node.data(\"background-position-y\").split(\" \") : [];\n        var widths = node.data(\"background-width\") ? node.data(\"background-width\").split(\" \") : [];\n        var heights = node.data(\"background-height\") ? node.data(\"background-height\").split(\" \") : [];\n        var fits = node.data(\"background-fit\") ? node.data(\"background-fit\").split(\" \") : [];\n        var opacities = node.data(\"background-image-opacity\") ? (\"\" + node.data(\"background-image-opacity\")).split(\" \") : [];\n        var index = -1;\n        if (typeof obj[\"background-image\"] === \"string\") index = imgs.indexOf(obj[\"background-image\"].split(\" \")[0]);else if (Array.isArray(obj[\"background-image\"])) index = imgs.indexOf(obj[\"background-image\"][0]);\n        if (index > -1) {\n          imgs.splice(index, 1);\n          fits.splice(index, 1);\n          opacities.splice(index, 1);\n          xPos.splice(index, 1);\n          yPos.splice(index, 1);\n          widths.splice(index, 1);\n          heights.splice(index, 1);\n        }\n        node.data(\"background-image\", imgs.join(\" \"));\n        node.data(\"background-position-x\", xPos.join(\" \"));\n        node.data(\"background-position-y\", yPos.join(\" \"));\n        node.data(\"background-width\", widths.join(\" \"));\n        node.data(\"background-height\", heights.join(\" \"));\n        node.data(\"background-fit\", fits.join(\" \"));\n        node.data(\"background-image-opacity\", opacities.join(\" \"));\n        bgObj[\"firstTime\"] = false;\n      }\n    };\n    elementUtilities.reverseEdge = function (edge) {\n      var oldSource = edge.source().id();\n      var oldTarget = edge.target().id();\n      var oldPortSource = edge.data(\"portsource\");\n      var oldPortTarget = edge.data(\"porttarget\");\n      var segmentPoints = edge.segmentPoints();\n      var controlPoints = edge.controlPoints();\n      edge.data().source = oldTarget;\n      edge.data().target = oldSource;\n      edge.data().portsource = oldPortTarget;\n      edge.data().porttarget = oldPortSource;\n      edge = edge.move({\n        target: oldSource,\n        source: oldTarget\n      });\n      if (Array.isArray(segmentPoints)) {\n        segmentPoints.reverse();\n        edge.data().bendPointPositions = segmentPoints;\n        if (Array.isArray(controlPoints)) {\n          controlPoints.reverse();\n          edge.data().controlPointPositions = controlPoints;\n        }\n        var edgeEditing = cy.edgeEditing(\"get\");\n        edgeEditing.initAnchorPoints(edge);\n      }\n      return edge;\n    };\n  }\n  return elementUtilitiesExtender;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2VsZW1lbnQtdXRpbGl0aWVzLWV4dGVuZGVyLWZhY3RvcnkuanMiLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0EsSUFBSUEsSUFBSSxHQUFHQyx3RkFBa0MsQ0FBQyxDQUFDO0FBQy9DLElBQUlFLE1BQU0sR0FBSUMsQ0FBQyxHQUFHSixJQUFJLENBQUNHLE1BQU87QUFFOUJFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVk7RUFDM0IsSUFBSUMsT0FBTyxFQUFFQyxlQUFlLEVBQUVDLGdCQUFnQixFQUFFQyxFQUFFO0VBR2xELFNBQVNDLHdCQUF3QkEsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3ZDSixlQUFlLEdBQUdJLEtBQUssQ0FBQ0Msd0JBQXdCLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0lBQzlEUCxPQUFPLEdBQUdLLEtBQUssQ0FBQ0csZUFBZSxDQUFDQyxVQUFVLENBQUMsQ0FBQztJQUM1Q1AsZ0JBQWdCLEdBQUdELGVBQWUsQ0FBQ0MsZ0JBQWdCO0lBQ25EQyxFQUFFLEdBQUdFLEtBQUssQ0FBQ0Msd0JBQXdCLENBQUNJLEtBQUssQ0FBQyxDQUFDO0lBRTNDQyxNQUFNLENBQUMsQ0FBQzs7SUFFUjtJQUNBLE9BQU9ULGdCQUFnQjtFQUN6Qjs7RUFFQTtFQUNBLFNBQVNTLE1BQU1BLENBQUEsRUFBRztJQUNoQjtJQUNBOztJQUVBVCxnQkFBZ0IsQ0FBQ1UsT0FBTyxHQUFHLFVBQ3pCQyxDQUFDLEVBQ0RDLENBQUMsRUFDREMsVUFBVSxFQUNWQyxFQUFFLEVBQ0ZDLE1BQU0sRUFDTkMsVUFBVSxFQUNWO01BQ0EsSUFBSUMsT0FBQSxDQUFPSixVQUFVLEtBQUksUUFBUSxFQUFFO1FBQ2pDLElBQUlLLFNBQVMsR0FBR0wsVUFBVTtNQUM1QixDQUFDLE1BQU07UUFDTCxJQUFJSyxTQUFTLEdBQUdMLFVBQVUsU0FBTTtRQUNoQyxJQUFJTSxRQUFRLEdBQUdOLFVBQVUsQ0FBQ00sUUFBUTtNQUNwQztNQUVBLElBQUlDLEdBQUcsR0FBRyxDQUFDLENB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RUFFQSxPQUFPN08sd0JBQXdCO0FBQ2pDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGlzZS8uL3NyYy91dGlsaXRpZXMvZWxlbWVudC11dGlsaXRpZXMtZXh0ZW5kZXItZmFjdG9yeS5qcz9iYmZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEV4dGVuZHMgc2JnbnZpei5lbGVtZW50VXRpbGl0aWVzXG52YXIgbGlicyA9IHJlcXVpcmUoXCIuL2xpYi11dGlsaXRpZXNcIikuZ2V0TGlicygpO1xudmFyIGpRdWVyeSA9ICgkID0gbGlicy5qUXVlcnkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9wdGlvbnMsIHNiZ252aXpJbnN0YW5jZSwgZWxlbWVudFV0aWxpdGllcywgY3k7XG5cblxuICBmdW5jdGlvbiBlbGVtZW50VXRpbGl0aWVzRXh0ZW5kZXIocGFyYW0pIHtcbiAgICBzYmdudml6SW5zdGFuY2UgPSBwYXJhbS5zYmdudml6SW5zdGFuY2VVdGlsaXRpZXMuZ2V0SW5zdGFuY2UoKTtcbiAgICBvcHRpb25zID0gcGFyYW0ub3B0aW9uVXRpbGl0aWVzLmdldE9wdGlvbnMoKTtcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gc2JnbnZpekluc3RhbmNlLmVsZW1lbnRVdGlsaXRpZXM7XG4gICAgY3kgPSBwYXJhbS5zYmdudml6SW5zdGFuY2VVdGlsaXRpZXMuZ2V0Q3koKTtcblxuICAgIGV4dGVuZCgpO1xuXG4gICAgLy8gUmV0dXJuIHRoZSBleHRlbmRlZCBlbGVtZW50VXRpbGl0aWVzXG4gICAgcmV0dXJuIGVsZW1lbnRVdGlsaXRpZXM7XG4gIH1cblxuICAvLyBFeHRlbmRzIGVsZW1lbnRVdGlsaXRpZXMgd2l0aCBjaGlzZSBzcGVjaWZpYyBmYWNpbGl0aWVzXG4gIGZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgICAvLyBTZWN0aW9uIFN0YXJ0XG4gICAgLy8gQWRkIHJlbW92ZSB1dGlsaXRpZXNcblxuICAgIGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZSA9IGZ1bmN0aW9uIChcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgbm9kZVBhcmFtcyxcbiAgICAgIGlkLFxuICAgICAgcGFyZW50LFxuICAgICAgdmlzaWJpbGl0eVxuICAgICkge1xuICAgICAgaWYgKHR5cGVvZiBub2RlUGFyYW1zICE9IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdmFyIHNiZ25jbGFzcyA9IG5vZGVQYXJhbXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc2JnbmNsYXNzID0gbm9kZVBhcmFtcy5jbGFzcztcbiAgICAgICAgdmFyIGxhbmd1YWdlID0gbm9kZVBhcmFtcy5sYW5ndWFnZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNzcyA9IHt9O1xuICAgICAgLy8oJ3NiZ25jbGFzcycsIHNiZ25jbGFzcylcbiAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIHNwZWNpZmljIGRlZmF1bHQgd2lkdGggb3IgaGVpZ2h0IGZvclxuICAgICAgLy8gc2JnbmNsYXNzIHRoZXNlIHNpemVzIGFyZSB1c2VkXG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gNTA7XG4gICAgICB2YXIgZGVmYXVsdEhlaWdodCA9IDUwO1xuXG4gICAgICBpZiAodmlzaWJpbGl0eSkge1xuICAgICAgICBjc3MudmlzaWJpbGl0eSA9IHZpc2liaWxpdHk7XG4gICAgICB9XG5cbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBjbGFzczogc2JnbmNsYXNzLFxuICAgICAgICBsYW5ndWFnZTogbGFuZ3VhZ2UsXG4gICAgICAgIGJib3g6IHtcbiAgICAgICAgICB3OiBkZWZhdWx0V2lkdGgsXG4gICAgICAgICAgaDogZGVmYXVsdEhlaWdodCxcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIHk6IHksXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXRlc2FuZGluZm9zOiBbXSxcbiAgICAgICAgcG9ydHM6IFtdLFxuICAgICAgfTtcblxuICAgICAgLy9jb25zb2xlLmxvZyhcImRhdGFcIiwgZGF0YSlcbiAgICAgIGlmIChpZCkge1xuICAgICAgICBkYXRhLmlkID0gaWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhLmlkID0gZWxlbWVudFV0aWxpdGllcy5nZW5lcmF0ZU5vZGVJZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGRhdGEucGFyZW50ID0gcGFyZW50O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmV4dGVuZE5vZGVEYXRhV2l0aENsYXNzRGVmYXVsdHMoZGF0YSwgc2JnbmNsYXNzKTtcblxuICAgICAgLy8gc29tZSBkZWZhdWx0cyBhcmUgbm90IHNldCBieSBleHRlbmROb2RlRGF0YVdpdGhDbGFzc0RlZmF1bHRzKClcbiAgICAgIC8vY29uc29sZS5sb2coXCJzYmduY2xhc3NcIiwgc2JnbmNsYXNzKVxuICAgICAgdmFyIGRlZmF1bHRzID0gdGhpcy5nZXREZWZhdWx0UHJvcGVydGllcyhzYmduY2xhc3MpO1xuXG4gICAgICBpZiAoZGVmYXVsdHNbXCJtdWx0aW1lclwiXSkge1xuICAgICAgICBkYXRhLmNsYXNzICs9IFwiIG11bHRpbWVyXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZWZhdWx0c1tcImNsb25lbWFya2VyXCJdKSB7XG4gICAgICAgIGRhdGFbXCJjbG9uZW1hcmtlclwiXSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoZGVmYXVsdHNbXCJoeXBvdGhldGljYWxcIl0pIHtcbiAgICAgICAgZGF0YS5jbGFzcyA9IFwiaHlwb3RoZXRpY2FsIFwiICsgZGF0YS5jbGFzcztcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0c1tcImFjdGl2ZVwiXSkge1xuICAgICAgICBkYXRhLmNsYXNzID0gXCJhY3RpdmUgXCIgKyBkYXRhLmNsYXNzO1xuICAgICAgfVxuXG4gICAgICBkYXRhLmJib3hbXCJ3XCJdID0gZGVmYXVsdHNbXCJ3aWR0aFwiXTtcbiAgICAgIGRhdGEuYmJveFtcImhcIl0gPSBkZWZhdWx0c1tcImhlaWdodFwiXTtcblxuICAgICAgLy9jb25zb2xlLmxvZyhcImRhdGFcIiwgZGF0YSlcbiAgICAgIHZhciBlbGVzID0gY3kuYWRkKHtcbiAgICAgICAgZ3JvdXA6IFwibm9kZXNcIixcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgY3NzOiBjc3MsXG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5LFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vY29uc29sZS5sb2coJ2VsZXMnLCBlbGVzKVxuXG4gICAgICB2YXIgbmV3Tm9kZSA9IGVsZXNbZWxlcy5sZW5ndGggLSAxXTtcbiAgICAgIC8vIEdldCB0aGUgZGVmYXVsdCBwb3J0cyBvcmRlcmluZyBmb3IgdGhlIG5vZGVzIHdpdGggZ2l2ZW4gc2JnbmNsYXNzXG4gICAgICB2YXIgb3JkZXJpbmcgPSBkZWZhdWx0c1tcInBvcnRzLW9yZGVyaW5nXCJdO1xuXG4gICAgICAvLyBJZiB0aGVyZSBpcyBhIGRlZmF1bHQgcG9ydHMgb3JkZXJpbmcgZm9yIHRoZSBub2RlcyB3aXRoIGdpdmVuIHNiZ25jbGFzcyBhbmQgaXQgaXMgZGlmZmVyZW50IHRoYW4gJ25vbmUnIHNldCB0aGUgcG9ydHMgb3JkZXJpbmcgdG8gdGhhdCBvcmRlcmluZ1xuICAgICAgaWYgKG9yZGVyaW5nICYmIG9yZGVyaW5nICE9PSBcIm5vbmVcIikge1xuICAgICAgICB0aGlzLnNldFBvcnRzT3JkZXJpbmcobmV3Tm9kZSwgb3JkZXJpbmcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGxhbmd1YWdlID09IFwiQUZcIiAmJlxuICAgICAgICAhZWxlbWVudFV0aWxpdGllcy5jYW5IYXZlTXVsdGlwbGVVbml0T2ZJbmZvcm1hdGlvbihuZXdOb2RlKVxuICAgICAgKSB7XG4gICAgICAgIGlmIChzYmduY2xhc3MgIT0gXCJCQSBwbGFpblwiKSB7XG4gICAgICAgICAgLy8gaWYgQUYgbm9kZSBjYW4gaGF2ZSBsYWJlbCBpLmU6IG5vdCBwbGFpbiBiaW9sb2dpY2FsIGFjdGl2aXR5XG4gICAgICAgICAgdmFyIHVvaV9vYmogPSB7XG4gICAgICAgICAgICBjbGF6ejogXCJ1bml0IG9mIGluZm9ybWF0aW9uXCIsXG4gICAgICAgICAgfTtcbiAgICAgICAgICB1b2lfb2JqLmxhYmVsID0ge1xuICAgICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdW9pX29iai5iYm94ID0ge1xuICAgICAgICAgICAgdzogMTIsXG4gICAgICAgICAgICBoOiAxMixcbiAgICAgICAgICB9O1xuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuYWRkU3RhdGVPckluZm9Cb3gobmV3Tm9kZSwgdW9pX29iaik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gbm9kZSBiZyBpbWFnZSB3YXMgdW5leHBlY3RlZGx5IG5vdCByZW5kZXJlZCB1bnRpbCBpdCBpcyBjbGlja2VkXG4gICAgICAvLyB1c2UgdGhpcyBkaXJ0eSBoYWNrIHVudGlsIGZpbmRpbmcgYSBzb2x1dGlvbiB0byB0aGUgcHJvYmxlbVxuICAgICAgdmFyIGJnSW1hZ2UgPSBuZXdOb2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWltYWdlXCIpO1xuICAgICAgLy9hbGVydCgnYmdJbWFnZScsIGJnSW1hZ2UpXG4gICAgICBpZiAoYmdJbWFnZSkge1xuICAgICAgICBuZXdOb2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWltYWdlXCIsIGJnSW1hZ2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICB9O1xuXG4gICAgLy9TYXZlcyBvbGQgYXV4IHVuaXRzIG9mIGdpdmVuIG5vZGVcbiAgICBlbGVtZW50VXRpbGl0aWVzLnNhdmVVbml0cyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgdGVtcERhdGEgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICBub2RlLmRhdGEoXCJzdGF0ZXNhbmRpbmZvc1wiKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgdGVtcERhdGEucHVzaCh7XG4gICAgICAgICAgeDogZWxlLmJib3gueCxcbiAgICAgICAgICB5OiBlbGUuYmJveC55LFxuICAgICAgICAgIGFuY2hvclNpZGU6IGVsZS5hbmNob3JTaWRlLFxuICAgICAgICB9KTtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRlbXBEYXRhO1xuICAgIH07XG5cbiAgICAvL1Jlc3RvcmVzIGZyb20gZ2l2ZW4gZGF0YVxuICAgIGVsZW1lbnRVdGlsaXRpZXMucmVzdG9yZVVuaXRzID0gZnVuY3Rpb24gKG5vZGUsIGRhdGEpIHtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICBub2RlLmRhdGEoXCJzdGF0ZXNhbmRpbmZvc1wiKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVsZS5iYm94LnggPSBkYXRhW2luZGV4XS54O1xuICAgICAgICAgIGVsZS5iYm94LnkgPSBkYXRhW2luZGV4XS55O1xuICAgICAgICAgIHZhciBhbmNob3JTaWRlID0gZWxlLmFuY2hvclNpZGU7XG4gICAgICAgICAgZWxlLmFuY2hvclNpZGUgPSBkYXRhW2luZGV4XS5hbmNob3JTaWRlO1xuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMubW9kaWZ5VW5pdHMobm9kZSwgZWxlLCBhbmNob3JTaWRlKTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy9Nb2RpZnkgYXV4IHVuaXQgbGF5b3V0c1xuICAgIGVsZW1lbnRVdGlsaXRpZXMubW9kaWZ5VW5pdHMgPSBmdW5jdGlvbiAobm9kZSwgZWxlLCBhbmNob3JTaWRlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImVsZW1lbnRVdGlsaXRpZXMubW9kaWZ5VW5pdHNcIiwgbm9kZSk7XG4gICAgICBpbnN0YW5jZS5jbGFzc2VzLkF1eFVuaXRMYXlvdXQubW9kaWZ5VW5pdHMobm9kZSwgZWxlLCBhbmNob3JTaWRlLCBjeSk7XG4gICAgfTtcblxuICAgIC8vRm9yIHJldmVyc2libGUgcmVhY3Rpb25zIGJvdGggc2lkZSBvZiB0aGUgcHJvY2VzcyBjYW4gYmUgaW5wdXQvb3V0cHV0XG4gICAgLy9Hcm91cCBJRCBpZGVudGlmaWVzIHRvIHdoaWNoIGdyb3VwIG9mIG5vZGVzIHRoZSBlZGdlIGlzIGdvaW5nIHRvIGJlIGNvbm5lY3RlZCBmb3IgcmV2ZXJzaWJsZSByZWFjdGlvbnMoMDogZ3JvdXAgMSBJRCBhbmQgMTpncm91cCAyIElEKVxuICAgIGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZSA9IGZ1bmN0aW9uIChcbiAgICAgIHNvdXJjZSxcbiAgICAgIHRhcmdldCxcbiAgICAgIGVkZ2VQYXJhbXMsXG4gICAgICBpZCxcbiAgICAgIHZpc2liaWxpdHksXG4gICAgICBncm91cElEXG4gICAgKSB7XG5cbiAgICAgIGNvbnNvbGUubG9nKHNvdXJjZSxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBlZGdlUGFyYW1zLFxuICAgICAgICBpZCxcbiAgICAgICAgdmlzaWJpbGl0eSxcbiAgICAgICAgZ3JvdXBJRCk7XG4gICAgICBpZiAodHlwZW9mIGVkZ2VQYXJhbXMgIT0gXCJvYmplY3RcIikge1xuICAgICAgICB2YXIgc2JnbmNsYXNzID0gZWRnZVBhcmFtcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzYmduY2xhc3MgPSBlZGdlUGFyYW1zLmNsYXNzO1xuICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBlZGdlUGFyYW1zLmxhbmd1YWdlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3NzID0ge307XG5cbiAgICAgIGlmICh2aXNpYmlsaXR5KSB7XG4gICAgICAgIGNzcy52aXNpYmlsaXR5ID0gdmlzaWJpbGl0eTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgY2xhc3M6IHNiZ25jbGFzcyxcbiAgICAgICAgbGFuZ3VhZ2U6IGxhbmd1YWdlLFxuICAgICAgfTtcblxuICAgICAgdmFyIGRlZmF1bHRzID0gZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhzYmduY2xhc3MpO1xuICAgICAgLy8gZXh0ZW5kIHRoZSBkYXRhIHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzIG9mIGVkZ2Ugc3R5bGVcbiAgICAgIE9iamVjdC5rZXlzKGRlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIGRhdGFbcHJvcF0gPSBkZWZhdWx0c1twcm9wXTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgZGF0YS5pZCA9IGlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YS5pZCA9IGVsZW1lbnRVdGlsaXRpZXMuZ2VuZXJhdGVFZGdlSWQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnRVdGlsaXRpZXMuY2FuSGF2ZVNCR05DYXJkaW5hbGl0eShzYmduY2xhc3MpKSB7XG4gICAgICAgIGRhdGEuY2FyZGluYWxpdHkgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHNvdXJjZU5vZGUgPSBjeS5nZXRFbGVtZW50QnlJZChzb3VyY2UpOyAvLyBUaGUgb3JpZ2luYWwgc291cmNlIG5vZGVcbiAgICAgIHZhciB0YXJnZXROb2RlID0gY3kuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0KTsgLy8gVGhlIG9yaWdpbmFsIHRhcmdldCBub2RlXG4gICAgICB2YXIgc291cmNlSGFzUG9ydHMgPSBzb3VyY2VOb2RlLmRhdGEoXCJwb3J0c1wiKS5sZW5ndGggPT09IDI7XG4gICAgICB2YXIgdGFyZ2V0SGFzUG9ydHMgPSB0YXJnZXROb2RlLmRhdGEoXCJwb3J0c1wiKS5sZW5ndGggPT09IDI7XG4gICAgICAvLyBUaGUgcG9ydHNvdXJjZSBhbmQgcG9ydHRhcmdldCB2YXJpYWJsZXNcbiAgICAgIHZhciBwb3J0c291cmNlO1xuICAgICAgdmFyIHBvcnR0YXJnZXQ7XG5cblxuICAgICAgLypcbiAgICAgICAqIEdldCBpbnB1dC9vdXRwdXQgcG9ydCBpZCdzIG9mIGEgbm9kZSB3aXRoIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhlIG5vZGUgaGFzIHZhbGlkIHBvcnRzLlxuICAgICAgICovXG4gICAgICB2YXIgZ2V0SU9Qb3J0SWRzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIG5vZGVJbnB1dFBvcnRJZCwgbm9kZU91dHB1dFBvcnRJZDtcbiAgICAgICAgdmFyIG5vZGVQb3J0c09yZGVyaW5nID1cbiAgICAgICAgICBzYmdudml6SW5zdGFuY2UuZWxlbWVudFV0aWxpdGllcy5nZXRQb3J0c09yZGVyaW5nKG5vZGUpO1xuICAgICAgICB2YXIgbm9kZVBvcnRzID0gbm9kZS5kYXRhKFwicG9ydHNcIik7XG4gICAgICAgIGlmIChub2RlUG9ydHNPcmRlcmluZyA9PT0gXCJMLXRvLVJcIiB8fCBub2RlUG9ydHNPcmRlcmluZyA9PT0gXCJSLXRvLUxcIikge1xuICAgICAgICAgIHZhciBsZWZ0UG9ydElkID1cbiAgICAgICAgICAgIG5vZGVQb3J0c1swXS54IDwgMCA/IG5vZGVQb3J0c1swXS5pZCA6IG5vZGVQb3J0c1sxXS5pZDsgLy8gVGhlIHggdmFsdWUgb2YgbGVmdCBwb3J0IGlzIHN1cHBvc2VkIHRvIGJlIG5lZ2F0aXZlXG4gICAgICAgICAgdmFyIHJpZ2h0UG9ydElkID1cbiAgICAgICAgICAgIG5vZGVQb3J0c1swXS54ID4gMCA/IG5vZGVQb3J0c1swXS5pZCA6IG5vZGVQb3J0c1sxXS5pZDsgLy8gVGhlIHggdmFsdWUgb2YgcmlnaHQgcG9ydCBpcyBzdXBwb3NlZCB0byBiZSBwb3NpdGl2ZVxuICAgICAgICAgIC8qXG4gICAgICAgICAgICogSWYgdGhlIHBvcnQgb3JkZXJpbmcgaXMgbGVmdCB0byByaWdodCB0aGVuIHRoZSBpbnB1dCBwb3J0IGlzIHRoZSBsZWZ0IHBvcnQgYW5kIHRoZSBvdXRwdXQgcG9ydCBpcyB0aGUgcmlnaHQgcG9ydC5cbiAgICAgICAgICAgKiBFbHNlIGlmIGl0IGlzIHJpZ2h0IHRvIGxlZnQgaXQgaXMgdmljZSB2ZXJzYVxuICAgICAgICAgICAqL1xuICAgICAgICAgIG5vZGVJbnB1dFBvcnRJZCA9XG4gICAgICAgICAgICBub2RlUG9ydHNPcmRlcmluZyA9PT0gXCJMLXRvLVJcIiA/IGxlZnRQb3J0SWQgOiByaWdodFBvcnRJZDtcbiAgICAgICAgICBub2RlT3V0cHV0UG9ydElkID1cbiAgICAgICAgICAgIG5vZGVQb3J0c09yZGVyaW5nID09PSBcIlItdG8tTFwiID8gbGVmdFBvcnRJZCA6IHJpZ2h0UG9ydElkO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIG5vZGVQb3J0c09yZGVyaW5nID09PSBcIlQtdG8tQlwiIHx8XG4gICAgICAgICAgbm9kZVBvcnRzT3JkZXJpbmcgPT09IFwiQi10by1UXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIHRvcFBvcnRJZCA9XG4gICAgICAgICAgICBub2RlUG9ydHNbMF0ueSA8IDAgPyBub2RlUG9ydHNbMF0uaWQgOiBub2RlUG9ydHNbMV0uaWQ7IC8vIFRoZSB5IHZhbHVlIG9mIHRvcCBwb3J0IGlzIHN1cHBvc2VkIHRvIGJlIG5lZ2F0aXZlXG4gICAgICAgICAgdmFyIGJvdHRvbVBvcnRJZCA9XG4gICAgICAgICAgICBub2RlUG9ydHNbMF0ueSA+IDAgPyBub2RlUG9ydHNbMF0uaWQgOiBub2RlUG9ydHNbMV0uaWQ7IC8vIFRoZSB5IHZhbHVlIG9mIGJvdHRvbSBwb3J0IGlzIHN1cHBvc2VkIHRvIGJlIHBvc2l0aXZlXG4gICAgICAgICAgLypcbiAgICAgICAgICAgKiBJZiB0aGUgcG9ydCBvcmRlcmluZyBpcyB0b3AgdG8gYm90dG9tIHRoZW4gdGhlIGlucHV0IHBvcnQgaXMgdGhlIHRvcCBwb3J0IGFuZCB0aGUgb3V0cHV0IHBvcnQgaXMgdGhlIGJvdHRvbSBwb3J0LlxuICAgICAgICAgICAqIEVsc2UgaWYgaXQgaXMgcmlnaHQgdG8gbGVmdCBpdCBpcyB2aWNlIHZlcnNhXG4gICAgICAgICAgICovXG4gICAgICAgICAgbm9kZUlucHV0UG9ydElkID1cbiAgICAgICAgICAgIG5vZGVQb3J0c09yZGVyaW5nID09PSBcIlQtdG8tQlwiID8gdG9wUG9ydElkIDogYm90dG9tUG9ydElkO1xuICAgICAgICAgIG5vZGVPdXRwdXRQb3J0SWQgPVxuICAgICAgICAgICAgbm9kZVBvcnRzT3JkZXJpbmcgPT09IFwiQi10by1UXCIgPyB0b3BQb3J0SWQgOiBib3R0b21Qb3J0SWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIElPIHBvcnRzIG9mIHRoZSBub2RlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5wdXRQb3J0SWQ6IG5vZGVJbnB1dFBvcnRJZCxcbiAgICAgICAgICBvdXRwdXRQb3J0SWQ6IG5vZGVPdXRwdXRQb3J0SWQsXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgLy8gSWYgYXQgbGVhc3Qgb25lIGVuZCBvZiB0aGUgZWRnZSBoYXMgcG9ydHMgdGhlbiB3ZSBzaG91bGQgZGV0ZXJtaW5lIHRoZSBwb3J0cyB3aGVyZSB0aGUgZWRnZSBzaG91bGQgYmUgY29ubmVjdGVkLlxuICAgICAgaWYgKHNvdXJjZUhhc1BvcnRzIHx8IHRhcmdldEhhc1BvcnRzKSB7XG4gICAgICAgIHZhciBzb3VyY2VOb2RlSW5wdXRQb3J0SWQsXG4gICAgICAgICAgc291cmNlTm9kZU91dHB1dFBvcnRJZCxcbiAgICAgICAgICB0YXJnZXROb2RlSW5wdXRQb3J0SWQsXG4gICAgICAgICAgdGFyZ2V0Tm9kZU91dHB1dFBvcnRJZDtcblxuICAgICAgICAvLyBJZiBzb3VyY2Ugbm9kZSBoYXMgcG9ydHMgc2V0IHRoZSB2YXJpYWJsZXMgZGVkaWNhdGVkIGZvciBpdHMgSU8gcG9ydHNcbiAgICAgICAgaWYgKHNvdXJjZUhhc1BvcnRzKSB7XG4gICAgICAgICAgdmFyIGlvUG9ydHMgPSBnZXRJT1BvcnRJZHMoc291cmNlTm9kZSk7XG4gICAgICAgICAgc291cmNlTm9kZUlucHV0UG9ydElkID0gaW9Qb3J0cy5pbnB1dFBvcnRJZDtcbiAgICAgICAgICBzb3VyY2VOb2RlT3V0cHV0UG9ydElkID0gaW9Qb3J0cy5vdXRwdXRQb3J0SWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAmJiAoZWxlbWVudFV0aWxpdGllcy5pc01vZHVsYXRpb25BcmNDbGFzcyhzYmduY2xhc3MpICYmIClcbiAgICAgICAgLy8gSWYgdGFyZ2V0IG5vZGUgaGFzIHBvcnRzIHNldCB0aGUgdmFyaWFibGVzIGRlZGljYXRlZCBmb3IgaXRzIElPIHBvcnRzXG4gICAgICAgIGlmICh0YXJnZXRIYXNQb3J0cyAmJiAhKGVsZW1lbnRVdGlsaXRpZXMuaXNNb2R1bGF0aW9uQXJjQ2xhc3Moc2JnbmNsYXNzKSAmJiBlbGVtZW50VXRpbGl0aWVzLmlzUHJvY2Vzc05vZGUodGFyZ2V0Tm9kZS5kYXRhKCdjbGFzcycpKSkpIHtcbiAgICAgICAgICB2YXIgaW9Qb3J0cyA9IGdldElPUG9ydElkcyh0YXJnZXROb2RlKTtcbiAgICAgICAgICB0YXJnZXROb2RlSW5wdXRQb3J0SWQgPSBpb1BvcnRzLmlucHV0UG9ydElkO1xuICAgICAgICAgIHRhcmdldE5vZGVPdXRwdXRQb3J0SWQgPSBpb1BvcnRzLm91dHB1dFBvcnRJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBzYmduY2xhc3MgPT09IFwiY29uc3VtcHRpb25cIiB8fFxuICAgICAgICAgIHNiZ25jbGFzcyA9PT0gXCJ0cmFuc2xhdGlvbiBjb25zdW1wdGlvblwiIHx8XG4gICAgICAgICAgc2JnbmNsYXNzID09PSBcInRyYW5zY3JpcHRpb24gY29uc3VtcHRpb25cIlxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBBIGNvbnN1bXB0aW9uIGVkZ2Ugc2hvdWxkIGJlIGNvbm5lY3RlZCB0byB0aGUgaW5wdXQgcG9ydCBvZiB0aGUgdGFyZ2V0IG5vZGUgd2hpY2ggaXMgc3VwcG9zZWQgdG8gYmUgYSBwcm9jZXNzIChhbnkga2luZCBvZilcbiAgICAgICAgICBwb3J0c291cmNlID0gc291cmNlTm9kZU91dHB1dFBvcnRJZDtcbiAgICAgICAgICBwb3J0dGFyZ2V0ID0gdGFyZ2V0Tm9kZUlucHV0UG9ydElkO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNiZ25jbGFzcyA9PT0gXCJwcm9kdWN0aW9uXCIgfHxcbiAgICAgICAgICBzYmduY2xhc3MgPT09IFwidHJhbnNsYXRpb24gcHJvZHVjdGlvblwiIHx8XG4gICAgICAgICAgc2JnbmNsYXNzID09PSBcInRyYW5zY3JpcHRpb24gcHJvZHVjdGlvblwifHxcbiAgICAgICAgICBzYmduY2xhc3MgPT09IFwidHJhbnNwb3J0XCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gQSBwcm9kdWN0aW9uIGVkZ2Ugc2hvdWxkIGJlIGNvbm5lY3RlZCB0byB0aGUgb3V0cHV0IHBvcnQgb2YgdGhlIHNvdXJjZSBub2RlIHdoaWNoIGlzIHN1cHBvc2VkIHRvIGJlIGEgcHJvY2VzcyAoYW55IGtpbmQgb2YpXG4gICAgICAgICAgLy8gQSBtb2R1bGF0aW9uIGVkZ2UgbWF5IGhhdmUgYSBsb2dpY2FsIG9wZXJhdG9yIGFzIHNvdXJjZSBub2RlIGluIHRoaXMgY2FzZSB0aGUgZWRnZSBzaG91bGQgYmUgY29ubmVjdGVkIHRvIHRoZSBvdXRwdXQgcG9ydCBvZiBpdFxuICAgICAgICAgIC8vIFRoZSBiZWxvdyBhc3NpZ25tZW50IHNhdGlzZnkgYWxsIG9mIHRoZXNlIGNvbmRpdGlvblxuICAgICAgICAgIGlmIChncm91cElEID09IDAgfHwgZ3JvdXBJRCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIGdyb3VwSUQgMCBmb3IgcmV2ZXJzaWJsZSByZWFjdGlvbnMgZ3JvdXAgMFxuICAgICAgICAgICAgcG9ydHNvdXJjZSA9IHNvdXJjZU5vZGVPdXRwdXRQb3J0SWQ7XG4gICAgICAgICAgICBwb3J0dGFyZ2V0ID0gdGFyZ2V0Tm9kZUlucHV0UG9ydElkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL2lmIHJlYWN0aW9uIGlzIHJldmVyc2libGUgYW5kIGVkZ2UgYmVsb25ncyB0byBncm91cCAxXG4gICAgICAgICAgICBwb3J0c291cmNlID0gc291cmNlTm9kZUlucHV0UG9ydElkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmlzTW9kdWxhdGlvbkFyY0NsYXNzKHNiZ25jbGFzcykgfHxcbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmlzQUZBcmNDbGFzcyhzYmduY2xhc3MpIHx8XG4gICAgICAgICAgZWxlbWVudFV0aWxpdGllcy5pc1NCTUxBcmNDbGFzcyhzYmduY2xhc3MpIHx8XG4gICAgICAgICAgZWxlbWVudFV0aWxpdGllcy5pc0xvZ2ljQXJjKHNiZ25jbGFzcylcbiAgICAgICAgKSB7XG4gICAgICAgICAgcG9ydHNvdXJjZSA9IHNvdXJjZU5vZGVPdXRwdXRQb3J0SWQ7XG4gICAgICAgICAgcG9ydHRhcmdldCA9IHRhcmdldE5vZGVJbnB1dFBvcnRJZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgZGVmYXVsdCBwb3J0c291cmNlL3BvcnR0YXJnZXQgYXJlIHRoZSBzb3VyY2UvdGFyZ2V0IHRoZW1zZWx2ZXMuIElmIHRoZXkgYXJlIG5vdCBzZXQgdXNlIHRoZXNlIGRlZmF1bHRzLlxuICAgICAgLy8gVGhlIHBvcnRzb3VyY2UgYW5kIHBvcnR0YXJnZXQgYXJlIGRldGVybWluZWQgc2V0IHRoZW0gaW4gZGF0YSBvYmplY3QuXG4gICAgICBkYXRhLnBvcnRzb3VyY2UgPSBwb3J0c291cmNlIHx8IHNvdXJjZTtcbiAgICAgIGRhdGEucG9ydHRhcmdldCA9IHBvcnR0YXJnZXQgfHwgdGFyZ2V0O1xuXG4gICAgICB2YXIgZWxlcyA9IGN5LmFkZCh7XG4gICAgICAgIGdyb3VwOiBcImVkZ2VzXCIsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGNzczogY3NzLFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBuZXdFZGdlID0gZWxlc1tlbGVzLmxlbmd0aCAtIDFdO1xuXG4gICAgICByZXR1cm4gbmV3RWRnZTtcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5hZGRQcm9jZXNzV2l0aENvbnZlbmllbnRFZGdlcyA9IGZ1bmN0aW9uIChcbiAgICAgIF9zb3VyY2UsXG4gICAgICBfdGFyZ2V0LFxuICAgICAgbm9kZVBhcmFtc1xuICAgICkge1xuICAgICAgLy8gSWYgc291cmNlIGFuZCB0YXJnZXQgSURzIGFyZSBnaXZlbiBnZXQgdGhlIGVsZW1lbnRzIGJ5IElEc1xuICAgICAgdmFyIHNvdXJjZSA9XG4gICAgICAgIHR5cGVvZiBfc291cmNlID09PSBcInN0cmluZ1wiID8gY3kuZ2V0RWxlbWVudEJ5SWQoX3NvdXJjZSkgOiBfc291cmNlO1xuICAgICAgdmFyIHRhcmdldCA9XG4gICAgICAgIHR5cGVvZiBfdGFyZ2V0ID09PSBcInN0cmluZ1wiID8gY3kuZ2V0RWxlbWVudEJ5SWQoX3RhcmdldCkgOiBfdGFyZ2V0O1xuXG4gICAgICAvLyBQcm9jZXNzIHBhcmVudCBzaG91bGQgYmUgdGhlIGNsb3Nlc3QgY29tbW9uIGFuY2VzdG9yIG9mIHRoZSBzb3VyY2UgYW5kIHRhcmdldCBub2Rlc1xuICAgICAgdmFyIHByb2Nlc3NQYXJlbnQgPSBjeVxuICAgICAgICAuY29sbGVjdGlvbihbc291cmNlWzBdLCB0YXJnZXRbMF1dKVxuICAgICAgICAuY29tbW9uQW5jZXN0b3JzKClcbiAgICAgICAgLmZpcnN0KCk7XG5cbiAgICAgIC8vIFByb2Nlc3Mgc2hvdWxkIGJlIGF0IHRoZSBtaWRkbGUgb2YgdGhlIHNvdXJjZSBhbmQgdGFyZ2V0IG5vZGVzXG4gICAgICB2YXIgeCA9IChzb3VyY2UucG9zaXRpb24oXCJ4XCIpICsgdGFyZ2V0LnBvc2l0aW9uKFwieFwiKSkgLyAyO1xuICAgICAgdmFyIHkgPSAoc291cmNlLnBvc2l0aW9uKFwieVwiKSArIHRhcmdldC5wb3NpdGlvbihcInlcIikpIC8gMjtcblxuICAgICAgLy8gQ3JlYXRlIHRoZSBwcm9jZXNzIHdpdGggZ2l2ZW4vY2FsY3VsYXRlZCB2YXJpYWJsZXNcbiAgICAgIHZhciBwcm9jZXNzID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBub2RlUGFyYW1zLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHByb2Nlc3NQYXJlbnQuaWQoKVxuICAgICAgKTtcbiAgICAgIHZhciB4ZGlmZiA9IHNvdXJjZS5wb3NpdGlvbihcInhcIikgLSB0YXJnZXQucG9zaXRpb24oXCJ4XCIpO1xuICAgICAgdmFyIHlkaWZmID0gc291cmNlLnBvc2l0aW9uKFwieVwiKSAtIHRhcmdldC5wb3NpdGlvbihcInlcIik7XG4gICAgICBpZiAoTWF0aC5hYnMoeGRpZmYpID49IE1hdGguYWJzKHlkaWZmKSkge1xuICAgICAgICBpZiAoeGRpZmYgPCAwKSBlbGVtZW50VXRpbGl0aWVzLnNldFBvcnRzT3JkZXJpbmcocHJvY2VzcywgXCJMLXRvLVJcIik7XG4gICAgICAgIGVsc2UgZWxlbWVudFV0aWxpdGllcy5zZXRQb3J0c09yZGVyaW5nKHByb2Nlc3MsIFwiUi10by1MXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHlkaWZmIDwgMCkgZWxlbWVudFV0aWxpdGllcy5zZXRQb3J0c09yZGVyaW5nKHByb2Nlc3MsIFwiVC10by1CXCIpO1xuICAgICAgICBlbHNlIGVsZW1lbnRVdGlsaXRpZXMuc2V0UG9ydHNPcmRlcmluZyhwcm9jZXNzLCBcIkItdG8tVFwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIHRoZSBlZGdlcyBvbmUgaXMgYmV0d2VlbiB0aGUgcHJvY2VzcyBhbmQgdGhlIHNvdXJjZSBub2RlICh3aGljaCBzaG91bGQgYmUgYSBjb25zdW1wdGlvbiksXG4gICAgICAvLyB0aGUgb3RoZXIgb25lIGlzIGJldHdlZW4gdGhlIHByb2Nlc3MgYW5kIHRoZSB0YXJnZXQgbm9kZSAod2hpY2ggc2hvdWxkIGJlIGEgcHJvZHVjdGlvbikuXG4gICAgICAvLyBGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2UgcmVmZXIgdG8gU0JHTi1QRCByZWZlcmVuY2UgY2FyZC5cbiAgICAgIHZhciBlZGdlQnR3U3JjID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKHNvdXJjZS5pZCgpLCBwcm9jZXNzLmlkKCksIHtcbiAgICAgICAgY2xhc3M6IFwiY29uc3VtcHRpb25cIixcbiAgICAgICAgbGFuZ3VhZ2U6IG5vZGVQYXJhbXMubGFuZ3VhZ2UsXG4gICAgICB9KTtcbiAgICAgIHZhciBlZGdlQnR3VGd0ID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKHByb2Nlc3MuaWQoKSwgdGFyZ2V0LmlkKCksIHtcbiAgICAgICAgY2xhc3M6IFwicHJvZHVjdGlvblwiLFxuICAgICAgICBsYW5ndWFnZTogbm9kZVBhcmFtcy5sYW5ndWFnZSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgYSBjb2xsZWN0aW9uIGluY2x1ZGluZyB0aGUgZWxlbWVudHMgYW5kIHRvIGJlIHJldHVybmVkXG4gICAgICB2YXIgY29sbGVjdGlvbiA9IGN5LmNvbGxlY3Rpb24oW1xuICAgICAgICBwcm9jZXNzWzBdLFxuICAgICAgICBlZGdlQnR3U3JjWzBdLFxuICAgICAgICBlZGdlQnR3VGd0WzBdLFxuICAgICAgXSk7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBUaGlzIG1ldGhvZCBhc3N1bWVzIHRoYXQgcGFyYW0ubm9kZXNUb01ha2VDb21wb3VuZCBjb250YWlucyBhdCBsZWFzdCBvbmUgbm9kZVxuICAgICAqIGFuZCBhbGwgb2YgdGhlIG5vZGVzIGluY2x1ZGluZyBpbiBpdCBoYXZlIHRoZSBzYW1lIHBhcmVudC4gSXQgY3JlYXRlcyBhIGNvbXBvdW5kIGZvdCB0aGUgZ2l2ZW4gbm9kZXMgYW4gaGF2aW5nIHRoZSBnaXZlbiB0eXBlLlxuICAgICAqL1xuICAgIGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlQ29tcG91bmRGb3JHaXZlbk5vZGVzID0gZnVuY3Rpb24gKFxuICAgICAgbm9kZXNUb01ha2VDb21wb3VuZCxcbiAgICAgIGNvbXBvdW5kVHlwZVxuICAgICkge1xuICAgICAgdmFyIG9sZFBhcmVudElkID0gbm9kZXNUb01ha2VDb21wb3VuZFswXS5kYXRhKFwicGFyZW50XCIpO1xuICAgICAgdmFyIGxhbmd1YWdlID0gbm9kZXNUb01ha2VDb21wb3VuZFswXS5kYXRhKFwibGFuZ3VhZ2VcIik7XG4gICAgICAvLyBpZiBub2Rlc1RvTWFrZUNvbXBvdW5kIGNvbnRhaW4gYm90aCBQRCBhbmQgQUYgbm9kZXMsIHRoZW4gc2V0IGxhbmd1YWdlIG9mIGNvbXBvdW5kIGFzIFVua25vd25cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbm9kZXNUb01ha2VDb21wb3VuZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobm9kZXNUb01ha2VDb21wb3VuZFtpXSAhPSBsYW5ndWFnZSkge1xuICAgICAgICAgIGxhbmd1YWdlID0gXCJVbmtub3duXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFRoZSBwYXJlbnQgb2YgbmV3IGNvbXBvdW5kIHdpbGwgYmUgdGhlIG9sZCBwYXJlbnQgb2YgdGhlIG5vZGVzIHRvIG1ha2UgY29tcG91bmQuIHgsIHkgYW5kIGlkIHBhcmFtZXRlcnMgYXJlIG5vdCBzZXQuXG4gICAgICB2YXIgbmV3Q29tcG91bmQgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB7IGNsYXNzOiBjb21wb3VuZFR5cGUsIGxhbmd1YWdlOiBsYW5ndWFnZSB9LFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIG9sZFBhcmVudElkXG4gICAgICApO1xuICAgICAgdmFyIG5ld0NvbXBvdW5kSWQgPSBuZXdDb21wb3VuZC5pZCgpO1xuICAgICAgdmFyIG5ld0VsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmNoYW5nZVBhcmVudChcbiAgICAgICAgbm9kZXNUb01ha2VDb21wb3VuZCxcbiAgICAgICAgbmV3Q29tcG91bmRJZFxuICAgICAgKTtcbiAgICAgIG5ld0VsZXMgPSBuZXdFbGVzLnVuaW9uKG5ld0NvbXBvdW5kKTtcbiAgICAgIHJldHVybiBuZXdFbGVzO1xuICAgIH07XG5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZVRyYW5zbGF0aW9uUmVhY3Rpb24gPSBmdW5jdGlvbiAoXG4gICAgICBtUm5hTmFtZSxcbiAgICAgIHByb3RlaW5OYW1lLFxuICAgICAgcHJvY2Vzc1Bvc2l0aW9uLFxuICAgICAgZWRnZUxlbmd0aFxuICAgICkge1xuICAgICAgY29uc3QgZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcInRyYW5zbGF0aW9uXCIpO1xuICAgICAgY29uc3QgZGVmYXVsdFNvdXJjZUFuZFNpbmtQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcImVtcHR5IHNldFwiKTtcbiAgICAgIGNvbnN0IGRlZmF1bHROdWNsZWljQWNpZEZlYXR1cmVQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcIm51Y2xlaWMgYWNpZCBmZWF0dXJlXCIpO1xuICAgICAgY29uc3QgZGVmYXVsdE1hY3JvbW9sZWN1bGVQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcIm1hY3JvbW9sZWN1bGVcIik7XG4gICAgICBjb25zdCBtYWNyb21vbGVjdWxlV2lkdGggPSBkZWZhdWx0TWFjcm9tb2xlY3VsZVByb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICBjb25zdCBzb3VyY2VBbmRTaW5rV2lkdGggPSBkZWZhdWx0U291cmNlQW5kU2lua1Byb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICBjb25zdCBudWNsZWljQWNpZEZlYXR1cmVIZWlnaHQgPVxuICAgICAgICBkZWZhdWx0TnVjbGVpY0FjaWRGZWF0dXJlUHJvcGVydGllcy5oZWlnaHQgfHwgNTA7XG4gICAgICBjb25zdCBwcm9jZXNzV2lkdGggPSBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICBjb25zdCBwcm9jZXNzSGVpZ2h0ID0gZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzLmhlaWdodCB8fCA1MDtcbiAgICAgIHZhciBwcm9jZXNzUG9zaXRpb24gPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24gfHxcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5jb252ZXJ0VG9Nb2RlbFBvc2l0aW9uKHtcbiAgICAgICAgICB4OiBjeS53aWR0aCgpIC8gMixcbiAgICAgICAgICB5OiBjeS5oZWlnaHQoKSAvIDIsXG4gICAgICAgIH0pO1xuICAgICAgdmFyIGVkZ2VMZW5ndGggPSBlZGdlTGVuZ3RoIHx8IDYwO1xuXG4gICAgICBjeS5zdGFydEJhdGNoKCk7XG4gICAgICBpZiAoIWVsZW1lbnRVdGlsaXRpZXMuZ2V0TWFwVHlwZSgpKSB7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0TWFwVHlwZShcIlBEXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvY2Vzc05vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54LFxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSxcbiAgICAgICAgeyBjbGFzczogXCJwcm9jZXNzXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0UG9ydHNPcmRlcmluZyhwcm9jZXNzTm9kZSwgXCJMLXRvLVJcIik7XG4gICAgICBwcm9jZXNzTm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBjb25zdCB4UG9zT2ZTb3VyY2VBbmRTaW5rTm9kZSA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54IC1cbiAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgLVxuICAgICAgICBzb3VyY2VBbmRTaW5rV2lkdGggLyAyO1xuICAgICAgY29uc3QgeVBvc09mU291cmNlQW5kU2lua05vZGUgPSBwcm9jZXNzUG9zaXRpb24ueTtcbiAgICAgIHZhciBzb3VyY2VBbmRTaW5rTm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgeFBvc09mU291cmNlQW5kU2lua05vZGUsXG4gICAgICAgIHlQb3NPZlNvdXJjZUFuZFNpbmtOb2RlLFxuICAgICAgICB7IGNsYXNzOiBcImVtcHR5IHNldFwiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBzb3VyY2VBbmRTaW5rTm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICB2YXIgY29uc3VtcHRpb25FZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKFxuICAgICAgICBzb3VyY2VBbmRTaW5rTm9kZS5pZCgpLFxuICAgICAgICBwcm9jZXNzTm9kZS5pZCgpLFxuICAgICAgICB7IGNsYXNzOiBcImNvbnN1bXB0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIGNvbnN1bXB0aW9uRWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBjb25zdCB4UG9zT2ZtUm5hTm9kZSA9IHByb2Nlc3NQb3NpdGlvbi54O1xuICAgICAgY29uc3QgeVBvc09mbVJuYU5vZGUgPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSAtXG4gICAgICAgIGVkZ2VMZW5ndGggLVxuICAgICAgICBwcm9jZXNzSGVpZ2h0IC8gMiAtXG4gICAgICAgIG51Y2xlaWNBY2lkRmVhdHVyZUhlaWdodCAvIDI7XG4gICAgICB2YXIgbVJuYU5vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoeFBvc09mbVJuYU5vZGUsIHlQb3NPZm1SbmFOb2RlLCB7XG4gICAgICAgIGNsYXNzOiBcIm51Y2xlaWMgYWNpZCBmZWF0dXJlXCIsXG4gICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICB9KTtcbiAgICAgIG1SbmFOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICBtUm5hTm9kZS5kYXRhKFwibGFiZWxcIiwgbVJuYU5hbWUpO1xuICAgICAgY29uc3QgaW5mb2JveE9iamVjdE9mR2VuZSA9IHtcbiAgICAgICAgY2xheno6IFwidW5pdCBvZiBpbmZvcm1hdGlvblwiLFxuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgIHRleHQ6IFwiY3Q6bVJOQVwiLFxuICAgICAgICB9LFxuICAgICAgICBiYm94OiB7XG4gICAgICAgICAgdzogNDUsXG4gICAgICAgICAgaDogMTUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5hZGRTdGF0ZU9ySW5mb0JveChtUm5hTm9kZSwgaW5mb2JveE9iamVjdE9mR2VuZSk7XG5cbiAgICAgIHZhciBuZWNlc3NhcnlTdGltdWxhdGlvbkVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UoXG4gICAgICAgIG1SbmFOb2RlLmlkKCksXG4gICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgIHsgY2xhc3M6IFwibmVjZXNzYXJ5IHN0aW11bGF0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIG5lY2Vzc2FyeVN0aW11bGF0aW9uRWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBjb25zdCB4UG9zT2ZQcm90ZWluTm9kZSA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54ICtcbiAgICAgICAgZWRnZUxlbmd0aCArXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgK1xuICAgICAgICBtYWNyb21vbGVjdWxlV2lkdGggLyAyO1xuICAgICAgY29uc3QgeVBvc3RPZlByb3RlaW5Ob2RlID0gcHJvY2Vzc1Bvc2l0aW9uLnk7XG4gICAgICB2YXIgcHJvdGVpbk5vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgIHhQb3NPZlByb3RlaW5Ob2RlLFxuICAgICAgICB5UG9zdE9mUHJvdGVpbk5vZGUsXG4gICAgICAgIHsgY2xhc3M6IFwibWFjcm9tb2xlY3VsZVwiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBwcm90ZWluTm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgcHJvdGVpbk5vZGUuZGF0YShcImxhYmVsXCIsIHByb3RlaW5OYW1lKTtcblxuICAgICAgdmFyIHByb2R1Y3Rpb25FZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKFxuICAgICAgICBwcm9jZXNzTm9kZS5pZCgpLFxuICAgICAgICBwcm90ZWluTm9kZS5pZCgpLFxuICAgICAgICB7IGNsYXNzOiBcInByb2R1Y3Rpb25cIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgcHJvZHVjdGlvbkVkZ2UuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcblxuICAgICAgY3kuZW5kQmF0Y2goKTtcblxuICAgICAgLy9maWx0ZXIgdGhlIGp1c3QgYWRkZWQgZWxlbWVtdHMgdG8gcmV0dXJuIHRoZW0gYW5kIHJlbW92ZSBqdXN0IGFkZGVkIG1hcmtcbiAgICAgIHZhciBlbGVzID0gY3kuZWxlbWVudHMoXCJbanVzdEFkZGVkXVwiKTtcbiAgICAgIGVsZXMucmVtb3ZlRGF0YShcImp1c3RBZGRlZFwiKTtcblxuICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgZWxlcy5zZWxlY3QoKTtcblxuICAgICAgcmV0dXJuIGVsZXM7IC8vIFJldHVybiB0aGUganVzdCBhZGRlZCBlbGVtZW50c1xuICAgIH07XG5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZVRyYW5zY3JpcHRpb25SZWFjdGlvbiA9IGZ1bmN0aW9uIChcbiAgICAgIGdlbmVOYW1lLFxuICAgICAgbVJuYU5hbWUsXG4gICAgICBwcm9jZXNzUG9zaXRpb24sXG4gICAgICBlZGdlTGVuZ3RoXG4gICAgKSB7XG4gICAgICBjb25zdCBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwidHJhbnNjcmlwdGlvblwiKTtcbiAgICAgIGNvbnN0IGRlZmF1bHRTb3VyY2VBbmRTaW5rUHJvcGVydGllcyA9XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMoXCJlbXB0eSBzZXRcIik7XG4gICAgICBjb25zdCBkZWZhdWx0TnVjbGVpY0FjaWRGZWF0dXJlUHJvcGVydGllcyA9XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMoXCJudWNsZWljIGFjaWQgZmVhdHVyZVwiKTtcbiAgICAgIGNvbnN0IHNvdXJjZUFuZFNpbmtXaWR0aCA9IGRlZmF1bHRTb3VyY2VBbmRTaW5rUHJvcGVydGllcy53aWR0aCB8fCA1MDtcbiAgICAgIGNvbnN0IG51Y2xlaWNBY2lkRmVhdHVyZUhlaWdodCA9XG4gICAgICAgIGRlZmF1bHROdWNsZWljQWNpZEZlYXR1cmVQcm9wZXJ0aWVzLmhlaWdodCB8fCA1MDtcbiAgICAgIGNvbnN0IG51Y2xlaWNBY2lkRmVhdHVyZVdpZHRoID1cbiAgICAgICAgZGVmYXVsdE51Y2xlaWNBY2lkRmVhdHVyZVByb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICBjb25zdCBwcm9jZXNzV2lkdGggPSBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICBjb25zdCBwcm9jZXNzSGVpZ2h0ID0gZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzLmhlaWdodCB8fCA1MDtcbiAgICAgIHZhciBwcm9jZXNzUG9zaXRpb24gPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24gfHxcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5jb252ZXJ0VG9Nb2RlbFBvc2l0aW9uKHtcbiAgICAgICAgICB4OiBjeS53aWR0aCgpIC8gMixcbiAgICAgICAgICB5OiBjeS5oZWlnaHQoKSAvIDIsXG4gICAgICAgIH0pO1xuICAgICAgdmFyIGVkZ2VMZW5ndGggPSBlZGdlTGVuZ3RoIHx8IDYwO1xuXG4gICAgICBjeS5zdGFydEJhdGNoKCk7XG4gICAgICBpZiAoIWVsZW1lbnRVdGlsaXRpZXMuZ2V0TWFwVHlwZSgpKSB7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0TWFwVHlwZShcIlBEXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvY2Vzc05vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54LFxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSxcbiAgICAgICAgeyBjbGFzczogXCJwcm9jZXNzXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0UG9ydHNPcmRlcmluZyhwcm9jZXNzTm9kZSwgXCJMLXRvLVJcIik7XG4gICAgICBwcm9jZXNzTm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBjb25zdCB4UG9zT2ZTb3VyY2VBbmRTaW5rTm9kZSA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54IC1cbiAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgLVxuICAgICAgICBzb3VyY2VBbmRTaW5rV2lkdGggLyAyO1xuICAgICAgY29uc3QgeVBvc09mU291cmNlQW5kU2lua05vZGUgPSBwcm9jZXNzUG9zaXRpb24ueTtcbiAgICAgIHZhciBzb3VyY2VBbmRTaW5rTm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgeFBvc09mU291cmNlQW5kU2lua05vZGUsXG4gICAgICAgIHlQb3NPZlNvdXJjZUFuZFNpbmtOb2RlLFxuICAgICAgICB7IGNsYXNzOiBcImVtcHR5IHNldFwiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBzb3VyY2VBbmRTaW5rTm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICB2YXIgY29uc3VtcHRpb25FZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKFxuICAgICAgICBzb3VyY2VBbmRTaW5rTm9kZS5pZCgpLFxuICAgICAgICBwcm9jZXNzTm9kZS5pZCgpLFxuICAgICAgICB7IGNsYXNzOiBcImNvbnN1bXB0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIGNvbnN1bXB0aW9uRWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBjb25zdCB4UG9zT2ZHZW5lTm9kZSA9IHByb2Nlc3NQb3NpdGlvbi54O1xuICAgICAgY29uc3QgeVBvc09mR2VuZU5vZGUgPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSAtXG4gICAgICAgIGVkZ2VMZW5ndGggLVxuICAgICAgICBwcm9jZXNzSGVpZ2h0IC8gMiAtXG4gICAgICAgIG51Y2xlaWNBY2lkRmVhdHVyZUhlaWdodCAvIDI7XG4gICAgICB2YXIgZ2VuZU5vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoeFBvc09mR2VuZU5vZGUsIHlQb3NPZkdlbmVOb2RlLCB7XG4gICAgICAgIGNsYXNzOiBcIm51Y2xlaWMgYWNpZCBmZWF0dXJlXCIsXG4gICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICB9KTtcbiAgICAgIGdlbmVOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICBnZW5lTm9kZS5kYXRhKFwibGFiZWxcIiwgZ2VuZU5hbWUpO1xuICAgICAgY29uc3QgaW5mb2JveE9iamVjdE9mR2VuZSA9IHtcbiAgICAgICAgY2xheno6IFwidW5pdCBvZiBpbmZvcm1hdGlvblwiLFxuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgIHRleHQ6IFwiY3Q6Z2VuZVwiLFxuICAgICAgICB9LFxuICAgICAgICBiYm94OiB7XG4gICAgICAgICAgdzogMzYsXG4gICAgICAgICAgaDogMTUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5hZGRTdGF0ZU9ySW5mb0JveChnZW5lTm9kZSwgaW5mb2JveE9iamVjdE9mR2VuZSk7XG5cbiAgICAgIHZhciBuZWNlc3NhcnlTdGltdWxhdGlvbkVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UoXG4gICAgICAgIGdlbmVOb2RlLmlkKCksXG4gICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgIHsgY2xhc3M6IFwibmVjZXNzYXJ5IHN0aW11bGF0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIG5lY2Vzc2FyeVN0aW11bGF0aW9uRWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBjb25zdCB4UG9zT2ZtUm5hTm9kZSA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54ICtcbiAgICAgICAgZWRnZUxlbmd0aCArXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgK1xuICAgICAgICBudWNsZWljQWNpZEZlYXR1cmVXaWR0aCAvIDI7XG4gICAgICBjb25zdCB5UG9zdE9mbVJuYU5vZGUgPSBwcm9jZXNzUG9zaXRpb24ueTtcbiAgICAgIHZhciBtUm5hTm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZSh4UG9zT2ZtUm5hTm9kZSwgeVBvc3RPZm1SbmFOb2RlLCB7XG4gICAgICAgIGNsYXNzOiBcIm51Y2xlaWMgYWNpZCBmZWF0dXJlXCIsXG4gICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICB9KTtcbiAgICAgIG1SbmFOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICBtUm5hTm9kZS5kYXRhKFwibGFiZWxcIiwgbVJuYU5hbWUpO1xuICAgICAgY29uc3QgaW5mb2JveE9iamVjdE9mbVJuYSA9IHtcbiAgICAgICAgY2xheno6IFwidW5pdCBvZiBpbmZvcm1hdGlvblwiLFxuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgIHRleHQ6IFwiY3Q6bVJOQVwiLFxuICAgICAgICB9LFxuICAgICAgICBiYm94OiB7XG4gICAgICAgICAgdzogNDUsXG4gICAgICAgICAgaDogMTUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5hZGRTdGF0ZU9ySW5mb0JveChtUm5hTm9kZSwgaW5mb2JveE9iamVjdE9mbVJuYSk7XG5cbiAgICAgIHZhciBwcm9kdWN0aW9uRWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgcHJvY2Vzc05vZGUuaWQoKSxcbiAgICAgICAgbVJuYU5vZGUuaWQoKSxcbiAgICAgICAgeyBjbGFzczogXCJwcm9kdWN0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIHByb2R1Y3Rpb25FZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIGN5LmVuZEJhdGNoKCk7XG5cbiAgICAgIC8vZmlsdGVyIHRoZSBqdXN0IGFkZGVkIGVsZW1lbXRzIHRvIHJldHVybiB0aGVtIGFuZCByZW1vdmUganVzdCBhZGRlZCBtYXJrXG4gICAgICB2YXIgZWxlcyA9IGN5LmVsZW1lbnRzKFwiW2p1c3RBZGRlZF1cIik7XG4gICAgICBlbGVzLnJlbW92ZURhdGEoXCJqdXN0QWRkZWRcIik7XG5cbiAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgIGVsZXMuc2VsZWN0KCk7XG5cbiAgICAgIHJldHVybiBlbGVzOyAvLyBSZXR1cm4gdGhlIGp1c3QgYWRkZWQgZWxlbWVudHNcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5yb3RhdGU5MCA9IGZ1bmN0aW9uIChwb2ludCwgY2VudGVyKSB7XG4gICAgICBjb25zdCByZWxhdGl2ZVggPSBjZW50ZXIueCAtIHBvaW50Lng7XG4gICAgICBjb25zdCByZWxhdGl2ZVkgPSBjZW50ZXIueSAtIHBvaW50Lnk7XG5cbiAgICAgIGNvbnN0IHJlbGF0aXZlUm90YXRlZFggPSByZWxhdGl2ZVk7XG4gICAgICBjb25zdCByZWxhdGl2ZVJvdGF0ZWRZID0gLTEgKiByZWxhdGl2ZVg7XG5cbiAgICAgIGNvbnN0IHJlc3VsdFggPSByZWxhdGl2ZVJvdGF0ZWRYICsgY2VudGVyLng7XG4gICAgICBjb25zdCByZXN1bHRZID0gcmVsYXRpdmVSb3RhdGVkWSArIGNlbnRlci55O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiByZXN1bHRYLFxuICAgICAgICB5OiByZXN1bHRZLFxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5jcmVhdGVUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uIChcbiAgICAgIHJlZ3VsYXRvckxhYmVsLFxuICAgICAgb3V0cHV0TGFiZWwsXG4gICAgICBvcmllbnRhdGlvblxuICAgICkge1xuICAgICAgY29uc3QgZGVmYXVsdFNvdXJjZUFuZFNpbmtQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcImVtcHR5IHNldFwiKTtcbiAgICAgIGNvbnN0IGRlZmF1bHROdWNsZWljQWNpZEZlYXR1cmVQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcIm51Y2xlaWMgYWNpZCBmZWF0dXJlXCIpO1xuICAgICAgY29uc3QgZGVmYXVsdE1hY3JvbW9sZWN1bGVQcm9wZXRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwibWFjcm9tb2xlY3VsZVwiKTtcbiAgICAgIGNvbnN0IGRlZmF1bHRQcm9jZXNzUHJvcGVydGllcyA9XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMoXCJwcm9jZXNzXCIpO1xuICAgICAgY29uc3Qgc291cmNlQW5kU2lua1dpZHRoID0gZGVmYXVsdFNvdXJjZUFuZFNpbmtQcm9wZXJ0aWVzLndpZHRoIHx8IDUwO1xuICAgICAgY29uc3QgbnVjbGVpY0FjaWRGZWF0dXJlV2lkdGggPVxuICAgICAgICBkZWZhdWx0TnVjbGVpY0FjaWRGZWF0dXJlUHJvcGVydGllcy53aWR0aCB8fCA1MDtcbiAgICAgIGNvbnN0IG51Y2xlaWNBY2lkRmVhdHVyZUhlaWdodCA9XG4gICAgICAgIGRlZmF1bHROdWNsZWljQWNpZEZlYXR1cmVQcm9wZXJ0aWVzLmhlaWdodCB8fCA1MDtcbiAgICAgIGNvbnN0IG1hY3JvbW9sZWN1bGVXaWR0aCA9IGRlZmF1bHRNYWNyb21vbGVjdWxlUHJvcGV0aWVzLndpZHRoIHx8IDUwO1xuICAgICAgY29uc3QgcHJvY2Vzc1dpZHRoID0gZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzLndpZHRoIHx8IDUwO1xuICAgICAgY29uc3QgcHJvY2Vzc0hlaWdodCA9IGRlZmF1bHRQcm9jZXNzUHJvcGVydGllcy5oZWlnaHQgfHwgNTA7XG4gICAgICBjb25zdCBwcm9jZXNzUG9zaXRpb24gPSBlbGVtZW50VXRpbGl0aWVzLmNvbnZlcnRUb01vZGVsUG9zaXRpb24oe1xuICAgICAgICB4OiBjeS53aWR0aCgpIC8gMixcbiAgICAgICAgeTogY3kuaGVpZ2h0KCkgLyAyLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBlZGdlTGVuZ3RoID0gMzA7XG4gICAgICBjb25zdCB2ZXJ0aWNhbCA9IG9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCI7XG4gICAgICBjb25zdCBwcm9jZXNzUG9ydHNPcmRlcmluZyA9IHZlcnRpY2FsID8gXCJULXRvLUJcIiA6IFwiTC10by1SXCI7XG4gICAgICBjb25zdCBtaW5JbmZvYm94RGltZW5zaW9uID0gMTU7XG4gICAgICBjb25zdCB3aWR0aFBlckNoYXIgPSA2O1xuICAgICAgY29uc3QgcmVndWxhdG9ySW5mb2JveExhYmVsID0gXCJjdDptUk5BXCI7XG5cbiAgICAgIGN5LnN0YXJ0QmF0Y2goKTtcblxuICAgICAgaWYgKCFlbGVtZW50VXRpbGl0aWVzLmdldE1hcFR5cGUoKSkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE1hcFR5cGUoXCJQRFwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb2Nlc3NOb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCxcbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnksXG4gICAgICAgIHsgY2xhc3M6IFwicHJvY2Vzc1wiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnNldFBvcnRzT3JkZXJpbmcocHJvY2Vzc05vZGUsIHByb2Nlc3NQb3J0c09yZGVyaW5nKTtcbiAgICAgIHByb2Nlc3NOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIGxldCB4UG9zT2ZJbnB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54IC1cbiAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgLVxuICAgICAgICBzb3VyY2VBbmRTaW5rV2lkdGggLyAyO1xuICAgICAgbGV0IHhQb3NPZk91dHB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54ICtcbiAgICAgICAgZWRnZUxlbmd0aCArXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgK1xuICAgICAgICBtYWNyb21vbGVjdWxlV2lkdGggLyAyO1xuICAgICAgbGV0IHlQb3NPZklucHV0ID0gcHJvY2Vzc1Bvc2l0aW9uLnk7XG4gICAgICBsZXQgeVBvc09mT3V0cHV0ID0gcHJvY2Vzc1Bvc2l0aW9uLnk7XG5cbiAgICAgIGxldCBub2RlUG9zaXRpb24gPSB7XG4gICAgICAgIHg6IHhQb3NPZklucHV0LFxuICAgICAgICB5OiB5UG9zT2ZJbnB1dCxcbiAgICAgIH07XG4gICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgbm9kZVBvc2l0aW9uID0gZWxlbWVudFV0aWxpdGllcy5yb3RhdGU5MChub2RlUG9zaXRpb24sIHByb2Nlc3NQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlucHV0Tm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgbm9kZVBvc2l0aW9uLngsXG4gICAgICAgIG5vZGVQb3NpdGlvbi55LFxuICAgICAgICB7IGNsYXNzOiBcImVtcHR5IHNldFwiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBpbnB1dE5vZGUuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgIGlucHV0Tm9kZS5kYXRhKFwibGFiZWxcIiwgbGFiZWwpO1xuXG4gICAgICBjb25zdCBpbnB1dEVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UoXG4gICAgICAgIGlucHV0Tm9kZS5pZCgpLFxuICAgICAgICBwcm9jZXNzTm9kZS5pZCgpLFxuICAgICAgICB7IGNsYXNzOiBcImNvbnN1bXB0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIGlucHV0RWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBub2RlUG9zaXRpb24gPSB7XG4gICAgICAgIHg6IHhQb3NPZk91dHB1dCxcbiAgICAgICAgeTogeVBvc09mT3V0cHV0LFxuICAgICAgfTtcblxuICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgIG5vZGVQb3NpdGlvbiA9IGVsZW1lbnRVdGlsaXRpZXMucm90YXRlOTAobm9kZVBvc2l0aW9uLCBwcm9jZXNzUG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBvdXRwdXROb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICBub2RlUG9zaXRpb24ueCxcbiAgICAgICAgbm9kZVBvc2l0aW9uLnksXG4gICAgICAgIHsgY2xhc3M6IFwibWFjcm9tb2xlY3VsZVwiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBvdXRwdXROb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICBvdXRwdXROb2RlLmRhdGEoXCJsYWJlbFwiLCBvdXRwdXRMYWJlbCk7XG5cbiAgICAgIGNvbnN0IG91dHB1dEVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UoXG4gICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgIG91dHB1dE5vZGUuaWQoKSxcbiAgICAgICAgeyBjbGFzczogXCJwcm9kdWN0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIG91dHB1dEVkZ2UuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcblxuICAgICAgbGV0IHhQb3NPZlJlZ3VsYXRvciA9IHByb2Nlc3NQb3NpdGlvbi54O1xuICAgICAgY29uc3QgZGltZW5zaW9uID0gdmVydGljYWxcbiAgICAgICAgPyBudWNsZWljQWNpZEZlYXR1cmVXaWR0aFxuICAgICAgICA6IG51Y2xlaWNBY2lkRmVhdHVyZUhlaWdodDtcbiAgICAgIGxldCB5UG9zT2ZSZWd1bGF0b3IgPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSAtIChwcm9jZXNzSGVpZ2h0IC8gMiArIGRpbWVuc2lvbiAvIDIgKyBlZGdlTGVuZ3RoKTtcblxuICAgICAgbm9kZVBvc2l0aW9uID0ge1xuICAgICAgICB4OiB4UG9zT2ZSZWd1bGF0b3IsXG4gICAgICAgIHk6IHlQb3NPZlJlZ3VsYXRvcixcbiAgICAgIH07XG4gICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgbm9kZVBvc2l0aW9uID0gZWxlbWVudFV0aWxpdGllcy5yb3RhdGU5MChub2RlUG9zaXRpb24sIHByb2Nlc3NQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlZ3VsYXRvck5vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgIG5vZGVQb3NpdGlvbi54LFxuICAgICAgICBub2RlUG9zaXRpb24ueSxcbiAgICAgICAgeyBjbGFzczogXCJudWNsZWljIGFjaWQgZmVhdHVyZVwiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICByZWd1bGF0b3JOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICByZWd1bGF0b3JOb2RlLmRhdGEoXCJsYWJlbFwiLCByZWd1bGF0b3JMYWJlbCk7XG4gICAgICBpbmZvYm94T2JqZWN0ID0ge1xuICAgICAgICBjbGF6ejogXCJ1bml0IG9mIGluZm9ybWF0aW9uXCIsXG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgdGV4dDogcmVndWxhdG9ySW5mb2JveExhYmVsLFxuICAgICAgICB9LFxuICAgICAgICBiYm94OiB7XG4gICAgICAgICAgdzogTWF0aC5tYXgoXG4gICAgICAgICAgICByZWd1bGF0b3JJbmZvYm94TGFiZWwubGVuZ3RoICogd2lkdGhQZXJDaGFyLFxuICAgICAgICAgICAgbWluSW5mb2JveERpbWVuc2lvblxuICAgICAgICAgICksXG4gICAgICAgICAgaDogbWluSW5mb2JveERpbWVuc2lvbixcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLmFkZFN0YXRlT3JJbmZvQm94KHJlZ3VsYXRvck5vZGUsIGluZm9ib3hPYmplY3QpO1xuXG4gICAgICBjb25zdCByZWd1bGF0b3JFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKFxuICAgICAgICByZWd1bGF0b3JOb2RlLmlkKCksXG4gICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgIHsgY2xhc3M6IFwibmVjZXNzYXJ5IHN0aW11bGF0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIHJlZ3VsYXRvckVkZ2UuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcblxuICAgICAgY3kuZW5kQmF0Y2goKTtcblxuICAgICAgY29uc3QgZWxlcyA9IGN5LmVsZW1lbnRzKFwiW2p1c3RBZGRlZF1cIik7XG4gICAgICBlbGVzLnJlbW92ZURhdGEoXCJqdXN0QWRkZWRcIik7XG5cbiAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgIGVsZXMuc2VsZWN0KCk7XG5cbiAgICAgIHJldHVybiBlbGVzO1xuICAgIH07XG5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZVRyYW5zY3JpcHRpb24gPSBmdW5jdGlvbiAobGFiZWwsIG9yaWVudGF0aW9uKSB7XG4gICAgICBjb25zdCBkZWZhdWx0U291cmNlQW5kU2lua1Byb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwiZW1wdHkgc2V0XCIpO1xuICAgICAgY29uc3QgZGVmYXVsdE51Y2xlaWNBY2lkRmVhdHVyZVByb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwibnVjbGVpYyBhY2lkIGZlYXR1cmVcIik7XG4gICAgICBjb25zdCBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwicHJvY2Vzc1wiKTtcbiAgICAgIGNvbnN0IHNvdXJjZUFuZFNpbmtXaWR0aCA9IGRlZmF1bHRTb3VyY2VBbmRTaW5rUHJvcGVydGllcy53aWR0aCB8fCA1MDtcbiAgICAgIGNvbnN0IG51Y2xlaWNBY2lkRmVhdHVyZVdpZHRoID1cbiAgICAgICAgZGVmYXVsdE51Y2xlaWNBY2lkRmVhdHVyZVByb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICBjb25zdCBudWNsZWljQWNpZEZlYXR1cmVIZWlnaHQgPVxuICAgICAgICBkZWZhdWx0TnVjbGVpY0FjaWRGZWF0dXJlUHJvcGVydGllcy5oZWlnaHQgfHwgNTA7XG4gICAgICBjb25zdCBwcm9jZXNzV2lkdGggPSBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICBjb25zdCBwcm9jZXNzSGVpZ2h0ID0gZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzLmhlaWdodCB8fCA1MDtcbiAgICAgIGNvbnN0IHByb2Nlc3NQb3NpdGlvbiA9IGVsZW1lbnRVdGlsaXRpZXMuY29udmVydFRvTW9kZWxQb3NpdGlvbih7XG4gICAgICAgIHg6IGN5LndpZHRoKCkgLyAyLFxuICAgICAgICB5OiBjeS5oZWlnaHQoKSAvIDIsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGVkZ2VMZW5ndGggPSAzMDtcbiAgICAgIGNvbnN0IHZlcnRpY2FsID0gb3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIjtcbiAgICAgIGNvbnN0IHByb2Nlc3NQb3J0c09yZGVyaW5nID0gdmVydGljYWwgPyBcIlQtdG8tQlwiIDogXCJMLXRvLVJcIjtcbiAgICAgIGNvbnN0IG1pbkluZm9ib3hEaW1lbnNpb24gPSAxNTtcbiAgICAgIGNvbnN0IHdpZHRoUGVyQ2hhciA9IDY7XG4gICAgICBjb25zdCBvdXRwdXRJbmZvYm94TGFiZWwgPSBcImN0Om1STkFcIjtcbiAgICAgIGNvbnN0IHJlZ3VsYXRvckluZm9ib3hMYWJlbCA9IFwiY3Q6Z2VuZVwiO1xuXG4gICAgICBjeS5zdGFydEJhdGNoKCk7XG5cbiAgICAgIGlmICghZWxlbWVudFV0aWxpdGllcy5nZXRNYXBUeXBlKCkpIHtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRNYXBUeXBlKFwiUERcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb2Nlc3NOb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCxcbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnksXG4gICAgICAgIHsgY2xhc3M6IFwicHJvY2Vzc1wiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnNldFBvcnRzT3JkZXJpbmcocHJvY2Vzc05vZGUsIHByb2Nlc3NQb3J0c09yZGVyaW5nKTtcbiAgICAgIHByb2Nlc3NOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIGxldCB4UG9zT2ZJbnB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54IC1cbiAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgLVxuICAgICAgICBzb3VyY2VBbmRTaW5rV2lkdGggLyAyO1xuICAgICAgbGV0IHhQb3NPZk91dHB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54ICtcbiAgICAgICAgZWRnZUxlbmd0aCArXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgK1xuICAgICAgICBudWNsZWljQWNpZEZlYXR1cmVXaWR0aCAvIDI7XG4gICAgICBsZXQgeVBvc09mSW5wdXQgPSBwcm9jZXNzUG9zaXRpb24ueTtcbiAgICAgIGxldCB5UG9zT2ZPdXRwdXQgPSBwcm9jZXNzUG9zaXRpb24ueTtcblxuICAgICAgbGV0IG5vZGVQb3NpdGlvbiA9IHtcbiAgICAgICAgeDogeFBvc09mSW5wdXQsXG4gICAgICAgIHk6IHlQb3NPZklucHV0LFxuICAgICAgfTtcbiAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICBub2RlUG9zaXRpb24gPSBlbGVtZW50VXRpbGl0aWVzLnJvdGF0ZTkwKG5vZGVQb3NpdGlvbiwgcHJvY2Vzc1Bvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5wdXROb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICBub2RlUG9zaXRpb24ueCxcbiAgICAgICAgbm9kZVBvc2l0aW9uLnksXG4gICAgICAgIHsgY2xhc3M6IFwiZW1wdHkgc2V0XCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIGlucHV0Tm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBjb25zdCBpbnB1dEVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UoXG4gICAgICAgIGlucHV0Tm9kZS5pZCgpLFxuICAgICAgICBwcm9jZXNzTm9kZS5pZCgpLFxuICAgICAgICB7IGNsYXNzOiBcImNvbnN1bXB0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIGlucHV0RWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBub2RlUG9zaXRpb24gPSB7XG4gICAgICAgIHg6IHhQb3NPZk91dHB1dCxcbiAgICAgICAgeTogeVBvc09mT3V0cHV0LFxuICAgICAgfTtcblxuICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgIG5vZGVQb3NpdGlvbiA9IGVsZW1lbnRVdGlsaXRpZXMucm90YXRlOTAobm9kZVBvc2l0aW9uLCBwcm9jZXNzUG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBvdXRwdXROb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICBub2RlUG9zaXRpb24ueCxcbiAgICAgICAgbm9kZVBvc2l0aW9uLnksXG4gICAgICAgIHsgY2xhc3M6IFwibnVjbGVpYyBhY2lkIGZlYXR1cmVcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgb3V0cHV0Tm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgb3V0cHV0Tm9kZS5kYXRhKFwibGFiZWxcIiwgbGFiZWwpO1xuICAgICAgaW5mb2JveE9iamVjdCA9IHtcbiAgICAgICAgY2xheno6IFwidW5pdCBvZiBpbmZvcm1hdGlvblwiLFxuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgIHRleHQ6IG91dHB1dEluZm9ib3hMYWJlbCxcbiAgICAgICAgfSxcbiAgICAgICAgYmJveDoge1xuICAgICAgICAgIHc6IE1hdGgubWF4KFxuICAgICAgICAgICAgb3V0cHV0SW5mb2JveExhYmVsLmxlbmd0aCAqIHdpZHRoUGVyQ2hhcixcbiAgICAgICAgICAgIG1pbkluZm9ib3hEaW1lbnNpb25cbiAgICAgICAgICApLFxuICAgICAgICAgIGg6IG1pbkluZm9ib3hEaW1lbnNpb24sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5hZGRTdGF0ZU9ySW5mb0JveChvdXRwdXROb2RlLCBpbmZvYm94T2JqZWN0KTtcblxuICAgICAgY29uc3Qgb3V0cHV0RWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgcHJvY2Vzc05vZGUuaWQoKSxcbiAgICAgICAgb3V0cHV0Tm9kZS5pZCgpLFxuICAgICAgICB7IGNsYXNzOiBcInByb2R1Y3Rpb25cIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgb3V0cHV0RWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBsZXQgeFBvc09mUmVndWxhdG9yID0gcHJvY2Vzc1Bvc2l0aW9uLng7XG4gICAgICBjb25zdCBkaW1lbnNpb24gPSB2ZXJ0aWNhbFxuICAgICAgICA/IG51Y2xlaWNBY2lkRmVhdHVyZVdpZHRoXG4gICAgICAgIDogbnVjbGVpY0FjaWRGZWF0dXJlSGVpZ2h0O1xuICAgICAgbGV0IHlQb3NPZlJlZ3VsYXRvciA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi55IC0gKHByb2Nlc3NIZWlnaHQgLyAyICsgZGltZW5zaW9uIC8gMiArIGVkZ2VMZW5ndGgpO1xuXG4gICAgICBub2RlUG9zaXRpb24gPSB7XG4gICAgICAgIHg6IHhQb3NPZlJlZ3VsYXRvcixcbiAgICAgICAgeTogeVBvc09mUmVndWxhdG9yLFxuICAgICAgfTtcbiAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICBub2RlUG9zaXRpb24gPSBlbGVtZW50VXRpbGl0aWVzLnJvdGF0ZTkwKG5vZGVQb3NpdGlvbiwgcHJvY2Vzc1Bvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVndWxhdG9yTm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgbm9kZVBvc2l0aW9uLngsXG4gICAgICAgIG5vZGVQb3NpdGlvbi55LFxuICAgICAgICB7IGNsYXNzOiBcIm51Y2xlaWMgYWNpZCBmZWF0dXJlXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIHJlZ3VsYXRvck5vZGUuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgIHJlZ3VsYXRvck5vZGUuZGF0YShcImxhYmVsXCIsIGxhYmVsKTtcbiAgICAgIGluZm9ib3hPYmplY3QgPSB7XG4gICAgICAgIGNsYXp6OiBcInVuaXQgb2YgaW5mb3JtYXRpb25cIixcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICB0ZXh0OiByZWd1bGF0b3JJbmZvYm94TGFiZWwsXG4gICAgICAgIH0sXG4gICAgICAgIGJib3g6IHtcbiAgICAgICAgICB3OiBNYXRoLm1heChcbiAgICAgICAgICAgIHJlZ3VsYXRvckluZm9ib3hMYWJlbC5sZW5ndGggKiB3aWR0aFBlckNoYXIsXG4gICAgICAgICAgICBtaW5JbmZvYm94RGltZW5zaW9uXG4gICAgICAgICAgKSxcbiAgICAgICAgICBoOiBtaW5JbmZvYm94RGltZW5zaW9uLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuYWRkU3RhdGVPckluZm9Cb3gocmVndWxhdG9yTm9kZSwgaW5mb2JveE9iamVjdCk7XG5cbiAgICAgIGNvbnN0IHJlZ3VsYXRvckVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UoXG4gICAgICAgIHJlZ3VsYXRvck5vZGUuaWQoKSxcbiAgICAgICAgcHJvY2Vzc05vZGUuaWQoKSxcbiAgICAgICAgeyBjbGFzczogXCJuZWNlc3Nhcnkgc3RpbXVsYXRpb25cIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgcmVndWxhdG9yRWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBjeS5lbmRCYXRjaCgpO1xuXG4gICAgICBjb25zdCBlbGVzID0gY3kuZWxlbWVudHMoXCJbanVzdEFkZGVkXVwiKTtcbiAgICAgIGVsZXMucmVtb3ZlRGF0YShcImp1c3RBZGRlZFwiKTtcblxuICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgZWxlcy5zZWxlY3QoKTtcblxuICAgICAgcmV0dXJuIGVsZXM7XG4gICAgfTtcblxuICAgIGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlRGVncmFkYXRpb24gPSBmdW5jdGlvbiAobWFjcm9tb2xlY3VsZSwgb3JpZW50YXRpb24pIHtcbiAgICAgIGNvbnN0IG1hY3JvbW9sZWN1bGVOYW1lID0gbWFjcm9tb2xlY3VsZS5uYW1lO1xuICAgICAgY29uc3QgZGVmYXVsdE1hY3JvbW9sZWN1bGVQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcIm1hY3JvbW9sZWN1bGVcIik7XG4gICAgICBjb25zdCBtYWNyb21vbGVjdWxlV2lkdGggPSBkZWZhdWx0TWFjcm9tb2xlY3VsZVByb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICBjb25zdCBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwiY2F0YWx5dGljXCIpO1xuICAgICAgY29uc3QgcHJvY2Vzc1dpZHRoID0gZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzLndpZHRoIHx8IDUwO1xuICAgICAgY29uc3QgcHJvY2Vzc1Bvc2l0aW9uID0gZWxlbWVudFV0aWxpdGllcy5jb252ZXJ0VG9Nb2RlbFBvc2l0aW9uKHtcbiAgICAgICAgeDogY3kud2lkdGgoKSAvIDIsXG4gICAgICAgIHk6IGN5LmhlaWdodCgpIC8gMixcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZWRnZUxlbmd0aCA9IDMwO1xuICAgICAgY29uc3QgdmVydGljYWwgPSBvcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiO1xuICAgICAgY29uc3QgcHJvY2Vzc1BvcnRzT3JkZXJpbmcgPSB2ZXJ0aWNhbCA/IFwiVC10by1CXCIgOiBcIkwtdG8tUlwiO1xuXG4gICAgICBjeS5zdGFydEJhdGNoKCk7XG5cbiAgICAgIGlmICghZWxlbWVudFV0aWxpdGllcy5nZXRNYXBUeXBlKCkpIHtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRNYXBUeXBlKFwiUERcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb2Nlc3NOb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCxcbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnksXG4gICAgICAgIHsgY2xhc3M6IFwicHJvY2Vzc1wiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnNldFBvcnRzT3JkZXJpbmcocHJvY2Vzc05vZGUsIHByb2Nlc3NQb3J0c09yZGVyaW5nKTtcbiAgICAgIHByb2Nlc3NOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIGxldCB4UG9zT2ZJbnB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54IC1cbiAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgLVxuICAgICAgICBtYWNyb21vbGVjdWxlV2lkdGggLyAyO1xuICAgICAgbGV0IHhQb3NPZk91dHB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54ICtcbiAgICAgICAgZWRnZUxlbmd0aCArXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgK1xuICAgICAgICBtYWNyb21vbGVjdWxlV2lkdGggLyAyO1xuICAgICAgbGV0IHlQb3NPZklucHV0ID0gcHJvY2Vzc1Bvc2l0aW9uLnk7XG4gICAgICBsZXQgeVBvc09mT3V0cHV0ID0gcHJvY2Vzc1Bvc2l0aW9uLnk7XG5cbiAgICAgIGxldCBub2RlUG9zaXRpb24gPSB7XG4gICAgICAgIHg6IHhQb3NPZklucHV0LFxuICAgICAgICB5OiB5UG9zT2ZJbnB1dCxcbiAgICAgIH07XG4gICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgbm9kZVBvc2l0aW9uID0gZWxlbWVudFV0aWxpdGllcy5yb3RhdGU5MChub2RlUG9zaXRpb24sIHByb2Nlc3NQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGxldCBpbnB1dE5vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUobm9kZVBvc2l0aW9uLngsIG5vZGVQb3NpdGlvbi55LCB7XG4gICAgICAgIGNsYXNzOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgbGFuZ3VhZ2U6IFwiUERcIixcbiAgICAgIH0pO1xuICAgICAgaW5wdXROb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICBpbnB1dE5vZGUuZGF0YShcImxhYmVsXCIsIG1hY3JvbW9sZWN1bGVOYW1lKTtcblxuICAgICAgbGV0IGlucHV0RWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgaW5wdXROb2RlLmlkKCksXG4gICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgIHsgY2xhc3M6IFwiY29uc3VtcHRpb25cIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgaW5wdXRFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIG5vZGVQb3NpdGlvbiA9IHtcbiAgICAgICAgeDogeFBvc09mT3V0cHV0LFxuICAgICAgICB5OiB5UG9zT2ZPdXRwdXQsXG4gICAgICB9O1xuXG4gICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgbm9kZVBvc2l0aW9uID0gZWxlbWVudFV0aWxpdGllcy5yb3RhdGU5MChub2RlUG9zaXRpb24sIHByb2Nlc3NQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGxldCBvdXRwdXROb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICBub2RlUG9zaXRpb24ueCxcbiAgICAgICAgbm9kZVBvc2l0aW9uLnksXG4gICAgICAgIHsgY2xhc3M6IFwiZW1wdHkgc2V0XCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIG91dHB1dE5vZGUuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcblxuICAgICAgbGV0IG91dHB1dEVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UoXG4gICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgIG91dHB1dE5vZGUuaWQoKSxcbiAgICAgICAgeyBjbGFzczogXCJwcm9kdWN0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIG91dHB1dEVkZ2UuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcblxuICAgICAgY3kuZW5kQmF0Y2goKTtcblxuICAgICAgY29uc3QgZWxlcyA9IGN5LmVsZW1lbnRzKFwiW2p1c3RBZGRlZF1cIik7XG4gICAgICBlbGVzLnJlbW92ZURhdGEoXCJqdXN0QWRkZWRcIik7XG5cbiAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgIGVsZXMuc2VsZWN0KCk7XG5cbiAgICAgIHJldHVybiBlbGVzO1xuICAgIH07XG5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZUNvbXBsZXhQcm90ZWluRm9ybWF0aW9uID0gZnVuY3Rpb24gKFxuICAgICAgcHJvdGVpbkxhYmVscyxcbiAgICAgIGNvbXBsZXhMYWJlbCxcbiAgICAgIHJlZ3VsYXRvcixcbiAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgcmV2ZXJzZVxuICAgICkge1xuICAgICAgY29uc3QgaGFzUmVndWxhdG9yID0gcmVndWxhdG9yLm5hbWUgIT09IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IGRlZmF1bHRNYWNyb21vbGVjdWxlUHJvcGVydGllcyA9XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMoXCJtYWNyb21vbGVjdWxlXCIpO1xuICAgICAgY29uc3QgZGVmYXVsdFJlZ3VsYXRvclByb3BlcnRpZXMgPSBoYXNSZWd1bGF0b3JcbiAgICAgICAgPyBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKHJlZ3VsYXRvci50eXBlKVxuICAgICAgICA6IHt9O1xuICAgICAgY29uc3QgZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcImNhdGFseXRpY1wiKTtcbiAgICAgIGNvbnN0IHByb2Nlc3NXaWR0aCA9IGRlZmF1bHRQcm9jZXNzUHJvcGVydGllcy53aWR0aCB8fCA1MDtcbiAgICAgIGNvbnN0IG1hY3JvbW9sZWN1bGVXaWR0aCA9IGRlZmF1bHRNYWNyb21vbGVjdWxlUHJvcGVydGllcy53aWR0aCB8fCA1MDtcbiAgICAgIGNvbnN0IG1hY3JvbW9sZWN1bGVIZWlnaHQgPSBkZWZhdWx0TWFjcm9tb2xlY3VsZVByb3BlcnRpZXMuaGVpZ2h0IHx8IDUwO1xuICAgICAgY29uc3QgcHJvY2Vzc0hlaWdodCA9IGRlZmF1bHRQcm9jZXNzUHJvcGVydGllcy5oZWlnaHQgfHwgNTA7XG4gICAgICBjb25zdCByZWd1bGF0b3JIZWlnaHQgPSBkZWZhdWx0UmVndWxhdG9yUHJvcGVydGllcy5oZWlnaHQgfHwgNTA7XG4gICAgICBjb25zdCBwcm9jZXNzUG9zaXRpb24gPSBlbGVtZW50VXRpbGl0aWVzLmNvbnZlcnRUb01vZGVsUG9zaXRpb24oe1xuICAgICAgICB4OiBjeS53aWR0aCgpIC8gMixcbiAgICAgICAgeTogY3kuaGVpZ2h0KCkgLyAyLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBlZGdlTGVuZ3RoID0gMzA7XG4gICAgICBjb25zdCBwcm9jZXNzUG9ydHNPcmRlcmluZyA9XG4gICAgICAgIG9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgPyBcIlQtdG8tQlwiIDogXCJMLXRvLVJcIjtcbiAgICAgIGNvbnN0IG1pbkluZm9ib3hEaW1lbnNpb24gPSAyMDtcbiAgICAgIGNvbnN0IHdpZHRoUGVyQ2hhciA9IDY7XG4gICAgICBjb25zdCB0aWxpbmdQYWRkaW5nVmVydGljYWwgPSAxNTtcbiAgICAgIGNvbnN0IHRpbGluZ1BhZGRpbmdIb3Jpem9udGFsID0gMTU7XG4gICAgICBjb25zdCBtdWx0aW1lck9mZnNldCA9IDY7XG5cbiAgICAgIGN5LnN0YXJ0QmF0Y2goKTtcblxuICAgICAgaWYgKCFlbGVtZW50VXRpbGl0aWVzLmdldE1hcFR5cGUoKSkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE1hcFR5cGUoXCJQRFwiKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvY2Vzc05vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54LFxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSxcbiAgICAgICAgeyBjbGFzczogXCJwcm9jZXNzXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0UG9ydHNPcmRlcmluZyhwcm9jZXNzTm9kZSwgcHJvY2Vzc1BvcnRzT3JkZXJpbmcpO1xuICAgICAgcHJvY2Vzc05vZGUuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcblxuICAgICAgY29uc3Qgb2Zmc2V0WCA9IHByb2Nlc3NXaWR0aCAvIDIgKyBlZGdlTGVuZ3RoICsgbWFjcm9tb2xlY3VsZVdpZHRoIC8gMjtcbiAgICAgIGxldCB4UG9zT2ZQcm90ZWluID0gcmV2ZXJzZVxuICAgICAgICA/IHByb2Nlc3NQb3NpdGlvbi54ICsgb2Zmc2V0WFxuICAgICAgICA6IHByb2Nlc3NQb3NpdGlvbi54IC0gb2Zmc2V0WDtcblxuICAgICAgY29uc3QgcHJvdGVpbkNvdW50ID0gcHJvdGVpbkxhYmVscy5sZW5ndGg7XG5cbiAgICAgIGNvbnN0IG1hY3JvbW9sZWN1bGVEaW1lbnNpb24gPVxuICAgICAgICBvcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiID8gbWFjcm9tb2xlY3VsZVdpZHRoIDogbWFjcm9tb2xlY3VsZUhlaWdodDtcbiAgICAgIGNvbnN0IHN0ZXBPZmZzZXQgPSBtYWNyb21vbGVjdWxlRGltZW5zaW9uICsgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsO1xuICAgICAgY29uc3Qgb2Zmc2V0WSA9XG4gICAgICAgICgocHJvdGVpbkNvdW50IC0gMSkgLyAyKSAqXG4gICAgICAgIChtYWNyb21vbGVjdWxlRGltZW5zaW9uICsgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsKTtcbiAgICAgIGNvbnN0IGhvcml6b250YWxPZmZzZXRYID1cbiAgICAgICAgKChwcm90ZWluQ291bnQgLSAxKSAvIDIpICpcbiAgICAgICAgKG1hY3JvbW9sZWN1bGVEaW1lbnNpb24gKyB0aWxpbmdQYWRkaW5nSG9yaXpvbnRhbCk7XG5cbiAgICAgIGxldCB5UG9zT2ZQcm90ZWluID0gcHJvY2Vzc1Bvc2l0aW9uLnkgLSBvZmZzZXRZO1xuXG4gICAgICBwcm90ZWluTGFiZWxzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgIGxldCBub2RlUG9zaXRpb24gPSB7XG4gICAgICAgICAgeDogeFBvc09mUHJvdGVpbixcbiAgICAgICAgICB5OiB5UG9zT2ZQcm90ZWluLFxuICAgICAgICB9O1xuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgICAgIG5vZGVQb3NpdGlvbiA9IGVsZW1lbnRVdGlsaXRpZXMucm90YXRlOTAoXG4gICAgICAgICAgICBub2RlUG9zaXRpb24sXG4gICAgICAgICAgICBwcm9jZXNzUG9zaXRpb25cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgbm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShub2RlUG9zaXRpb24ueCwgbm9kZVBvc2l0aW9uLnksIHtcbiAgICAgICAgICBjbGFzczogXCJtYWNyb21vbGVjdWxlXCIsXG4gICAgICAgICAgbGFuZ3VhZ2U6IFwiUERcIixcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZGUuZGF0YShcImxhYmVsXCIsIGxhYmVsKTtcbiAgICAgICAgbm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgICB5UG9zT2ZQcm90ZWluICs9IHN0ZXBPZmZzZXQ7XG5cbiAgICAgICAgY29uc3Qgc291cmNlID0gcmV2ZXJzZSA/IHByb2Nlc3NOb2RlLmlkKCkgOiBub2RlLmlkKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHJldmVyc2UgPyBub2RlLmlkKCkgOiBwcm9jZXNzTm9kZS5pZCgpO1xuICAgICAgICBjb25zdCBlZGdlQ2xhc3MgPSByZXZlcnNlID8gXCJwcm9kdWN0aW9uXCIgOiBcImNvbnN1bXB0aW9uXCI7XG4gICAgICAgIGNvbnN0IGVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2Uoc291cmNlLCB0YXJnZXQsIHtcbiAgICAgICAgICBjbGFzczogZWRnZUNsYXNzLFxuICAgICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICAgIH0pO1xuICAgICAgICBlZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICB9KTtcblxuICAgICAgbGV0IGNvbXBsZXhQb3MgPSB7XG4gICAgICAgIHg6IHByb2Nlc3NQb3NpdGlvbi54ICsgKHJldmVyc2UgPyAtMSA6IDEpICogb2Zmc2V0WCxcbiAgICAgICAgeTogcHJvY2Vzc1Bvc2l0aW9uLnksXG4gICAgICB9O1xuXG4gICAgICBpZiAob3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgICBjb21wbGV4UG9zID0gZWxlbWVudFV0aWxpdGllcy5yb3RhdGU5MChjb21wbGV4UG9zLCBwcm9jZXNzUG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb21wbGV4ID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKGNvbXBsZXhQb3MueCwgY29tcGxleFBvcy55LCB7XG4gICAgICAgIGNsYXNzOiBcImNvbXBsZXhcIixcbiAgICAgICAgbGFuZ3VhZ2U6IFwiUERcIixcbiAgICAgIH0pO1xuICAgICAgY29tcGxleC5kYXRhKFwibGFiZWxcIiwgY29tcGxleExhYmVsKTtcbiAgICAgIGNvbXBsZXguZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcblxuICAgICAgY29uc3Qgc291cmNlID0gcmV2ZXJzZSA/IGNvbXBsZXguaWQoKSA6IHByb2Nlc3NOb2RlLmlkKCk7XG4gICAgICBjb25zdCB0YXJnZXQgPSByZXZlcnNlID8gcHJvY2Vzc05vZGUuaWQoKSA6IGNvbXBsZXguaWQoKTtcbiAgICAgIGNvbnN0IGVkZ2VDbGFzcyA9IHJldmVyc2UgPyBcImNvbnN1bXB0aW9uXCIgOiBcInByb2R1Y3Rpb25cIjtcbiAgICAgIGNvbnN0IGNvbXBsZXhFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKHNvdXJjZSwgdGFyZ2V0LCB7XG4gICAgICAgIGNsYXNzOiBlZGdlQ2xhc3MsXG4gICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICB9KTtcbiAgICAgIGNvbXBsZXhFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgIHhQb3NPZlByb3RlaW4gPSBjb21wbGV4LnBvc2l0aW9uKFwieFwiKSAtIGhvcml6b250YWxPZmZzZXRYO1xuICAgICAgICB5UG9zT2ZQcm90ZWluID0gY29tcGxleC5wb3NpdGlvbihcInlcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4UG9zT2ZQcm90ZWluID0gY29tcGxleC5wb3NpdGlvbihcInhcIik7XG4gICAgICAgIHlQb3NPZlByb3RlaW4gPSBjb21wbGV4LnBvc2l0aW9uKFwieVwiKSAtIG9mZnNldFk7XG4gICAgICB9XG5cbiAgICAgIHByb3RlaW5MYWJlbHMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgbGV0IG5vZGVQb3NpdGlvbiA9IHtcbiAgICAgICAgICB4OiB4UG9zT2ZQcm90ZWluLFxuICAgICAgICAgIHk6IHlQb3NPZlByb3RlaW4sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgbm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgICBub2RlUG9zaXRpb24ueCxcbiAgICAgICAgICBub2RlUG9zaXRpb24ueSxcbiAgICAgICAgICB7IGNsYXNzOiBcIm1hY3JvbW9sZWN1bGVcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9LFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBjb21wbGV4LmlkKClcbiAgICAgICAgKTtcbiAgICAgICAgbm9kZS5kYXRhKFwibGFiZWxcIiwgbGFiZWwpO1xuICAgICAgICBub2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgICAgICB4UG9zT2ZQcm90ZWluICs9IHN0ZXBPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeVBvc09mUHJvdGVpbiArPSBzdGVwT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGhhc1JlZ3VsYXRvcikge1xuICAgICAgICBjb25zdCByZWd1bGF0b3JOYW1lID0gcmVndWxhdG9yLm5hbWU7XG4gICAgICAgIGNvbnN0IHJlZ3VsYXRvclR5cGUgPSByZWd1bGF0b3IudHlwZTtcbiAgICAgICAgY29uc3QgcmVndWxhdG9yRWRnZVR5cGUgPSByZWd1bGF0b3IuZWRnZVR5cGU7XG4gICAgICAgIGNvbnN0IHJlZ3VsYXRvck11bHRpbWVyID0gcmVndWxhdG9yLm11bHRpbWVyO1xuXG4gICAgICAgIGxldCB4UG9zT2ZSZWd1bGF0b3IgPSBwcm9jZXNzUG9zaXRpb24ueDtcbiAgICAgICAgaWYgKHJlZ3VsYXRvck11bHRpbWVyLmVuYWJsZWQgJiYgb3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgICAgeFBvc09mUmVndWxhdG9yIC09IG11bHRpbWVyT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGxldCB5UG9zT2ZSZWd1bGF0b3IgPVxuICAgICAgICAgIHByb2Nlc3NQb3NpdGlvbi55IC1cbiAgICAgICAgICAocHJvY2Vzc0hlaWdodCAvIDIgKyByZWd1bGF0b3JIZWlnaHQgLyAyICsgZWRnZUxlbmd0aCk7XG5cbiAgICAgICAgbm9kZVBvc2l0aW9uID0ge1xuICAgICAgICAgIHg6IHhQb3NPZlJlZ3VsYXRvcixcbiAgICAgICAgICB5OiB5UG9zT2ZSZWd1bGF0b3IsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgICAgbm9kZVBvc2l0aW9uID0gZWxlbWVudFV0aWxpdGllcy5yb3RhdGU5MChcbiAgICAgICAgICAgIG5vZGVQb3NpdGlvbixcbiAgICAgICAgICAgIHByb2Nlc3NQb3NpdGlvblxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVndWxhdG9yTm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgICBub2RlUG9zaXRpb24ueCxcbiAgICAgICAgICBub2RlUG9zaXRpb24ueSxcbiAgICAgICAgICB7IGNsYXNzOiByZWd1bGF0b3JUeXBlLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmVndWxhdG9yTm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgICByZWd1bGF0b3JOb2RlLmRhdGEoXCJsYWJlbFwiLCByZWd1bGF0b3JOYW1lKTtcblxuICAgICAgICBpZiAocmVndWxhdG9yTXVsdGltZXIuZW5hYmxlZCkge1xuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0TXVsdGltZXJTdGF0dXMocmVndWxhdG9yTm9kZSwgdHJ1ZSk7XG5cbiAgICAgICAgICBjb25zdCBjYXJkaW5hbGl0eSA9IHJlZ3VsYXRvck11bHRpbWVyLmNhcmRpbmFsaXR5O1xuICAgICAgICAgIGlmIChjYXJkaW5hbGl0eSAhPSBcIlwiKSB7XG4gICAgICAgICAgICBjb25zdCBpbmZvYm94TGFiZWwgPSBcIk46XCIgKyBjYXJkaW5hbGl0eTtcbiAgICAgICAgICAgIGluZm9ib3hPYmplY3QgPSB7XG4gICAgICAgICAgICAgIGNsYXp6OiBcInVuaXQgb2YgaW5mb3JtYXRpb25cIixcbiAgICAgICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBpbmZvYm94TGFiZWwsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJib3g6IHtcbiAgICAgICAgICAgICAgICB3OiBpbmZvYm94TGFiZWwubGVuZ3RoICogd2lkdGhQZXJDaGFyLFxuICAgICAgICAgICAgICAgIGg6IG1pbkluZm9ib3hEaW1lbnNpb24sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZWxlbWVudFV0aWxpdGllcy5hZGRTdGF0ZU9ySW5mb0JveChyZWd1bGF0b3JOb2RlLCBpbmZvYm94T2JqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVndWxhdG9yRWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgICByZWd1bGF0b3JOb2RlLmlkKCksXG4gICAgICAgICAgcHJvY2Vzc05vZGUuaWQoKSxcbiAgICAgICAgICB7IGNsYXNzOiByZWd1bGF0b3JFZGdlVHlwZSwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICAgICk7XG4gICAgICAgIHJlZ3VsYXRvckVkZ2UuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgY3kuZW5kQmF0Y2goKTtcblxuICAgICAgY29uc3QgZWxlcyA9IGN5LmVsZW1lbnRzKFwiW2p1c3RBZGRlZF1cIik7XG4gICAgICBlbGVzLnJlbW92ZURhdGEoXCJqdXN0QWRkZWRcIik7XG5cbiAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgIGVsZXMuc2VsZWN0KCk7XG5cbiAgICAgIHJldHVybiBlbGVzO1xuICAgIH07XG5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZU11bHRpbWVyaXphdGlvbiA9IGZ1bmN0aW9uIChcbiAgICAgIG1hY3JvbW9sZWN1bGUsXG4gICAgICByZWd1bGF0b3IsXG4gICAgICByZWd1bGF0b3JNdWx0aW1lcixcbiAgICAgIG9yaWVudGF0aW9uXG4gICAgKSB7XG4gICAgICBjb25zdCBoYXNSZWd1bGF0b3IgPSByZWd1bGF0b3IubmFtZSAhPT0gdW5kZWZpbmVkO1xuICAgICAgY29uc3QgbWFjcm9tb2xlY3VsZU5hbWUgPSBtYWNyb21vbGVjdWxlLm5hbWU7XG4gICAgICBjb25zdCBtYWNyb21vbGVjdWxlTXVsdGltZXJDYXJkaW5hbGl0eSA9IG1hY3JvbW9sZWN1bGUuY2FyZGluYWxpdHk7XG4gICAgICBjb25zdCBkZWZhdWx0TWFjcm9tb2xlY3VsZVByb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwibWFjcm9tb2xlY3VsZVwiKTtcbiAgICAgIGNvbnN0IGRlZmF1bHRSZWd1bGF0b3JQcm9wZXJ0aWVzID0gaGFzUmVndWxhdG9yXG4gICAgICAgID8gZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhyZWd1bGF0b3IudHlwZSlcbiAgICAgICAgOiB7fTtcbiAgICAgIGNvbnN0IGRlZmF1bHRQcm9jZXNzUHJvcGVydGllcyA9XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMoXCJjYXRhbHl0aWNcIik7XG4gICAgICBjb25zdCBwcm9jZXNzV2lkdGggPSBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICBjb25zdCBtYWNyb21vbGVjdWxlV2lkdGggPSBkZWZhdWx0TWFjcm9tb2xlY3VsZVByb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICBjb25zdCBtYWNyb21vbGVjdWxlSGVpZ2h0ID0gZGVmYXVsdE1hY3JvbW9sZWN1bGVQcm9wZXJ0aWVzLmhlaWdodCB8fCA1MDtcbiAgICAgIGNvbnN0IHByb2Nlc3NIZWlnaHQgPSBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMuaGVpZ2h0IHx8IDUwO1xuICAgICAgY29uc3QgcmVndWxhdG9ySGVpZ2h0ID0gZGVmYXVsdFJlZ3VsYXRvclByb3BlcnRpZXMuaGVpZ2h0IHx8IDUwO1xuICAgICAgY29uc3QgcHJvY2Vzc1Bvc2l0aW9uID0gZWxlbWVudFV0aWxpdGllcy5jb252ZXJ0VG9Nb2RlbFBvc2l0aW9uKHtcbiAgICAgICAgeDogY3kud2lkdGgoKSAvIDIsXG4gICAgICAgIHk6IGN5LmhlaWdodCgpIC8gMixcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZWRnZUxlbmd0aCA9IDMwO1xuICAgICAgY29uc3QgcHJvY2Vzc1BvcnRzT3JkZXJpbmcgPVxuICAgICAgICBvcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiID8gXCJULXRvLUJcIiA6IFwiTC10by1SXCI7XG4gICAgICBjb25zdCBtaW5JbmZvYm94RGltZW5zaW9uID0gMjA7XG4gICAgICBjb25zdCB3aWR0aFBlckNoYXIgPSA2O1xuICAgICAgY29uc3QgbXVsdGltZXJPZmZzZXQgPSA2O1xuXG4gICAgICBjeS5zdGFydEJhdGNoKCk7XG5cbiAgICAgIGlmICghZWxlbWVudFV0aWxpdGllcy5nZXRNYXBUeXBlKCkpIHtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRNYXBUeXBlKFwiUERcIik7XG4gICAgICB9XG5cbiAgICAgIGxldCB4UG9zT2ZJbnB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54IC1cbiAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgLVxuICAgICAgICBtYWNyb21vbGVjdWxlV2lkdGggLyAyO1xuICAgICAgbGV0IHhQb3NPZk91dHB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54ICtcbiAgICAgICAgZWRnZUxlbmd0aCArXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgK1xuICAgICAgICBtYWNyb21vbGVjdWxlV2lkdGggLyAyO1xuICAgICAgbGV0IHlQb3NPZklucHV0ID0gcHJvY2Vzc1Bvc2l0aW9uLnk7XG4gICAgICBsZXQgeVBvc09mT3V0cHV0ID0gcHJvY2Vzc1Bvc2l0aW9uLnk7XG5cbiAgICAgIGxldCBwcm9jZXNzTm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLngsXG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi55LFxuICAgICAgICB7IGNsYXNzOiBcInByb2Nlc3NcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRQb3J0c09yZGVyaW5nKHByb2Nlc3NOb2RlLCBwcm9jZXNzUG9ydHNPcmRlcmluZyk7XG4gICAgICBwcm9jZXNzTm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBsZXQgbm9kZVBvc2l0aW9uID0ge1xuICAgICAgICB4OiB4UG9zT2ZJbnB1dCxcbiAgICAgICAgeTogeVBvc09mSW5wdXQsXG4gICAgICB9O1xuICAgICAgaWYgKG9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgICAgbm9kZVBvc2l0aW9uID0gZWxlbWVudFV0aWxpdGllcy5yb3RhdGU5MChub2RlUG9zaXRpb24sIHByb2Nlc3NQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGxldCBpbnB1dE5vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUobm9kZVBvc2l0aW9uLngsIG5vZGVQb3NpdGlvbi55LCB7XG4gICAgICAgIGNsYXNzOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgbGFuZ3VhZ2U6IFwiUERcIixcbiAgICAgIH0pO1xuICAgICAgaW5wdXROb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICBpbnB1dE5vZGUuZGF0YShcImxhYmVsXCIsIG1hY3JvbW9sZWN1bGVOYW1lKTtcblxuICAgICAgbGV0IGlucHV0RWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgaW5wdXROb2RlLmlkKCksXG4gICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgIHsgY2xhc3M6IFwiY29uc3VtcHRpb25cIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgaW5wdXRFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIGxldCBjYXJkaW5hbGl0eSA9IG1hY3JvbW9sZWN1bGVNdWx0aW1lckNhcmRpbmFsaXR5O1xuICAgICAgaWYgKGNhcmRpbmFsaXR5ICE9PSBcIlwiKSB7XG4gICAgICAgIGlucHV0RWRnZS5kYXRhKFwiY2FyZGluYWxpdHlcIiwgY2FyZGluYWxpdHkpO1xuICAgICAgfVxuXG4gICAgICBub2RlUG9zaXRpb24gPSB7XG4gICAgICAgIHg6IHhQb3NPZk91dHB1dCxcbiAgICAgICAgeTogeVBvc09mT3V0cHV0LFxuICAgICAgfTtcblxuICAgICAgaWYgKG9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgICAgbm9kZVBvc2l0aW9uID0gZWxlbWVudFV0aWxpdGllcy5yb3RhdGU5MChub2RlUG9zaXRpb24sIHByb2Nlc3NQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGxldCBvdXRwdXROb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICBub2RlUG9zaXRpb24ueCxcbiAgICAgICAgbm9kZVBvc2l0aW9uLnksXG4gICAgICAgIHsgY2xhc3M6IFwibWFjcm9tb2xlY3VsZVwiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBvdXRwdXROb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICBvdXRwdXROb2RlLmRhdGEoXCJsYWJlbFwiLCBtYWNyb21vbGVjdWxlTmFtZSk7XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE11bHRpbWVyU3RhdHVzKG91dHB1dE5vZGUsIHRydWUpO1xuXG4gICAgICBpZiAoY2FyZGluYWxpdHkgIT09IFwiXCIpIHtcbiAgICAgICAgY29uc3QgaW5mb2JveExhYmVsID0gXCJOOlwiICsgY2FyZGluYWxpdHk7XG4gICAgICAgIGluZm9ib3hPYmplY3QgPSB7XG4gICAgICAgICAgY2xheno6IFwidW5pdCBvZiBpbmZvcm1hdGlvblwiLFxuICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICB0ZXh0OiBpbmZvYm94TGFiZWwsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBiYm94OiB7XG4gICAgICAgICAgICB3OiBpbmZvYm94TGFiZWwubGVuZ3RoICogd2lkdGhQZXJDaGFyLFxuICAgICAgICAgICAgaDogbWluSW5mb2JveERpbWVuc2lvbixcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmFkZFN0YXRlT3JJbmZvQm94KG91dHB1dE5vZGUsIGluZm9ib3hPYmplY3QpO1xuICAgICAgfVxuXG4gICAgICBsZXQgb3V0cHV0RWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgcHJvY2Vzc05vZGUuaWQoKSxcbiAgICAgICAgb3V0cHV0Tm9kZS5pZCgpLFxuICAgICAgICB7IGNsYXNzOiBcInByb2R1Y3Rpb25cIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgb3V0cHV0RWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBpZiAoaGFzUmVndWxhdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlZ3VsYXRvck5hbWUgPSByZWd1bGF0b3IubmFtZTtcbiAgICAgICAgY29uc3QgcmVndWxhdG9yVHlwZSA9IHJlZ3VsYXRvci50eXBlO1xuICAgICAgICBjb25zdCByZWd1bGF0b3JFZGdlVHlwZSA9IHJlZ3VsYXRvci5lZGdlVHlwZTtcblxuICAgICAgICBsZXQgeFBvc09mUmVndWxhdG9yID0gcHJvY2Vzc1Bvc2l0aW9uLng7XG4gICAgICAgIGlmIChyZWd1bGF0b3JNdWx0aW1lci5lbmFibGVkICYmIG9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIikge1xuICAgICAgICAgIHhQb3NPZlJlZ3VsYXRvciAtPSBtdWx0aW1lck9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgeVBvc09mUmVndWxhdG9yID1cbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSAtXG4gICAgICAgICAgKHByb2Nlc3NIZWlnaHQgLyAyICsgcmVndWxhdG9ySGVpZ2h0IC8gMiArIGVkZ2VMZW5ndGgpO1xuXG4gICAgICAgIG5vZGVQb3NpdGlvbiA9IHtcbiAgICAgICAgICB4OiB4UG9zT2ZSZWd1bGF0b3IsXG4gICAgICAgICAgeTogeVBvc09mUmVndWxhdG9yLFxuICAgICAgICB9O1xuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgICAgIG5vZGVQb3NpdGlvbiA9IGVsZW1lbnRVdGlsaXRpZXMucm90YXRlOTAoXG4gICAgICAgICAgICBub2RlUG9zaXRpb24sXG4gICAgICAgICAgICBwcm9jZXNzUG9zaXRpb25cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlZ3VsYXRvck5vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgICAgbm9kZVBvc2l0aW9uLngsXG4gICAgICAgICAgbm9kZVBvc2l0aW9uLnksXG4gICAgICAgICAgeyBjbGFzczogcmVndWxhdG9yVHlwZSwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICAgICk7XG4gICAgICAgIHJlZ3VsYXRvck5vZGUuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgICAgcmVndWxhdG9yTm9kZS5kYXRhKFwibGFiZWxcIiwgcmVndWxhdG9yTmFtZSk7XG5cbiAgICAgICAgaWYgKHJlZ3VsYXRvck11bHRpbWVyLmVuYWJsZWQpIHtcbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE11bHRpbWVyU3RhdHVzKHJlZ3VsYXRvck5vZGUsIHRydWUpO1xuXG4gICAgICAgICAgY29uc3QgY2FyZGluYWxpdHkgPSByZWd1bGF0b3JNdWx0aW1lci5jYXJkaW5hbGl0eTtcbiAgICAgICAgICBpZiAoY2FyZGluYWxpdHkgIT0gXCJcIikge1xuICAgICAgICAgICAgY29uc3QgaW5mb2JveExhYmVsID0gXCJOOlwiICsgY2FyZGluYWxpdHk7XG4gICAgICAgICAgICBpbmZvYm94T2JqZWN0ID0ge1xuICAgICAgICAgICAgICBjbGF6ejogXCJ1bml0IG9mIGluZm9ybWF0aW9uXCIsXG4gICAgICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICAgICAgdGV4dDogaW5mb2JveExhYmVsLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBiYm94OiB7XG4gICAgICAgICAgICAgICAgdzogaW5mb2JveExhYmVsLmxlbmd0aCAqIHdpZHRoUGVyQ2hhcixcbiAgICAgICAgICAgICAgICBoOiBtaW5JbmZvYm94RGltZW5zaW9uLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuYWRkU3RhdGVPckluZm9Cb3gocmVndWxhdG9yTm9kZSwgaW5mb2JveE9iamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlZ3VsYXRvckVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UoXG4gICAgICAgICAgcmVndWxhdG9yTm9kZS5pZCgpLFxuICAgICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgICAgeyBjbGFzczogcmVndWxhdG9yRWRnZVR5cGUsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgICApO1xuICAgICAgICByZWd1bGF0b3JFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGN5LmVuZEJhdGNoKCk7XG5cbiAgICAgIGNvbnN0IGVsZXMgPSBjeS5lbGVtZW50cyhcIltqdXN0QWRkZWRdXCIpO1xuICAgICAgZWxlcy5yZW1vdmVEYXRhKFwianVzdEFkZGVkXCIpO1xuXG4gICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICBlbGVzLnNlbGVjdCgpO1xuXG4gICAgICByZXR1cm4gZWxlcztcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5jcmVhdGVDb252ZXJzaW9uID0gZnVuY3Rpb24gKFxuICAgICAgbWFjcm9tb2xlY3VsZSxcbiAgICAgIHJlZ3VsYXRvcixcbiAgICAgIHJlZ3VsYXRvck11bHRpbWVyLFxuICAgICAgb3JpZW50YXRpb24sXG4gICAgICBpbnB1dEluZm9ib3hMYWJlbHMsXG4gICAgICBvdXRwdXRJbmZvYm94TGFiZWxzXG4gICAgKSB7XG4gICAgICBjb25zdCBoYXNSZWd1bGF0b3IgPSByZWd1bGF0b3IubmFtZSAhPT0gdW5kZWZpbmVkO1xuICAgICAgY29uc3QgbWFjcm9tb2xlY3VsZU5hbWUgPSBtYWNyb21vbGVjdWxlLm5hbWU7XG4gICAgICBjb25zdCBtYWNyb21vbGVjdWxlSXNNdWx0aW1lciA9IG1hY3JvbW9sZWN1bGUubXVsdGltZXIuZW5hYmxlZDtcbiAgICAgIGNvbnN0IG1hY3JvbW9sZWN1bGVNdWx0aW1lckNhcmRpbmFsaXR5ID1cbiAgICAgICAgbWFjcm9tb2xlY3VsZS5tdWx0aW1lci5jYXJkaW5hbGl0eTtcbiAgICAgIGNvbnN0IGRlZmF1bHRNYWNyb21vbGVjdWxlUHJvcGVydGllcyA9XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMoXCJtYWNyb21vbGVjdWxlXCIpO1xuICAgICAgY29uc3QgZGVmYXVsdFJlZ3VsYXRvclByb3BlcnRpZXMgPSBoYXNSZWd1bGF0b3JcbiAgICAgICAgPyBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKHJlZ3VsYXRvci50eXBlKVxuICAgICAgICA6IHt9O1xuICAgICAgY29uc3QgZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcImNhdGFseXRpY1wiKTtcbiAgICAgIGNvbnN0IHByb2Nlc3NXaWR0aCA9IGRlZmF1bHRQcm9jZXNzUHJvcGVydGllcy53aWR0aCB8fCA1MDtcbiAgICAgIGNvbnN0IG1hY3JvbW9sZWN1bGVXaWR0aCA9IGRlZmF1bHRNYWNyb21vbGVjdWxlUHJvcGVydGllcy53aWR0aCB8fCA1MDtcbiAgICAgIGNvbnN0IG1hY3JvbW9sZWN1bGVIZWlnaHQgPSBkZWZhdWx0TWFjcm9tb2xlY3VsZVByb3BlcnRpZXMuaGVpZ2h0IHx8IDUwO1xuICAgICAgY29uc3QgcHJvY2Vzc0hlaWdodCA9IGRlZmF1bHRQcm9jZXNzUHJvcGVydGllcy5oZWlnaHQgfHwgNTA7XG4gICAgICBjb25zdCByZWd1bGF0b3JIZWlnaHQgPSBkZWZhdWx0UmVndWxhdG9yUHJvcGVydGllcy5oZWlnaHQgfHwgNTA7XG4gICAgICBjb25zdCBwcm9jZXNzUG9zaXRpb24gPSBlbGVtZW50VXRpbGl0aWVzLmNvbnZlcnRUb01vZGVsUG9zaXRpb24oe1xuICAgICAgICB4OiBjeS53aWR0aCgpIC8gMixcbiAgICAgICAgeTogY3kuaGVpZ2h0KCkgLyAyLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBlZGdlTGVuZ3RoID0gMzA7XG4gICAgICBjb25zdCBwcm9jZXNzUG9ydHNPcmRlcmluZyA9XG4gICAgICAgIG9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgPyBcIlQtdG8tQlwiIDogXCJMLXRvLVJcIjtcbiAgICAgIGNvbnN0IG1pbkluZm9ib3hEaW1lbnNpb24gPSAyMDtcbiAgICAgIGNvbnN0IHdpZHRoUGVyQ2hhciA9IDY7XG4gICAgICBjb25zdCBtdWx0aW1lck9mZnNldCA9IDY7XG5cbiAgICAgIGN5LnN0YXJ0QmF0Y2goKTtcblxuICAgICAgaWYgKCFlbGVtZW50VXRpbGl0aWVzLmdldE1hcFR5cGUoKSkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE1hcFR5cGUoXCJQRFwiKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHhQb3NPZklucHV0ID1cbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnggLVxuICAgICAgICBlZGdlTGVuZ3RoIC1cbiAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiAtXG4gICAgICAgIG1hY3JvbW9sZWN1bGVXaWR0aCAvIDI7XG4gICAgICBsZXQgeFBvc09mT3V0cHV0ID1cbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnggK1xuICAgICAgICBlZGdlTGVuZ3RoICtcbiAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiArXG4gICAgICAgIG1hY3JvbW9sZWN1bGVXaWR0aCAvIDI7XG4gICAgICBsZXQgeVBvc09mSW5wdXQgPSBwcm9jZXNzUG9zaXRpb24ueTtcbiAgICAgIGxldCB5UG9zT2ZPdXRwdXQgPSBwcm9jZXNzUG9zaXRpb24ueTtcblxuICAgICAgbGV0IHByb2Nlc3NOb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCxcbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnksXG4gICAgICAgIHsgY2xhc3M6IFwicHJvY2Vzc1wiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnNldFBvcnRzT3JkZXJpbmcocHJvY2Vzc05vZGUsIHByb2Nlc3NQb3J0c09yZGVyaW5nKTtcbiAgICAgIHByb2Nlc3NOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIGxldCBub2RlUG9zaXRpb24gPSB7XG4gICAgICAgIHg6IHhQb3NPZklucHV0LFxuICAgICAgICB5OiB5UG9zT2ZJbnB1dCxcbiAgICAgIH07XG4gICAgICBpZiAob3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgICBub2RlUG9zaXRpb24gPSBlbGVtZW50VXRpbGl0aWVzLnJvdGF0ZTkwKG5vZGVQb3NpdGlvbiwgcHJvY2Vzc1Bvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGlucHV0Tm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShub2RlUG9zaXRpb24ueCwgbm9kZVBvc2l0aW9uLnksIHtcbiAgICAgICAgY2xhc3M6IFwibWFjcm9tb2xlY3VsZVwiLFxuICAgICAgICBsYW5ndWFnZTogXCJQRFwiLFxuICAgICAgfSk7XG4gICAgICBpbnB1dE5vZGUuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgIGlucHV0Tm9kZS5kYXRhKFwibGFiZWxcIiwgbWFjcm9tb2xlY3VsZU5hbWUpO1xuICAgICAgaWYgKG1hY3JvbW9sZWN1bGVJc011bHRpbWVyKSB7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0TXVsdGltZXJTdGF0dXMoaW5wdXROb2RlLCB0cnVlKTtcblxuICAgICAgICBjb25zdCBjYXJkaW5hbGl0eSA9IG1hY3JvbW9sZWN1bGVNdWx0aW1lckNhcmRpbmFsaXR5O1xuICAgICAgICBpZiAoY2FyZGluYWxpdHkgIT0gXCJcIikge1xuICAgICAgICAgIGNvbnN0IGluZm9ib3hMYWJlbCA9IFwiTjpcIiArIGNhcmRpbmFsaXR5O1xuICAgICAgICAgIGluZm9ib3hPYmplY3QgPSB7XG4gICAgICAgICAgICBjbGF6ejogXCJ1bml0IG9mIGluZm9ybWF0aW9uXCIsXG4gICAgICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgICB0ZXh0OiBpbmZvYm94TGFiZWwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmJveDoge1xuICAgICAgICAgICAgICB3OiBpbmZvYm94TGFiZWwubGVuZ3RoICogd2lkdGhQZXJDaGFyLFxuICAgICAgICAgICAgICBoOiBtaW5JbmZvYm94RGltZW5zaW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuYWRkU3RhdGVPckluZm9Cb3goaW5wdXROb2RlLCBpbmZvYm94T2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbnB1dEluZm9ib3hMYWJlbHMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgY29uc3QgaW5wdXRJbmZvYm94V2lkdGggPVxuICAgICAgICAgIGxhYmVsLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gTWF0aC5tYXgod2lkdGhQZXJDaGFyICogbGFiZWwubGVuZ3RoLCBtaW5JbmZvYm94RGltZW5zaW9uKVxuICAgICAgICAgICAgOiBtaW5JbmZvYm94RGltZW5zaW9uO1xuICAgICAgICBsZXQgaW5mb2JveE9iamVjdCA9IHtcbiAgICAgICAgICBjbGF6ejogXCJ1bml0IG9mIGluZm9ybWF0aW9uXCIsXG4gICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmJveDoge1xuICAgICAgICAgICAgdzogaW5wdXRJbmZvYm94V2lkdGgsXG4gICAgICAgICAgICBoOiBtaW5JbmZvYm94RGltZW5zaW9uLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIFwic2hhcGUtbmFtZVwiOiBcImVsbGlwc2VcIixcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmFkZFN0YXRlT3JJbmZvQm94KGlucHV0Tm9kZSwgaW5mb2JveE9iamVjdCk7XG4gICAgICB9KTtcblxuICAgICAgbGV0IGlucHV0RWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgaW5wdXROb2RlLmlkKCksXG4gICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgIHsgY2xhc3M6IFwiY29uc3VtcHRpb25cIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgaW5wdXRFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIG5vZGVQb3NpdGlvbiA9IHtcbiAgICAgICAgeDogeFBvc09mT3V0cHV0LFxuICAgICAgICB5OiB5UG9zT2ZPdXRwdXQsXG4gICAgICB9O1xuXG4gICAgICBpZiAob3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgICBub2RlUG9zaXRpb24gPSBlbGVtZW50VXRpbGl0aWVzLnJvdGF0ZTkwKG5vZGVQb3NpdGlvbiwgcHJvY2Vzc1Bvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgbGV0IG91dHB1dE5vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgIG5vZGVQb3NpdGlvbi54LFxuICAgICAgICBub2RlUG9zaXRpb24ueSxcbiAgICAgICAgeyBjbGFzczogXCJtYWNyb21vbGVjdWxlXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIG91dHB1dE5vZGUuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgIG91dHB1dE5vZGUuZGF0YShcImxhYmVsXCIsIG1hY3JvbW9sZWN1bGVOYW1lKTtcbiAgICAgIGlmIChtYWNyb21vbGVjdWxlSXNNdWx0aW1lcikge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE11bHRpbWVyU3RhdHVzKG91dHB1dE5vZGUsIHRydWUpO1xuXG4gICAgICAgIGNvbnN0IGNhcmRpbmFsaXR5ID0gbWFjcm9tb2xlY3VsZU11bHRpbWVyQ2FyZGluYWxpdHk7XG4gICAgICAgIGlmIChjYXJkaW5hbGl0eSAhPSBcIlwiKSB7XG4gICAgICAgICAgY29uc3QgaW5mb2JveExhYmVsID0gXCJOOlwiICsgY2FyZGluYWxpdHk7XG4gICAgICAgICAgaW5mb2JveE9iamVjdCA9IHtcbiAgICAgICAgICAgIGNsYXp6OiBcInVuaXQgb2YgaW5mb3JtYXRpb25cIixcbiAgICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICAgIHRleHQ6IGluZm9ib3hMYWJlbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiYm94OiB7XG4gICAgICAgICAgICAgIHc6IGluZm9ib3hMYWJlbC5sZW5ndGggKiB3aWR0aFBlckNoYXIsXG4gICAgICAgICAgICAgIGg6IG1pbkluZm9ib3hEaW1lbnNpb24sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICAgICAgZWxlbWVudFV0aWxpdGllcy5hZGRTdGF0ZU9ySW5mb0JveChvdXRwdXROb2RlLCBpbmZvYm94T2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvdXRwdXRJbmZvYm94TGFiZWxzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgIGNvbnN0IG91dHB1dEluZm9ib3hXaWR0aCA9XG4gICAgICAgICAgbGFiZWwubGVuZ3RoID4gMFxuICAgICAgICAgICAgPyBNYXRoLm1heCh3aWR0aFBlckNoYXIgKiBsYWJlbC5sZW5ndGgsIG1pbkluZm9ib3hEaW1lbnNpb24pXG4gICAgICAgICAgICA6IG1pbkluZm9ib3hEaW1lbnNpb247XG4gICAgICAgIGluZm9ib3hPYmplY3QgPSB7XG4gICAgICAgICAgY2xheno6IFwidW5pdCBvZiBpbmZvcm1hdGlvblwiLFxuICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJib3g6IHtcbiAgICAgICAgICAgIHc6IG91dHB1dEluZm9ib3hXaWR0aCxcbiAgICAgICAgICAgIGg6IG1pbkluZm9ib3hEaW1lbnNpb24sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgXCJzaGFwZS1uYW1lXCI6IFwiZWxsaXBzZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuYWRkU3RhdGVPckluZm9Cb3gob3V0cHV0Tm9kZSwgaW5mb2JveE9iamVjdCk7XG4gICAgICB9KTtcblxuICAgICAgW2lucHV0Tm9kZSwgb3V0cHV0Tm9kZV0uZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBjb25zdCB3aWR0aCA9IGVsZW1lbnRVdGlsaXRpZXMuY2FsY3VsYXRlTWluV2lkdGgobm9kZSk7XG5cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5yZXNpemVOb2RlcyhcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgIG1hY3JvbW9sZWN1bGVIZWlnaHQsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgbGV0IG5ld0lucHV0WFBvcyA9XG4gICAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnggLVxuICAgICAgICAgIGVkZ2VMZW5ndGggLVxuICAgICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgLVxuICAgICAgICAgIGlucHV0Tm9kZS5kYXRhKFwiYmJveFwiKS53IC8gMjtcbiAgICAgICAgaW5wdXROb2RlLnBvc2l0aW9uKFwieFwiLCBuZXdJbnB1dFhQb3MpO1xuXG4gICAgICAgIGxldCBuZXdPdXRwdXRYUG9zID1cbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCArXG4gICAgICAgICAgZWRnZUxlbmd0aCArXG4gICAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiArXG4gICAgICAgICAgb3V0cHV0Tm9kZS5kYXRhKFwiYmJveFwiKS53IC8gMjtcbiAgICAgICAgb3V0cHV0Tm9kZS5wb3NpdGlvbihcInhcIiwgbmV3T3V0cHV0WFBvcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbmV3SW5wdXRZUG9zID1cbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSAtXG4gICAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiAtXG4gICAgICAgICAgaW5wdXROb2RlLmRhdGEoXCJiYm94XCIpLmggLyAyO1xuICAgICAgICBpbnB1dE5vZGUucG9zaXRpb24oXCJ5XCIsIG5ld0lucHV0WVBvcyk7XG5cbiAgICAgICAgbGV0IG5ld091dHB1dFlQb3MgPVxuICAgICAgICAgIHByb2Nlc3NQb3NpdGlvbi55ICtcbiAgICAgICAgICBlZGdlTGVuZ3RoICtcbiAgICAgICAgICBwcm9jZXNzV2lkdGggLyAyICtcbiAgICAgICAgICBvdXRwdXROb2RlLmRhdGEoXCJiYm94XCIpLmggLyAyO1xuICAgICAgICBvdXRwdXROb2RlLnBvc2l0aW9uKFwieVwiLCBuZXdPdXRwdXRZUG9zKTtcbiAgICAgIH1cblxuICAgICAgbGV0IG91dHB1dEVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UoXG4gICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgIG91dHB1dE5vZGUuaWQoKSxcbiAgICAgICAgeyBjbGFzczogXCJwcm9kdWN0aW9uXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIG91dHB1dEVkZ2UuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcblxuICAgICAgaWYgKGhhc1JlZ3VsYXRvcikge1xuICAgICAgICBjb25zdCByZWd1bGF0b3JOYW1lID0gcmVndWxhdG9yLm5hbWU7XG4gICAgICAgIGNvbnN0IHJlZ3VsYXRvclR5cGUgPSByZWd1bGF0b3IudHlwZTtcbiAgICAgICAgbGV0IHhQb3NPZlJlZ3VsYXRvciA9IHByb2Nlc3NQb3NpdGlvbi54O1xuICAgICAgICBpZiAocmVndWxhdG9yTXVsdGltZXIuZW5hYmxlZCAmJiBvcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgICB4UG9zT2ZSZWd1bGF0b3IgLT0gbXVsdGltZXJPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHlQb3NPZlJlZ3VsYXRvciA9XG4gICAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnkgLVxuICAgICAgICAgIChwcm9jZXNzSGVpZ2h0IC8gMiArIHJlZ3VsYXRvckhlaWdodCAvIDIgKyBlZGdlTGVuZ3RoKTtcblxuICAgICAgICBub2RlUG9zaXRpb24gPSB7XG4gICAgICAgICAgeDogeFBvc09mUmVndWxhdG9yLFxuICAgICAgICAgIHk6IHlQb3NPZlJlZ3VsYXRvcixcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgICAgICBub2RlUG9zaXRpb24gPSBlbGVtZW50VXRpbGl0aWVzLnJvdGF0ZTkwKFxuICAgICAgICAgICAgbm9kZVBvc2l0aW9uLFxuICAgICAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWd1bGF0b3JOb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKFxuICAgICAgICAgIG5vZGVQb3NpdGlvbi54LFxuICAgICAgICAgIG5vZGVQb3NpdGlvbi55LFxuICAgICAgICAgIHsgY2xhc3M6IHJlZ3VsYXRvclR5cGUsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgICApO1xuICAgICAgICByZWd1bGF0b3JOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICAgIHJlZ3VsYXRvck5vZGUuZGF0YShcImxhYmVsXCIsIHJlZ3VsYXRvck5hbWUpO1xuXG4gICAgICAgIGlmIChyZWd1bGF0b3JNdWx0aW1lci5lbmFibGVkKSB7XG4gICAgICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRNdWx0aW1lclN0YXR1cyhyZWd1bGF0b3JOb2RlLCB0cnVlKTtcblxuICAgICAgICAgIGNvbnN0IGNhcmRpbmFsaXR5ID0gcmVndWxhdG9yTXVsdGltZXIuY2FyZGluYWxpdHk7XG4gICAgICAgICAgaWYgKGNhcmRpbmFsaXR5ICE9IFwiXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZm9ib3hMYWJlbCA9IFwiTjpcIiArIGNhcmRpbmFsaXR5O1xuICAgICAgICAgICAgaW5mb2JveE9iamVjdCA9IHtcbiAgICAgICAgICAgICAgY2xheno6IFwidW5pdCBvZiBpbmZvcm1hdGlvblwiLFxuICAgICAgICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgICAgIHRleHQ6IGluZm9ib3hMYWJlbCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYmJveDoge1xuICAgICAgICAgICAgICAgIHc6IGluZm9ib3hMYWJlbC5sZW5ndGggKiB3aWR0aFBlckNoYXIsXG4gICAgICAgICAgICAgICAgaDogbWluSW5mb2JveERpbWVuc2lvbixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmFkZFN0YXRlT3JJbmZvQm94KHJlZ3VsYXRvck5vZGUsIGluZm9ib3hPYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWd1bGF0b3JFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKFxuICAgICAgICAgIHJlZ3VsYXRvck5vZGUuaWQoKSxcbiAgICAgICAgICBwcm9jZXNzTm9kZS5pZCgpLFxuICAgICAgICAgIHsgY2xhc3M6IFwiY2F0YWx5c2lzXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgICApO1xuICAgICAgICByZWd1bGF0b3JFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGN5LmVuZEJhdGNoKCk7XG5cbiAgICAgIGNvbnN0IGVsZXMgPSBjeS5lbGVtZW50cyhcIltqdXN0QWRkZWRdXCIpO1xuICAgICAgZWxlcy5yZW1vdmVEYXRhKFwianVzdEFkZGVkXCIpO1xuXG4gICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICBlbGVzLnNlbGVjdCgpO1xuXG4gICAgICByZXR1cm4gZWxlcztcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5jcmVhdGVNZXRhYm9saWNSZWFjdGlvbiA9IGZ1bmN0aW9uIChcbiAgICAgIGlucHV0cyxcbiAgICAgIG91dHB1dHMsXG4gICAgICByZXZlcnNpYmxlLFxuICAgICAgcmVndWxhdG9yLFxuICAgICAgcmVndWxhdG9yTXVsdGltZXIsXG4gICAgICBvcmllbnRhdGlvblxuICAgICkge1xuICAgICAgbGV0IHJvdGF0ZTkwID0gZnVuY3Rpb24gKHBvaW50LCBjZW50ZXIpIHtcbiAgICAgICAgY29uc3QgcmVsYXRpdmVYID0gY2VudGVyLnggLSBwb2ludC54O1xuICAgICAgICBjb25zdCByZWxhdGl2ZVkgPSBjZW50ZXIueSAtIHBvaW50Lnk7XG5cbiAgICAgICAgY29uc3QgcmVsYXRpdmVSb3RhdGVkWCA9IHJlbGF0aXZlWTtcbiAgICAgICAgY29uc3QgcmVsYXRpdmVSb3RhdGVkWSA9IC0xICogcmVsYXRpdmVYO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdFggPSByZWxhdGl2ZVJvdGF0ZWRYICsgY2VudGVyLng7XG4gICAgICAgIGNvbnN0IHJlc3VsdFkgPSByZWxhdGl2ZVJvdGF0ZWRZICsgY2VudGVyLnk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiByZXN1bHRYLFxuICAgICAgICAgIHk6IHJlc3VsdFksXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgY29uc3QgaGFzUmVndWxhdG9yID0gcmVndWxhdG9yLm5hbWUgIT09IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IGRlZmF1bHRTaW1wbGVDaGVtaWNhbFByb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwic2ltcGxlIGNoZW1pY2FsXCIpO1xuICAgICAgY29uc3QgZGVmYXVsdFJlZ3VsYXRvclByb3BlcnRpZXMgPSBoYXNSZWd1bGF0b3JcbiAgICAgICAgPyBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKHJlZ3VsYXRvci50eXBlKVxuICAgICAgICA6IHt9O1xuICAgICAgY29uc3QgZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcImNhdGFseXRpY1wiKTtcbiAgICAgIGNvbnN0IHByb2Nlc3NXaWR0aCA9IGRlZmF1bHRQcm9jZXNzUHJvcGVydGllcy53aWR0aCB8fCA1MDtcbiAgICAgIGNvbnN0IHByb2Nlc3NIZWlnaHQgPSBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMuaGVpZ2h0IHx8IDUwO1xuICAgICAgY29uc3Qgc2ltcGxlQ2hlbWljYWxIZWlnaHQgPSBkZWZhdWx0U2ltcGxlQ2hlbWljYWxQcm9wZXJ0aWVzLmhlaWdodCB8fCAzNTtcbiAgICAgIGNvbnN0IHNpbXBsZUNoZW1pY2FsV2lkdGggPSBkZWZhdWx0U2ltcGxlQ2hlbWljYWxQcm9wZXJ0aWVzLndpZHRoIHx8IDM1O1xuICAgICAgY29uc3QgcmVndWxhdG9ySGVpZ2h0ID0gZGVmYXVsdFJlZ3VsYXRvclByb3BlcnRpZXMuaGVpZ2h0IHx8IDUwO1xuICAgICAgY29uc3QgcHJvY2Vzc1Bvc2l0aW9uID0gZWxlbWVudFV0aWxpdGllcy5jb252ZXJ0VG9Nb2RlbFBvc2l0aW9uKHtcbiAgICAgICAgeDogY3kud2lkdGgoKSAvIDIsXG4gICAgICAgIHk6IGN5LmhlaWdodCgpIC8gMixcbiAgICAgIH0pO1xuICAgICAgY29uc3QgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsID0gMTU7XG4gICAgICBjb25zdCBlZGdlTGVuZ3RoID0gMzA7XG4gICAgICBjb25zdCBwcm9jZXNzTGVmdFNpZGVFZGdlVHlwZSA9IHJldmVyc2libGUgPyBcInByb2R1Y3Rpb25cIiA6IFwiY29uc3VtcHRpb25cIjtcbiAgICAgIGNvbnN0IHByb2Nlc3NSaWdodFNpZGVFZGdlVHlwZSA9IFwicHJvZHVjdGlvblwiO1xuICAgICAgY29uc3QgcHJvY2Vzc1BvcnRzT3JkZXJpbmcgPVxuICAgICAgICBvcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiID8gXCJULXRvLUJcIiA6IFwiTC10by1SXCI7XG4gICAgICBjb25zdCBtdWx0aW1lck9mZnNldCA9IDY7XG5cbiAgICAgIGN5LnN0YXJ0QmF0Y2goKTtcbiAgICAgIGlmICghZWxlbWVudFV0aWxpdGllcy5nZXRNYXBUeXBlKCkpIHtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRNYXBUeXBlKFwiUERcIik7XG4gICAgICB9XG5cbiAgICAgIGxldCB4UG9zT2ZJbnB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54IC1cbiAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgLVxuICAgICAgICBzaW1wbGVDaGVtaWNhbFdpZHRoIC8gMjtcbiAgICAgIGxldCB4UG9zT2ZPdXRwdXQgPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCArXG4gICAgICAgIGVkZ2VMZW5ndGggK1xuICAgICAgICBwcm9jZXNzV2lkdGggLyAyICtcbiAgICAgICAgc2ltcGxlQ2hlbWljYWxXaWR0aCAvIDI7XG5cbiAgICAgIGxldCBwcm9jZXNzTm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLngsXG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi55LFxuICAgICAgICB7IGNsYXNzOiBcInByb2Nlc3NcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRQb3J0c09yZGVyaW5nKHByb2Nlc3NOb2RlLCBwcm9jZXNzUG9ydHNPcmRlcmluZyk7XG4gICAgICBwcm9jZXNzTm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBjb25zdCBudW1PZklucHV0Tm9kZXMgPSBpbnB1dHMubGVuZ3RoO1xuICAgICAgY29uc3QgbnVtT2ZPdXRwdXROb2RlcyA9IG91dHB1dHMubGVuZ3RoO1xuXG4gICAgICBsZXQgeVBvc09mSW5wdXQgPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSAtXG4gICAgICAgICgobnVtT2ZJbnB1dE5vZGVzIC0gMSkgLyAyKSAqXG4gICAgICAgICAgKHNpbXBsZUNoZW1pY2FsSGVpZ2h0ICsgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsKTtcblxuICAgICAgaW5wdXRzLmZvckVhY2goZnVuY3Rpb24gKGRhdGEsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG5vZGVOYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICBjb25zdCBub2RlVHlwZSA9IGRhdGEudHlwZTtcblxuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICB5UG9zT2ZJbnB1dCA9IHByb2Nlc3NQb3NpdGlvbi55O1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ICUgMiA9PT0gMSkge1xuICAgICAgICAgIHlQb3NPZklucHV0ID1cbiAgICAgICAgICAgIHByb2Nlc3NQb3NpdGlvbi55IC1cbiAgICAgICAgICAgIChzaW1wbGVDaGVtaWNhbEhlaWdodCArIHRpbGluZ1BhZGRpbmdWZXJ0aWNhbCkgKlxuICAgICAgICAgICAgICBNYXRoLmNlaWwoaW5kZXggLyAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5UG9zT2ZJbnB1dCA9XG4gICAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSArXG4gICAgICAgICAgICAoc2ltcGxlQ2hlbWljYWxIZWlnaHQgKyB0aWxpbmdQYWRkaW5nVmVydGljYWwpICogKGluZGV4IC8gMik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbm9kZVBvc2l0aW9uID0ge1xuICAgICAgICAgIHg6IHhQb3NPZklucHV0LFxuICAgICAgICAgIHk6IHlQb3NPZklucHV0LFxuICAgICAgICB9O1xuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgICAgIG5vZGVQb3NpdGlvbiA9IHJvdGF0ZTkwKG5vZGVQb3NpdGlvbiwgcHJvY2Vzc1Bvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBuZXdOb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKG5vZGVQb3NpdGlvbi54LCBub2RlUG9zaXRpb24ueSwge1xuICAgICAgICAgIGNsYXNzOiBub2RlVHlwZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICAgIH0pO1xuICAgICAgICBuZXdOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICAgIG5ld05vZGUuZGF0YShcImxhYmVsXCIsIG5vZGVOYW1lKTtcblxuICAgICAgICBsZXQgbmV3RWRnZTtcbiAgICAgICAgaWYgKHJldmVyc2libGUpIHtcbiAgICAgICAgICBuZXdFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKFxuICAgICAgICAgICAgcHJvY2Vzc05vZGUuaWQoKSxcbiAgICAgICAgICAgIG5ld05vZGUuaWQoKSxcbiAgICAgICAgICAgIHsgY2xhc3M6IHByb2Nlc3NMZWZ0U2lkZUVkZ2VUeXBlLCBsYW5ndWFnZTogXCJQRFwiIH0sXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKG5ld05vZGUuaWQoKSwgcHJvY2Vzc05vZGUuaWQoKSwge1xuICAgICAgICAgICAgY2xhc3M6IHByb2Nlc3NMZWZ0U2lkZUVkZ2VUeXBlLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IFwiUERcIixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBuZXdFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICB9KTtcblxuICAgICAgbGV0IHlQb3NPZk91dHB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi55IC1cbiAgICAgICAgKChudW1PZk91dHB1dE5vZGVzIC0gMSkgLyAyKSAqXG4gICAgICAgICAgKHNpbXBsZUNoZW1pY2FsSGVpZ2h0ICsgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsKTtcblxuICAgICAgb3V0cHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhLCBpbmRleCkge1xuICAgICAgICBjb25zdCBub2RlTmFtZSA9IGRhdGEubmFtZTtcbiAgICAgICAgY29uc3Qgbm9kZVR5cGUgPSBkYXRhLnR5cGU7XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgeVBvc09mT3V0cHV0ID0gcHJvY2Vzc1Bvc2l0aW9uLnk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggJSAyID09PSAxKSB7XG4gICAgICAgICAgeVBvc09mT3V0cHV0ID1cbiAgICAgICAgICAgIHByb2Nlc3NQb3NpdGlvbi55IC1cbiAgICAgICAgICAgIChzaW1wbGVDaGVtaWNhbEhlaWdodCArIHRpbGluZ1BhZGRpbmdWZXJ0aWNhbCkgKlxuICAgICAgICAgICAgICBNYXRoLmNlaWwoaW5kZXggLyAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5UG9zT2ZPdXRwdXQgPVxuICAgICAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnkgK1xuICAgICAgICAgICAgKHNpbXBsZUNoZW1pY2FsSGVpZ2h0ICsgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsKSAqIChpbmRleCAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5vZGVQb3NpdGlvbiA9IHtcbiAgICAgICAgICB4OiB4UG9zT2ZPdXRwdXQsXG4gICAgICAgICAgeTogeVBvc09mT3V0cHV0LFxuICAgICAgICB9O1xuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgICAgIG5vZGVQb3NpdGlvbiA9IHJvdGF0ZTkwKG5vZGVQb3NpdGlvbiwgcHJvY2Vzc1Bvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBuZXdOb2RlID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKG5vZGVQb3NpdGlvbi54LCBub2RlUG9zaXRpb24ueSwge1xuICAgICAgICAgIGNsYXNzOiBub2RlVHlwZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICAgIH0pO1xuICAgICAgICBuZXdOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICAgIG5ld05vZGUuZGF0YShcImxhYmVsXCIsIG5vZGVOYW1lKTtcblxuICAgICAgICBsZXQgbmV3RWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgICBwcm9jZXNzTm9kZS5pZCgpLFxuICAgICAgICAgIG5ld05vZGUuaWQoKSxcbiAgICAgICAgICB7IGNsYXNzOiBwcm9jZXNzUmlnaHRTaWRlRWRnZVR5cGUsIGxhbmd1YWdlOiBcIlBEXCIgfSxcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIDBcbiAgICAgICAgKTtcbiAgICAgICAgbmV3RWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGFkZCByZWd1bGF0b3Igbm9kZVxuICAgICAgaWYgKGhhc1JlZ3VsYXRvcikge1xuICAgICAgICBjb25zdCByZWd1bGF0b3JOYW1lID0gcmVndWxhdG9yLm5hbWU7XG4gICAgICAgIGNvbnN0IHJlZ3VsYXRvclR5cGUgPSByZWd1bGF0b3IudHlwZTtcbiAgICAgICAgbGV0IHhQb3NPZlJlZ3VsYXRvciA9IHByb2Nlc3NQb3NpdGlvbi54O1xuICAgICAgICBpZiAocmVndWxhdG9yTXVsdGltZXIuZW5hYmxlZCAmJiBvcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgICB4UG9zT2ZSZWd1bGF0b3IgLT0gbXVsdGltZXJPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHlQb3NPZlJlZ3VsYXRvciA9XG4gICAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnkgLVxuICAgICAgICAgIChwcm9jZXNzSGVpZ2h0IC8gMiArIHJlZ3VsYXRvckhlaWdodCAvIDIgKyBlZGdlTGVuZ3RoKTtcblxuICAgICAgICBsZXQgbm9kZVBvc2l0aW9uID0ge1xuICAgICAgICAgIHg6IHhQb3NPZlJlZ3VsYXRvcixcbiAgICAgICAgICB5OiB5UG9zT2ZSZWd1bGF0b3IsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgICAgbm9kZVBvc2l0aW9uID0gcm90YXRlOTAobm9kZVBvc2l0aW9uLCBwcm9jZXNzUG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlZ3VsYXRvck5vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgICAgbm9kZVBvc2l0aW9uLngsXG4gICAgICAgICAgbm9kZVBvc2l0aW9uLnksXG4gICAgICAgICAgeyBjbGFzczogcmVndWxhdG9yVHlwZSwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICAgICk7XG4gICAgICAgIHJlZ3VsYXRvck5vZGUuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgICAgcmVndWxhdG9yTm9kZS5kYXRhKFwibGFiZWxcIiwgcmVndWxhdG9yTmFtZSk7XG5cbiAgICAgICAgaWYgKHJlZ3VsYXRvck11bHRpbWVyLmVuYWJsZWQpIHtcbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE11bHRpbWVyU3RhdHVzKHJlZ3VsYXRvck5vZGUsIHRydWUpO1xuXG4gICAgICAgICAgY29uc3QgY2FyZGluYWxpdHkgPSByZWd1bGF0b3JNdWx0aW1lci5jYXJkaW5hbGl0eTtcbiAgICAgICAgICBpZiAoY2FyZGluYWxpdHkgIT0gXCJcIikge1xuICAgICAgICAgICAgY29uc3QgaW5mb2JveExhYmVsID0gXCJOOlwiICsgY2FyZGluYWxpdHk7XG4gICAgICAgICAgICBpbmZvYm94T2JqZWN0ID0ge1xuICAgICAgICAgICAgICBjbGF6ejogXCJ1bml0IG9mIGluZm9ybWF0aW9uXCIsXG4gICAgICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICAgICAgdGV4dDogaW5mb2JveExhYmVsLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBiYm94OiB7XG4gICAgICAgICAgICAgICAgdzogaW5mb2JveExhYmVsLmxlbmd0aCAqIDYsXG4gICAgICAgICAgICAgICAgaDogMTUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmFkZFN0YXRlT3JJbmZvQm94KHJlZ3VsYXRvck5vZGUsIGluZm9ib3hPYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWd1bGF0b3JFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKFxuICAgICAgICAgIHJlZ3VsYXRvck5vZGUuaWQoKSxcbiAgICAgICAgICBwcm9jZXNzTm9kZS5pZCgpLFxuICAgICAgICAgIHsgY2xhc3M6IFwiY2F0YWx5c2lzXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgICApO1xuICAgICAgICByZWd1bGF0b3JFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGN5LmVuZEJhdGNoKCk7XG5cbiAgICAgIGNvbnN0IGVsZXMgPSBjeS5lbGVtZW50cyhcIltqdXN0QWRkZWRdXCIpO1xuICAgICAgZWxlcy5yZW1vdmVEYXRhKFwianVzdEFkZGVkXCIpO1xuXG4gICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICBlbGVzLnNlbGVjdCgpO1xuXG4gICAgICByZXR1cm4gZWxlcztcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5jcmVhdGVNZXRhYm9saWNDYXRhbHl0aWNBY3Rpdml0eSA9IGZ1bmN0aW9uIChcbiAgICAgIGlucHV0Tm9kZUxpc3QsXG4gICAgICBvdXRwdXROb2RlTGlzdCxcbiAgICAgIGNhdGFseXN0TmFtZSxcbiAgICAgIGNhdGFseXN0VHlwZSxcbiAgICAgIHByb2Nlc3NQb3NpdGlvbixcbiAgICAgIHRpbGluZ1BhZGRpbmdWZXJ0aWNhbCxcbiAgICAgIHRpbGluZ1BhZGRpbmdIb3Jpem9udGFsLFxuICAgICAgZWRnZUxlbmd0aFxuICAgICkge1xuICAgICAgdmFyIGRlZmF1bHRNYWNyb21vbGVjdWxQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcIm1hY3JvbW9sZWN1bGVcIik7XG4gICAgICB2YXIgZGVmYXVsdFNpbXBsZUNoZW1pY2FsUHJvcGVydGllcyA9XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMoXCJzaW1wbGUgY2hlbWljYWxcIik7XG4gICAgICB2YXIgZGVmYXVsdENhdGFseXN0VHlwZVByb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKGNhdGFseXN0VHlwZSk7XG4gICAgICB2YXIgZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcImNhdGFseXRpY1wiKTtcbiAgICAgIHZhciBwcm9jZXNzV2lkdGggPSBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICB2YXIgcHJvY2Vzc0hlaWdodCA9IGRlZmF1bHRQcm9jZXNzUHJvcGVydGllcy5oZWlnaHQgfHwgNTA7XG4gICAgICB2YXIgc2ltcGxlQ2hlbWljYWxIZWlnaHQgPSBkZWZhdWx0U2ltcGxlQ2hlbWljYWxQcm9wZXJ0aWVzLmhlaWdodCB8fCAzNTtcbiAgICAgIHZhciBtYWNyb21vbGVjdWxlV2lkdGggPSBkZWZhdWx0TWFjcm9tb2xlY3VsUHJvcGVydGllcy53aWR0aCB8fCA1MDtcbiAgICAgIHZhciBtYWNyb21vbGVjdWxlSGVpZ2h0ID0gZGVmYXVsdE1hY3JvbW9sZWN1bFByb3BlcnRpZXMuaGVpZ2h0IHx8IDUwO1xuICAgICAgdmFyIGNhdGFseXN0SGVpZ2h0ID0gZGVmYXVsdENhdGFseXN0VHlwZVByb3BlcnRpZXMuaGVpZ2h0IHx8IDUwO1xuICAgICAgdmFyIHByb2Nlc3NQb3NpdGlvbiA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbiB8fFxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmNvbnZlcnRUb01vZGVsUG9zaXRpb24oe1xuICAgICAgICAgIHg6IGN5LndpZHRoKCkgLyAyLFxuICAgICAgICAgIHk6IGN5LmhlaWdodCgpIC8gMixcbiAgICAgICAgfSk7XG4gICAgICB2YXIgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsID0gdGlsaW5nUGFkZGluZ1ZlcnRpY2FsIHx8IDE1O1xuICAgICAgdmFyIHRpbGluZ1BhZGRpbmdIb3Jpem9udGFsID0gdGlsaW5nUGFkZGluZ0hvcml6b250YWwgfHwgMTU7XG4gICAgICB2YXIgZWRnZUxlbmd0aCA9IGVkZ2VMZW5ndGggfHwgNjA7XG5cbiAgICAgIGN5LnN0YXJ0QmF0Y2goKTtcbiAgICAgIGlmICghZWxlbWVudFV0aWxpdGllcy5nZXRNYXBUeXBlKCkpIHtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRNYXBUeXBlKFwiUERcIik7XG4gICAgICB9XG5cbiAgICAgIHZhciB4UG9zT2ZJbnB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54IC1cbiAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgLVxuICAgICAgICBtYWNyb21vbGVjdWxlV2lkdGggLyAyO1xuICAgICAgdmFyIHhQb3NPZk91dHB1dCA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54ICtcbiAgICAgICAgZWRnZUxlbmd0aCArXG4gICAgICAgIHByb2Nlc3NXaWR0aCAvIDIgK1xuICAgICAgICBtYWNyb21vbGVjdWxlV2lkdGggLyAyO1xuXG4gICAgICB2YXIgcHJvY2Vzc05vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi54LFxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSxcbiAgICAgICAgeyBjbGFzczogXCJwcm9jZXNzXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0UG9ydHNPcmRlcmluZyhwcm9jZXNzTm9kZSwgXCJMLXRvLVJcIik7XG4gICAgICBwcm9jZXNzTm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICBjb25zdCBudW1PZklucHV0Tm9kZXMgPSBpbnB1dE5vZGVMaXN0Lmxlbmd0aDtcbiAgICAgIGNvbnN0IG51bU9mT3V0cHV0Tm9kZXMgPSBvdXRwdXROb2RlTGlzdC5sZW5ndGg7XG4gICAgICB2YXIgeVBvc09mSW5wdXQgPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSAtXG4gICAgICAgICgobnVtT2ZJbnB1dE5vZGVzIC0gMSkgLyAyKSAqXG4gICAgICAgICAgKG1hY3JvbW9sZWN1bGVIZWlnaHQgKyB0aWxpbmdQYWRkaW5nVmVydGljYWwpO1xuXG4gICAgICAvLyBhZGQgaW5wdXQgc2lkZSBub2Rlc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1PZklucHV0Tm9kZXM7IGkrKykge1xuICAgICAgICBpZiAoaW5wdXROb2RlTGlzdFtpXS50eXBlID09IFwiU2ltcGxlIENoZW1pY2FsXCIpIHtcbiAgICAgICAgICB2YXIgbmV3Tm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZSh4UG9zT2ZJbnB1dCwgeVBvc09mSW5wdXQsIHtcbiAgICAgICAgICAgIGNsYXNzOiBcInNpbXBsZSBjaGVtaWNhbFwiLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IFwiUERcIixcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB5UG9zT2ZJbnB1dCArPSBzaW1wbGVDaGVtaWNhbEhlaWdodCArIHRpbGluZ1BhZGRpbmdWZXJ0aWNhbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3Tm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZSh4UG9zT2ZJbnB1dCwgeVBvc09mSW5wdXQsIHtcbiAgICAgICAgICAgIGNsYXNzOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy91cGRhdGUgdGhlIHkgcG9zaXRpb25cbiAgICAgICAgICB5UG9zT2ZJbnB1dCArPSBtYWNyb21vbGVjdWxlSGVpZ2h0ICsgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsO1xuICAgICAgICB9XG4gICAgICAgIG5ld05vZGUuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgICAgbmV3Tm9kZS5kYXRhKFwibGFiZWxcIiwgaW5wdXROb2RlTGlzdFtpXS5uYW1lKTtcblxuICAgICAgICB2YXIgbmV3RWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShuZXdOb2RlLmlkKCksIHByb2Nlc3NOb2RlLmlkKCksIHtcbiAgICAgICAgICBjbGFzczogXCJjb25zdW1wdGlvblwiLFxuICAgICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICAgIH0pO1xuICAgICAgICBuZXdFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB5UG9zT2ZPdXRwdXQgPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSAtXG4gICAgICAgICgobnVtT2ZPdXRwdXROb2RlcyAtIDEpIC8gMikgKlxuICAgICAgICAgIChtYWNyb21vbGVjdWxlSGVpZ2h0ICsgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsKTtcblxuICAgICAgLy8gYWRkIG91dHB1dCBzaWRlIG5vZGVzXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bU9mT3V0cHV0Tm9kZXM7IGkrKykge1xuICAgICAgICBpZiAob3V0cHV0Tm9kZUxpc3RbaV0udHlwZSA9PSBcIlNpbXBsZSBDaGVtaWNhbFwiKSB7XG4gICAgICAgICAgdmFyIG5ld05vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoeFBvc09mT3V0cHV0LCB5UG9zT2ZPdXRwdXQsIHtcbiAgICAgICAgICAgIGNsYXNzOiBcInNpbXBsZSBjaGVtaWNhbFwiLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IFwiUERcIixcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB5UG9zT2ZPdXRwdXQgKz0gc2ltcGxlQ2hlbWljYWxIZWlnaHQgKyB0aWxpbmdQYWRkaW5nVmVydGljYWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld05vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoeFBvc09mT3V0cHV0LCB5UG9zT2ZPdXRwdXQsIHtcbiAgICAgICAgICAgIGNsYXNzOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy91cGRhdGUgdGhlIHkgcG9zaXRpb25cbiAgICAgICAgICB5UG9zT2ZPdXRwdXQgKz0gbWFjcm9tb2xlY3VsZUhlaWdodCArIHRpbGluZ1BhZGRpbmdWZXJ0aWNhbDtcbiAgICAgICAgfVxuICAgICAgICBuZXdOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICAgIG5ld05vZGUuZGF0YShcImxhYmVsXCIsIG91dHB1dE5vZGVMaXN0W2ldLm5hbWUpO1xuXG4gICAgICAgIHZhciBuZXdFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKHByb2Nlc3NOb2RlLmlkKCksIG5ld05vZGUuaWQoKSwge1xuICAgICAgICAgIGNsYXNzOiBcInByb2R1Y3Rpb25cIixcbiAgICAgICAgICBsYW5ndWFnZTogXCJQRFwiLFxuICAgICAgICB9KTtcbiAgICAgICAgbmV3RWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBhZGQgY2F0YWx5c3Qgbm9kZVxuICAgICAgdmFyIHhQb3NPZkNhdGFseXN0ID0gcHJvY2Vzc1Bvc2l0aW9uLng7XG4gICAgICB2YXIgeVBvc09mQ2F0YWx5c3QgPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSAtXG4gICAgICAgIChwcm9jZXNzSGVpZ2h0ICsgY2F0YWx5c3RIZWlnaHQgKyB0aWxpbmdQYWRkaW5nVmVydGljYWwpO1xuICAgICAgdmFyIGNhdGFseXN0Tm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgeFBvc09mQ2F0YWx5c3QsXG4gICAgICAgIHlQb3NPZkNhdGFseXN0LFxuICAgICAgICB7IGNsYXNzOiBjYXRhbHlzdFR5cGUsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgKTtcbiAgICAgIGNhdGFseXN0Tm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgY2F0YWx5c3ROb2RlLmRhdGEoXCJsYWJlbFwiLCBjYXRhbHlzdE5hbWUpO1xuXG4gICAgICB2YXIgY2F0YWx5c3RFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKFxuICAgICAgICBjYXRhbHlzdE5vZGUuaWQoKSxcbiAgICAgICAgcHJvY2Vzc05vZGUuaWQoKSxcbiAgICAgICAgeyBjbGFzczogXCJjYXRhbHlzaXNcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgY2F0YWx5c3RFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIGN5LmVuZEJhdGNoKCk7XG5cbiAgICAgIC8vZmlsdGVyIHRoZSBqdXN0IGFkZGVkIGVsZW1lbXRzIHRvIHJldHVybiB0aGVtIGFuZCByZW1vdmUganVzdCBhZGRlZCBtYXJrXG4gICAgICB2YXIgZWxlcyA9IGN5LmVsZW1lbnRzKFwiW2p1c3RBZGRlZF1cIik7XG4gICAgICBlbGVzLnJlbW92ZURhdGEoXCJqdXN0QWRkZWRcIik7XG5cbiAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgIGVsZXMuc2VsZWN0KCk7XG5cbiAgICAgIHJldHVybiBlbGVzOyAvLyBSZXR1cm4gdGhlIGp1c3QgYWRkZWQgZWxlbWVudHNcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5jcmVhdGVBY3RpdmF0aW9uUmVhY3Rpb24gPSBmdW5jdGlvbiAoXG4gICAgICBwcm90ZWluTmFtZSxcbiAgICAgIHByb2Nlc3NQb3NpdGlvbixcbiAgICAgIGVkZ2VMZW5ndGgsXG4gICAgICByZXZlcnNlXG4gICAgKSB7XG4gICAgICB2YXIgZGVmYXVsdE1hY3JvbW9sZWN1bFByb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwibWFjcm9tb2xlY3VsZVwiKTtcbiAgICAgIHZhciBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwiYWN0aXZhdGlvblwiKTtcbiAgICAgIHZhciBwcm9jZXNzV2lkdGggPSBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICB2YXIgbWFjcm9tb2xlY3VsZVdpZHRoID0gZGVmYXVsdE1hY3JvbW9sZWN1bFByb3BlcnRpZXMud2lkdGggfHwgNTA7XG4gICAgICB2YXIgcHJvY2Vzc1Bvc2l0aW9uID1cbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uIHx8XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuY29udmVydFRvTW9kZWxQb3NpdGlvbih7XG4gICAgICAgICAgeDogY3kud2lkdGgoKSAvIDIsXG4gICAgICAgICAgeTogY3kuaGVpZ2h0KCkgLyAyLFxuICAgICAgICB9KTtcbiAgICAgIHZhciBlZGdlTGVuZ3RoID0gZWRnZUxlbmd0aCB8fCA2MDtcblxuICAgICAgY3kuc3RhcnRCYXRjaCgpO1xuICAgICAgaWYgKCFlbGVtZW50VXRpbGl0aWVzLmdldE1hcFR5cGUoKSkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE1hcFR5cGUoXCJQRFwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHhQb3NPZklucHV0ID1cbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnggLVxuICAgICAgICBlZGdlTGVuZ3RoIC1cbiAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiAtXG4gICAgICAgIG1hY3JvbW9sZWN1bGVXaWR0aCAvIDI7XG4gICAgICB2YXIgeFBvc09mT3V0cHV0ID1cbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnggK1xuICAgICAgICBlZGdlTGVuZ3RoICtcbiAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiArXG4gICAgICAgIG1hY3JvbW9sZWN1bGVXaWR0aCAvIDI7XG5cbiAgICAgIHZhciBwcm9jZXNzTm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLngsXG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi55LFxuICAgICAgICB7IGNsYXNzOiBcInByb2Nlc3NcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRQb3J0c09yZGVyaW5nKHByb2Nlc3NOb2RlLCBcIkwtdG8tUlwiKTtcbiAgICAgIHByb2Nlc3NOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIHZhciB5UG9zaXRpb24gPSBwcm9jZXNzUG9zaXRpb24ueTtcblxuICAgICAgdmFyIGlucHV0Tm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZSh4UG9zT2ZJbnB1dCwgeVBvc2l0aW9uLCB7XG4gICAgICAgIGNsYXNzOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgbGFuZ3VhZ2U6IFwiUERcIixcbiAgICAgIH0pO1xuICAgICAgaW5wdXROb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICBpbnB1dE5vZGUuZGF0YShcImxhYmVsXCIsIHByb3RlaW5OYW1lKTtcbiAgICAgIHZhciBpbmZvYm94T2JqZWN0ID0ge1xuICAgICAgICBjbGF6ejogXCJ1bml0IG9mIGluZm9ybWF0aW9uXCIsXG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgdGV4dDogcmV2ZXJzZSA/IFwiYWN0aXZlXCIgOiBcImluYWN0aXZlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgXCJzaGFwZS1uYW1lXCI6IFwiZWxsaXBzZVwiLFxuICAgICAgICB9LFxuICAgICAgICBiYm94OiB7XG4gICAgICAgICAgdzogMzYsXG4gICAgICAgICAgaDogMTUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5hZGRTdGF0ZU9ySW5mb0JveChpbnB1dE5vZGUsIGluZm9ib3hPYmplY3QpO1xuXG4gICAgICB2YXIgb3V0cHV0Tm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZSh4UG9zT2ZPdXRwdXQsIHlQb3NpdGlvbiwge1xuICAgICAgICBjbGFzczogXCJtYWNyb21vbGVjdWxlXCIsXG4gICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICB9KTtcbiAgICAgIG91dHB1dE5vZGUuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgIG91dHB1dE5vZGUuZGF0YShcImxhYmVsXCIsIHByb3RlaW5OYW1lKTtcbiAgICAgIGluZm9ib3hPYmplY3QgPSB7XG4gICAgICAgIGNsYXp6OiBcInVuaXQgb2YgaW5mb3JtYXRpb25cIixcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICB0ZXh0OiByZXZlcnNlID8gXCJpbmFjdGl2ZVwiIDogXCJhY3RpdmVcIixcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBcInNoYXBlLW5hbWVcIjogXCJlbGxpcHNlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGJib3g6IHtcbiAgICAgICAgICB3OiAzNixcbiAgICAgICAgICBoOiAxNSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLmFkZFN0YXRlT3JJbmZvQm94KG91dHB1dE5vZGUsIGluZm9ib3hPYmplY3QpO1xuXG4gICAgICB2YXIgaW5wdXRTaWRlRWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgaW5wdXROb2RlLmlkKCksXG4gICAgICAgIHByb2Nlc3NOb2RlLmlkKCksXG4gICAgICAgIHsgY2xhc3M6IFwiY29uc3VtcHRpb25cIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICApO1xuICAgICAgaW5wdXRTaWRlRWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgdmFyIG91dHB1dFNpZGVFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKFxuICAgICAgICBwcm9jZXNzTm9kZS5pZCgpLFxuICAgICAgICBvdXRwdXROb2RlLmlkKCksXG4gICAgICAgIHsgY2xhc3M6IFwicHJvZHVjdGlvblwiLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICk7XG4gICAgICBvdXRwdXRTaWRlRWRnZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgY3kuZW5kQmF0Y2goKTtcblxuICAgICAgLy9maWx0ZXIgdGhlIGp1c3QgYWRkZWQgZWxlbWVtdHMgdG8gcmV0dXJuIHRoZW0gYW5kIHJlbW92ZSBqdXN0IGFkZGVkIG1hcmtcbiAgICAgIHZhciBlbGVzID0gY3kuZWxlbWVudHMoXCJbanVzdEFkZGVkXVwiKTtcbiAgICAgIGVsZXMucmVtb3ZlRGF0YShcImp1c3RBZGRlZFwiKTtcblxuICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgZWxlcy5zZWxlY3QoKTtcblxuICAgICAgcmV0dXJuIGVsZXM7IC8vIFJldHVybiB0aGUganVzdCBhZGRlZCBlbGVtZW50c1xuICAgIH07XG5cbiAgICAvKlxuICAgICAqIENyZWF0ZXMgYSB0ZW1wbGF0ZSByZWFjdGlvbiB3aXRoIGdpdmVuIHBhcmFtZXRlcnMuIFJlcXVpcmVzIGNvc2UtYmlsa2VudCBsYXlvdXQgdG8gdGlsZSB0aGUgZnJlZSBtYWNyb21vbGVjdWxlcyBpbmNsdWRlZFxuICAgICAqIGluIHRoZSBjb21wbGV4LiBQYXJhbWV0ZXJzIGFyZSBleHBsYWluZWQgYmVsb3cuXG4gICAgICogdGVtcGxhdGVUeXBlOiBUaGUgdHlwZSBvZiB0aGUgdGVtcGxhdGUgcmVhY3Rpb24uIEl0IG1heSBiZSAnYXNzb2NpYXRpb24nLCAnZGlzc29jaWF0aW9uJywgJ3JldmVyc2libGUnIG9yICdpcnJldmVyc2libGUnLlxuICAgICAqIG5vZGVMaXN0OiBUaGUgbGlzdCBvZiB0aGUgbmFtZXMgYW5kIHR5cGVzIG9mIG1vbGVjdWxlcyB3aGljaCB3aWxsIGludm9sdmUgaW4gdGhlIHJlYWN0aW9uLlxuICAgICAqIGNvbXBsZXhOYW1lOiBUaGUgbmFtZSBvZiB0aGUgY29tcGxleCBpbiB0aGUgcmVhY3Rpb24uXG4gICAgICogcHJvY2Vzc1Bvc2l0aW9uOiBUaGUgbW9kYWwgcG9zaXRpb24gb2YgdGhlIHByb2Nlc3MgaW4gdGhlIHJlYWN0aW9uLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgY2VudGVyIG9mIHRoZSBjYW52YXMuXG4gICAgICogdGlsaW5nUGFkZGluZ1ZlcnRpY2FsOiBUaGlzIG9wdGlvbiB3aWxsIGJlIHBhc3NlZCB0byB0aGUgY29zZS1iaWxrZW50IGxheW91dCB3aXRoIHRoZSBzYW1lIG5hbWUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDE1LlxuICAgICAqIHRpbGluZ1BhZGRpbmdIb3Jpem9udGFsOiBUaGlzIG9wdGlvbiB3aWxsIGJlIHBhc3NlZCB0byB0aGUgY29zZS1iaWxrZW50IGxheW91dCB3aXRoIHRoZSBzYW1lIG5hbWUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDE1LlxuICAgICAqIGVkZ2VMZW5ndGg6IFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBwcm9jZXNzIGFuZCB0aGUgbWFjcm9tb2xlY3VsZXMgYXQgdGhlIGJvdGggc2lkZXMuXG4gICAgICovXG4gICAgZWxlbWVudFV0aWxpdGllcy5jcmVhdGVUZW1wbGF0ZVJlYWN0aW9uID0gZnVuY3Rpb24gKFxuICAgICAgdGVtcGxhdGVUeXBlLFxuICAgICAgbm9kZUxpc3QsXG4gICAgICBjb21wbGV4TmFtZSxcbiAgICAgIHByb2Nlc3NQb3NpdGlvbixcbiAgICAgIHRpbGluZ1BhZGRpbmdWZXJ0aWNhbCxcbiAgICAgIHRpbGluZ1BhZGRpbmdIb3Jpem9udGFsLFxuICAgICAgZWRnZUxlbmd0aCxcbiAgICAgIGxheW91dFBhcmFtXG4gICAgKSB7XG4gICAgICB2YXIgZGVmYXVsdE1hY3JvbW9sZWN1bFByb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFwibWFjcm9tb2xlY3VsZVwiKTtcbiAgICAgIHZhciBkZWZhdWx0U2ltcGxlQ2hlbWljYWxQcm9wZXJ0aWVzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhcInNpbXBsZSBjaGVtaWNhbFwiKTtcbiAgICAgIHZhciBkZWZhdWx0UHJvY2Vzc1Byb3BlcnRpZXMgPVxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKHRlbXBsYXRlVHlwZSk7XG4gICAgICB2YXIgcHJvY2Vzc1dpZHRoID0gZGVmYXVsdFByb2Nlc3NQcm9wZXJ0aWVzLndpZHRoIHx8IDUwO1xuICAgICAgdmFyIG1hY3JvbW9sZWN1bGVXaWR0aCA9IGRlZmF1bHRNYWNyb21vbGVjdWxQcm9wZXJ0aWVzLndpZHRoIHx8IDUwO1xuICAgICAgdmFyIG1hY3JvbW9sZWN1bGVIZWlnaHQgPSBkZWZhdWx0TWFjcm9tb2xlY3VsUHJvcGVydGllcy5oZWlnaHQgfHwgNTA7XG4gICAgICB2YXIgc2ltcGxlQ2hlbWljYWxXaWR0aCA9IGRlZmF1bHRTaW1wbGVDaGVtaWNhbFByb3BlcnRpZXMud2lkdGggfHwgMzU7XG4gICAgICB2YXIgc2ltcGxlQ2hlbWljYWxIZWlnaHQgPSBkZWZhdWx0U2ltcGxlQ2hlbWljYWxQcm9wZXJ0aWVzLmhlaWdodCB8fCAzNTtcbiAgICAgIHZhciBwcm9jZXNzUG9zaXRpb24gPVxuICAgICAgICBwcm9jZXNzUG9zaXRpb24gfHxcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5jb252ZXJ0VG9Nb2RlbFBvc2l0aW9uKHtcbiAgICAgICAgICB4OiBjeS53aWR0aCgpIC8gMixcbiAgICAgICAgICB5OiBjeS5oZWlnaHQoKSAvIDIsXG4gICAgICAgIH0pO1xuICAgICAgdmFyIG5vZGVMaXN0ID0gbm9kZUxpc3Q7XG4gICAgICB2YXIgY29tcGxleE5hbWUgPSBjb21wbGV4TmFtZTtcbiAgICAgIHZhciBudW1PZk1vbGVjdWxlcyA9IG5vZGVMaXN0Lmxlbmd0aDtcbiAgICAgIHZhciB0aWxpbmdQYWRkaW5nVmVydGljYWwgPSB0aWxpbmdQYWRkaW5nVmVydGljYWwgfHwgMTU7XG4gICAgICB2YXIgdGlsaW5nUGFkZGluZ0hvcml6b250YWwgPSB0aWxpbmdQYWRkaW5nSG9yaXpvbnRhbCB8fCAxNTtcbiAgICAgIHZhciBlZGdlTGVuZ3RoID0gZWRnZUxlbmd0aCB8fCA2MDtcblxuICAgICAgY3kuc3RhcnRCYXRjaCgpO1xuXG4gICAgICBpZiAoIWVsZW1lbnRVdGlsaXRpZXMuZ2V0TWFwVHlwZSgpKSB7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0TWFwVHlwZShcIlBEXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgeFBvc2l0aW9uT2ZGcmVlTWFjcm9tb2xlY3VsZXM7XG4gICAgICB2YXIgeFBvc2l0aW9uT2ZJbnB1dE1hY3JvbW9sZWN1bGVzO1xuICAgICAgaWYgKHRlbXBsYXRlVHlwZSA9PT0gXCJhc3NvY2lhdGlvblwiKSB7XG4gICAgICAgIHhQb3NpdGlvbk9mRnJlZU1hY3JvbW9sZWN1bGVzID1cbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCAtXG4gICAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiAtXG4gICAgICAgICAgbWFjcm9tb2xlY3VsZVdpZHRoIC8gMjtcbiAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGVUeXBlID09PSBcImRpc3NvY2lhdGlvblwiKSB7XG4gICAgICAgIHhQb3NpdGlvbk9mRnJlZU1hY3JvbW9sZWN1bGVzID1cbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCArXG4gICAgICAgICAgZWRnZUxlbmd0aCArXG4gICAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiArXG4gICAgICAgICAgbWFjcm9tb2xlY3VsZVdpZHRoIC8gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhQb3NpdGlvbk9mRnJlZU1hY3JvbW9sZWN1bGVzID1cbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCAtXG4gICAgICAgICAgZWRnZUxlbmd0aCAtXG4gICAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiAtXG4gICAgICAgICAgbWFjcm9tb2xlY3VsZVdpZHRoIC8gMjtcbiAgICAgICAgeFBvc2l0aW9uT2ZJbnB1dE1hY3JvbW9sZWN1bGVzID1cbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCArXG4gICAgICAgICAgZWRnZUxlbmd0aCArXG4gICAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiArXG4gICAgICAgICAgbWFjcm9tb2xlY3VsZVdpZHRoIC8gMjtcbiAgICAgIH1cblxuICAgICAgLy9DcmVhdGUgdGhlIHByb2Nlc3MgaW4gdGVtcGxhdGUgdHlwZVxuICAgICAgdmFyIHByb2Nlc3M7XG4gICAgICBpZiAodGVtcGxhdGVUeXBlID09PSBcInJldmVyc2libGVcIiB8fCB0ZW1wbGF0ZVR5cGUgPT09IFwiaXJyZXZlcnNpYmxlXCIpIHtcbiAgICAgICAgcHJvY2VzcyA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCxcbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSxcbiAgICAgICAgICB7IGNsYXNzOiBcInByb2Nlc3NcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICAgICk7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0UG9ydHNPcmRlcmluZyhwcm9jZXNzLCBcIkwtdG8tUlwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLngsXG4gICAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnksXG4gICAgICAgICAgeyBjbGFzczogdGVtcGxhdGVUeXBlLCBsYW5ndWFnZTogXCJQRFwiIH1cbiAgICAgICAgKTtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRQb3J0c09yZGVyaW5nKHByb2Nlc3MsIFwiTC10by1SXCIpO1xuICAgICAgfVxuICAgICAgcHJvY2Vzcy5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICAvL0RlZmluZSB0aGUgc3RhcnRpbmcgeSBwb3NpdGlvblxuICAgICAgdmFyIHlQb3NpdGlvbiA9XG4gICAgICAgIHByb2Nlc3NQb3NpdGlvbi55IC1cbiAgICAgICAgKChudW1PZk1vbGVjdWxlcyAtIDEpIC8gMikgKlxuICAgICAgICAgIChtYWNyb21vbGVjdWxlSGVpZ2h0ICsgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsKTtcblxuICAgICAgLy9DcmVhdGUgdGhlIGZyZWUgbW9sZWN1bGVzXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bU9mTW9sZWN1bGVzOyBpKyspIHtcbiAgICAgICAgLy8gbm9kZSBhZGRpdGlvbiBvcGVyYXRpb24gaXMgZGV0ZXJtaW5lZCBieSBtb2xlY3VsZSB0eXBlXG4gICAgICAgIGlmIChub2RlTGlzdFtpXS50eXBlID09IFwiU2ltcGxlIENoZW1pY2FsXCIpIHtcbiAgICAgICAgICB2YXIgbmV3Tm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgICAgIHhQb3NpdGlvbk9mRnJlZU1hY3JvbW9sZWN1bGVzLFxuICAgICAgICAgICAgeVBvc2l0aW9uLFxuICAgICAgICAgICAgeyBjbGFzczogXCJzaW1wbGUgY2hlbWljYWxcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICAvL3VwZGF0ZSB0aGUgeSBwb3NpdGlvblxuICAgICAgICAgIHlQb3NpdGlvbiArPSBzaW1wbGVDaGVtaWNhbEhlaWdodCArIHRpbGluZ1BhZGRpbmdWZXJ0aWNhbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3Tm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgICAgIHhQb3NpdGlvbk9mRnJlZU1hY3JvbW9sZWN1bGVzLFxuICAgICAgICAgICAgeVBvc2l0aW9uLFxuICAgICAgICAgICAgeyBjbGFzczogXCJtYWNyb21vbGVjdWxlXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgLy91cGRhdGUgdGhlIHkgcG9zaXRpb25cbiAgICAgICAgICB5UG9zaXRpb24gKz0gbWFjcm9tb2xlY3VsZUhlaWdodCArIHRpbGluZ1BhZGRpbmdWZXJ0aWNhbDtcbiAgICAgICAgfVxuICAgICAgICBuZXdOb2RlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICAgIG5ld05vZGUuZGF0YShcImxhYmVsXCIsIG5vZGVMaXN0W2ldLm5hbWUpO1xuXG4gICAgICAgIC8vY3JlYXRlIHRoZSBlZGdlIGNvbm5lY3RlZCB0byB0aGUgbmV3IG1vbGVjdWxlXG4gICAgICAgIHZhciBuZXdFZGdlO1xuICAgICAgICBpZiAodGVtcGxhdGVUeXBlID09PSBcImFzc29jaWF0aW9uXCIpIHtcbiAgICAgICAgICBuZXdFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKG5ld05vZGUuaWQoKSwgcHJvY2Vzcy5pZCgpLCB7XG4gICAgICAgICAgICBjbGFzczogXCJjb25zdW1wdGlvblwiLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IFwiUERcIixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZVR5cGUgPT09IFwiZGlzc29jaWF0aW9uXCIpIHtcbiAgICAgICAgICBuZXdFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKHByb2Nlc3MuaWQoKSwgbmV3Tm9kZS5pZCgpLCB7XG4gICAgICAgICAgICBjbGFzczogXCJwcm9kdWN0aW9uXCIsXG4gICAgICAgICAgICBsYW5ndWFnZTogXCJQRFwiLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vR3JvdXAgcmlnaHQgb3IgdG9wIGVsZW1lbnRzIGluIGdyb3VwIGlkIDFcbiAgICAgICAgICBpZiAodGVtcGxhdGVUeXBlID09PSBcImlycmV2ZXJzaWJsZVwiKSB7XG4gICAgICAgICAgICBuZXdFZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKG5ld05vZGUuaWQoKSwgcHJvY2Vzcy5pZCgpLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiBcImNvbnN1bXB0aW9uXCIsXG4gICAgICAgICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3RWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgICAgICAgcHJvY2Vzcy5pZCgpLFxuICAgICAgICAgICAgICBuZXdOb2RlLmlkKCksXG4gICAgICAgICAgICAgIHsgY2xhc3M6IFwicHJvZHVjdGlvblwiLCBsYW5ndWFnZTogXCJQRFwiIH0sXG4gICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5ld0VkZ2UuZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRlbXBsYXRlVHlwZSA9PT0gXCJhc3NvY2lhdGlvblwiIHx8IHRlbXBsYXRlVHlwZSA9PSBcImRpc3NvY2lhdGlvblwiKSB7XG4gICAgICAgIC8vQ3JlYXRlIHRoZSBjb21wbGV4IGluY2x1ZGluZyBtYWNyb21vbGVjdWxlcyBpbnNpZGUgb2YgaXRcbiAgICAgICAgLy9UZW1wcm9yYXJpbHkgYWRkIGl0IHRvIHRoZSBwcm9jZXNzIHBvc2l0aW9uIHdlIHdpbGwgbW92ZSBpdCBhY2NvcmRpbmcgdG8gdGhlIGxhc3Qgc2l6ZSBvZiBpdFxuICAgICAgICB2YXIgY29tcGxleCA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCxcbiAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueSxcbiAgICAgICAgICB7IGNsYXNzOiBcImNvbXBsZXhcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICAgICk7XG4gICAgICAgIGNvbXBsZXguZGF0YShcImp1c3RBZGRlZFwiLCB0cnVlKTtcbiAgICAgICAgY29tcGxleC5kYXRhKFwianVzdEFkZGVkTGF5b3V0Tm9kZVwiLCB0cnVlKTtcblxuICAgICAgICAvL0lmIGEgbmFtZSBpcyBzcGVjaWZpZWQgZm9yIHRoZSBjb21wbGV4IHNldCBpdHMgbGFiZWwgYWNjb3JkaW5nbHlcbiAgICAgICAgaWYgKGNvbXBsZXhOYW1lKSB7XG4gICAgICAgICAgY29tcGxleC5kYXRhKFwibGFiZWxcIiwgY29tcGxleE5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jcmVhdGUgdGhlIGVkZ2UgY29ubm5lY3RlZCB0byB0aGUgY29tcGxleFxuICAgICAgICB2YXIgZWRnZU9mQ29tcGxleDtcblxuICAgICAgICBpZiAodGVtcGxhdGVUeXBlID09PSBcImFzc29jaWF0aW9uXCIpIHtcbiAgICAgICAgICBlZGdlT2ZDb21wbGV4ID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKHByb2Nlc3MuaWQoKSwgY29tcGxleC5pZCgpLCB7XG4gICAgICAgICAgICBjbGFzczogXCJwcm9kdWN0aW9uXCIsXG4gICAgICAgICAgICBsYW5ndWFnZTogXCJQRFwiLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVkZ2VPZkNvbXBsZXggPSBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UoY29tcGxleC5pZCgpLCBwcm9jZXNzLmlkKCksIHtcbiAgICAgICAgICAgIGNsYXNzOiBcImNvbnN1bXB0aW9uXCIsXG4gICAgICAgICAgICBsYW5ndWFnZTogXCJQRFwiLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZWRnZU9mQ29tcGxleC5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtT2ZNb2xlY3VsZXM7IGkrKykge1xuICAgICAgICAgIC8vIEFkZCBhIG1vbGVjdWxlKGRlcGVuZGVudCBvbiBpdCdzIHR5cGUpIG5vdCBoYXZpbmcgYSBwcmV2aW91c2x5IGRlZmluZWQgaWQgYW5kIGhhdmluZyB0aGUgY29tcGxleCBjcmVhdGVkIGluIHRoaXMgcmVhY3Rpb24gYXMgcGFyZW50XG4gICAgICAgICAgaWYgKG5vZGVMaXN0W2ldLnR5cGUgPT0gXCJTaW1wbGUgQ2hlbWljYWxcIikge1xuICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgICAgICAgIGNvbXBsZXgucG9zaXRpb24oXCJ4XCIpLFxuICAgICAgICAgICAgICBjb21wbGV4LnBvc2l0aW9uKFwieVwiKSxcbiAgICAgICAgICAgICAgeyBjbGFzczogXCJzaW1wbGUgY2hlbWljYWxcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9LFxuICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGNvbXBsZXguaWQoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgICAgICAgIGNvbXBsZXgucG9zaXRpb24oXCJ4XCIpLFxuICAgICAgICAgICAgICBjb21wbGV4LnBvc2l0aW9uKFwieVwiKSxcbiAgICAgICAgICAgICAgeyBjbGFzczogXCJtYWNyb21vbGVjdWxlXCIsIGxhbmd1YWdlOiBcIlBEXCIgfSxcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBjb21wbGV4LmlkKClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3Tm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgICAgIG5ld05vZGUuZGF0YShcImxhYmVsXCIsIG5vZGVMaXN0W2ldLm5hbWUpO1xuICAgICAgICAgIG5ld05vZGUuZGF0YShcImp1c3RBZGRlZExheW91dE5vZGVcIiwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vQ3JlYXRlIHRoZSBpbnB1dCBtYWNyb21vbGVjdWxlc1xuICAgICAgICB2YXIgbnVtT2ZJbnB1dE1hY3JvbW9sZWN1bGVzID0gY29tcGxleE5hbWUubGVuZ3RoO1xuICAgICAgICB5UG9zaXRpb24gPVxuICAgICAgICAgIHByb2Nlc3NQb3NpdGlvbi55IC1cbiAgICAgICAgICAoKG51bU9mSW5wdXRNYWNyb21vbGVjdWxlcyAtIDEpIC8gMikgKlxuICAgICAgICAgICAgKG1hY3JvbW9sZWN1bGVIZWlnaHQgKyB0aWxpbmdQYWRkaW5nVmVydGljYWwpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtT2ZJbnB1dE1hY3JvbW9sZWN1bGVzOyBpKyspIHtcbiAgICAgICAgICBpZiAoY29tcGxleE5hbWVbaV0udHlwZSA9PSBcIlNpbXBsZSBDaGVtaWNhbFwiKSB7XG4gICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShcbiAgICAgICAgICAgICAgeFBvc2l0aW9uT2ZJbnB1dE1hY3JvbW9sZWN1bGVzLFxuICAgICAgICAgICAgICB5UG9zaXRpb24sXG4gICAgICAgICAgICAgIHsgY2xhc3M6IFwic2ltcGxlIGNoZW1pY2FsXCIsIGxhbmd1YWdlOiBcIlBEXCIgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHlQb3NpdGlvbiArPSBzaW1wbGVDaGVtaWNhbEhlaWdodCArIHRpbGluZ1BhZGRpbmdWZXJ0aWNhbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUoXG4gICAgICAgICAgICAgIHhQb3NpdGlvbk9mSW5wdXRNYWNyb21vbGVjdWxlcyxcbiAgICAgICAgICAgICAgeVBvc2l0aW9uLFxuICAgICAgICAgICAgICB7IGNsYXNzOiBcIm1hY3JvbW9sZWN1bGVcIiwgbGFuZ3VhZ2U6IFwiUERcIiB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgeVBvc2l0aW9uICs9IG1hY3JvbW9sZWN1bGVIZWlnaHQgKyB0aWxpbmdQYWRkaW5nVmVydGljYWw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3Tm9kZS5kYXRhKFwianVzdEFkZGVkXCIsIHRydWUpO1xuICAgICAgICAgIG5ld05vZGUuZGF0YShcImxhYmVsXCIsIGNvbXBsZXhOYW1lW2ldLm5hbWUpO1xuXG4gICAgICAgICAgLy9jcmVhdGUgdGhlIGVkZ2UgY29ubmVjdGVkIHRvIHRoZSBuZXcgbWFjcm9tb2xlY3VsZVxuICAgICAgICAgIHZhciBuZXdFZGdlO1xuXG4gICAgICAgICAgLy9Hcm91cCB0aGUgbGVmdCBvciBib3R0b20gZWxlbWVudHMgaW4gZ3JvdXAgaWQgMCBpZiByZXZlcnNpYmxlXG4gICAgICAgICAgaWYgKHRlbXBsYXRlVHlwZSA9PT0gXCJpcnJldmVyc2libGVcIikge1xuICAgICAgICAgICAgbmV3RWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShwcm9jZXNzLmlkKCksIG5ld05vZGUuaWQoKSwge1xuICAgICAgICAgICAgICBjbGFzczogXCJwcm9kdWN0aW9uXCIsXG4gICAgICAgICAgICAgIGxhbmd1YWdlOiBcIlBEXCIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3RWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShcbiAgICAgICAgICAgICAgcHJvY2Vzcy5pZCgpLFxuICAgICAgICAgICAgICBuZXdOb2RlLmlkKCksXG4gICAgICAgICAgICAgIHsgY2xhc3M6IFwicHJvZHVjdGlvblwiLCBsYW5ndWFnZTogXCJQRFwiIH0sXG4gICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdFZGdlLmRhdGEoXCJqdXN0QWRkZWRcIiwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY3kuZW5kQmF0Y2goKTtcblxuICAgICAgdmFyIGxheW91dE5vZGVzID0gY3kubm9kZXMoXCJbanVzdEFkZGVkTGF5b3V0Tm9kZV1cIik7XG4gICAgICBsYXlvdXROb2Rlcy5yZW1vdmVEYXRhKFwianVzdEFkZGVkTGF5b3V0Tm9kZVwiKTtcbiAgICAgIHZhciBsYXlvdXQgPSBsYXlvdXROb2Rlcy5sYXlvdXQoe1xuICAgICAgICBuYW1lOiBsYXlvdXRQYXJhbS5uYW1lLFxuICAgICAgICByYW5kb21pemU6IGZhbHNlLFxuICAgICAgICBmaXQ6IGZhbHNlLFxuICAgICAgICBhbmltYXRlOiBmYWxzZSxcbiAgICAgICAgdGlsaW5nUGFkZGluZ1ZlcnRpY2FsOiB0aWxpbmdQYWRkaW5nVmVydGljYWwsXG4gICAgICAgIHRpbGluZ1BhZGRpbmdIb3Jpem9udGFsOiB0aWxpbmdQYWRkaW5nSG9yaXpvbnRhbCxcbiAgICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vSWYgaXQgaXMgYSByZXZlcnNpYmxlIHJlYWN0aW9uIG5vIG5lZWQgdG8gcmUtcG9zaXRpb24gY29tcGxleGVzXG4gICAgICAgICAgaWYgKHRlbXBsYXRlVHlwZSA9PT0gXCJyZXZlcnNpYmxlXCIpIHJldHVybjtcbiAgICAgICAgICAvL3JlLXBvc2l0aW9uIHRoZSBub2RlcyBpbnNpZGUgdGhlIGNvbXBsZXhcbiAgICAgICAgICB2YXIgc3VwcG9zZWRYUG9zaXRpb247XG4gICAgICAgICAgdmFyIHN1cHBvc2VkWVBvc2l0aW9uID0gcHJvY2Vzc1Bvc2l0aW9uLnk7XG5cbiAgICAgICAgICBpZiAodGVtcGxhdGVUeXBlID09PSBcImFzc29jaWF0aW9uXCIpIHtcbiAgICAgICAgICAgIHN1cHBvc2VkWFBvc2l0aW9uID1cbiAgICAgICAgICAgICAgcHJvY2Vzc1Bvc2l0aW9uLnggK1xuICAgICAgICAgICAgICBlZGdlTGVuZ3RoICtcbiAgICAgICAgICAgICAgcHJvY2Vzc1dpZHRoIC8gMiArXG4gICAgICAgICAgICAgIGNvbXBsZXgub3V0ZXJXaWR0aCgpIC8gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwcG9zZWRYUG9zaXRpb24gPVxuICAgICAgICAgICAgICBwcm9jZXNzUG9zaXRpb24ueCAtXG4gICAgICAgICAgICAgIGVkZ2VMZW5ndGggLVxuICAgICAgICAgICAgICBwcm9jZXNzV2lkdGggLyAyIC1cbiAgICAgICAgICAgICAgY29tcGxleC5vdXRlcldpZHRoKCkgLyAyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBwb3NpdGlvbkRpZmZYID0gKHN1cHBvc2VkWFBvc2l0aW9uIC0gY29tcGxleC5wb3NpdGlvbihcInhcIikpIC8gMjtcbiAgICAgICAgICB2YXIgcG9zaXRpb25EaWZmWSA9IChzdXBwb3NlZFlQb3NpdGlvbiAtIGNvbXBsZXgucG9zaXRpb24oXCJ5XCIpKSAvIDI7XG4gICAgICAgICAgZWxlbWVudFV0aWxpdGllcy5tb3ZlTm9kZXMoXG4gICAgICAgICAgICB7IHg6IHBvc2l0aW9uRGlmZlgsIHk6IHBvc2l0aW9uRGlmZlkgfSxcbiAgICAgICAgICAgIGNvbXBsZXhcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vIERvIHRoaXMgY2hlY2sgZm9yIGN5dG9zY2FwZS5qcyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICBpZiAoXG4gICAgICAgIGxheW91dCAmJlxuICAgICAgICBsYXlvdXQucnVuICYmXG4gICAgICAgIHRlbXBsYXRlVHlwZSAhPT0gXCJyZXZlcnNpYmxlXCIgJiZcbiAgICAgICAgdGVtcGxhdGVUeXBlICE9PSBcImlycmV2ZXJzaWJsZVwiXG4gICAgICApIHtcbiAgICAgICAgbGF5b3V0LnJ1bigpO1xuICAgICAgfVxuXG4gICAgICAvL2ZpbHRlciB0aGUganVzdCBhZGRlZCBlbGVtZW10cyB0byByZXR1cm4gdGhlbSBhbmQgcmVtb3ZlIGp1c3QgYWRkZWQgbWFya1xuICAgICAgdmFyIGVsZXMgPSBjeS5lbGVtZW50cyhcIltqdXN0QWRkZWRdXCIpO1xuICAgICAgZWxlcy5yZW1vdmVEYXRhKFwianVzdEFkZGVkXCIpO1xuXG4gICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICBlbGVzLnNlbGVjdCgpO1xuXG4gICAgICByZXR1cm4gZWxlczsgLy8gUmV0dXJuIHRoZSBqdXN0IGFkZGVkIGVsZW1lbnRzXG4gICAgfTtcblxuICAgIC8qXG4gICAgICogTW92ZSB0aGUgbm9kZXMgdG8gYSBuZXcgcGFyZW50IGFuZCBjaGFuZ2UgdGhlaXIgcG9zaXRpb24gaWYgcG9zc0RpZmYgcGFyYW1zIGFyZSBzZXQuXG4gICAgICovXG4gICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VQYXJlbnQgPSBmdW5jdGlvbiAoXG4gICAgICBub2RlcyxcbiAgICAgIG5ld1BhcmVudCxcbiAgICAgIHBvc0RpZmZYLFxuICAgICAgcG9zRGlmZllcbiAgICApIHtcbiAgICAgIHZhciBuZXdQYXJlbnRJZCA9XG4gICAgICAgIG5ld1BhcmVudCA9PSB1bmRlZmluZWQgfHwgdHlwZW9mIG5ld1BhcmVudCA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgID8gbmV3UGFyZW50XG4gICAgICAgICAgOiBuZXdQYXJlbnQuaWQoKTtcbiAgICAgIHZhciBtb3ZlZEVsZXMgPSBub2Rlcy5tb3ZlKHsgcGFyZW50OiBuZXdQYXJlbnRJZCB9KTtcbiAgICAgIGlmICh0eXBlb2YgcG9zRGlmZlggIT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgcG9zRGlmZlkgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLm1vdmVOb2Rlcyh7IHg6IHBvc0RpZmZYLCB5OiBwb3NEaWZmWSB9LCBub2Rlcyk7XG4gICAgICB9XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLm1haW50YWluUG9pbnRlcihtb3ZlZEVsZXMpO1xuICAgICAgcmV0dXJuIG1vdmVkRWxlcztcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy51cGRhdGVJbmZvYm94U3R5bGUgPSBmdW5jdGlvbiAobm9kZSwgaW5kZXgsIG5ld1Byb3BzKSB7XG4gICAgICB2YXIgaW5mb2JveE9iaiA9IG5vZGUuZGF0YShcInN0YXRlc2FuZGluZm9zXCIpW2luZGV4XTtcbiAgICAgICQuZXh0ZW5kKGluZm9ib3hPYmouc3R5bGUsIG5ld1Byb3BzKTtcbiAgICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XG4gICAgfTtcblxuICAgIGVsZW1lbnRVdGlsaXRpZXMudXBkYXRlSW5mb2JveE9iaiA9IGZ1bmN0aW9uIChub2RlLCBpbmRleCwgbmV3UHJvcHMpIHtcbiAgICAgIHZhciBpbmZvYm94T2JqID0gbm9kZS5kYXRhKFwic3RhdGVzYW5kaW5mb3NcIilbaW5kZXhdO1xuICAgICAgJC5leHRlbmQoaW5mb2JveE9iaiwgbmV3UHJvcHMpO1xuICAgIH07XG5cbiAgICAvLyBSZXNpemUgZ2l2ZW4gbm9kZXMgaWYgdXNlQXNwZWN0UmF0aW8gaXMgdHJ1dGh5IG9uZSBvZiB3aWR0aCBvciBoZWlnaHQgc2hvdWxkIG5vdCBiZSBzZXQuXG4gICAgZWxlbWVudFV0aWxpdGllcy5yZXNpemVOb2RlcyA9IGZ1bmN0aW9uIChcbiAgICAgIG5vZGVzLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICB1c2VBc3BlY3RSYXRpbyxcbiAgICAgIHByZXNlcnZlUmVsYXRpdmVQb3NcbiAgICApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgdmFyIHJhdGlvID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgZWxlTXVzdEJlU3F1YXJlID0gZWxlbWVudFV0aWxpdGllcy5tdXN0QmVTcXVhcmUobm9kZS5kYXRhKFwiY2xhc3NcIikpO1xuXG4gICAgICAgIGlmIChwcmVzZXJ2ZVJlbGF0aXZlUG9zID09PSB0cnVlKSB7XG4gICAgICAgICAgdmFyIG9sZFdpZHRoID0gbm9kZS5kYXRhKFwiYmJveFwiKS53O1xuICAgICAgICAgIHZhciBvbGRIZWlnaHQgPSBub2RlLmRhdGEoXCJiYm94XCIpLmg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3RlIHRoYXQgYm90aCB3aWR0aCBhbmQgaGVpZ2h0IHNob3VsZCBub3QgYmUgc2V0IGlmIHVzZUFzcGVjdFJhdGlvIGlzIHRydXRoeVxuICAgICAgICBpZiAoIW5vZGUuaXNQYXJlbnQoKSkge1xuICAgICAgICAgIGlmICh3aWR0aCkge1xuICAgICAgICAgICAgaWYgKHVzZUFzcGVjdFJhdGlvIHx8IGVsZU11c3RCZVNxdWFyZSkge1xuICAgICAgICAgICAgICByYXRpbyA9IHdpZHRoIC8gbm9kZS53aWR0aCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2RlLmRhdGEoXCJiYm94XCIpLncgPSB3aWR0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaGVpZ2h0KSB7XG4gICAgICAgICAgICBpZiAodXNlQXNwZWN0UmF0aW8gfHwgZWxlTXVzdEJlU3F1YXJlKSB7XG4gICAgICAgICAgICAgIHJhdGlvID0gaGVpZ2h0IC8gbm9kZS5oZWlnaHQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZS5kYXRhKFwiYmJveFwiKS5oID0gaGVpZ2h0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyYXRpbyAmJiAhaGVpZ2h0KSB7XG4gICAgICAgICAgICBub2RlLmRhdGEoXCJiYm94XCIpLmggPSBub2RlLmhlaWdodCgpICogcmF0aW87XG4gICAgICAgICAgfSBlbHNlIGlmIChyYXRpbyAmJiAhd2lkdGgpIHtcbiAgICAgICAgICAgIG5vZGUuZGF0YShcImJib3hcIikudyA9IG5vZGUud2lkdGgoKSAqIHJhdGlvO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLmRhdGEoXCJtaW5IZWlnaHRcIiwgXCJcIiArIGhlaWdodCk7XG4gICAgICAgICAgbm9kZS5kYXRhKFwibWluV2lkdGhcIiwgXCJcIiArIHdpZHRoKTtcbiAgICAgICAgICBub2RlLmRhdGEoXCJtaW5XaWR0aEJpYXNMZWZ0XCIsIFwiNTAlXCIpO1xuICAgICAgICAgIG5vZGUuZGF0YShcIm1pbldpZHRoQmlhc1JpZ2h0XCIsIFwiNTAlXCIpO1xuICAgICAgICAgIG5vZGUuZGF0YShcIm1pbkhlaWdodEJpYXNUb3BcIiwgXCI1MCVcIik7XG4gICAgICAgICAgbm9kZS5kYXRhKFwibWluSGVpZ2h0Qmlhc0JvdHRvbVwiLCBcIjUwJVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qICAgIGlmIChwcmVzZXJ2ZVJlbGF0aXZlUG9zID09PSB0cnVlKSB7XG4gICAgICAgICAgdmFyIHN0YXRlc2FuZGluZm9zID0gbm9kZS5kYXRhKCdzdGF0ZXNhbmRpbmZvcycpO1xuICAgICAgICAgIHZhciB0b3BCb3R0b20gPSBzdGF0ZXNhbmRpbmZvcy5maWx0ZXIoYm94ID0+IChib3guYW5jaG9yU2lkZSA9PT0gXCJ0b3BcIiB8fCBib3guYW5jaG9yU2lkZSA9PT0gXCJib3R0b21cIikpO1xuICAgICAgICAgIHZhciByaWdodExlZnQgPSBzdGF0ZXNhbmRpbmZvcy5maWx0ZXIoYm94ID0+IChib3guYW5jaG9yU2lkZSA9PT0gXCJyaWdodFwiIHx8IGJveC5hbmNob3JTaWRlID09PSBcImxlZnRcIikpO1xuXG4gICAgICAgICAgdG9wQm90dG9tLmZvckVhY2goZnVuY3Rpb24oYm94KXtcbiAgICAgICAgICAgIGlmIChib3guYmJveC54IDwgMCkge1xuICAgICAgICAgICAgICBib3guYmJveC54ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJveC5iYm94LnggPiBvbGRXaWR0aCkge1xuICAgICAgICAgICAgICBib3guYmJveC54ID0gb2xkV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBib3guYmJveC54ID0gbm9kZS5kYXRhKFwiYmJveFwiKS53ICogYm94LmJib3gueCAvIG9sZFdpZHRoO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmlnaHRMZWZ0LmZvckVhY2goZnVuY3Rpb24oYm94KXtcbiAgICAgICAgICAgIGlmIChib3guYmJveC55IDwgMCkge1xuICAgICAgICAgICAgICBib3guYmJveC55ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJveC5iYm94LnkgPiBvbGRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgYm94LmJib3gueSA9IG9sZEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJveC5iYm94LnkgPSBub2RlLmRhdGEoXCJiYm94XCIpLmggKiBib3guYmJveC55IC8gb2xkSGVpZ2h0O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9ICovXG4gICAgICB9XG4gICAgfTtcblxuICAgIGVsZW1lbnRVdGlsaXRpZXMuY2FsY3VsYXRlTWluV2lkdGggPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IHRoaXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMobm9kZS5kYXRhKFwiY2xhc3NcIikpLndpZHRoO1xuXG4gICAgICAvLyBMYWJlbCB3aWR0aCBjYWxjdWxhdGlvblxuICAgICAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZSgpO1xuXG4gICAgICB2YXIgZm9udEZhbWlsaXkgPSBzdHlsZVtcImZvbnQtZmFtaWx5XCJdO1xuICAgICAgdmFyIGZvbnRTaXplID0gc3R5bGVbXCJmb250LXNpemVcIl07XG4gICAgICB2YXIgbGFiZWxUZXh0ID0gc3R5bGVbXCJsYWJlbFwiXTtcblxuICAgICAgaWYgKGxhYmVsVGV4dCA9PT0gXCJcIiAmJiBub2RlLmRhdGEoXCJsYWJlbFwiKSAmJiBub2RlLmRhdGEoXCJsYWJlbFwiKSAhPT0gXCJcIikge1xuICAgICAgICBsYWJlbFRleHQgPSBub2RlLmRhdGEoXCJsYWJlbFwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxhYmVsV2lkdGggPSBlbGVtZW50VXRpbGl0aWVzLmdldFdpZHRoQnlDb250ZW50KFxuICAgICAgICBsYWJlbFRleHQsXG4gICAgICAgIGZvbnRGYW1pbGl5LFxuICAgICAgICBmb250U2l6ZVxuICAgICAgKTtcblxuICAgICAgdmFyIHN0YXRlc2FuZGluZm9zID0gbm9kZS5kYXRhKFwic3RhdGVzYW5kaW5mb3NcIik7XG4gICAgICAvL1RvcCBhbmQgYm90dG9tIGluZm9Cb3hlc1xuICAgICAgLy92YXIgdG9wSW5mb0JveGVzID0gc3RhdGVzYW5kaW5mb3MuZmlsdGVyKGJveCA9PiAoYm94LmFuY2hvclNpZGUgPT09IFwidG9wXCIgfHwgKChib3guYW5jaG9yU2lkZSA9PT0gXCJyaWdodFwiIHx8IGJveC5hbmNob3JTaWRlID09PSBcImxlZnRcIikgJiYgKGJveC5iYm94LnkgPD0gMTIpKSkpO1xuICAgICAgLy92YXIgYm90dG9tSW5mb0JveGVzID0gc3RhdGVzYW5kaW5mb3MuZmlsdGVyKGJveCA9PiAoYm94LmFuY2hvclNpZGUgPT09IFwiYm90dG9tXCIgfHwgKChib3guYW5jaG9yU2lkZSA9PT0gXCJyaWdodFwiIHx8IGJveC5hbmNob3JTaWRlID09PSBcImxlZnRcIikgJiYgKGJveC5iYm94LnkgPj0gbm9kZS5kYXRhKCdiYm94JykuaCAtIDEyKSkpKTtcbiAgICAgIHZhciB1bml0R2FwID0gNTtcbiAgICAgIHZhciB0b3BJZGVhbFdpZHRoID0gdW5pdEdhcDtcbiAgICAgIHZhciBib3R0b21JZGVhbFdpZHRoID0gdW5pdEdhcDtcbiAgICAgIHZhciByaWdodE1heFdpZHRoID0gMDtcbiAgICAgIHZhciBsZWZ0TWF4V2lkdGggPSAwO1xuICAgICAgc3RhdGVzYW5kaW5mb3MuZm9yRWFjaChmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgIGlmIChib3guYW5jaG9yU2lkZSA9PT0gXCJ0b3BcIikge1xuICAgICAgICAgIHRvcElkZWFsV2lkdGggKz0gYm94LmJib3gudyArIHVuaXRHYXA7XG4gICAgICAgIH0gZWxzZSBpZiAoYm94LmFuY2hvclNpZGUgPT09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgICBib3R0b21JZGVhbFdpZHRoICs9IGJveC5iYm94LncgKyB1bml0R2FwO1xuICAgICAgICB9IGVsc2UgaWYgKGJveC5hbmNob3JTaWRlID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgICByaWdodE1heFdpZHRoID1cbiAgICAgICAgICAgIGJveC5iYm94LncgPiByaWdodE1heFdpZHRoID8gYm94LmJib3gudyA6IHJpZ2h0TWF4V2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGVmdE1heFdpZHRoID0gYm94LmJib3gudyA+IGxlZnRNYXhXaWR0aCA/IGJveC5iYm94LncgOiBsZWZ0TWF4V2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbWlkZGxlV2lkdGggPVxuICAgICAgICBsYWJlbFdpZHRoICsgMiAqIE1hdGgubWF4KHJpZ2h0TWF4V2lkdGggLyAyLCBsZWZ0TWF4V2lkdGggLyAyKTtcblxuICAgICAgdmFyIGNvbXBvdW5kV2lkdGggPSAwO1xuICAgICAgaWYgKG5vZGUuaXNQYXJlbnQoKSkge1xuICAgICAgICBjb21wb3VuZFdpZHRoID0gbm9kZS5jaGlsZHJlbigpLmJvdW5kaW5nQm94KCkudztcbiAgICAgIH1cbiAgICAgIHJldHVybiBNYXRoLm1heChcbiAgICAgICAgbWlkZGxlV2lkdGgsXG4gICAgICAgIGRlZmF1bHRXaWR0aCAvIDIsXG4gICAgICAgIHRvcElkZWFsV2lkdGgsXG4gICAgICAgIGJvdHRvbUlkZWFsV2lkdGgsXG4gICAgICAgIGNvbXBvdW5kV2lkdGhcbiAgICAgICk7XG4gICAgfTtcblxuICAgIGVsZW1lbnRVdGlsaXRpZXMuY2FsY3VsYXRlTWluSGVpZ2h0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBzdGF0ZXNhbmRpbmZvcyA9IG5vZGUuZGF0YShcInN0YXRlc2FuZGluZm9zXCIpO1xuICAgICAgdmFyIG1hcmdpbiA9IDc7XG4gICAgICB2YXIgdW5pdEdhcCA9IDU7XG4gICAgICB2YXIgZGVmYXVsdEhlaWdodCA9IHRoaXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMobm9kZS5kYXRhKFwiY2xhc3NcIikpLmhlaWdodDtcbiAgICAgIHZhciBsZWZ0SW5mb0JveGVzID0gc3RhdGVzYW5kaW5mb3MuZmlsdGVyKFxuICAgICAgICAoYm94KSA9PiBib3guYW5jaG9yU2lkZSA9PT0gXCJsZWZ0XCJcbiAgICAgICk7XG4gICAgICB2YXIgbGVmdEhlaWdodCA9IHVuaXRHYXA7XG4gICAgICBsZWZ0SW5mb0JveGVzLmZvckVhY2goZnVuY3Rpb24gKGJveCkge1xuICAgICAgICBsZWZ0SGVpZ2h0ICs9IGJveC5iYm94LmggKyB1bml0R2FwO1xuICAgICAgfSk7XG4gICAgICB2YXIgcmlnaHRJbmZvQm94ZXMgPSBzdGF0ZXNhbmRpbmZvcy5maWx0ZXIoXG4gICAgICAgIChib3gpID0+IGJveC5hbmNob3JTaWRlID09PSBcInJpZ2h0XCJcbiAgICAgICk7XG4gICAgICB2YXIgcmlnaHRIZWlnaHQgPSB1bml0R2FwO1xuICAgICAgcmlnaHRJbmZvQm94ZXMuZm9yRWFjaChmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgIHJpZ2h0SGVpZ2h0ICs9IGJveC5iYm94LmggKyB1bml0R2FwO1xuICAgICAgfSk7XG4gICAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlKCk7XG4gICAgICB2YXIgbGFiZWxUZXh0ID0gc3R5bGVbXCJsYWJlbFwiXS5zcGxpdChcIlxcblwiKS5maWx0ZXIoKHRleHQpID0+IHRleHQgIT09IFwiXCIpO1xuICAgICAgdmFyIGZvbnRTaXplID0gcGFyc2VGbG9hdChcbiAgICAgICAgc3R5bGVbXCJmb250LXNpemVcIl0uc3Vic3RyaW5nKDAsIHN0eWxlW1wiZm9udC1zaXplXCJdLmxlbmd0aCAtIDIpXG4gICAgICApO1xuICAgICAgdmFyIHRvdGFsSGVpZ2h0ID0gbGFiZWxUZXh0Lmxlbmd0aCAqIGZvbnRTaXplICsgMiAqIG1hcmdpbjtcblxuICAgICAgdmFyIGNvbXBvdW5kSGVpZ2h0ID0gMDtcbiAgICAgIGlmIChub2RlLmlzUGFyZW50KCkpIHtcbiAgICAgICAgY29tcG91bmRIZWlnaHQgPSBub2RlLmNoaWxkcmVuKCkuYm91bmRpbmdCb3goKS5oO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGgubWF4KFxuICAgICAgICB0b3RhbEhlaWdodCxcbiAgICAgICAgZGVmYXVsdEhlaWdodCAvIDIsXG4gICAgICAgIGxlZnRIZWlnaHQsXG4gICAgICAgIHJpZ2h0SGVpZ2h0LFxuICAgICAgICBjb21wb3VuZEhlaWdodFxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5pc1Jlc2l6ZWRUb0NvbnRlbnQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKCFub2RlIHx8ICFub2RlLmlzTm9kZSgpIHx8ICFub2RlLmRhdGEoXCJiYm94XCIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy92YXIgdyA9IG5vZGUuZGF0YSgnYmJveCcpLnc7XG4gICAgICAvL3ZhciBoID0gbm9kZS5kYXRhKCdiYm94JykuaDtcbiAgICAgIHZhciB3ID0gbm9kZS53aWR0aCgpO1xuICAgICAgdmFyIGggPSBub2RlLmhlaWdodCgpO1xuXG4gICAgICB2YXIgbWluVyA9IGVsZW1lbnRVdGlsaXRpZXMuY2FsY3VsYXRlTWluV2lkdGgobm9kZSk7XG4gICAgICB2YXIgbWluSCA9IGVsZW1lbnRVdGlsaXRpZXMuY2FsY3VsYXRlTWluSGVpZ2h0KG5vZGUpO1xuXG4gICAgICBpZiAodyA9PT0gbWluVyAmJiBoID09PSBtaW5IKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAvLyBTZWN0aW9uIEVuZFxuICAgIC8vIEFkZCByZW1vdmUgdXRpbGl0aWVzXG5cbiAgICAvLyBSZWxvY2F0ZXMgc3RhdGUgYW5kIGluZm8gYm94ZXMuIFRoaXMgZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gYmUgY2FsbGVkIGFmdGVyIGFkZC9yZW1vdmUgc3RhdGUgYW5kIGluZm8gYm94ZXNcbiAgICBlbGVtZW50VXRpbGl0aWVzLnJlbG9jYXRlU3RhdGVBbmRJbmZvcyA9IGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgIHZhciBzdGF0ZUFuZEluZm9zID1cbiAgICAgICAgZWxlLmlzTm9kZSAmJiBlbGUuaXNOb2RlKCkgPyBlbGUuZGF0YShcInN0YXRlc2FuZGluZm9zXCIpIDogZWxlO1xuICAgICAgdmFyIGxlbmd0aCA9IHN0YXRlQW5kSW5mb3MubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID09IDEpIHtcbiAgICAgICAgc3RhdGVBbmRJbmZvc1swXS5iYm94LnggPSAwO1xuICAgICAgICBzdGF0ZUFuZEluZm9zWzBdLmJib3gueSA9IC01MDtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID09IDIpIHtcbiAgICAgICAgc3RhdGVBbmRJbmZvc1swXS5iYm94LnggPSAwO1xuICAgICAgICBzdGF0ZUFuZEluZm9zWzBdLmJib3gueSA9IC01MDtcblxuICAgICAgICBzdGF0ZUFuZEluZm9zWzFdLmJib3gueCA9IDA7XG4gICAgICAgIHN0YXRlQW5kSW5mb3NbMV0uYmJveC55ID0gNTA7XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PSAzKSB7XG4gICAgICAgIHN0YXRlQW5kSW5mb3NbMF0uYmJveC54ID0gLTI1O1xuICAgICAgICBzdGF0ZUFuZEluZm9zWzBdLmJib3gueSA9IC01MDtcblxuICAgICAgICBzdGF0ZUFuZEluZm9zWzFdLmJib3gueCA9IDI1O1xuICAgICAgICBzdGF0ZUFuZEluZm9zWzFdLmJib3gueSA9IC01MDtcblxuICAgICAgICBzdGF0ZUFuZEluZm9zWzJdLmJib3gueCA9IDA7XG4gICAgICAgIHN0YXRlQW5kSW5mb3NbMl0uYmJveC55ID0gNTA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZUFuZEluZm9zWzBdLmJib3gueCA9IC0yNTtcbiAgICAgICAgc3RhdGVBbmRJbmZvc1swXS5iYm94LnkgPSAtNTA7XG5cbiAgICAgICAgc3RhdGVBbmRJbmZvc1sxXS5iYm94LnggPSAyNTtcbiAgICAgICAgc3RhdGVBbmRJbmZvc1sxXS5iYm94LnkgPSAtNTA7XG5cbiAgICAgICAgc3RhdGVBbmRJbmZvc1syXS5iYm94LnggPSAtMjU7XG4gICAgICAgIHN0YXRlQW5kSW5mb3NbMl0uYmJveC55ID0gNTA7XG5cbiAgICAgICAgc3RhdGVBbmRJbmZvc1szXS5iYm94LnggPSAyNTtcbiAgICAgICAgc3RhdGVBbmRJbmZvc1szXS5iYm94LnkgPSA1MDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gQ2hhbmdlIHN0YXRlIHZhbHVlIG9yIHVuaXQgb2YgaW5mb3JtYXRpb24gYm94IG9mIGdpdmVuIG5vZGVzIHdpdGggZ2l2ZW4gaW5kZXguXG4gICAgLy8gVHlwZSBwYXJhbWV0ZXIgaW5kaWNhdGVzIHdoZXRoZXIgdG8gY2hhbmdlIHZhbHVlIG9yIHZhcmlhYmxlLCBpdCBpcyB2YWxpZCBpZiB0aGUgYm94IGF0IHRoZSBnaXZlbiBpbmRleCBpcyBhIHN0YXRlIHZhcmlhYmxlLlxuICAgIC8vIFZhbHVlIHBhcmFtZXRlciBpcyB0aGUgbmV3IHZhbHVlIHRvIHNldC5cbiAgICAvLyBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBvbGQgdmFsdWUgb2YgdGhlIGNoYW5nZWQgZGF0YSAoV2UgYXNzdW1lIHRoYXQgdGhlIG9sZCB2YWx1ZSBvZiB0aGUgY2hhbmdlZCBkYXRhIHdhcyB0aGUgc2FtZSBmb3IgYWxsIG5vZGVzKS5cbiAgICAvLyBFYWNoIGNoYXJhY3RlciBhc3N1bWVkIHRvIG9jY3VweSA4IHVuaXRcbiAgICAvLyBFYWNoIGluZm9ib3ggY2FuIGhhdmUgYXQgbW9zdCAzMiB1bml0cyBvZiB3aWR0aFxuICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlU3RhdGVPckluZm9Cb3ggPSBmdW5jdGlvbiAoXG4gICAgICBub2RlcyxcbiAgICAgIGluZGV4LFxuICAgICAgdmFsdWUsXG4gICAgICB0eXBlXG4gICAgKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICB2YXIgc2JnbmNsYXNzID0gbm9kZS5kYXRhKFwiY2xhc3NcIik7XG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9zID0gbm9kZS5kYXRhKFwic3RhdGVzYW5kaW5mb3NcIik7XG4gICAgICAgIHZhciBib3ggPSBzdGF0ZUFuZEluZm9zW2luZGV4XTtcbiAgICAgICAgdmFyIG9sZExlbmd0aCA9IGJveC5iYm94Lnc7XG4gICAgICAgIHZhciBuZXdMZW5ndGggPSAwO1xuXG4gICAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgICAgaWYgKGJveC5jbGF6eiA9PSBcInN0YXRlIHZhcmlhYmxlXCIpIHtcbiAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gYm94LnN0YXRlW3R5cGVdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJveC5zdGF0ZVt0eXBlXSA9IHZhbHVlO1xuICAgICAgICAgIGlmIChib3guc3RhdGVbXCJ2YWx1ZVwiXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb250ZW50ICs9IGJveC5zdGF0ZVtcInZhbHVlXCJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBib3guc3RhdGVbXCJ2YXJpYWJsZVwiXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBib3guc3RhdGVbXCJ2YXJpYWJsZVwiXS5sZW5ndGggPiAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb250ZW50ICs9IGJveC5zdGF0ZVtcInZhcmlhYmxlXCJdICsgXCJAXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGJveC5jbGF6eiA9PSBcInVuaXQgb2YgaW5mb3JtYXRpb25cIikge1xuICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSBib3gubGFiZWwudGV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGVudCArPSB2YWx1ZTtcbiAgICAgICAgICBib3gubGFiZWwudGV4dCA9IHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGJveC5jbGF6eiA9PSBcInJlc2lkdWUgdmFyaWFibGVcIikge1xuICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSBib3gucmVzaWR1ZVt0eXBlXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBib3gucmVzaWR1ZVt0eXBlXSA9IHZhbHVlO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGJveC5yZXNpZHVlW1widmFyaWFibGVcIl0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgYm94LnJlc2lkdWVbXCJ2YXJpYWJsZVwiXS5sZW5ndGggPiAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb250ZW50ICs9IGJveC5yZXNpZHVlW1widmFyaWFibGVcIl07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGJveC5jbGF6eiA9PSBcImJpbmRpbmcgcmVnaW9uXCIpIHtcbiAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gYm94LnJlZ2lvblt0eXBlXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBib3gucmVnaW9uW3R5cGVdID0gdmFsdWU7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgYm94LnJlZ2lvbltcInZhcmlhYmxlXCJdICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGJveC5yZWdpb25bXCJ2YXJpYWJsZVwiXS5sZW5ndGggPiAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb250ZW50ICs9IGJveC5yZWdpb25bXCJ2YXJpYWJsZVwiXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluID1cbiAgICAgICAgICBzYmduY2xhc3MgPT09IFwiU0lGIG1hY3JvbW9sZWN1bGVcIiB8fFxuICAgICAgICAgIHNiZ25jbGFzcyA9PT0gXCJTSUYgc2ltcGxlIGNoZW1pY2FsXCJcbiAgICAgICAgICAgID8gMTVcbiAgICAgICAgICAgIDogMTI7XG4gICAgICAgIHZhciBmb250RmFtaWx5ID0gYm94LnN0eWxlW1wiZm9udC1mYW1pbHlcIl07XG4gICAgICAgIHZhciBmb250U2l6ZSA9IGJveC5zdHlsZVtcImZvbnQtc2l6ZVwiXTtcbiAgICAgICAgdmFyIGJvcmRlcldpZHRoID0gYm94LnN0eWxlW1wiYm9yZGVyLXdpZHRoXCJdO1xuICAgICAgICB2YXIgb3B0cyA9IHtcbiAgICAgICAgICBtaW4sXG4gICAgICAgICAgbWF4OiA0OCxcbiAgICAgICAgICBtYXJnaW46IGJvcmRlcldpZHRoIC8gMiArIDAuNSxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHByZXZpb3VzV2lkdGggPSBib3guYmJveC53O1xuICAgICAgICBib3guYmJveC53ID0gZWxlbWVudFV0aWxpdGllcy5nZXRXaWR0aEJ5Q29udGVudChcbiAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgIGZvbnRGYW1pbHksXG4gICAgICAgICAgZm9udFNpemUsXG4gICAgICAgICAgb3B0c1xuICAgICAgICApO1xuXG4gICAgICAgIGlmIChib3guYW5jaG9yU2lkZSA9PSBcInRvcFwiIHx8IGJveC5hbmNob3JTaWRlID09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgICB2YXIgdW5pdExheW91dCA9IG5vZGUuZGF0YSgpW1wiYXV4dW5pdGxheW91dHNcIl1bYm94LmFuY2hvclNpZGVdO1xuICAgICAgICAgIGlmICh1bml0TGF5b3V0LnVuaXRzW3VuaXRMYXlvdXQudW5pdHMubGVuZ3RoIC0gMV0uaWQgPT0gYm94LmlkKSB7XG4gICAgICAgICAgICB2YXIgYm9yZGVyV2lkdGggPSBub2RlLmRhdGEoKVtcImJvcmRlci13aWR0aFwiXTtcbiAgICAgICAgICAgIHZhciBzaGlmdEFtb3VudCA9XG4gICAgICAgICAgICAgICgoKGJveC5iYm94LncgLSBwcmV2aW91c1dpZHRoKSAvIDIpICogMTAwKSAvXG4gICAgICAgICAgICAgIChub2RlLm91dGVyV2lkdGgoKSAtIGJvcmRlcldpZHRoKTtcblxuICAgICAgICAgICAgaWYgKHNoaWZ0QW1vdW50ID49IDApIHtcbiAgICAgICAgICAgICAgaWYgKGJveC5iYm94LnggKyBzaGlmdEFtb3VudCA8PSAxMDApIHtcbiAgICAgICAgICAgICAgICBib3guYmJveC54ID0gYm94LmJib3gueCArIHNoaWZ0QW1vdW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiAgZWxzZXtcbiAgICAgICAgICAgICAgdmFyIHByZXZpb3VzSW5mb0Jib3ggPSB7eCA6IDAsIHc6MH07XG4gICAgICAgICAgICAgIGlmKHVuaXRMYXlvdXQudW5pdHMubGVuZ3RoID4gMSl7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNJbmZvQmJveD0gdW5pdExheW91dC51bml0c1t1bml0TGF5b3V0LnVuaXRzLmxlbmd0aC0yXS5iYm94OyAgICAgIFxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBzYmdudml6SW5zdGFuY2UuY2xhc3Nlcy5BdXhVbml0TGF5b3V0LnNldElkZWFsR2FwKG5vZGUsIGJveC5hbmNob3JTaWRlKTtcbiAgICAgICAgICAgICAgdmFyIGlkZWFsR2FwID0gc2JnbnZpekluc3RhbmNlLmNsYXNzZXMuQXV4VW5pdExheW91dC5nZXRDdXJyZW50R2FwKGJveC5hbmNob3JTaWRlKTtcbiAgICAgICAgICAgICAgdmFyIG5ld1Bvc2l0aW9uID0gcHJldmlvdXNJbmZvQmJveC54ICsgKHByZXZpb3VzSW5mb0Jib3gudy8yICsgaWRlYWxHYXAgKyBib3guYmJveC53LzIpKjEwMCAvIChub2RlLm91dGVyV2lkdGgoKSAtIGJvcmRlcldpZHRoKTtcbiAgICAgICAgICAgICAgYm94LmJib3gueCA9IG5ld1Bvc2l0aW9uO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gKi9cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpZiAoYm94LmFuY2hvclNpZGUgPT09IFwidG9wXCIgfHwgYm94LmFuY2hvclNpZGUgPT09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgICBib3guYmJveC54ICs9IChib3guYmJveC53IC0gb2xkTGVuZ3RoKSAvIDI7XG4gICAgICAgICAgdmFyIHVuaXRzID0gKG5vZGUuZGF0YSgnYXV4dW5pdGxheW91dHMnKVtib3guYW5jaG9yU2lkZV0pLnVuaXRzO1xuICAgICAgICAgIHZhciBzaGlmdEluZGV4ID0gMDtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZih1bml0c1tpXSA9PT0gYm94KXtcbiAgICAgICAgICAgICAgc2hpZnRJbmRleCA9IGk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBqID0gc2hpZnRJbmRleCsxOyBqIDwgdW5pdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgdW5pdHNbal0uYmJveC54ICs9IChib3guYmJveC53IC0gb2xkTGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gKi9cbiAgICAgIH1cblxuICAgICAgLy9UT0RPIGZpbmQgYSB3YXkgdG8gZWxpbWF0ZSB0aGlzIHJlZHVuZGFuY3kgdG8gdXBkYXRlIGluZm8tYm94IHBvc2l0aW9uc1xuICAgICAgbm9kZS5kYXRhKFwiYm9yZGVyLXdpZHRoXCIsIG5vZGUuZGF0YShcImJvcmRlci13aWR0aFwiKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8vIEFkZCBhIG5ldyBzdGF0ZSBvciBpbmZvIGJveCB0byBnaXZlbiBub2Rlcy5cbiAgICAvLyBUaGUgYm94IGlzIHJlcHJlc2VudGVkIGJ5IHRoZSBwYXJhbWV0ZXIgb2JqLlxuICAgIC8vIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBqdXN0IGFkZGVkIGJveC5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmFkZFN0YXRlT3JJbmZvQm94ID0gZnVuY3Rpb24gKG5vZGVzLCBvYmopIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgdmFyIGxvY2F0aW9uT2JqO1xuXG4gICAgICAgIHZhciBkZWZhdWx0UHJvcHMgPSBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKFxuICAgICAgICAgIG5vZGUuZGF0YShcImNsYXNzXCIpXG4gICAgICAgICk7XG4gICAgICAgIHZhciBpbmZvYm94UHJvcHMgPSBkZWZhdWx0UHJvcHNbb2JqLmNsYXp6XTtcbiAgICAgICAgdmFyIGJib3ggPSBvYmouYmJveCB8fCB7XG4gICAgICAgICAgdzogaW5mb2JveFByb3BzLndpZHRoLFxuICAgICAgICAgIGg6IGluZm9ib3hQcm9wcy5oZWlnaHQsXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHlsZSA9IGVsZW1lbnRVdGlsaXRpZXMuZ2V0RGVmYXVsdEluZm9ib3hTdHlsZShcbiAgICAgICAgICBub2RlLmRhdGEoXCJjbGFzc1wiKSxcbiAgICAgICAgICBvYmouY2xhenpcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKG9iai5zdHlsZSkge1xuICAgICAgICAgICQuZXh0ZW5kKHN0eWxlLCBvYmouc3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9iai5jbGF6eiA9PSBcInVuaXQgb2YgaW5mb3JtYXRpb25cIikge1xuICAgICAgICAgIGxvY2F0aW9uT2JqID0gc2JnbnZpekluc3RhbmNlLmNsYXNzZXMuVW5pdE9mSW5mb3JtYXRpb24uY3JlYXRlKFxuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIGN5LFxuICAgICAgICAgICAgb2JqLmxhYmVsLnRleHQsXG4gICAgICAgICAgICBiYm94LFxuICAgICAgICAgICAgb2JqLmxvY2F0aW9uLFxuICAgICAgICAgICAgb2JqLnBvc2l0aW9uLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBvYmouaW5kZXgsXG4gICAgICAgICAgICBvYmouaWRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKG9iai5jbGF6eiA9PSBcInN0YXRlIHZhcmlhYmxlXCIpIHtcbiAgICAgICAgICBsb2NhdGlvbk9iaiA9IHNiZ252aXpJbnN0YW5jZS5jbGFzc2VzLlN0YXRlVmFyaWFibGUuY3JlYXRlKFxuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIGN5LFxuICAgICAgICAgICAgb2JqLnN0YXRlLnZhbHVlLFxuICAgICAgICAgICAgb2JqLnN0YXRlLnZhcmlhYmxlLFxuICAgICAgICAgICAgYmJveCxcbiAgICAgICAgICAgIG9iai5sb2NhdGlvbixcbiAgICAgICAgICAgIG9iai5wb3NpdGlvbixcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgb2JqLmluZGV4LFxuICAgICAgICAgICAgb2JqLmlkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmouY2xhenogPT0gXCJyZXNpZHVlIHZhcmlhYmxlXCIpIHtcbiAgICAgICAgICBsb2NhdGlvbk9iaiA9IHNiZ252aXpJbnN0YW5jZS5jbGFzc2VzLlJlc2lkdWVWYXJpYWJsZS5jcmVhdGUoXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgY3ksXG4gICAgICAgICAgICBvYmoucmVzaWR1ZS52YWx1ZSxcbiAgICAgICAgICAgIG9iai5yZXNpZHVlLnZhcmlhYmxlLFxuICAgICAgICAgICAgYmJveCxcbiAgICAgICAgICAgIG9iai5sb2NhdGlvbixcbiAgICAgICAgICAgIG9iai5wb3NpdGlvbixcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgb2JqLmluZGV4LFxuICAgICAgICAgICAgb2JqLmlkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmouY2xhenogPT0gXCJiaW5kaW5nIHJlZ2lvblwiKSB7XG4gICAgICAgICAgbG9jYXRpb25PYmogPSBzYmdudml6SW5zdGFuY2UuY2xhc3Nlcy5CaW5kaW5nUmVnaW9uLmNyZWF0ZShcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBjeSxcbiAgICAgICAgICAgIG9iai5yZWdpb24udmFsdWUsXG4gICAgICAgICAgICBvYmoucmVnaW9uLnZhcmlhYmxlLFxuICAgICAgICAgICAgYmJveCxcbiAgICAgICAgICAgIG9iai5sb2NhdGlvbixcbiAgICAgICAgICAgIG9iai5wb3NpdGlvbixcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgb2JqLmluZGV4LFxuICAgICAgICAgICAgb2JqLmlkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGxvY2F0aW9uT2JqO1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgdGhlIHN0YXRlIG9yIGluZm8gYm94ZXMgb2YgdGhlIGdpdmVuIG5vZGVzIGF0IGdpdmVuIGluZGV4LlxuICAgIC8vIFJldHVybnMgdGhlIHJlbW92ZWQgYm94LlxuICAgIGVsZW1lbnRVdGlsaXRpZXMucmVtb3ZlU3RhdGVPckluZm9Cb3ggPSBmdW5jdGlvbiAobm9kZXMsIGxvY2F0aW9uT2JqKSB7XG4gICAgICB2YXIgb2JqO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICB2YXIgc3RhdGVBbmRJbmZvcyA9IG5vZGUuZGF0YShcInN0YXRlc2FuZGluZm9zXCIpO1xuICAgICAgICB2YXIgdW5pdCA9IHN0YXRlQW5kSW5mb3NbbG9jYXRpb25PYmouaW5kZXhdO1xuXG4gICAgICAgIHZhciB1bml0Q2xhc3MgPSBzYmdudml6SW5zdGFuY2UuY2xhc3Nlcy5nZXRBdXhVbml0Q2xhc3ModW5pdCk7XG5cbiAgICAgICAgb2JqID0gdW5pdENsYXNzLnJlbW92ZSh1bml0LCBjeSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcblxuICAgIC8vVGlsZXMgaW5mb3JtYXRpb25zIGJveGVzIGZvciBnaXZlbiBhbmNob3JTaWRlc1xuICAgIGVsZW1lbnRVdGlsaXRpZXMuZml0VW5pdHMgPSBmdW5jdGlvbiAobm9kZSwgbG9jYXRpb25zKSB7XG4gICAgICB2YXIgb2JqID0gW107XG4gICAgICBub2RlLmRhdGEoXCJzdGF0ZXNhbmRpbmZvc1wiKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgb2JqLnB1c2goe1xuICAgICAgICAgIHg6IGVsZS5iYm94LngsXG4gICAgICAgICAgeTogZWxlLmJib3gueSxcbiAgICAgICAgICBhbmNob3JTaWRlOiBlbGUuYW5jaG9yU2lkZSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHNiZ252aXpJbnN0YW5jZS5jbGFzc2VzLkF1eFVuaXRMYXlvdXQuZml0VW5pdHMobm9kZSwgY3ksIGxvY2F0aW9ucyk7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH07XG5cbiAgICAvL0NoZWNrIHdoaWNoIGFuY2hvcnNpZGVzIGZpdHNcbiAgICBlbGVtZW50VXRpbGl0aWVzLmNoZWNrRml0ID0gZnVuY3Rpb24gKG5vZGUsIGxvY2F0aW9uKSB7XG4gICAgICAvL2lmIG5vIGxvY2F0aW9uIGdpdmVuLCBpdCBjaGVja3MgYWxsIHBvc3NpYmxlIGxvY2F0aW9uc1xuICAgICAgY29uc29sZS5sb2coXCJlbGVtZW50VXRpbGl0aWVzLmNoZWNrRml0XCIsIG5vZGUpO1xuICAgICAgcmV0dXJuIHNiZ252aXpJbnN0YW5jZS5jbGFzc2VzLkF1eFVuaXRMYXlvdXQuY2hlY2tGaXQobm9kZSwgY3ksIGxvY2F0aW9uKTtcbiAgICB9O1xuXG4gICAgLy9Nb2RpZnkgYXJyYXkgb2YgYXV4IGxheW91dCB1bml0c1xuICAgIGVsZW1lbnRVdGlsaXRpZXMubW9kaWZ5VW5pdHMgPSBmdW5jdGlvbiAobm9kZSwgdW5pdCwgYW5jaG9yU2lkZSkge1xuICAgICAgc2JnbnZpekluc3RhbmNlLmNsYXNzZXMuQXV4VW5pdExheW91dC5tb2RpZnlVbml0cyhcbiAgICAgICAgbm9kZSxcbiAgICAgICAgdW5pdCxcbiAgICAgICAgYW5jaG9yU2lkZSxcbiAgICAgICAgY3lcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIFNldCBtdWx0aW1lciBzdGF0dXMgb2YgdGhlIGdpdmVuIG5vZGVzIHRvIHRoZSBnaXZlbiBzdGF0dXMuXG4gICAgZWxlbWVudFV0aWxpdGllcy5zZXRNdWx0aW1lclN0YXR1cyA9IGZ1bmN0aW9uIChub2Rlcywgc3RhdHVzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHZhciBzYmduY2xhc3MgPSBub2RlLmRhdGEoXCJjbGFzc1wiKTtcbiAgICAgICAgdmFyIGlzTXVsdGltZXIgPSBub2RlLmRhdGEoXCJjbGFzc1wiKS5lbmRzV2l0aChcIiBtdWx0aW1lclwiKTtcblxuICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgLy8gTWFrZSBtdWx0aW1lciBzdGF0dXMgdHJ1ZVxuICAgICAgICAgIGlmICghaXNNdWx0aW1lcikge1xuICAgICAgICAgICAgbm9kZS5kYXRhKFwiY2xhc3NcIiwgc2JnbmNsYXNzICsgXCIgbXVsdGltZXJcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE1ha2UgbXVsdGltZXIgc3RhdHVzIGZhbHNlXG4gICAgICAgICAgaWYgKGlzTXVsdGltZXIpIHtcbiAgICAgICAgICAgIG5vZGUuZGF0YShcImNsYXNzXCIsIHNiZ25jbGFzcy5yZXBsYWNlKFwiIG11bHRpbWVyXCIsIFwiXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy9OZWVkIHRvIGFkZCB0aGlzIHRvIGRvYyA6IFRPLURPXG4gICAgZWxlbWVudFV0aWxpdGllcy5zZXRBY3RpdmVTdGF0dXMgPSBmdW5jdGlvbiAobm9kZXMsIHN0YXR1cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICB2YXIgc2JnbmNsYXNzID0gbm9kZS5kYXRhKFwiY2xhc3NcIik7XG4gICAgICAgIHZhciBpc0FjdGl2ZSA9IG5vZGUuZGF0YShcImNsYXNzXCIpLnN0YXJ0c1dpdGgoXCJhY3RpdmUgXCIpO1xuXG4gICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAvLyBNYWtlIG11bHRpbWVyIHN0YXR1cyB0cnVlXG4gICAgICAgICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgICAgICAgbm9kZS5kYXRhKFwiY2xhc3NcIiwgXCJhY3RpdmUgXCIgKyBzYmduY2xhc3MpO1xuICAgICAgICAgICAgLy9ub2RlLmRhdGEoJ2NsYXNzJywgc2JnbmNsYXNzICsgJyBtdWx0aW1lcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBNYWtlIG11bHRpbWVyIHN0YXR1cyBmYWxzZVxuICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgbm9kZS5kYXRhKFwiY2xhc3NcIiwgc2JnbmNsYXNzLnJlcGxhY2UoXCJhY3RpdmUgXCIsIFwiXCIpKTtcbiAgICAgICAgICAgIC8vbm9kZS5kYXRhKCdjbGFzcycsIHNiZ25jbGFzcy5yZXBsYWNlKCcgbXVsdGltZXInLCAnJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvL05lZWQgdG8gYWRkIHRoaXMgdG8gZG9jIDogVE8tRE9cbiAgICBlbGVtZW50VXRpbGl0aWVzLnNldEh5cG90aGV0aWNhbFN0YXR1cyA9IGZ1bmN0aW9uIChub2Rlcywgc3RhdHVzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHZhciBzYmduY2xhc3MgPSBub2RlLmRhdGEoXCJjbGFzc1wiKTtcbiAgICAgICAgdmFyIGlzSHlwb3RoZXRpY2FsID0gbm9kZS5kYXRhKFwiY2xhc3NcIikuaW5jbHVkZXMoXCJoeXBvdGhldGljYWxcIik7XG4gICAgICAgIHZhciBpc0FjdGl2ZSA9IG5vZGUuZGF0YShcImNsYXNzXCIpLnN0YXJ0c1dpdGgoXCJhY3RpdmUgXCIpO1xuXG4gICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAvLyBNYWtlIG11bHRpbWVyIHN0YXR1cyB0cnVlXG4gICAgICAgICAgaWYgKCFpc0h5cG90aGV0aWNhbCkge1xuICAgICAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgIHZhciB0bXAgPSBzYmduY2xhc3Muc3Vic3RyaW5nKDcpO1xuICAgICAgICAgICAgICBub2RlLmRhdGEoXCJjbGFzc1wiLCBcImFjdGl2ZSBoeXBvdGhldGljYWwgXCIgKyB0bXApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbm9kZS5kYXRhKFwiY2xhc3NcIiwgXCJoeXBvdGhldGljYWwgXCIgKyBzYmduY2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9ub2RlLmRhdGEoJ2NsYXNzJywgc2JnbmNsYXNzICsgJyBtdWx0aW1lcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBNYWtlIG11bHRpbWVyIHN0YXR1cyBmYWxzZVxuICAgICAgICAgIGlmIChpc0h5cG90aGV0aWNhbCkge1xuICAgICAgICAgICAgbm9kZS5kYXRhKFwiY2xhc3NcIiwgc2JnbmNsYXNzLnJlcGxhY2UoXCJoeXBvdGhldGljYWwgXCIsIFwiXCIpKTtcbiAgICAgICAgICAgIC8vbm9kZS5kYXRhKCdjbGFzcycsIHNiZ25jbGFzcy5yZXBsYWNlKCcgbXVsdGltZXInLCAnJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBlbGVtZW50cyB3aXRoIGdpdmVuIGZvbnQgZGF0YVxuICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlRm9udFByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZWxlcywgZGF0YSkge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBkYXRhKSB7XG4gICAgICAgIGVsZXMuZGF0YShwcm9wLCBkYXRhW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBnZXRzIGFuIGVkZ2UsIGFuZCBlbmRzIG9mIHRoYXQgZWRnZSAoT3B0aW9uYWxseSBpdCBtYXkgdGFrZSBqdXN0IHRoZSBjbGFzc2VzIG9mIHRoZSBlZGdlIGFzIHdlbGwpIGFzIHBhcmFtZXRlcnMuXG4gICAgLy8gSXQgbWF5IHJldHVybiAndmFsaWQnICh0aGF0IGVuZHMgaXMgdmFsaWQgZm9yIHRoYXQgZWRnZSksICdyZXZlcnNlJyAodGhhdCBlbmRzIGlzIG5vdCB2YWxpZCBmb3IgdGhhdCBlZGdlIGJ1dCB0aGV5IHdvdWxkIGJlIHZhbGlkXG4gICAgLy8gaWYgeW91IHJldmVyc2UgdGhlIHNvdXJjZSBhbmQgdGFyZ2V0KSwgJ2ludmFsaWQnICh0aGF0IGVuZHMgYXJlIHRvdGFsbHkgaW52YWxpZCBmb3IgdGhhdCBlZGdlKS5cbiAgICBlbGVtZW50VXRpbGl0aWVzLnZhbGlkYXRlQXJyb3dFbmRzID0gZnVuY3Rpb24gKFxuICAgICAgZWRnZSxcbiAgICAgIHNvdXJjZSxcbiAgICAgIHRhcmdldCxcbiAgICAgIGlzUmVwbGFjZW1lbnRcbiAgICApIHtcbiAgICAgIC8vIGlmIG1hcCB0eXBlIGlzIFVua25vd24gLS0gbm8gcnVsZXMgYXBwbGllZFxuICAgICAgaWYgKFxuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmdldE1hcFR5cGUoKSA9PSBcIkh5YnJpZEFueVwiIHx8XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZ2V0TWFwVHlwZSgpID09IFwiSHlicmlkU2JnblwiIHx8XG4gICAgICAgICFlbGVtZW50VXRpbGl0aWVzLmdldE1hcFR5cGUoKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gXCJ2YWxpZFwiO1xuXG4gICAgICB2YXIgZWRnZWNsYXNzID0gdHlwZW9mIGVkZ2UgPT09IFwic3RyaW5nXCIgPyBlZGdlIDogZWRnZS5kYXRhKFwiY2xhc3NcIik7XG4gICAgICB2YXIgc291cmNlY2xhc3MgPSBzb3VyY2UuZGF0YShcImNsYXNzXCIpO1xuICAgICAgdmFyIHRhcmdldGNsYXNzID0gdGFyZ2V0LmRhdGEoXCJjbGFzc1wiKTtcbiAgICAgIHZhciBtYXBUeXBlID0gZWxlbWVudFV0aWxpdGllcy5nZXRNYXBUeXBlKCk7XG4gICAgICB2YXIgZWRnZUNvbnN0cmFpbnRzID1cbiAgICAgICAgZWxlbWVudFV0aWxpdGllc1ttYXBUeXBlXS5jb25uZWN0aXZpdHlDb25zdHJhaW50c1tlZGdlY2xhc3NdO1xuICAgICAgaWYgKG1hcFR5cGUgPT0gXCJBRlwiKSB7XG4gICAgICAgIGlmIChzb3VyY2VjbGFzcy5zdGFydHNXaXRoKFwiQkFcIikpXG4gICAgICAgICAgLy8gd2UgaGF2ZSBzZXBhcmF0ZSBjbGFzc2VzIGZvciBlYWNoIGJpb2xvZ2ljYWwgYWN0aXZpdHlcbiAgICAgICAgICBzb3VyY2VjbGFzcyA9IFwiYmlvbG9naWNhbCBhY3Rpdml0eVwiOyAvLyBidXQgc2FtZSBydWxlIGFwcGxpZXMgdG8gYWxsIG9mIHRoZW1cblxuICAgICAgICBpZiAodGFyZ2V0Y2xhc3Muc3RhcnRzV2l0aChcIkJBXCIpKVxuICAgICAgICAgIC8vIHdlIGhhdmUgc2VwYXJhdGUgY2xhc3NlcyBmb3IgZWFjaCBiaW9sb2dpY2FsIGFjdGl2aXR5XG4gICAgICAgICAgdGFyZ2V0Y2xhc3MgPSBcImJpb2xvZ2ljYWwgYWN0aXZpdHlcIjsgLy8gYnV0IHNhbWUgcnVsZSBhcHBsaWVzIHRvIGFsbCBvZiB0aGVtXG4gICAgICB9IGVsc2UgaWYgKG1hcFR5cGUgPT0gXCJQRFwiKSB7XG4gICAgICAgIHNvdXJjZWNsYXNzID0gc291cmNlY2xhc3MucmVwbGFjZSgvXFxzKm11bHRpbWVyJC8sIFwiXCIpO1xuICAgICAgICB0YXJnZXRjbGFzcyA9IHRhcmdldGNsYXNzLnJlcGxhY2UoL1xccyptdWx0aW1lciQvLCBcIlwiKTtcbiAgICAgIH0gZWxzZSBpZiAobWFwVHlwZSA9PSBcIlNCTUxcIikge1xuICAgICAgICBzb3VyY2VjbGFzcyA9IHNvdXJjZWNsYXNzLnJlcGxhY2UoL1xccyptdWx0aW1lciQvLCBcIlwiKTtcbiAgICAgICAgdGFyZ2V0Y2xhc3MgPSB0YXJnZXRjbGFzcy5yZXBsYWNlKC9cXHMqbXVsdGltZXIkLywgXCJcIik7XG4gICAgICAgIHNvdXJjZWNsYXNzID0gc291cmNlY2xhc3MucmVwbGFjZShcImFjdGl2ZSBcIiwgXCJcIik7XG4gICAgICAgIHRhcmdldGNsYXNzID0gdGFyZ2V0Y2xhc3MucmVwbGFjZShcImFjdGl2ZSBcIiwgXCJcIik7XG4gICAgICAgIHNvdXJjZWNsYXNzID0gc291cmNlY2xhc3MucmVwbGFjZShcImh5cG90aGV0aWNhbCBcIiwgXCJcIik7XG4gICAgICAgIHRhcmdldGNsYXNzID0gdGFyZ2V0Y2xhc3MucmVwbGFjZShcImh5cG90aGV0aWNhbCBcIiwgXCJcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIGdpdmVuIGEgbm9kZSwgYWN0aW5nIGFzIHNvdXJjZSBvciB0YXJnZXQsIHJldHVybnMgYm9vbGVhbiB3ZXRoZXIgb3Igbm90IGl0IGhhcyB0b28gbWFueSBlZGdlcyBhbHJlYWR5XG4gICAgICBmdW5jdGlvbiBoYXNUb29NYW55RWRnZXMobm9kZSwgc291cmNlT3JUYXJnZXQpIHtcbiAgICAgICAgdmFyIG5vZGVjbGFzcyA9IG5vZGUuZGF0YShcImNsYXNzXCIpO1xuICAgICAgICBub2RlY2xhc3MgPSBub2RlY2xhc3MucmVwbGFjZSgvXFxzKm11bHRpbWVyJC8sIFwiXCIpO1xuICAgICAgICBub2RlY2xhc3MgPSBub2RlY2xhc3MucmVwbGFjZShcImFjdGl2ZSBcIiwgXCJcIik7XG4gICAgICAgIG5vZGVjbGFzcyA9IG5vZGVjbGFzcy5yZXBsYWNlKFwiaHlwb3RoZXRpY2FsIFwiLCBcIlwiKTtcbiAgICAgICAgaWYgKG5vZGVjbGFzcy5zdGFydHNXaXRoKFwiQkFcIikpIG5vZGVjbGFzcyA9IFwiYmlvbG9naWNhbCBhY3Rpdml0eVwiO1xuXG4gICAgICAgIC8qXG4gICAgICAgICAgT24gdGhlIGxvZ2ljIGJlbG93OlxuXG4gICAgICAgICAgQ3VycmVudCBlZGdlIGNvdW50IChpbmNvbWluZyBvciBvdXRnb2luZykgb2Ygbm9kZXMgc2hvdWxkIGJlIHN0cmljdGx5IGxlc3MgXG4gICAgICAgICAgdGhhbiB0aGUgbWF4aW11bSBhbGxvd2VkIGlmIHdlIGFyZSBhZGRpbmcgYW4gZWRnZSB0byB0aGUgbm9kZS4gVGhpcyB3YXlcbiAgICAgICAgICBpdCB3aWxsIG5ldmVyIGV4Y2VlZCB0aGUgbWF4IGNvdW50LlxuICAgICAgICAgIFxuICAgICAgICAgIEVkZ2VzIGNhbiBiZSBhZGRlZCBpbiB0d28gZGlmZmVyZW50IHdheXMuIEVpdGhlciB0aGV5IGFyZSBhZGRlZCBkaXJlY3RseSBvclxuICAgICAgICAgIHRoZXkgYXJlIGFkZGVkIGJ5IGJlaW5nIHJlcGxhY2VkIGZyb20gYW5vdGhlciBub2RlLCBpLmUgZGlzY29ubmVjdGVkIGZyb21cbiAgICAgICAgICBvbmUgYW5kIGNvbm5lY3RlZCB0byBhbm90aGVyLlxuXG4gICAgICAgICAgV2UgY2FuIGRldGVjdCBpZiB0aGUgZWRnZSBiZWluZyBhZGRlZCBpcyBhZGRlZCBmcm9tIGEgcmVwbGFjZW1lbnQgYnkgY2hlY2tpbmdcbiAgICAgICAgICB3aGV0aGVyIHRoZSBzb3VyY2Ugc3RheWVkIHRoZSBzYW1lIHdoZW4gY2hlY2tpbmcgZWRnZSBjb3VudHMgb2YgdGhlIHNvdXJjZSBub2RlLFxuICAgICAgICAgIGFuZCB3aGV0aGVyIHRoZSB0YXJnZXQgc3RheWVkIHRoZSBzYW1lIHdoZW4gY2hlY2tpbmcgZWRnZSBjb3VudHMgb2YgdGhlXG4gICAgICAgICAgdGFyZ2V0IG5vZGUuXG5cbiAgICAgICAgICBDdXJyZW50IGVkZ2UgY291bnQgb2Ygbm9kZXMgY2FuIGJlIGFsbG93ZWQgdG8gYmUgZXF1YWwgdG8gdGhlIG1heGltdW0gaW4gXG4gICAgICAgICAgY2FzZXMgd2hlcmUgYSByZXBsYWNlbWVudCBpcyBtYWRlLiBCdXQgd2Ugc2hvdWxkIGJlIGNhcmVmdWwgdGhhdCB0aGlzXG4gICAgICAgICAgcmVwbGFjZW1lbnQgb3BlcmF0aW9uIGlzIG5vdCBhbHNvIGFuIGFkZGl0aW9uIG9wZXJhdGlvbiBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAgICAgICovXG5cbiAgICAgICAgdmFyIHRvdGFsVG9vTWFueSA9IHRydWU7XG4gICAgICAgIHZhciBlZGdlVG9vTWFueSA9IHRydWU7XG4gICAgICAgIGlmIChzb3VyY2VPclRhcmdldCA9PSBcInNvdXJjZVwiKSB7XG4gICAgICAgICAgdmFyIHNhbWVFZGdlQ291bnRPdXQgPSBub2RlXG4gICAgICAgICAgICAub3V0Z29lcnMoJ2VkZ2VbY2xhc3M9XCInICsgZWRnZWNsYXNzICsgJ1wiXScpXG4gICAgICAgICAgICAuc2l6ZSgpO1xuICAgICAgICAgIHZhciB0b3RhbEVkZ2VDb3VudE91dCA9IG5vZGUub3V0Z29lcnMoXCJlZGdlXCIpLnNpemUoKTtcbiAgICAgICAgICB2YXIgbWF4VG90YWwgPSBlZGdlQ29uc3RyYWludHNbbm9kZWNsYXNzXS5hc1NvdXJjZS5tYXhUb3RhbDtcbiAgICAgICAgICB2YXIgbWF4RWRnZSA9IGVkZ2VDb25zdHJhaW50c1tub2RlY2xhc3NdLmFzU291cmNlLm1heEVkZ2U7XG5cbiAgICAgICAgICB2YXIgY29tcGFyZVN0cmljdCA9ICEoaXNSZXBsYWNlbWVudCAmJiBlZGdlLnNvdXJjZSgpID09PSBzb3VyY2UpO1xuXG4gICAgICAgICAgdmFyIHdpdGhpbkxpbWl0cyA9XG4gICAgICAgICAgICAhbWF4VG90YWwgfHxcbiAgICAgICAgICAgIChjb21wYXJlU3RyaWN0ICYmIHRvdGFsRWRnZUNvdW50T3V0IDwgbWF4VG90YWwpIHx8XG4gICAgICAgICAgICAoIWNvbXBhcmVTdHJpY3QgJiYgdG90YWxFZGdlQ291bnRPdXQgPD0gbWF4VG90YWwpO1xuXG4gICAgICAgICAgaWYgKHdpdGhpbkxpbWl0cykge1xuICAgICAgICAgICAgdG90YWxUb29NYW55ID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHRoZW4gY2hlY2sgbGltaXRzIGZvciB0aGlzIHNwZWNpZmljIGVkZ2UgY2xhc3NcblxuICAgICAgICAgIHdpdGhpbkxpbWl0cyA9XG4gICAgICAgICAgICAhbWF4RWRnZSB8fFxuICAgICAgICAgICAgKGNvbXBhcmVTdHJpY3QgJiYgc2FtZUVkZ2VDb3VudE91dCA8IG1heEVkZ2UpIHx8XG4gICAgICAgICAgICAoIWNvbXBhcmVTdHJpY3QgJiYgc2FtZUVkZ2VDb3VudE91dCA8PSBtYXhFZGdlKTtcblxuICAgICAgICAgIGlmICh3aXRoaW5MaW1pdHMpIHtcbiAgICAgICAgICAgIGVkZ2VUb29NYW55ID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaWYgb25seSBvbmUgb2YgdGhlIGxpbWl0cyBpcyByZWFjaGVkIHRoZW4gZWRnZSBpcyBpbnZhbGlkXG4gICAgICAgICAgcmV0dXJuIHRvdGFsVG9vTWFueSB8fCBlZGdlVG9vTWFueTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBub2RlIGlzIHVzZWQgYXMgdGFyZ2V0XG4gICAgICAgICAgdmFyIHNhbWVFZGdlQ291bnRJbiA9IG5vZGVcbiAgICAgICAgICAgIC5pbmNvbWVycygnZWRnZVtjbGFzcz1cIicgKyBlZGdlY2xhc3MgKyAnXCJdJylcbiAgICAgICAgICAgIC5zaXplKCk7XG4gICAgICAgICAgdmFyIHRvdGFsRWRnZUNvdW50SW4gPSBub2RlLmluY29tZXJzKFwiZWRnZVwiKS5zaXplKCk7XG4gICAgICAgICAgdmFyIG1heFRvdGFsID0gZWRnZUNvbnN0cmFpbnRzW25vZGVjbGFzc10uYXNUYXJnZXQubWF4VG90YWw7XG4gICAgICAgICAgdmFyIG1heEVkZ2UgPSBlZGdlQ29uc3RyYWludHNbbm9kZWNsYXNzXS5hc1RhcmdldC5tYXhFZGdlO1xuXG4gICAgICAgICAgdmFyIGNvbXBhcmVTdHJpY3QgPSAhKGlzUmVwbGFjZW1lbnQgJiYgZWRnZS50YXJnZXQoKSA9PT0gdGFyZ2V0KTtcblxuICAgICAgICAgIHZhciB3aXRoaW5MaW1pdHMgPVxuICAgICAgICAgICAgIW1heFRvdGFsIHx8XG4gICAgICAgICAgICAoY29tcGFyZVN0cmljdCAmJiB0b3RhbEVkZ2VDb3VudEluIDwgbWF4VG90YWwpIHx8XG4gICAgICAgICAgICAoIWNvbXBhcmVTdHJpY3QgJiYgdG90YWxFZGdlQ291bnRJbiA8PSBtYXhUb3RhbCk7XG5cbiAgICAgICAgICBpZiAod2l0aGluTGltaXRzKSB7XG4gICAgICAgICAgICB0b3RhbFRvb01hbnkgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aXRoaW5MaW1pdHMgPVxuICAgICAgICAgICAgIW1heEVkZ2UgfHxcbiAgICAgICAgICAgIChjb21wYXJlU3RyaWN0ICYmIHNhbWVFZGdlQ291bnRJbiA8IG1heEVkZ2UpIHx8XG4gICAgICAgICAgICAoIWNvbXBhcmVTdHJpY3QgJiYgc2FtZUVkZ2VDb3VudEluIDw9IG1heEVkZ2UpO1xuXG4gICAgICAgICAgaWYgKHdpdGhpbkxpbWl0cykge1xuICAgICAgICAgICAgZWRnZVRvb01hbnkgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRvdGFsVG9vTWFueSB8fCBlZGdlVG9vTWFueTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpc0luQ29tcGxleChub2RlKSB7XG4gICAgICAgIHZhciBwYXJlbnRDbGFzcyA9IG5vZGUucGFyZW50KCkuZGF0YShcImNsYXNzXCIpO1xuICAgICAgICByZXR1cm4gcGFyZW50Q2xhc3MgJiYgcGFyZW50Q2xhc3Muc3RhcnRzV2l0aChcImNvbXBsZXhcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0luQ29tcGxleChzb3VyY2UpIHx8IGlzSW5Db21wbGV4KHRhcmdldCkpIHtcbiAgICAgICAgLy8gc3VidW5pdHMgb2YgYSBjb21wbGV4IGFyZSBubyBsb25nZXIgRVBOcywgbm8gY29ubmVjdGlvbiBhbGxvd2VkXG4gICAgICAgIHJldHVybiBcImludmFsaWRcIjtcbiAgICAgIH1cblxuICAgICAgLy8gY2hlY2sgbmF0dXJlIG9mIGNvbm5lY3Rpb25cbiAgICAgIGlmIChcbiAgICAgICAgZWRnZUNvbnN0cmFpbnRzW3NvdXJjZWNsYXNzXS5hc1NvdXJjZS5pc0FsbG93ZWQgJiZcbiAgICAgICAgZWRnZUNvbnN0cmFpbnRzW3RhcmdldGNsYXNzXS5hc1RhcmdldC5pc0FsbG93ZWRcbiAgICAgICkge1xuICAgICAgICAvLyBjaGVjayBhbW91bnQgb2YgY29ubmVjdGlvbnNcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFoYXNUb29NYW55RWRnZXMoc291cmNlLCBcInNvdXJjZVwiKSAmJlxuICAgICAgICAgICFoYXNUb29NYW55RWRnZXModGFyZ2V0LCBcInRhcmdldFwiKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gXCJ2YWxpZFwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyB0cnkgdG8gcmV2ZXJzZVxuICAgICAgaWYgKFxuICAgICAgICBlZGdlQ29uc3RyYWludHNbdGFyZ2V0Y2xhc3NdLmFzU291cmNlLmlzQWxsb3dlZCAmJlxuICAgICAgICBlZGdlQ29uc3RyYWludHNbc291cmNlY2xhc3NdLmFzVGFyZ2V0LmlzQWxsb3dlZFxuICAgICAgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhaGFzVG9vTWFueUVkZ2VzKHRhcmdldCwgXCJzb3VyY2VcIikgJiZcbiAgICAgICAgICAhaGFzVG9vTWFueUVkZ2VzKHNvdXJjZSwgXCJ0YXJnZXRcIilcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIFwicmV2ZXJzZVwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJpbnZhbGlkXCI7XG4gICAgfTtcblxuICAgIGVsZW1lbnRVdGlsaXRpZXMuZGVsZXRlQW5kUGVyZm9ybUxheW91dCA9IGZ1bmN0aW9uIChlbGVzLCBsYXlvdXRwYXJhbSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGVsZXMucmVtb3ZlKCk7XG4gICAgICBpZiAodHlwZW9mIGxheW91dHBhcmFtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgbGF5b3V0cGFyYW0oKTsgLy8gSWYgbGF5b3V0cGFyYW0gaXMgYSBmdW5jdGlvbiBleGVjdXRlIGl0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbGF5b3V0ID0gY3kubGF5b3V0KGxheW91dHBhcmFtKTsgLy8gSWYgbGF5b3V0cGFyYW0gaXMgbGF5b3V0IG9wdGlvbnMgY2FsbCBsYXlvdXQgd2l0aCB0aGF0IG9wdGlvbnMuXG5cbiAgICAgICAgLy8gRG8gdGhpcyBjaGVjayBmb3IgY3l0b3NjYXBlLmpzIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICAgICAgaWYgKGxheW91dCAmJiBsYXlvdXQucnVuKSB7XG4gICAgICAgICAgbGF5b3V0LnJ1bigpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogSGlkZSBnaXZlbiBlbGVzIGFuZCBwZXJmb3JtIGdpdmVuIGxheW91dCBhZnRlcndhcmQuIExheW91dCBwYXJhbWV0ZXIgbWF5IGJlIGxheW91dCBvcHRpb25zXG4gICAgICogb3IgYSBmdW5jdGlvbiB0byBjYWxsLlxuICAgICAqL1xuICAgIGVsZW1lbnRVdGlsaXRpZXMuaGlkZUFuZFBlcmZvcm1MYXlvdXQgPSBmdW5jdGlvbiAoZWxlcywgbGF5b3V0cGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSBjeS52aWV3VXRpbGl0aWVzKCkuaGlkZShlbGVzKTsgLy8gSGlkZSBnaXZlbiBlbGVzXG4gICAgICBpZiAodHlwZW9mIGxheW91dHBhcmFtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgbGF5b3V0cGFyYW0oKTsgLy8gSWYgbGF5b3V0cGFyYW0gaXMgYSBmdW5jdGlvbiBleGVjdXRlIGl0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbGF5b3V0ID0gY3kubGF5b3V0KGxheW91dHBhcmFtKTsgLy8gSWYgbGF5b3V0cGFyYW0gaXMgbGF5b3V0IG9wdGlvbnMgY2FsbCBsYXlvdXQgd2l0aCB0aGF0IG9wdGlvbnMuXG5cbiAgICAgICAgLy8gRG8gdGhpcyBjaGVjayBmb3IgY3l0b3NjYXBlLmpzIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICAgICAgaWYgKGxheW91dCAmJiBsYXlvdXQucnVuKSB7XG4gICAgICAgICAgbGF5b3V0LnJ1bigpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogVW5oaWRlIGdpdmVuIGVsZXMgYW5kIHBlcmZvcm0gZ2l2ZW4gbGF5b3V0IGFmdGVyd2FyZC4gTGF5b3V0IHBhcmFtZXRlciBtYXkgYmUgbGF5b3V0IG9wdGlvbnNcbiAgICAgKiBvciBhIGZ1bmN0aW9uIHRvIGNhbGwuXG4gICAgICovXG4gICAgZWxlbWVudFV0aWxpdGllcy5zaG93QW5kUGVyZm9ybUxheW91dCA9IGZ1bmN0aW9uIChlbGVzLCBsYXlvdXRwYXJhbSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGN5LnZpZXdVdGlsaXRpZXMoKS5zaG93KGVsZXMpOyAvLyBTaG93IGdpdmVuIGVsZXNcbiAgICAgIGlmICh0eXBlb2YgbGF5b3V0cGFyYW0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBsYXlvdXRwYXJhbSgpOyAvLyBJZiBsYXlvdXRwYXJhbSBpcyBhIGZ1bmN0aW9uIGV4ZWN1dGUgaXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBsYXlvdXQgPSBjeS5sYXlvdXQobGF5b3V0cGFyYW0pOyAvLyBJZiBsYXlvdXRwYXJhbSBpcyBsYXlvdXQgb3B0aW9ucyBjYWxsIGxheW91dCB3aXRoIHRoYXQgb3B0aW9ucy5cblxuICAgICAgICAvLyBEbyB0aGlzIGNoZWNrIGZvciBjeXRvc2NhcGUuanMgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgICAgICBpZiAobGF5b3V0ICYmIGxheW91dC5ydW4pIHtcbiAgICAgICAgICBsYXlvdXQucnVuKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBDaGFuZ2Ugc3R5bGUvY3NzIG9mIGdpdmVuIGVsZXMgYnkgc2V0dGluZyBnZXR0aW5nIHByb3BlcnR5IG5hbWUgdG8gdGhlIGdpdmVuIHZhbHVlL3ZhbHVlcyAoTm90ZSB0aGF0IHZhbHVlTWFwIHBhcmFtZXRlciBtYXkgYmVcbiAgICAgKiBhIHNpbmdsZSBzdHJpbmcgb3IgYW4gaWQgdG8gdmFsdWUgbWFwKS5cbiAgICAgKi9cbiAgICBlbGVtZW50VXRpbGl0aWVzLmNoYW5nZUNzcyA9IGZ1bmN0aW9uIChlbGVzLCBuYW1lLCB2YWx1ZU1hcCkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZU1hcCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBjeS5zdGFydEJhdGNoKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBlbGUgPSBjeS5nZXRFbGVtZW50QnlJZChlbGVzW2ldLmlkKCkpO1xuICAgICAgICAgIGVsZS5jc3MobmFtZSwgdmFsdWVNYXBbZWxlLmlkKCldKTsgLy8gdmFsdWVNYXAgaXMgYW4gaWQgdG8gdmFsdWUgbWFwIHVzZSBpdCBpbiB0aGlzIHdheVxuICAgICAgICB9XG4gICAgICAgIGN5LmVuZEJhdGNoKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVzLmNzcyhuYW1lLCB2YWx1ZU1hcCk7IC8vIHZhbHVlTWFwIGlzIGp1c3QgYSBzdHJpbmcgc2V0IGNzcygnbmFtZScpIGZvciBhbGwgZWxlcyB0byB0aGlzIHZhbHVlXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogQ2hhbmdlIGRhdGEgb2YgZ2l2ZW4gZWxlcyBieSBzZXR0aW5nIGdldHRpbmcgcHJvcGVydHkgbmFtZSB0byB0aGUgZ2l2ZW4gdmFsdWUvdmFsdWVzIChOb3RlIHRoYXQgdmFsdWVNYXAgcGFyYW1ldGVyIG1heSBiZVxuICAgICAqIGEgc2luZ2xlIHN0cmluZyBvciBhbiBpZCB0byB2YWx1ZSBtYXApLlxuICAgICAqL1xuICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlRGF0YSA9IGZ1bmN0aW9uIChlbGVzLCBuYW1lLCB2YWx1ZU1hcCkge1xuICAgICAgY29uc29sZS5sb2coXCJjaGFuZ2luZyBkYXRhIGluIGNoaXNlXCIpO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZU1hcCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBjeS5zdGFydEJhdGNoKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBlbGUgPSBjeS5nZXRFbGVtZW50QnlJZChlbGVzW2ldLmlkKCkpO1xuICAgICAgICAgIGVsZS5kYXRhKG5hbWUsIHZhbHVlTWFwW2VsZS5pZCgpXSk7IC8vIHZhbHVlTWFwIGlzIGFuIGlkIHRvIHZhbHVlIG1hcCB1c2UgaXQgaW4gdGhpcyB3YXlcbiAgICAgICAgfVxuICAgICAgICBjeS5lbmRCYXRjaCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlcy5kYXRhKG5hbWUsIHZhbHVlTWFwKTsgLy8gdmFsdWVNYXAgaXMganVzdCBhIHN0cmluZyBzZXQgY3NzKCduYW1lJykgZm9yIGFsbCBlbGVzIHRvIHRoaXMgdmFsdWVcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy51cGRhdGVTZXRGaWVsZCA9IGZ1bmN0aW9uIChcbiAgICAgIGVsZSxcbiAgICAgIGZpZWxkTmFtZSxcbiAgICAgIHRvRGVsZXRlLFxuICAgICAgdG9BZGQsXG4gICAgICBjYWxsYmFja1xuICAgICkge1xuICAgICAgdmFyIHNldCA9IGVsZS5kYXRhKGZpZWxkTmFtZSk7XG4gICAgICBpZiAoIXNldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgdXBkYXRlcyA9IHt9O1xuXG4gICAgICBpZiAodG9EZWxldGUgIT0gbnVsbCAmJiBzZXRbdG9EZWxldGVdKSB7XG4gICAgICAgIGRlbGV0ZSBzZXRbdG9EZWxldGVdO1xuICAgICAgICB1cGRhdGVzLmRlbGV0ZWQgPSB0b0RlbGV0ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRvQWRkICE9IG51bGwpIHtcbiAgICAgICAgc2V0W3RvQWRkXSA9IHRydWU7XG4gICAgICAgIHVwZGF0ZXMuYWRkZWQgPSB0b0FkZDtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBjYWxsYmFjayAmJlxuICAgICAgICAodXBkYXRlc1tcImRlbGV0ZWRcIl0gIT0gbnVsbCB8fCB1cGRhdGVzW1wiYWRkZWRcIl0gIT0gbnVsbClcbiAgICAgICkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXBkYXRlcztcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBSZXR1cm4gdGhlIHNldCBvZiBhbGwgbm9kZXMgcHJlc2VudCB1bmRlciB0aGUgZ2l2ZW4gcG9zaXRpb25cbiAgICAgKiByZW5kZXJlZFBvcyBtdXN0IGJlIGEgcG9pbnQgZGVmaW5lZCByZWxhdGl2ZWx5IHRvIGN5dG9zY2FwZSBjb250YWluZXJcbiAgICAgKiAobGlrZSByZW5kZXJlZFBvc2l0aW9uIGZpZWxkIG9mIGEgbm9kZSlcbiAgICAgKi9cbiAgICBlbGVtZW50VXRpbGl0aWVzLmdldE5vZGVzQXQgPSBmdW5jdGlvbiAocmVuZGVyZWRQb3MpIHtcbiAgICAgIHZhciBub2RlcyA9IGN5Lm5vZGVzKCk7XG4gICAgICB2YXIgeCA9IHJlbmRlcmVkUG9zLng7XG4gICAgICB2YXIgeSA9IHJlbmRlcmVkUG9zLnk7XG4gICAgICB2YXIgcmVzdWx0Tm9kZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgdmFyIHJlbmRlcmVkQmJveCA9IG5vZGUucmVuZGVyZWRCb3VuZGluZ0JveCh7XG4gICAgICAgICAgaW5jbHVkZU5vZGVzOiB0cnVlLFxuICAgICAgICAgIGluY2x1ZGVFZGdlczogZmFsc2UsXG4gICAgICAgICAgaW5jbHVkZUxhYmVsczogZmFsc2UsXG4gICAgICAgICAgaW5jbHVkZVNoYWRvd3M6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHggPj0gcmVuZGVyZWRCYm94LngxICYmIHggPD0gcmVuZGVyZWRCYm94LngyKSB7XG4gICAgICAgICAgaWYgKHkgPj0gcmVuZGVyZWRCYm94LnkxICYmIHkgPD0gcmVuZGVyZWRCYm94LnkyKSB7XG4gICAgICAgICAgICByZXN1bHROb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdE5vZGVzO1xuICAgIH07XG5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmRlbXVsdGltZXJpemVDbGFzcyA9IGZ1bmN0aW9uIChzYmduY2xhc3MpIHtcbiAgICAgIHJldHVybiBzYmduY2xhc3MucmVwbGFjZShcIiBtdWx0aW1lclwiLCBcIlwiKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIG1hcFR5cGUgLSB0eXBlIG9mIHRoZSBjdXJyZW50IG1hcCAoUEQsIEFGIG9yIFVua25vd24pXG4gICAgICovXG4gICAgZWxlbWVudFV0aWxpdGllcy5zZXRNYXBUeXBlID0gZnVuY3Rpb24gKG1hcFR5cGUpIHtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMubWFwVHlwZSA9IG1hcFR5cGU7XG4gICAgICByZXR1cm4gbWFwVHlwZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIC0gbWFwIHR5cGVcbiAgICAgKi9cbiAgICBlbGVtZW50VXRpbGl0aWVzLmdldE1hcFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5tYXBUeXBlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzZXRzIG1hcCB0eXBlXG4gICAgICovXG4gICAgZWxlbWVudFV0aWxpdGllcy5yZXNldE1hcFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLm1hcFR5cGUgPSB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEtlZXAgY29uc2lzdGVuY3kgb2YgbGlua3MgdG8gc2VsZiBpbnNpZGUgdGhlIGRhdGEoKSBzdHJ1Y3R1cmUuXG4gICAgICogVGhpcyBpcyBuZWVkZWQgd2hlbmV2ZXIgYSBub2RlIGNoYW5nZXMgcGFyZW50cywgZm9yIGV4YW1wbGUsXG4gICAgICogYXMgaXQgaXMgZGVzdHJveWVkIGFuZCByZWNyZWF0ZWQuIEJ1dCB0aGUgZGF0YSgpIHN0YXlzIGlkZW50aWNhbC5cbiAgICAgKiBUaGlzIGNyZWF0ZXMgaW5jb25zaXN0ZW5jaWVzIGZvciB0aGUgcG9pbnRlcnMgc3RvcmVkIGluIGRhdGEoKSxcbiAgICAgKiBhcyB0aGV5IG5vdyBwb2ludCB0byBhIGRlbGV0ZWQgbm9kZS5cbiAgICAgKi9cbiAgICBlbGVtZW50VXRpbGl0aWVzLm1haW50YWluUG9pbnRlciA9IGZ1bmN0aW9uIChlbGVzKSB7XG4gICAgICBlbGVzLm5vZGVzKCkuZm9yRWFjaChmdW5jdGlvbiAoZWxlKSB7XG4gICAgICAgIC8vIHJlc3RvcmUgYmFja2dyb3VuZCBpbWFnZXNcbiAgICAgICAgZWxlLmVtaXQoXCJkYXRhXCIpO1xuXG4gICAgICAgIC8vIHNraXAgbm9kZXMgd2l0aG91dCBhbnkgYXV4aWxpYXJ5IHVuaXRzXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhZWxlLmRhdGEoXCJzdGF0ZXNhbmRpbmZvc1wiKSB8fFxuICAgICAgICAgIGVsZS5kYXRhKFwic3RhdGVzYW5kaW5mb3NcIikubGVuZ3RoID09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIHNpZGUgaW4gZWxlLmRhdGEoXCJhdXh1bml0bGF5b3V0c1wiKSkge1xuICAgICAgICAgIGVsZS5kYXRhKFwiYXV4dW5pdGxheW91dHNcIilbc2lkZV0ucGFyZW50Tm9kZSA9IGVsZS5pZCgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlLmRhdGEoXCJzdGF0ZXNhbmRpbmZvc1wiKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGVsZS5kYXRhKFwic3RhdGVzYW5kaW5mb3NcIilbaV0ucGFyZW50ID0gZWxlLmlkKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmFueUhhc0JhY2tncm91bmRJbWFnZSA9IGZ1bmN0aW9uIChlbGVzKSB7XG4gICAgICB2YXIgb2JqID0gZWxlbWVudFV0aWxpdGllcy5nZXRCYWNrZ3JvdW5kSW1hZ2VPYmpzKGVsZXMpO1xuICAgICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gICAgICBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICAgIGlmICh2YWx1ZSAmJiAhJC5pc0VtcHR5T2JqZWN0KHZhbHVlKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmhhc0JhY2tncm91bmRJbWFnZSA9IGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgIGlmICghZWxlLmlzTm9kZSgpIHx8ICFlbGUuZGF0YShcImJhY2tncm91bmQtaW1hZ2VcIikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGJnO1xuXG4gICAgICBpZiAodHlwZW9mIGVsZS5kYXRhKFwiYmFja2dyb3VuZC1pbWFnZVwiKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBiZyA9IGVsZS5kYXRhKFwiYmFja2dyb3VuZC1pbWFnZVwiKS5zcGxpdChcIiBcIik7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqW1wiYmFja2dyb3VuZC1pbWFnZVwiXSkpIHtcbiAgICAgICAgYmcgPSBlbGUuZGF0YShcImJhY2tncm91bmQtaW1hZ2VcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICghYmcpIHJldHVybiBmYWxzZTtcblxuICAgICAgdmFyIGNsb25lSW1nID1cbiAgICAgICAgXCJkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCwlM0NzdmclMjB3aWR0aCUzRCUyMjEwMCUyMiUyMGhlaWdodCUzRCUyMjEwMCUyMiUyMHZpZXdCb3glM0QlMjIwJTIwMCUyMDEwMCUyMDEwMCUyMiUyMHN0eWxlJTNEJTIyZmlsbCUzQW5vbmUlM0JzdHJva2UlM0FibGFjayUzQnN0cm9rZS13aWR0aCUzQTAlM0IlMjIlMjB4bWxucyUzRCUyMmh0dHAlM0EvL3d3dy53My5vcmcvMjAwMC9zdmclMjIlMjAlM0UlM0NyZWN0JTIweCUzRCUyMjAlMjIlMjB5JTNEJTIyMCUyMiUyMHdpZHRoJTNEJTIyMTAwJTIyJTIwaGVpZ2h0JTNEJTIyMTAwJTIyJTIwc3R5bGUlM0QlMjJmaWxsJTNBJTIzODM4MzgzJTIyLyUzRSUyMCUzQy9zdmclM0VcIjtcbiAgICAgIC8vIElmIGNsb25lSW1nIGlzIG5vdCB0aGUgb25seSBpbWFnZSBvciB0aGVyZSBhcmUgbXVsdGlwbGUgaW1hZ2VzIHRoZXJlIGlzIGEgYmFja2dyb3VuZCBpbWFnZVxuICAgICAgdmFyIG9ubHlIYXNDbG9uZU1hcmtlckFzQmdJbWFnZSA9XG4gICAgICAgIGJnLmxlbmd0aCA9PT0gMSAmJiBiZy5pbmRleE9mKGNsb25lSW1nKSA9PT0gMDtcblxuICAgICAgaWYgKGJnLmxlbmd0aCA+IDEgfHwgIW9ubHlIYXNDbG9uZU1hcmtlckFzQmdJbWFnZSkgcmV0dXJuIHRydWU7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5nZXRCYWNrZ3JvdW5kSW1hZ2VVUkwgPSBmdW5jdGlvbiAoZWxlcykge1xuICAgICAgKFwiZ2V0dGluZyBiYWNrZ3JvdW5kIGltYWdlc1wiKTtcbiAgICAgIGlmICghZWxlcyB8fCBlbGVzLmxlbmd0aCA8IDEpIHJldHVybjtcblxuICAgICAgdmFyIGNvbW1vblVSTCA9IFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZSA9IGVsZXNbaV07XG5cbiAgICAgICAgaWYgKCFlbGUuaXNOb2RlKCkgfHwgIWVsZW1lbnRVdGlsaXRpZXMuaGFzQmFja2dyb3VuZEltYWdlKGVsZSkpIHJldHVybjtcblxuICAgICAgICB2YXIgdXJsID0gZWxlLmRhdGEoXCJiYWNrZ3JvdW5kLWltYWdlXCIpLnNwbGl0KFwiIFwiKS5wb3AoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICF1cmwgfHxcbiAgICAgICAgICB1cmwuaW5kZXhPZihcImh0dHBcIikgIT09IDAgfHxcbiAgICAgICAgICAoY29tbW9uVVJMICE9PSBcIlwiICYmIGNvbW1vblVSTCAhPT0gdXJsKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlbHNlIGlmIChjb21tb25VUkwgPT09IFwiXCIpIGNvbW1vblVSTCA9IHVybDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbW1vblVSTDtcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5nZXRCYWNrZ3JvdW5kSW1hZ2VPYmpzID0gZnVuY3Rpb24gKGVsZXMpIHtcbiAgICAgIGlmICghZWxlcyB8fCBlbGVzLmxlbmd0aCA8IDEpIHJldHVybjtcblxuICAgICAgdmFyIGxpc3QgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWxlID0gZWxlc1tpXTtcbiAgICAgICAgdmFyIG9iaiA9IGdldEJnT2JqKGVsZSk7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA8IDEpIHJldHVybjtcblxuICAgICAgICBsaXN0W2VsZS5kYXRhKFwiaWRcIildID0gb2JqO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpc3Q7XG5cbiAgICAgIGZ1bmN0aW9uIGdldEJnT2JqKGVsZSkge1xuICAgICAgICBpZiAoZWxlLmlzTm9kZSgpICYmIGVsZW1lbnRVdGlsaXRpZXMuaGFzQmFja2dyb3VuZEltYWdlKGVsZSkpIHtcbiAgICAgICAgICB2YXIga2V5cyA9IFtcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZC1pbWFnZVwiLFxuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLWZpdFwiLFxuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLWltYWdlLW9wYWNpdHlcIixcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZC1wb3NpdGlvbi14XCIsXG4gICAgICAgICAgICBcImJhY2tncm91bmQtcG9zaXRpb24teVwiLFxuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLWhlaWdodFwiLFxuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLXdpZHRoXCIsXG4gICAgICAgICAgXTtcblxuICAgICAgICAgIHZhciBvYmogPSB7fTtcbiAgICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgaWYgKGVsZS5kYXRhKGtleSkgJiYgdHlwZW9mIGVsZS5kYXRhKGtleSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBlbGUuZGF0YShrZXkpLnNwbGl0KFwiIFwiKVswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gZWxlLmRhdGEoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZS5pc05vZGUoKSkgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmdldEJhY2tncm91bmRGaXRPcHRpb25zID0gZnVuY3Rpb24gKGVsZXMpIHtcbiAgICAgIGlmICghZWxlcyB8fCBlbGVzLmxlbmd0aCA8IDEpIHJldHVybjtcblxuICAgICAgdmFyIGNvbW1vbkZpdCA9IFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBlbGVzW2ldO1xuICAgICAgICBpZiAoIW5vZGUuaXNOb2RlKCkpIHJldHVybjtcblxuICAgICAgICB2YXIgZml0ID0gZ2V0Rml0T3B0aW9uKG5vZGUpO1xuICAgICAgICBpZiAoIWZpdCB8fCAoY29tbW9uRml0ICE9PSBcIlwiICYmIGZpdCAhPT0gY29tbW9uRml0KSkgcmV0dXJuO1xuICAgICAgICBlbHNlIGlmIChjb21tb25GaXQgPT09IFwiXCIpIGNvbW1vbkZpdCA9IGZpdDtcbiAgICAgIH1cblxuICAgICAgdmFyIG9wdGlvbnMgPVxuICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIm5vbmVcIj5Ob25lPC9vcHRpb24+JyArXG4gICAgICAgICc8b3B0aW9uIHZhbHVlPVwiZml0XCI+Rml0PC9vcHRpb24+JyArXG4gICAgICAgICc8b3B0aW9uIHZhbHVlPVwiY292ZXJcIj5Db3Zlcjwvb3B0aW9uPicgK1xuICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cImNvbnRhaW5cIj5Db250YWluPC9vcHRpb24+JztcbiAgICAgIHZhciBzZWFyY2hLZXkgPSAndmFsdWU9XCInICsgY29tbW9uRml0ICsgJ1wiJztcbiAgICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXhPZihzZWFyY2hLZXkpICsgc2VhcmNoS2V5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBvcHRpb25zLnN1YnN0cigwLCBpbmRleCkgKyBcIiBzZWxlY3RlZFwiICsgb3B0aW9ucy5zdWJzdHIoaW5kZXgpO1xuXG4gICAgICBmdW5jdGlvbiBnZXRGaXRPcHRpb24obm9kZSkge1xuICAgICAgICBpZiAoIWVsZW1lbnRVdGlsaXRpZXMuaGFzQmFja2dyb3VuZEltYWdlKG5vZGUpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGYgPSBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWZpdFwiKTtcbiAgICAgICAgdmFyIGggPSBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWhlaWdodFwiKTtcblxuICAgICAgICBpZiAoIWYgfHwgIWgpIHJldHVybjtcblxuICAgICAgICBmID0gZi5zcGxpdChcIiBcIik7XG4gICAgICAgIGggPSBoLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgaWYgKGZbZi5sZW5ndGggLSAxXSA9PT0gXCJub25lXCIpXG4gICAgICAgICAgcmV0dXJuIGhbaC5sZW5ndGggLSAxXSA9PT0gXCJhdXRvXCIgPyBcIm5vbmVcIiA6IFwiZml0XCI7XG4gICAgICAgIGVsc2UgcmV0dXJuIGZbZi5sZW5ndGggLSAxXTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy51cGRhdGVCYWNrZ3JvdW5kSW1hZ2UgPSBmdW5jdGlvbiAobm9kZXMsIGJnT2JqKSB7XG4gICAgICBpZiAoIW5vZGVzIHx8IG5vZGVzLmxlbmd0aCA9PSAwIHx8ICFiZ09iaikgcmV0dXJuO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHZhciBvYmogPSBiZ09ialtub2RlLmRhdGEoXCJpZFwiKV07XG4gICAgICAgIGlmICghb2JqIHx8ICQuaXNFbXB0eU9iamVjdChvYmopKSBjb250aW51ZTtcblxuICAgICAgICB2YXIgaW1ncyA9IG5vZGUuZGF0YShcImJhY2tncm91bmQtaW1hZ2VcIilcbiAgICAgICAgICA/IG5vZGUuZGF0YShcImJhY2tncm91bmQtaW1hZ2VcIikuc3BsaXQoXCIgXCIpXG4gICAgICAgICAgOiBbXTtcbiAgICAgICAgdmFyIHhQb3MgPSBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXhcIilcbiAgICAgICAgICA/IG5vZGUuZGF0YShcImJhY2tncm91bmQtcG9zaXRpb24teFwiKS5zcGxpdChcIiBcIilcbiAgICAgICAgICA6IFtdO1xuICAgICAgICB2YXIgeVBvcyA9IG5vZGUuZGF0YShcImJhY2tncm91bmQtcG9zaXRpb24teVwiKVxuICAgICAgICAgID8gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1wb3NpdGlvbi15XCIpLnNwbGl0KFwiIFwiKVxuICAgICAgICAgIDogW107XG4gICAgICAgIHZhciB3aWR0aHMgPSBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLXdpZHRoXCIpXG4gICAgICAgICAgPyBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLXdpZHRoXCIpLnNwbGl0KFwiIFwiKVxuICAgICAgICAgIDogW107XG4gICAgICAgIHZhciBoZWlnaHRzID0gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1oZWlnaHRcIilcbiAgICAgICAgICA/IG5vZGUuZGF0YShcImJhY2tncm91bmQtaGVpZ2h0XCIpLnNwbGl0KFwiIFwiKVxuICAgICAgICAgIDogW107XG4gICAgICAgIHZhciBmaXRzID0gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1maXRcIilcbiAgICAgICAgICA/IG5vZGUuZGF0YShcImJhY2tncm91bmQtZml0XCIpLnNwbGl0KFwiIFwiKVxuICAgICAgICAgIDogW107XG4gICAgICAgIHZhciBvcGFjaXRpZXMgPSBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWltYWdlLW9wYWNpdHlcIilcbiAgICAgICAgICA/IChcIlwiICsgbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1pbWFnZS1vcGFjaXR5XCIpKS5zcGxpdChcIiBcIilcbiAgICAgICAgICA6IFtdO1xuXG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICBpZiAodHlwZW9mIG9ialtcImJhY2tncm91bmQtaW1hZ2VcIl0gPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgaW5kZXggPSBpbWdzLmluZGV4T2Yob2JqW1wiYmFja2dyb3VuZC1pbWFnZVwiXSk7XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqW1wiYmFja2dyb3VuZC1pbWFnZVwiXSkpXG4gICAgICAgICAgaW5kZXggPSBpbWdzLmluZGV4T2Yob2JqW1wiYmFja2dyb3VuZC1pbWFnZVwiXVswXSk7XG5cbiAgICAgICAgaWYgKGluZGV4IDwgMCkgY29udGludWU7XG5cbiAgICAgICAgaWYgKG9ialtcImJhY2tncm91bmQtaW1hZ2VcIl0gJiYgaW1ncy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgICAgIHZhciB0bXAgPSBpbWdzW2luZGV4XTtcbiAgICAgICAgICBpbWdzW2luZGV4XSA9IG9ialtcImJhY2tncm91bmQtaW1hZ2VcIl07XG4gICAgICAgICAgb2JqW1wiYmFja2dyb3VuZC1pbWFnZVwiXSA9IHRtcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqW1wiYmFja2dyb3VuZC1maXRcIl0gJiYgZml0cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgICAgIHZhciB0bXAgPSBmaXRzW2luZGV4XTtcbiAgICAgICAgICBmaXRzW2luZGV4XSA9IG9ialtcImJhY2tncm91bmQtZml0XCJdO1xuICAgICAgICAgIG9ialtcImJhY2tncm91bmQtZml0XCJdID0gdG1wO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmpbXCJiYWNrZ3JvdW5kLXdpZHRoXCJdICYmIHdpZHRocy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgICAgIHZhciB0bXAgPSB3aWR0aHNbaW5kZXhdO1xuICAgICAgICAgIHdpZHRoc1tpbmRleF0gPSBvYmpbXCJiYWNrZ3JvdW5kLXdpZHRoXCJdO1xuICAgICAgICAgIG9ialtcImJhY2tncm91bmQtd2lkdGhcIl0gPSB0bXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9ialtcImJhY2tncm91bmQtaGVpZ2h0XCJdICYmIGhlaWdodHMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgICAgICB2YXIgdG1wID0gaGVpZ2h0c1tpbmRleF07XG4gICAgICAgICAgaGVpZ2h0c1tpbmRleF0gPSBvYmpbXCJiYWNrZ3JvdW5kLWhlaWdodFwiXTtcbiAgICAgICAgICBvYmpbXCJiYWNrZ3JvdW5kLWhlaWdodFwiXSA9IHRtcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqW1wiYmFja2dyb3VuZC1wb3NpdGlvbi14XCJdICYmIHhQb3MubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgICAgICB2YXIgdG1wID0geFBvc1tpbmRleF07XG4gICAgICAgICAgeFBvc1tpbmRleF0gPSBvYmpbXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXhcIl07XG4gICAgICAgICAgb2JqW1wiYmFja2dyb3VuZC1wb3NpdGlvbi14XCJdID0gdG1wO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmpbXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXlcIl0gJiYgeVBvcy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgICAgIHZhciB0bXAgPSB5UG9zW2luZGV4XTtcbiAgICAgICAgICB5UG9zW2luZGV4XSA9IG9ialtcImJhY2tncm91bmQtcG9zaXRpb24teVwiXTtcbiAgICAgICAgICBvYmpbXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXlcIl0gPSB0bXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9ialtcImJhY2tncm91bmQtaW1hZ2Utb3BhY2l0eVwiXSAmJiBvcGFjaXRpZXMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgICAgICB2YXIgdG1wID0gb3BhY2l0aWVzW2luZGV4XTtcbiAgICAgICAgICBvcGFjaXRpZXNbaW5kZXhdID0gb2JqW1wiYmFja2dyb3VuZC1pbWFnZS1vcGFjaXR5XCJdO1xuICAgICAgICAgIG9ialtcImJhY2tncm91bmQtaW1hZ2Utb3BhY2l0eVwiXSA9IHRtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUuZGF0YShcImJhY2tncm91bmQtaW1hZ2VcIiwgaW1ncy5qb2luKFwiIFwiKSk7XG4gICAgICAgIG5vZGUuZGF0YShcImJhY2tncm91bmQtcG9zaXRpb24teFwiLCB4UG9zLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1wb3NpdGlvbi15XCIsIHlQb3Muam9pbihcIiBcIikpO1xuICAgICAgICBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLXdpZHRoXCIsIHdpZHRocy5qb2luKFwiIFwiKSk7XG4gICAgICAgIG5vZGUuZGF0YShcImJhY2tncm91bmQtaGVpZ2h0XCIsIGhlaWdodHMuam9pbihcIiBcIikpO1xuICAgICAgICBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWZpdFwiLCBmaXRzLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1pbWFnZS1vcGFjaXR5XCIsIG9wYWNpdGllcy5qb2luKFwiIFwiKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiZ09iajtcbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VCYWNrZ3JvdW5kSW1hZ2UgPSBmdW5jdGlvbiAoXG4gICAgICBub2RlcyxcbiAgICAgIG9sZEltZyxcbiAgICAgIG5ld0ltZyxcbiAgICAgIGZpcnN0VGltZSxcbiAgICAgIHVwZGF0ZUluZm8sXG4gICAgICBwcm9tcHRJbnZhbGlkSW1hZ2UsXG4gICAgICB2YWxpZGF0ZVVSTFxuICAgICkge1xuICAgICAgaWYgKCFub2RlcyB8fCBub2Rlcy5sZW5ndGggPT0gMCB8fCAhb2xkSW1nIHx8ICFuZXdJbWcpIHJldHVybjtcblxuICAgICAgZWxlbWVudFV0aWxpdGllcy5yZW1vdmVCYWNrZ3JvdW5kSW1hZ2Uobm9kZXMsIG9sZEltZyk7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbmV3SW1nKSB7XG4gICAgICAgIG5ld0ltZ1trZXldW1wiZmlyc3RUaW1lXCJdID0gZmlyc3RUaW1lO1xuICAgICAgfVxuICAgICAgZWxlbWVudFV0aWxpdGllcy5hZGRCYWNrZ3JvdW5kSW1hZ2UoXG4gICAgICAgIG5vZGVzLFxuICAgICAgICBuZXdJbWcsXG4gICAgICAgIHVwZGF0ZUluZm8sXG4gICAgICAgIHByb21wdEludmFsaWRJbWFnZSxcbiAgICAgICAgdmFsaWRhdGVVUkxcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5vZGVzOiBub2RlcyxcbiAgICAgICAgb2xkSW1nOiBuZXdJbWcsXG4gICAgICAgIG5ld0ltZzogb2xkSW1nLFxuICAgICAgICBmaXJzdFRpbWU6IGZhbHNlLFxuICAgICAgICBwcm9tcHRJbnZhbGlkSW1hZ2U6IHByb21wdEludmFsaWRJbWFnZSxcbiAgICAgICAgdmFsaWRhdGVVUkw6IHZhbGlkYXRlVVJMLFxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGEgYmFja2dyb3VuZCBpbWFnZSB0byBnaXZlbiBub2Rlcy5cbiAgICBlbGVtZW50VXRpbGl0aWVzLmFkZEJhY2tncm91bmRJbWFnZSA9IGZ1bmN0aW9uIChcbiAgICAgIG5vZGVzLFxuICAgICAgYmdPYmosXG4gICAgICB1cGRhdGVJbmZvLFxuICAgICAgcHJvbXB0SW52YWxpZEltYWdlLFxuICAgICAgdmFsaWRhdGVVUkxcbiAgICApIHtcbiAgICAgIGlmICghbm9kZXMgfHwgbm9kZXMubGVuZ3RoID09IDAgfHwgIWJnT2JqKSByZXR1cm47XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgdmFyIG9iaiA9IGJnT2JqW25vZGUuZGF0YShcImlkXCIpXTtcbiAgICAgICAgaWYgKCFvYmogfHwgJC5pc0VtcHR5T2JqZWN0KG9iaikpIGNvbnRpbnVlO1xuXG4gICAgICAgIC8vIExvYWQgdGhlIGltYWdlIGZyb20gbG9jYWwsIGVsc2UganVzdCBwdXQgdGhlIFVSTFxuICAgICAgICBpZiAob2JqW1wiZnJvbUZpbGVcIl0pIGxvYWRCYWNrZ3JvdW5kVGhlbkFwcGx5KG5vZGUsIG9iaik7XG4gICAgICAgIC8vIFZhbGlkaXR5IG9mIGdpdmVuIFVSTCBzaG91bGQgYmUgY2hlY2tlZCBiZWZvcmUgYXBwbHlpbmcgaXRcbiAgICAgICAgZWxzZSBpZiAob2JqW1wiZmlyc3RUaW1lXCJdKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWxpZGF0ZVVSTCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgdmFsaWRhdGVVUkwobm9kZSwgb2JqLCBhcHBseUJhY2tncm91bmQsIHByb21wdEludmFsaWRJbWFnZSk7XG4gICAgICAgICAgZWxzZSBjaGVja0dpdmVuVVJMKG5vZGUsIG9iaik7XG4gICAgICAgIH0gZWxzZSBhcHBseUJhY2tncm91bmQobm9kZSwgb2JqKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbG9hZEJhY2tncm91bmRUaGVuQXBwbHkobm9kZSwgYmdPYmopIHtcbiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHZhciBpbWdGaWxlID0gYmdPYmpbXCJiYWNrZ3JvdW5kLWltYWdlXCJdO1xuXG4gICAgICAgIC8vIENoZWNrIHdoZXRoZXIgZ2l2ZW4gZmlsZSBpcyBhbiBpbWFnZSBmaWxlXG4gICAgICAgIGlmIChpbWdGaWxlLnR5cGUuaW5kZXhPZihcImltYWdlXCIpICE9PSAwKSB7XG4gICAgICAgICAgaWYgKHByb21wdEludmFsaWRJbWFnZSlcbiAgICAgICAgICAgIHByb21wdEludmFsaWRJbWFnZShcIkludmFsaWQgaW1hZ2UgZmlsZSBpcyBnaXZlbiFcIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoaW1nRmlsZSk7XG5cbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyIGltZyA9IHJlYWRlci5yZXN1bHQ7XG4gICAgICAgICAgaWYgKGltZykge1xuICAgICAgICAgICAgYmdPYmpbXCJiYWNrZ3JvdW5kLWltYWdlXCJdID0gaW1nO1xuICAgICAgICAgICAgYmdPYmpbXCJmcm9tRmlsZVwiXSA9IGZhbHNlO1xuICAgICAgICAgICAgYXBwbHlCYWNrZ3JvdW5kKG5vZGUsIGJnT2JqKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByb21wdEludmFsaWRJbWFnZSlcbiAgICAgICAgICAgICAgcHJvbXB0SW52YWxpZEltYWdlKFwiR2l2ZW4gZmlsZSBjb3VsZCBub3QgYmUgcmVhZCFcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjaGVja0dpdmVuVVJMKG5vZGUsIGJnT2JqKSB7XG4gICAgICAgIHZhciB1cmwgPSBiZ09ialtcImJhY2tncm91bmQtaW1hZ2VcIl07XG4gICAgICAgIHZhciBleHRlbnNpb24gPSB1cmwuc3BsaXQoL1s/I10vKVswXS5zcGxpdChcIi5cIikucG9wKCk7XG4gICAgICAgIHZhciB2YWxpZEV4dGVuc2lvbnMgPSBbXCJwbmdcIiwgXCJzdmdcIiwgXCJqcGdcIiwgXCJqcGVnXCJdO1xuXG4gICAgICAgIGlmICghdmFsaWRFeHRlbnNpb25zLmluY2x1ZGVzKGV4dGVuc2lvbikpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHByb21wdEludmFsaWRJbWFnZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgcHJvbXB0SW52YWxpZEltYWdlKFwiSW52YWxpZCBVUkwgaXMgZ2l2ZW4hXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0LCBzdGF0dXMsIHhocikge1xuICAgICAgICAgICAgYXBwbHlCYWNrZ3JvdW5kKG5vZGUsIGJnT2JqKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICAgICAgICBpZiAocHJvbXB0SW52YWxpZEltYWdlKSBwcm9tcHRJbnZhbGlkSW1hZ2UoXCJJbnZhbGlkIFVSTCBpcyBnaXZlbiFcIik7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFwcGx5QmFja2dyb3VuZChub2RlLCBiZ09iaikge1xuICAgICAgICBpZiAoZWxlbWVudFV0aWxpdGllcy5oYXNCYWNrZ3JvdW5kSW1hZ2Uobm9kZSkpIHJldHVybjtcblxuICAgICAgICB2YXIgaW1ncyA9IG5vZGUuZGF0YShcImJhY2tncm91bmQtaW1hZ2VcIilcbiAgICAgICAgICA/IG5vZGUuZGF0YShcImJhY2tncm91bmQtaW1hZ2VcIikuc3BsaXQoXCIgXCIpXG4gICAgICAgICAgOiBbXTtcbiAgICAgICAgdmFyIHhQb3MgPSBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXhcIilcbiAgICAgICAgICA/IG5vZGUuZGF0YShcImJhY2tncm91bmQtcG9zaXRpb24teFwiKS5zcGxpdChcIiBcIilcbiAgICAgICAgICA6IFtdO1xuICAgICAgICB2YXIgeVBvcyA9IG5vZGUuZGF0YShcImJhY2tncm91bmQtcG9zaXRpb24teVwiKVxuICAgICAgICAgID8gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1wb3NpdGlvbi15XCIpLnNwbGl0KFwiIFwiKVxuICAgICAgICAgIDogW107XG4gICAgICAgIHZhciB3aWR0aHMgPSBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLXdpZHRoXCIpXG4gICAgICAgICAgPyBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLXdpZHRoXCIpLnNwbGl0KFwiIFwiKVxuICAgICAgICAgIDogW107XG4gICAgICAgIHZhciBoZWlnaHRzID0gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1oZWlnaHRcIilcbiAgICAgICAgICA/IG5vZGUuZGF0YShcImJhY2tncm91bmQtaGVpZ2h0XCIpLnNwbGl0KFwiIFwiKVxuICAgICAgICAgIDogW107XG4gICAgICAgIHZhciBmaXRzID0gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1maXRcIilcbiAgICAgICAgICA/IG5vZGUuZGF0YShcImJhY2tncm91bmQtZml0XCIpLnNwbGl0KFwiIFwiKVxuICAgICAgICAgIDogW107XG4gICAgICAgIHZhciBvcGFjaXRpZXMgPSBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWltYWdlLW9wYWNpdHlcIilcbiAgICAgICAgICA/IChcIlwiICsgbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1pbWFnZS1vcGFjaXR5XCIpKS5zcGxpdChcIiBcIilcbiAgICAgICAgICA6IFtdO1xuXG4gICAgICAgIHZhciBpbmRleFRvSW5zZXJ0ID0gaW1ncy5sZW5ndGg7XG5cbiAgICAgICAgLy8gaW5zZXJ0IHRvIGxlbmd0aC0xXG4gICAgICAgIGlmIChlbGVtZW50VXRpbGl0aWVzLmhhc0Nsb25lTWFya2VyKGltZ3MpKSB7XG4gICAgICAgICAgaW5kZXhUb0luc2VydC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgaW1ncy5zcGxpY2UoaW5kZXhUb0luc2VydCwgMCwgYmdPYmpbXCJiYWNrZ3JvdW5kLWltYWdlXCJdKTtcbiAgICAgICAgZml0cy5zcGxpY2UoaW5kZXhUb0luc2VydCwgMCwgYmdPYmpbXCJiYWNrZ3JvdW5kLWZpdFwiXSk7XG4gICAgICAgIG9wYWNpdGllcy5zcGxpY2UoaW5kZXhUb0luc2VydCwgMCwgYmdPYmpbXCJiYWNrZ3JvdW5kLWltYWdlLW9wYWNpdHlcIl0pO1xuICAgICAgICB4UG9zLnNwbGljZShpbmRleFRvSW5zZXJ0LCAwLCBiZ09ialtcImJhY2tncm91bmQtcG9zaXRpb24teFwiXSk7XG4gICAgICAgIHlQb3Muc3BsaWNlKGluZGV4VG9JbnNlcnQsIDAsIGJnT2JqW1wiYmFja2dyb3VuZC1wb3NpdGlvbi15XCJdKTtcbiAgICAgICAgd2lkdGhzLnNwbGljZShpbmRleFRvSW5zZXJ0LCAwLCBiZ09ialtcImJhY2tncm91bmQtd2lkdGhcIl0pO1xuICAgICAgICBoZWlnaHRzLnNwbGljZShpbmRleFRvSW5zZXJ0LCAwLCBiZ09ialtcImJhY2tncm91bmQtaGVpZ2h0XCJdKTtcblxuICAgICAgICBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWltYWdlXCIsIGltZ3Muam9pbihcIiBcIikpO1xuICAgICAgICBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXhcIiwgeFBvcy5qb2luKFwiIFwiKSk7XG4gICAgICAgIG5vZGUuZGF0YShcImJhY2tncm91bmQtcG9zaXRpb24teVwiLCB5UG9zLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgbm9kZS5kYXRhKFwiYmFja2dyb3VuZC13aWR0aFwiLCB3aWR0aHMuam9pbihcIiBcIikpO1xuICAgICAgICBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWhlaWdodFwiLCBoZWlnaHRzLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1maXRcIiwgZml0cy5qb2luKFwiIFwiKSk7XG4gICAgICAgIG5vZGUuZGF0YShcImJhY2tncm91bmQtaW1hZ2Utb3BhY2l0eVwiLCBvcGFjaXRpZXMuam9pbihcIiBcIikpO1xuICAgICAgICBiZ09ialtcImZpcnN0VGltZVwiXSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh1cGRhdGVJbmZvKSB1cGRhdGVJbmZvKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGVsZW1lbnRVdGlsaXRpZXMuaGFzQ2xvbmVNYXJrZXIgPSBmdW5jdGlvbiAoaW1ncykge1xuICAgICAgdmFyIGNsb25lSW1nID1cbiAgICAgICAgXCJkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCwlM0NzdmclMjB3aWR0aCUzRCUyMjEwMCUyMiUyMGhlaWdodCUzRCUyMjEwMCUyMiUyMHZpZXdCb3glM0QlMjIwJTIwMCUyMDEwMCUyMDEwMCUyMiUyMHN0eWxlJTNEJTIyZmlsbCUzQW5vbmUlM0JzdHJva2UlM0FibGFjayUzQnN0cm9rZS13aWR0aCUzQTAlM0IlMjIlMjB4bWxucyUzRCUyMmh0dHAlM0EvL3d3dy53My5vcmcvMjAwMC9zdmclMjIlMjAlM0UlM0NyZWN0JTIweCUzRCUyMjAlMjIlMjB5JTNEJTIyMCUyMiUyMHdpZHRoJTNEJTIyMTAwJTIyJTIwaGVpZ2h0JTNEJTIyMTAwJTIyJTIwc3R5bGUlM0QlMjJmaWxsJTNBJTIzODM4MzgzJTIyLyUzRSUyMCUzQy9zdmclM0VcIjtcbiAgICAgIHJldHVybiBpbWdzLmluZGV4T2YoY2xvbmVJbWcpID4gLTE7XG4gICAgfTtcblxuICAgIC8vIFJlbW92ZSBhIGJhY2tncm91bmQgaW1hZ2UgZnJvbSBnaXZlbiBub2Rlcy5cbiAgICBlbGVtZW50VXRpbGl0aWVzLnJlbW92ZUJhY2tncm91bmRJbWFnZSA9IGZ1bmN0aW9uIChub2RlcywgYmdPYmopIHtcbiAgICAgIGlmICghbm9kZXMgfHwgbm9kZXMubGVuZ3RoID09IDAgfHwgIWJnT2JqKSByZXR1cm47XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgdmFyIG9iaiA9IGJnT2JqW25vZGUuZGF0YShcImlkXCIpXTtcbiAgICAgICAgaWYgKCFvYmopIGNvbnRpbnVlO1xuXG4gICAgICAgIHZhciBpbWdzID0gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1pbWFnZVwiKVxuICAgICAgICAgID8gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1pbWFnZVwiKS5zcGxpdChcIiBcIilcbiAgICAgICAgICA6IFtdO1xuICAgICAgICB2YXIgeFBvcyA9IG5vZGUuZGF0YShcImJhY2tncm91bmQtcG9zaXRpb24teFwiKVxuICAgICAgICAgID8gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1wb3NpdGlvbi14XCIpLnNwbGl0KFwiIFwiKVxuICAgICAgICAgIDogW107XG4gICAgICAgIHZhciB5UG9zID0gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1wb3NpdGlvbi15XCIpXG4gICAgICAgICAgPyBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXlcIikuc3BsaXQoXCIgXCIpXG4gICAgICAgICAgOiBbXTtcbiAgICAgICAgdmFyIHdpZHRocyA9IG5vZGUuZGF0YShcImJhY2tncm91bmQtd2lkdGhcIilcbiAgICAgICAgICA/IG5vZGUuZGF0YShcImJhY2tncm91bmQtd2lkdGhcIikuc3BsaXQoXCIgXCIpXG4gICAgICAgICAgOiBbXTtcbiAgICAgICAgdmFyIGhlaWdodHMgPSBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWhlaWdodFwiKVxuICAgICAgICAgID8gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1oZWlnaHRcIikuc3BsaXQoXCIgXCIpXG4gICAgICAgICAgOiBbXTtcbiAgICAgICAgdmFyIGZpdHMgPSBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWZpdFwiKVxuICAgICAgICAgID8gbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1maXRcIikuc3BsaXQoXCIgXCIpXG4gICAgICAgICAgOiBbXTtcbiAgICAgICAgdmFyIG9wYWNpdGllcyA9IG5vZGUuZGF0YShcImJhY2tncm91bmQtaW1hZ2Utb3BhY2l0eVwiKVxuICAgICAgICAgID8gKFwiXCIgKyBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWltYWdlLW9wYWNpdHlcIikpLnNwbGl0KFwiIFwiKVxuICAgICAgICAgIDogW107XG5cbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW1wiYmFja2dyb3VuZC1pbWFnZVwiXSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICBpbmRleCA9IGltZ3MuaW5kZXhPZihvYmpbXCJiYWNrZ3JvdW5kLWltYWdlXCJdLnNwbGl0KFwiIFwiKVswXSk7XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqW1wiYmFja2dyb3VuZC1pbWFnZVwiXSkpXG4gICAgICAgICAgaW5kZXggPSBpbWdzLmluZGV4T2Yob2JqW1wiYmFja2dyb3VuZC1pbWFnZVwiXVswXSk7XG5cbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICBpbWdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgZml0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIG9wYWNpdGllcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIHhQb3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB5UG9zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgd2lkdGhzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgaGVpZ2h0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1pbWFnZVwiLCBpbWdzLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1wb3NpdGlvbi14XCIsIHhQb3Muam9pbihcIiBcIikpO1xuICAgICAgICBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXlcIiwgeVBvcy5qb2luKFwiIFwiKSk7XG4gICAgICAgIG5vZGUuZGF0YShcImJhY2tncm91bmQtd2lkdGhcIiwgd2lkdGhzLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgbm9kZS5kYXRhKFwiYmFja2dyb3VuZC1oZWlnaHRcIiwgaGVpZ2h0cy5qb2luKFwiIFwiKSk7XG4gICAgICAgIG5vZGUuZGF0YShcImJhY2tncm91bmQtZml0XCIsIGZpdHMuam9pbihcIiBcIikpO1xuICAgICAgICBub2RlLmRhdGEoXCJiYWNrZ3JvdW5kLWltYWdlLW9wYWNpdHlcIiwgb3BhY2l0aWVzLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgYmdPYmpbXCJmaXJzdFRpbWVcIl0gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZWxlbWVudFV0aWxpdGllcy5yZXZlcnNlRWRnZSA9IGZ1bmN0aW9uIChlZGdlKSB7XG4gICAgICB2YXIgb2xkU291cmNlID0gZWRnZS5zb3VyY2UoKS5pZCgpO1xuICAgICAgdmFyIG9sZFRhcmdldCA9IGVkZ2UudGFyZ2V0KCkuaWQoKTtcbiAgICAgIHZhciBvbGRQb3J0U291cmNlID0gZWRnZS5kYXRhKFwicG9ydHNvdXJjZVwiKTtcbiAgICAgIHZhciBvbGRQb3J0VGFyZ2V0ID0gZWRnZS5kYXRhKFwicG9ydHRhcmdldFwiKTtcbiAgICAgIHZhciBzZWdtZW50UG9pbnRzID0gZWRnZS5zZWdtZW50UG9pbnRzKCk7XG4gICAgICB2YXIgY29udHJvbFBvaW50cyA9IGVkZ2UuY29udHJvbFBvaW50cygpO1xuXG4gICAgICBlZGdlLmRhdGEoKS5zb3VyY2UgPSBvbGRUYXJnZXQ7XG4gICAgICBlZGdlLmRhdGEoKS50YXJnZXQgPSBvbGRTb3VyY2U7XG4gICAgICBlZGdlLmRhdGEoKS5wb3J0c291cmNlID0gb2xkUG9ydFRhcmdldDtcbiAgICAgIGVkZ2UuZGF0YSgpLnBvcnR0YXJnZXQgPSBvbGRQb3J0U291cmNlO1xuICAgICAgZWRnZSA9IGVkZ2UubW92ZSh7XG4gICAgICAgIHRhcmdldDogb2xkU291cmNlLFxuICAgICAgICBzb3VyY2U6IG9sZFRhcmdldCxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWdtZW50UG9pbnRzKSkge1xuICAgICAgICBzZWdtZW50UG9pbnRzLnJldmVyc2UoKTtcbiAgICAgICAgZWRnZS5kYXRhKCkuYmVuZFBvaW50UG9zaXRpb25zID0gc2VnbWVudFBvaW50cztcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbFBvaW50cykpIHtcbiAgICAgICAgICBjb250cm9sUG9pbnRzLnJldmVyc2UoKTtcbiAgICAgICAgICBlZGdlLmRhdGEoKS5jb250cm9sUG9pbnRQb3NpdGlvbnMgPSBjb250cm9sUG9pbnRzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlZGdlRWRpdGluZyA9IGN5LmVkZ2VFZGl0aW5nKFwiZ2V0XCIpO1xuICAgICAgICBlZGdlRWRpdGluZy5pbml0QW5jaG9yUG9pbnRzKGVkZ2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWRnZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRVdGlsaXRpZXNFeHRlbmRlcjtcbn07XG4iXSwibmFtZXMiOlsibGlicyIsInJlcXVpcmUiLCJnZXRMaWJzIiwialF1ZXJ5IiwiJCIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwic2JnbnZpekluc3RhbmNlIiwiZWxlbWVudFV0aWxpdGllcyIsImN5IiwiZWxlbWVudFV0aWxpdGllc0V4dGVuZGVyIiwicGFyYW0iLCJzYmdudml6SW5zdGFuY2VVdGlsaXRpZXMiLCJnZXRJbnN0YW5jZSIsIm9wdGlvblV0aWxpdGllcyIsImdldE9wdGlvbnMiLCJnZXRDeSIsImV4dGVuZCIsImFkZE5vZGUiLCJ4IiwieSIsIm5vZGVQYXJhbXMiLCJpZCIsInBhcmVudCIsInZpc2liaWxpdHkiLCJfdHlwZW9mIiwic2JnbmNsYXNzIiwibGFuZ3VhZ2UiLCJjc3MiLCJkZWZhdWx0V2lkdGgiLCJkZWZhdWx0SGVpZ2h0IiwiZGF0YSIsImJib3giLCJ3IiwiaCIsInN0YXRlc2FuZGluZm9zIiwicG9ydHMiLCJnZW5lcmF0ZU5vZGVJZCIsImV4dGVuZE5vZGVEYXRhV2l0aENsYXNzRGVmYXVsdHMiLCJkZWZhdWx0cyIsImdldERlZmF1bHRQcm9wZXJ0aWVzIiwiZWxlcyIsImFkZCIsImdyb3VwIiwicG9zaXRpb24iLCJuZXdOb2RlIiwibGVuZ3RoIiwib3JkZXJpbmciLCJzZXRQb3J0c09yZGVyaW5nIiwiY2FuSGF2ZU11bHRpcGxlVW5pdE9mSW5mb3JtYXRpb24iLCJ1b2lfb2JqIiwiY2xhenoiLCJsYWJlbCIsInRleHQiLCJhZGRTdGF0ZU9ySW5mb0JveCIsImJnSW1hZ2UiLCJzYXZlVW5pdHMiLCJub2RlIiwidGVtcERhdGEiLCJpbmRleCIsImZvckVhY2giLCJlbGUiLCJwdXNoIiwiYW5jaG9yU2lkZSIsInJlc3RvcmVVbml0cyIsInVuZGVmaW5lZCIsIm1vZGlmeVVuaXRzIiwiY29uc29sZSIsImxvZyIsImluc3RhbmNlIiwiY2xhc3NlcyIsIkF1eFVuaXRMYXlvdXQiLCJhZGRFZGdlIiwic291cmNlIiwidGFyZ2V0IiwiZWRnZVBhcmFtcyIsImdyb3VwSUQiLCJPYmplY3QiLCJrZXlzIiwicHJvcCIsImdlbmVyYXRlRWRnZUlkIiwiY2FuSGF2ZVNCR05DYXJkaW5hbGl0eSIsImNhcmRpbmFsaXR5Iiwic291cmNlTm9kZSIsImdldEVsZW1lbnRCeUlkIiwidGFyZ2V0Tm9kZSIsInNvdXJjZUhhc1BvcnRzIiwidGFyZ2V0SGFzUG9ydHMiLCJwb3J0c291cmNlIiwicG9ydHRhcmdldCIsImdldElPUG9ydElkcyIsIm5vZGVJbnB1dFBvcnRJZCIsIm5vZGVPdXRwdXRQb3J0SWQiLCJub2RlUG9ydHNPcmRlcmluZyIsImdldFBvcnRzT3JkZXJpbmciLCJub2RlUG9ydHMiLCJsZWZ0UG9ydElkIiwicmlnaHRQb3J0SWQiLCJ0b3BQb3J0SWQiLCJib3R0b21Qb3J0SWQiLCJpbnB1dFBvcnRJZCIsIm91dHB1dFBvcnRJZCIsInNvdXJjZU5vZGVJbnB1dFBvcnRJZCIsInNvdXJjZU5vZGVPdXRwdXRQb3J0SWQiLCJ0YXJnZXROb2RlSW5wdXRQb3J0SWQiLCJ0YXJnZXROb2RlT3V0cHV0UG9ydElkIiwiaW9Qb3J0cyIsImlzTW9kdWxhdGlvbkFyY0NsYXNzIiwiaXNQcm9jZXNzTm9kZSIsImlzQUZBcmNDbGFzcyIsImlzU0JNTEFyY0NsYXNzIiwiaXNMb2dpY0FyYyIsIm5ld0VkZ2UiLCJhZGRQcm9jZXNzV2l0aENvbnZlbmllbnRFZGdlcyIsIl9zb3VyY2UiLCJfdGFyZ2V0IiwicHJvY2Vzc1BhcmVudCIsImNvbGxlY3Rpb24iLCJjb21tb25BbmNlc3RvcnMiLCJmaXJzdCIsInByb2Nlc3MiLCJ4ZGlmZiIsInlkaWZmIiwiTWF0aCIsImFicyIsImVkZ2VCdHdTcmMiLCJlZGdlQnR3VGd0IiwiY3JlYXRlQ29tcG91bmRGb3JHaXZlbk5vZGVzIiwibm9kZXNUb01ha2VDb21wb3VuZCIsImNvbXBvdW5kVHlwZSIsIm9sZFBhcmVudElkIiwiaSIsIm5ld0NvbXBvdW5kIiwibmV3Q29tcG91bmRJZCIsIm5ld0VsZXMiLCJjaGFuZ2VQYXJlbnQiLCJ1bmlvbiIsImNyZWF0ZVRyYW5zbGF0aW9uUmVhY3Rpb24iLCJtUm5hTmFtZSIsInByb3RlaW5OYW1lIiwicHJvY2Vzc1Bvc2l0aW9uIiwiZWRnZUxlbmd0aCIsImRlZmF1bHRQcm9jZXNzUHJvcGVydGllcyIsImRlZmF1bHRTb3VyY2VBbmRTaW5rUHJvcGVydGllcyIsImRlZmF1bHROdWNsZWljQWNpZEZlYXR1cmVQcm9wZXJ0aWVzIiwiZGVmYXVsdE1hY3JvbW9sZWN1bGVQcm9wZXJ0aWVzIiwibWFjcm9tb2xlY3VsZVdpZHRoIiwid2lkdGgiLCJzb3VyY2VBbmRTaW5rV2lkdGgiLCJudWNsZWljQWNpZEZlYXR1cmVIZWlnaHQiLCJoZWlnaHQiLCJwcm9jZXNzV2lkdGgiLCJwcm9jZXNzSGVpZ2h0IiwiY29udmVydFRvTW9kZWxQb3NpdGlvbiIsInN0YXJ0QmF0Y2giLCJnZXRNYXBUeXBlIiwic2V0TWFwVHlwZSIsInByb2Nlc3NOb2RlIiwieFBvc09mU291cmNlQW5kU2lua05vZGUiLCJ5UG9zT2ZTb3VyY2VBbmRTaW5rTm9kZSIsInNvdXJjZUFuZFNpbmtOb2RlIiwiY29uc3VtcHRpb25FZGdlIiwieFBvc09mbVJuYU5vZGUiLCJ5UG9zT2ZtUm5hTm9kZSIsIm1SbmFOb2RlIiwiaW5mb2JveE9iamVjdE9mR2VuZSIsIm5lY2Vzc2FyeVN0aW11bGF0aW9uRWRnZSIsInhQb3NPZlByb3RlaW5Ob2RlIiwieVBvc3RPZlByb3RlaW5Ob2RlIiwicHJvdGVpbk5vZGUiLCJwcm9kdWN0aW9uRWRnZSIsImVuZEJhdGNoIiwiZWxlbWVudHMiLCJyZW1vdmVEYXRhIiwidW5zZWxlY3QiLCJzZWxlY3QiLCJjcmVhdGVUcmFuc2NyaXB0aW9uUmVhY3Rpb24iLCJnZW5lTmFtZSIsIm51Y2xlaWNBY2lkRmVhdHVyZVdpZHRoIiwieFBvc09mR2VuZU5vZGUiLCJ5UG9zT2ZHZW5lTm9kZSIsImdlbmVOb2RlIiwieVBvc3RPZm1SbmFOb2RlIiwiaW5mb2JveE9iamVjdE9mbVJuYSIsInJvdGF0ZTkwIiwicG9pbnQiLCJjZW50ZXIiLCJyZWxhdGl2ZVgiLCJyZWxhdGl2ZVkiLCJyZWxhdGl2ZVJvdGF0ZWRYIiwicmVsYXRpdmVSb3RhdGVkWSIsInJlc3VsdFgiLCJyZXN1bHRZIiwiY3JlYXRlVHJhbnNsYXRpb24iLCJyZWd1bGF0b3JMYWJlbCIsIm91dHB1dExhYmVsIiwib3JpZW50YXRpb24iLCJkZWZhdWx0TWFjcm9tb2xlY3VsZVByb3BldGllcyIsInZlcnRpY2FsIiwicHJvY2Vzc1BvcnRzT3JkZXJpbmciLCJtaW5JbmZvYm94RGltZW5zaW9uIiwid2lkdGhQZXJDaGFyIiwicmVndWxhdG9ySW5mb2JveExhYmVsIiwieFBvc09mSW5wdXQiLCJ4UG9zT2ZPdXRwdXQiLCJ5UG9zT2ZJbnB1dCIsInlQb3NPZk91dHB1dCIsIm5vZGVQb3NpdGlvbiIsImlucHV0Tm9kZSIsImlucHV0RWRnZSIsIm91dHB1dE5vZGUiLCJvdXRwdXRFZGdlIiwieFBvc09mUmVndWxhdG9yIiwiZGltZW5zaW9uIiwieVBvc09mUmVndWxhdG9yIiwicmVndWxhdG9yTm9kZSIsImluZm9ib3hPYmplY3QiLCJtYXgiLCJyZWd1bGF0b3JFZGdlIiwiY3JlYXRlVHJhbnNjcmlwdGlvbiIsIm91dHB1dEluZm9ib3hMYWJlbCIsImNyZWF0ZURlZ3JhZGF0aW9uIiwibWFjcm9tb2xlY3VsZSIsIm1hY3JvbW9sZWN1bGVOYW1lIiwibmFtZSIsImNyZWF0ZUNvbXBsZXhQcm90ZWluRm9ybWF0aW9uIiwicHJvdGVpbkxhYmVscyIsImNvbXBsZXhMYWJlbCIsInJlZ3VsYXRvciIsInJldmVyc2UiLCJoYXNSZWd1bGF0b3IiLCJkZWZhdWx0UmVndWxhdG9yUHJvcGVydGllcyIsInR5cGUiLCJtYWNyb21vbGVjdWxlSGVpZ2h0IiwicmVndWxhdG9ySGVpZ2h0IiwidGlsaW5nUGFkZGluZ1ZlcnRpY2FsIiwidGlsaW5nUGFkZGluZ0hvcml6b250YWwiLCJtdWx0aW1lck9mZnNldCIsIm9mZnNldFgiLCJ4UG9zT2ZQcm90ZWluIiwicHJvdGVpbkNvdW50IiwibWFjcm9tb2xlY3VsZURpbWVuc2lvbiIsInN0ZXBPZmZzZXQiLCJvZmZzZXRZIiwiaG9yaXpvbnRhbE9mZnNldFgiLCJ5UG9zT2ZQcm90ZWluIiwiZWRnZUNsYXNzIiwiZWRnZSIsImNvbXBsZXhQb3MiLCJjb21wbGV4IiwiY29tcGxleEVkZ2UiLCJyZWd1bGF0b3JOYW1lIiwicmVndWxhdG9yVHlwZSIsInJlZ3VsYXRvckVkZ2VUeXBlIiwiZWRnZVR5cGUiLCJyZWd1bGF0b3JNdWx0aW1lciIsIm11bHRpbWVyIiwiZW5hYmxlZCIsInNldE11bHRpbWVyU3RhdHVzIiwiaW5mb2JveExhYmVsIiwiY3JlYXRlTXVsdGltZXJpemF0aW9uIiwibWFjcm9tb2xlY3VsZU11bHRpbWVyQ2FyZGluYWxpdHkiLCJjcmVhdGVDb252ZXJzaW9uIiwiaW5wdXRJbmZvYm94TGFiZWxzIiwib3V0cHV0SW5mb2JveExhYmVscyIsIm1hY3JvbW9sZWN1bGVJc011bHRpbWVyIiwiaW5wdXRJbmZvYm94V2lkdGgiLCJzdHlsZSIsIm91dHB1dEluZm9ib3hXaWR0aCIsImNhbGN1bGF0ZU1pbldpZHRoIiwicmVzaXplTm9kZXMiLCJuZXdJbnB1dFhQb3MiLCJuZXdPdXRwdXRYUG9zIiwibmV3SW5wdXRZUG9zIiwibmV3T3V0cHV0WVBvcyIsImNyZWF0ZU1ldGFib2xpY1JlYWN0aW9uIiwiaW5wdXRzIiwib3V0cHV0cyIsInJldmVyc2libGUiLCJkZWZhdWx0U2ltcGxlQ2hlbWljYWxQcm9wZXJ0aWVzIiwic2ltcGxlQ2hlbWljYWxIZWlnaHQiLCJzaW1wbGVDaGVtaWNhbFdpZHRoIiwicHJvY2Vzc0xlZnRTaWRlRWRnZVR5cGUiLCJwcm9jZXNzUmlnaHRTaWRlRWRnZVR5cGUiLCJudW1PZklucHV0Tm9kZXMiLCJudW1PZk91dHB1dE5vZGVzIiwibm9kZU5hbWUiLCJub2RlVHlwZSIsImNlaWwiLCJ0b0xvd2VyQ2FzZSIsImNyZWF0ZU1ldGFib2xpY0NhdGFseXRpY0FjdGl2aXR5IiwiaW5wdXROb2RlTGlzdCIsIm91dHB1dE5vZGVMaXN0IiwiY2F0YWx5c3ROYW1lIiwiY2F0YWx5c3RUeXBlIiwiZGVmYXVsdE1hY3JvbW9sZWN1bFByb3BlcnRpZXMiLCJkZWZhdWx0Q2F0YWx5c3RUeXBlUHJvcGVydGllcyIsImNhdGFseXN0SGVpZ2h0IiwieFBvc09mQ2F0YWx5c3QiLCJ5UG9zT2ZDYXRhbHlzdCIsImNhdGFseXN0Tm9kZSIsImNhdGFseXN0RWRnZSIsImNyZWF0ZUFjdGl2YXRpb25SZWFjdGlvbiIsInlQb3NpdGlvbiIsImlucHV0U2lkZUVkZ2UiLCJvdXRwdXRTaWRlRWRnZSIsImNyZWF0ZVRlbXBsYXRlUmVhY3Rpb24iLCJ0ZW1wbGF0ZVR5cGUiLCJub2RlTGlzdCIsImNvbXBsZXhOYW1lIiwibGF5b3V0UGFyYW0iLCJudW1PZk1vbGVjdWxlcyIsInhQb3NpdGlvbk9mRnJlZU1hY3JvbW9sZWN1bGVzIiwieFBvc2l0aW9uT2ZJbnB1dE1hY3JvbW9sZWN1bGVzIiwiZWRnZU9mQ29tcGxleCIsIm51bU9mSW5wdXRNYWNyb21vbGVjdWxlcyIsImxheW91dE5vZGVzIiwibm9kZXMiLCJsYXlvdXQiLCJyYW5kb21pemUiLCJmaXQiLCJhbmltYXRlIiwic3RvcCIsInN1cHBvc2VkWFBvc2l0aW9uIiwic3VwcG9zZWRZUG9zaXRpb24iLCJvdXRlcldpZHRoIiwicG9zaXRpb25EaWZmWCIsInBvc2l0aW9uRGlmZlkiLCJtb3ZlTm9kZXMiLCJydW4iLCJuZXdQYXJlbnQiLCJwb3NEaWZmWCIsInBvc0RpZmZZIiwibmV3UGFyZW50SWQiLCJtb3ZlZEVsZXMiLCJtb3ZlIiwibWFpbnRhaW5Qb2ludGVyIiwidXBkYXRlSW5mb2JveFN0eWxlIiwibmV3UHJvcHMiLCJpbmZvYm94T2JqIiwidXBkYXRlIiwidXBkYXRlSW5mb2JveE9iaiIsInVzZUFzcGVjdFJhdGlvIiwicHJlc2VydmVSZWxhdGl2ZVBvcyIsInJhdGlvIiwiZWxlTXVzdEJlU3F1YXJlIiwibXVzdEJlU3F1YXJlIiwib2xkV2lkdGgiLCJvbGRIZWlnaHQiLCJpc1BhcmVudCIsImZvbnRGYW1pbGl5IiwiZm9udFNpemUiLCJsYWJlbFRleHQiLCJsYWJlbFdpZHRoIiwiZ2V0V2lkdGhCeUNvbnRlbnQiLCJ1bml0R2FwIiwidG9wSWRlYWxXaWR0aCIsImJvdHRvbUlkZWFsV2lkdGgiLCJyaWdodE1heFdpZHRoIiwibGVmdE1heFdpZHRoIiwiYm94IiwibWlkZGxlV2lkdGgiLCJjb21wb3VuZFdpZHRoIiwiY2hpbGRyZW4iLCJib3VuZGluZ0JveCIsImNhbGN1bGF0ZU1pbkhlaWdodCIsIm1hcmdpbiIsImxlZnRJbmZvQm94ZXMiLCJmaWx0ZXIiLCJsZWZ0SGVpZ2h0IiwicmlnaHRJbmZvQm94ZXMiLCJyaWdodEhlaWdodCIsInNwbGl0IiwicGFyc2VGbG9hdCIsInN1YnN0cmluZyIsInRvdGFsSGVpZ2h0IiwiY29tcG91bmRIZWlnaHQiLCJpc1Jlc2l6ZWRUb0NvbnRlbnQiLCJpc05vZGUiLCJtaW5XIiwibWluSCIsInJlbG9jYXRlU3RhdGVBbmRJbmZvcyIsInN0YXRlQW5kSW5mb3MiLCJjaGFuZ2VTdGF0ZU9ySW5mb0JveCIsInZhbHVlIiwicmVzdWx0Iiwib2xkTGVuZ3RoIiwibmV3TGVuZ3RoIiwiY29udGVudCIsInN0YXRlIiwicmVzaWR1ZSIsInJlZ2lvbiIsIm1pbiIsImZvbnRGYW1pbHkiLCJib3JkZXJXaWR0aCIsIm9wdHMiLCJwcmV2aW91c1dpZHRoIiwidW5pdExheW91dCIsInVuaXRzIiwic2hpZnRBbW91bnQiLCJvYmoiLCJsb2NhdGlvbk9iaiIsImRlZmF1bHRQcm9wcyIsImluZm9ib3hQcm9wcyIsImdldERlZmF1bHRJbmZvYm94U3R5bGUiLCJVbml0T2ZJbmZvcm1hdGlvbiIsImNyZWF0ZSIsImxvY2F0aW9uIiwiU3RhdGVWYXJpYWJsZSIsInZhcmlhYmxlIiwiUmVzaWR1ZVZhcmlhYmxlIiwiQmluZGluZ1JlZ2lvbiIsInJlbW92ZVN0YXRlT3JJbmZvQm94IiwidW5pdCIsInVuaXRDbGFzcyIsImdldEF1eFVuaXRDbGFzcyIsInJlbW92ZSIsImZpdFVuaXRzIiwibG9jYXRpb25zIiwiY2hlY2tGaXQiLCJzdGF0dXMiLCJpc011bHRpbWVyIiwiZW5kc1dpdGgiLCJyZXBsYWNlIiwic2V0QWN0aXZlU3RhdHVzIiwiaXNBY3RpdmUiLCJzdGFydHNXaXRoIiwic2V0SHlwb3RoZXRpY2FsU3RhdHVzIiwiaXNIeXBvdGhldGljYWwiLCJpbmNsdWRlcyIsInRtcCIsImNoYW5nZUZvbnRQcm9wZXJ0aWVzIiwidmFsaWRhdGVBcnJvd0VuZHMiLCJpc1JlcGxhY2VtZW50IiwiZWRnZWNsYXNzIiwic291cmNlY2xhc3MiLCJ0YXJnZXRjbGFzcyIsIm1hcFR5cGUiLCJlZGdlQ29uc3RyYWludHMiLCJjb25uZWN0aXZpdHlDb25zdHJhaW50cyIsImhhc1Rvb01hbnlFZGdlcyIsInNvdXJjZU9yVGFyZ2V0Iiwibm9kZWNsYXNzIiwidG90YWxUb29NYW55IiwiZWRnZVRvb01hbnkiLCJzYW1lRWRnZUNvdW50T3V0Iiwib3V0Z29lcnMiLCJzaXplIiwidG90YWxFZGdlQ291bnRPdXQiLCJtYXhUb3RhbCIsImFzU291cmNlIiwibWF4RWRnZSIsImNvbXBhcmVTdHJpY3QiLCJ3aXRoaW5MaW1pdHMiLCJzYW1lRWRnZUNvdW50SW4iLCJpbmNvbWVycyIsInRvdGFsRWRnZUNvdW50SW4iLCJhc1RhcmdldCIsImlzSW5Db21wbGV4IiwicGFyZW50Q2xhc3MiLCJpc0FsbG93ZWQiLCJkZWxldGVBbmRQZXJmb3JtTGF5b3V0IiwibGF5b3V0cGFyYW0iLCJoaWRlQW5kUGVyZm9ybUxheW91dCIsInZpZXdVdGlsaXRpZXMiLCJoaWRlIiwic2hvd0FuZFBlcmZvcm1MYXlvdXQiLCJzaG93IiwiY2hhbmdlQ3NzIiwidmFsdWVNYXAiLCJjaGFuZ2VEYXRhIiwidXBkYXRlU2V0RmllbGQiLCJmaWVsZE5hbWUiLCJ0b0RlbGV0ZSIsInRvQWRkIiwiY2FsbGJhY2siLCJzZXQiLCJ1cGRhdGVzIiwiZGVsZXRlZCIsImFkZGVkIiwiZ2V0Tm9kZXNBdCIsInJlbmRlcmVkUG9zIiwicmVzdWx0Tm9kZXMiLCJyZW5kZXJlZEJib3giLCJyZW5kZXJlZEJvdW5kaW5nQm94IiwiaW5jbHVkZU5vZGVzIiwiaW5jbHVkZUVkZ2VzIiwiaW5jbHVkZUxhYmVscyIsImluY2x1ZGVTaGFkb3dzIiwieDEiLCJ4MiIsInkxIiwieTIiLCJkZW11bHRpbWVyaXplQ2xhc3MiLCJyZXNldE1hcFR5cGUiLCJlbWl0Iiwic2lkZSIsInBhcmVudE5vZGUiLCJhbnlIYXNCYWNrZ3JvdW5kSW1hZ2UiLCJnZXRCYWNrZ3JvdW5kSW1hZ2VPYmpzIiwia2V5IiwiaXNFbXB0eU9iamVjdCIsImhhc0JhY2tncm91bmRJbWFnZSIsImJnIiwiQXJyYXkiLCJpc0FycmF5IiwiY2xvbmVJbWciLCJvbmx5SGFzQ2xvbmVNYXJrZXJBc0JnSW1hZ2UiLCJpbmRleE9mIiwiZ2V0QmFja2dyb3VuZEltYWdlVVJMIiwiY29tbW9uVVJMIiwidXJsIiwicG9wIiwibGlzdCIsImdldEJnT2JqIiwiZ2V0QmFja2dyb3VuZEZpdE9wdGlvbnMiLCJjb21tb25GaXQiLCJnZXRGaXRPcHRpb24iLCJzZWFyY2hLZXkiLCJzdWJzdHIiLCJmIiwidXBkYXRlQmFja2dyb3VuZEltYWdlIiwiYmdPYmoiLCJpbWdzIiwieFBvcyIsInlQb3MiLCJ3aWR0aHMiLCJoZWlnaHRzIiwiZml0cyIsIm9wYWNpdGllcyIsImpvaW4iLCJjaGFuZ2VCYWNrZ3JvdW5kSW1hZ2UiLCJvbGRJbWciLCJuZXdJbWciLCJmaXJzdFRpbWUiLCJ1cGRhdGVJbmZvIiwicHJvbXB0SW52YWxpZEltYWdlIiwidmFsaWRhdGVVUkwiLCJyZW1vdmVCYWNrZ3JvdW5kSW1hZ2UiLCJhZGRCYWNrZ3JvdW5kSW1hZ2UiLCJsb2FkQmFja2dyb3VuZFRoZW5BcHBseSIsImFwcGx5QmFja2dyb3VuZCIsImNoZWNrR2l2ZW5VUkwiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwiaW1nRmlsZSIsInJlYWRBc0RhdGFVUkwiLCJvbmxvYWQiLCJlIiwiaW1nIiwiZXh0ZW5zaW9uIiwidmFsaWRFeHRlbnNpb25zIiwiYWpheCIsInN1Y2Nlc3MiLCJ4aHIiLCJlcnJvciIsImluZGV4VG9JbnNlcnQiLCJoYXNDbG9uZU1hcmtlciIsInNwbGljZSIsInJldmVyc2VFZGdlIiwib2xkU291cmNlIiwib2xkVGFyZ2V0Iiwib2xkUG9ydFNvdXJjZSIsIm9sZFBvcnRUYXJnZXQiLCJzZWdtZW50UG9pbnRzIiwiY29udHJvbFBvaW50cyIsImJlbmRQb2ludFBvc2l0aW9ucyIsImNvbnRyb2xQb2ludFBvc2l0aW9ucyIsImVkZ2VFZGl0aW5nIiwiaW5pdEFuY2hvclBvaW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/element-utilities-extender-factory.js\n");

/***/ }),

/***/ "./src/utilities/lib-utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/lib-utilities.js ***!
  \****************************************/
/***/ ((module) => {

eval("/* \n * Utility file to get and set the libraries to which sbgnviz is dependent from any file.\n */\n\nvar libUtilities = function libUtilities() {};\nlibUtilities.setLibs = function (libs) {\n  this.libs = libs;\n};\nlibUtilities.getLibs = function () {\n  return this.libs;\n};\nmodule.exports = libUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xpYi11dGlsaXRpZXMuanMiLCJuYW1lcyI6WyJsaWJVdGlsaXRpZXMiLCJzZXRMaWJzIiwibGlicyIsImdldExpYnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGlzZS8uL3NyYy91dGlsaXRpZXMvbGliLXV0aWxpdGllcy5qcz9iYWFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIFxuICogVXRpbGl0eSBmaWxlIHRvIGdldCBhbmQgc2V0IHRoZSBsaWJyYXJpZXMgdG8gd2hpY2ggc2JnbnZpeiBpcyBkZXBlbmRlbnQgZnJvbSBhbnkgZmlsZS5cbiAqL1xuXG52YXIgbGliVXRpbGl0aWVzID0gZnVuY3Rpb24oKXtcbn07XG5cbmxpYlV0aWxpdGllcy5zZXRMaWJzID0gZnVuY3Rpb24obGlicykge1xuICB0aGlzLmxpYnMgPSBsaWJzO1xufTtcblxubGliVXRpbGl0aWVzLmdldExpYnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubGlicztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbGliVXRpbGl0aWVzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBLElBQUlBLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFBLEVBQWEsQ0FDN0IsQ0FBQztBQUVEQSxZQUFZLENBQUNDLE9BQU8sR0FBRyxVQUFTQyxJQUFJLEVBQUU7RUFDcEMsSUFBSSxDQUFDQSxJQUFJLEdBQUdBLElBQUk7QUFDbEIsQ0FBQztBQUVERixZQUFZLENBQUNHLE9BQU8sR0FBRyxZQUFXO0VBQ2hDLE9BQU8sSUFBSSxDQUFDRCxJQUFJO0FBQ2xCLENBQUM7QUFFREUsTUFBTSxDQUFDQyxPQUFPLEdBQUdMLFlBQVkiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/lib-utilities.js\n");

/***/ }),

/***/ "./src/utilities/main-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/main-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n\n/*\n * The main utilities to be exposed directly.\n */\nmodule.exports = function () {\n  var elementUtilities, options, cy, sbgnvizInstance;\n  function mainUtilities(param) {\n    elementUtilities = param.elementUtilities;\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();\n  }\n  ;\n\n  /*\n   * Adds a new node with the given class and at the given coordinates. Considers undoable option.\n   */\n  mainUtilities.addNode = function (x, y, nodeParams, id, parent, visibility) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // update map type\n    if (_typeof(nodeParams) == 'object') {\n      /* \n            if (!elementUtilities.getMapType())\n              elementUtilities.setMapType(nodeParams.language);\n            else if (elementUtilities.getMapType() != nodeParams.language)\n              elementUtilities.setMapType(\"Unknown\"); */\n    }\n    if (!options.undoable) {\n      return elementUtilities.addNode(x, y, nodeParams, id, parent, visibility);\n    } else {\n      var param = {\n        newNode: {\n          x: x,\n          y: y,\n          \"class\": nodeParams,\n          id: id,\n          parent: parent,\n          visibility: visibility\n        }\n      };\n      var result = cy.undoRedo()[\"do\"](\"addNode\", param);\n      return result.eles;\n    }\n  };\n\n  /*\n   * Adds a new edge with the given class and having the given source and target ids. Considers undoable option.\n   */\n  mainUtilities.addEdge = function (source, target, edgeParams, invalidEdgeCallback, id, visibility) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // update map type\n    if (_typeof(edgeParams) == 'object') {\n\n      /*  if (!elementUtilities.getMapType())\n         elementUtilities.setMapType(edgeParams.language);\n       else if (elementUtilities.getMapType() != edgeParams.language)\n         elementUtilities.setMapType(\"HybridAny\"); */\n    }\n    // Get the validation result\n    var edgeclass = edgeParams[\"class\"] ? edgeParams[\"class\"] : edgeParams;\n    var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(source), cy.getElementById(target));\n\n    // If validation result is 'invalid' cancel the operation\n    if (validation === 'invalid') {\n      if (typeof invalidEdgeCallback === \"function\") {\n        invalidEdgeCallback();\n      }\n      return;\n    }\n\n    // If validation result is 'reverse' reverse the source-target pair before creating the edge\n    if (validation === 'reverse') {\n      var temp = source;\n      source = target;\n      target = temp;\n    }\n    if (!options.undoable) {\n      return elementUtilities.addEdge(source, target, edgeParams, id, visibility);\n    } else {\n      var param = {\n        newEdge: {\n          source: source,\n          target: target,\n          \"class\": edgeParams,\n          id: id,\n          visibility: visibility\n        }\n      };\n      var result = cy.undoRedo()[\"do\"](\"addEdge\", param);\n      return result.eles;\n    }\n  };\n\n  /*\n   * Adds a process with convenient edges. For more information please see 'https://github.com/iVis-at-Bilkent/newt/issues/9'.\n   * Considers undoable option.\n   */\n  mainUtilities.addProcessWithConvenientEdges = function (_source, _target, processType) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // If source and target IDs are given get the elements by IDs\n    var source = typeof _source === 'string' ? cy.getElementById(_source) : _source;\n    var target = typeof _target === 'string' ? cy.getElementById(_target) : _target;\n\n    // If source or target does not have an EPN class the operation is not valid\n    if (!elementUtilities.isEPNClass(source) || !elementUtilities.isEPNClass(target)) {\n      return;\n    }\n    if (!options.undoable) {\n      return elementUtilities.addProcessWithConvenientEdges(_source, _target, processType);\n    } else {\n      var param = {\n        source: _source,\n        target: _target,\n        processType: processType\n      };\n      cy.undoRedo()[\"do\"](\"addProcessWithConvenientEdges\", param);\n    }\n  };\n\n  // convert collapsed compound nodes to simple nodes\n  // and update port values of pasted nodes and edges\n  var cloneCollapsedNodesAndPorts = function cloneCollapsedNodesAndPorts(elesBefore) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    cy.elements().unselect();\n    var elesAfter = cy.elements();\n    var elesDiff = elesAfter.diff(elesBefore).left;\n\n    // shallow copy collapsed nodes - collapsed compounds become simple nodes\n    // data related to collapsed nodes are removed from generated clones\n    // related issue: https://github.com/iVis-at-Bilkent/newt/issues/145\n    var collapsedNodes = elesDiff.filter('node.cy-expand-collapse-collapsed-node');\n    collapsedNodes.connectedEdges().remove();\n    collapsedNodes.removeClass('cy-expand-collapse-collapsed-node');\n    collapsedNodes.removeData('collapsedChildren');\n    collapsedNodes.removeData('position-before-collapse size-before-collapse');\n    collapsedNodes.removeData('expandcollapseRenderedCueSize expandcollapseRenderedStartX expandcollapseRenderedStartY');\n\n    // cloning ports\n    elesDiff.nodes().forEach(function (_node) {\n      if (_node.data(\"ports\").length == 2) {\n        var oldPortName0 = _node.data(\"ports\")[0].id;\n        var oldPortName1 = _node.data(\"ports\")[1].id;\n        _node.data(\"ports\")[0].id = _node.id() + \".1\";\n        _node.data(\"ports\")[1].id = _node.id() + \".2\";\n        _node.outgoers().edges().forEach(function (_edge) {\n          if (_edge.data(\"portsource\") == oldPortName0) {\n            _edge.data(\"portsource\", _node.data(\"ports\")[0].id);\n          } else if (_edge.data(\"portsource\") == oldPortName1) {\n            _edge.data(\"portsource\", _node.data(\"ports\")[1].id);\n          } else {\n            _edge.data(\"portsource\", _node.id());\n          }\n        });\n        _node.incomers().edges().forEach(function (_edge) {\n          if (_edge.data(\"porttarget\") == oldPortName0) {\n            _edge.data(\"porttarget\", _node.data(\"ports\")[0].id);\n          } else if (_edge.data(\"porttarget\") == oldPortName1) {\n            _edge.data(\"porttarget\", _node.data(\"ports\")[1].id);\n          } else {\n            _edge.data(\"porttarget\", _node.id());\n          }\n        });\n      } else {\n        _node.outgoers().edges().forEach(function (_edge) {\n          _edge.data(\"portsource\", _node.id());\n        });\n        _node.incomers().edges().forEach(function (_edge) {\n          _edge.data(\"porttarget\", _node.id());\n        });\n      }\n    });\n    elesDiff.select();\n  };\n\n  /*\n   * Clone given elements. Considers undoable option. Requires cytoscape-clipboard extension.\n   */\n  mainUtilities.cloneElements = function (eles, pasteAtMouseLoc) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (eles.length === 0) {\n      return;\n    }\n    this.copyElements(eles);\n    this.pasteElements(pasteAtMouseLoc);\n  };\n\n  /*\n   * Copy given elements to clipboard. Requires cytoscape-clipboard extension.\n   */\n  mainUtilities.copyElements = function (eles) {\n    cy.clipboard().copy(eles);\n  };\n\n  /*\n   * Paste the elements copied to clipboard. Considers undoable option. Requires cytoscape-clipboard extension.\n   */\n  mainUtilities.pasteElements = function (pasteAtMouseLoc) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    var elesBefore = cy.elements();\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"paste\", {\n        pasteAtMouseLoc: pasteAtMouseLoc\n      });\n    } else {\n      cy.clipboard().paste();\n    }\n    cloneCollapsedNodesAndPorts(elesBefore);\n    cy.nodes(\":selected\").emit('data');\n  };\n\n  /*\n   * Aligns given nodes in given horizontal and vertical order.\n   * Horizontal and vertical parameters may be 'none' or undefined.\n   * alignTo parameter indicates the leading node.\n   * Requrires cytoscape-grid-guide extension and considers undoable option.\n   */\n  mainUtilities.align = function (nodes, horizontal, vertical, alignTo) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"align\", {\n        nodes: nodes,\n        horizontal: horizontal,\n        vertical: vertical,\n        alignTo: alignTo\n      });\n    } else {\n      nodes.align(horizontal, vertical, alignTo);\n    }\n    if (cy.edges(\":selected\").length == 1) {\n      cy.edges().unselect();\n    }\n  };\n\n  /*\n   * Create compound for given nodes. compoundType may be 'complex' or 'compartment'.\n   * This method considers undoable option.\n   */\n  mainUtilities.createCompoundForGivenNodes = function (_nodes, compoundType) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    var nodes = _nodes;\n    /*\n     * Eleminate the nodes which cannot have a parent with given compound type\n     */\n    nodes = _nodes.filter(function (element, i) {\n      if (typeof element === \"number\") {\n        element = i;\n      }\n      var sbgnclass = element.data(\"class\");\n      return elementUtilities.isValidParent(sbgnclass, compoundType, element);\n    });\n    nodes = elementUtilities.getTopMostNodes(nodes);\n\n    // All elements should have the same parent and the common parent should not be a 'complex'\n    // if compoundType is 'compartent'\n    // because the old common parent will be the parent of the new compartment after this operation and\n    // 'complexes' cannot include 'compartments'\n    if (nodes.length == 0 || !elementUtilities.allHaveTheSameParent(nodes) || (compoundType === 'compartment' || compoundType == 'submap') && nodes.parent().data('class') && nodes.parent().data('class').startsWith('complex')) {\n      return;\n    }\n    if (cy.undoRedo()) {\n      var param = {\n        compoundType: compoundType,\n        nodesToMakeCompound: nodes\n      };\n      cy.undoRedo()[\"do\"](\"createCompoundForGivenNodes\", param);\n    } else {\n      elementUtilities.createCompoundForGivenNodes(nodes, compoundType);\n    }\n  };\n\n  /*\n   * Move the nodes to a new parent and change their position if possDiff params are set.\n   * Considers undoable option and checks if the operation is valid.\n   */\n  mainUtilities.changeParent = function (nodes, _newParent, posDiffX, posDiffY) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    var newParent = typeof _newParent === 'string' ? cy.getElementById(_newParent) : _newParent;\n    // New parent is supposed to be one of the root, a complex or a compartment\n    if (newParent && !newParent.data(\"class\").startsWith(\"complex\") && newParent.data(\"class\") != \"compartment\" && newParent.data(\"class\") != \"submap\") {\n      return;\n    }\n    /*\n     * Eleminate the nodes which cannot have the newParent as their parent\n     */\n    nodes = nodes.filter(function (element, i) {\n      if (typeof element === \"number\") {\n        element = i;\n      }\n      var sbgnclass = element.data(\"class\");\n      return elementUtilities.isValidParent(sbgnclass, newParent, element);\n    });\n\n    // Discard the nodes whose parent is already newParent.\n    // Discard the newParent itself if it is among the nodes\n    nodes = nodes.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      // Discard the newParent if it is among the nodes\n      if (newParent && ele.id() === newParent.id()) {\n        return false;\n      }\n      // Discard the nodes whose parent is already newParent\n      if (!newParent) {\n        return ele.data('parent') != null;\n      }\n      return ele.data('parent') !== newParent.id();\n    });\n\n    // If some nodes are ancestor of new parent eleminate them\n    if (newParent) {\n      nodes = nodes.difference(newParent.ancestors());\n    }\n\n    // If all nodes are eleminated return directly\n    if (nodes.length === 0) {\n      return;\n    }\n\n    // Just move the top most nodes\n    nodes = elementUtilities.getTopMostNodes(nodes);\n    var parentId = newParent ? newParent.id() : null;\n    if (options.undoable) {\n      var param = {\n        firstTime: true,\n        parentData: parentId,\n        // It keeps the newParentId (Just an id for each nodes for the first time)\n        nodes: nodes,\n        posDiffX: posDiffX,\n        posDiffY: posDiffY,\n        // This is needed because the changeParent function called is not from elementUtilities\n        // but from the undoRedo extension directly, so maintaining pointer is not automatically done.\n        callback: elementUtilities.maintainPointer\n      };\n      cy.undoRedo()[\"do\"](\"changeParent\", param); // This action is registered by undoRedo extension\n    } else {\n      elementUtilities.changeParent(nodes, parentId, posDiffX, posDiffY);\n    }\n  };\n\n  /*\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\n   */\n  mainUtilities.createTranslationReaction = function (mRnaName, proteinName, processPosition, edgeLength) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createTranslationReaction(mRnaName, proteinName, processPosition, edgeLength);\n    } else {\n      var param = {\n        mRnaName: mRnaName,\n        proteinName: proteinName,\n        processPosition: processPosition,\n        edgeLength: edgeLength\n      };\n      cy.undoRedo()[\"do\"](\"createTranslationReaction\", param);\n    }\n  };\n\n  /*\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\n   */\n  mainUtilities.createTranscriptionReaction = function (geneName, mRnaName, processPosition, edgeLength) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createTranscriptionReaction(geneName, mRnaName, processPosition, edgeLength);\n    } else {\n      var param = {\n        geneName: geneName,\n        mRnaName: mRnaName,\n        processPosition: processPosition,\n        edgeLength: edgeLength\n      };\n      cy.undoRedo()[\"do\"](\"createTranscriptionReaction\", param);\n    }\n  };\n  mainUtilities.createTranslation = function (regulatorLabel, outputLabel, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createTranslation(regulatorLabel, outputLabel, orientation);\n    } else {\n      var param = {\n        regulatorLabel: regulatorLabel,\n        outputLabel: outputLabel,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createTranslation\", param);\n    }\n  };\n  mainUtilities.createTranscription = function (label, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createTranscription(label, orientation);\n    } else {\n      var param = {\n        label: label,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createTranscription\", param);\n    }\n  };\n  mainUtilities.createDegradation = function (macromolecule, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createDegradation(macromolecule, orientation);\n    } else {\n      var param = {\n        macromolecule: macromolecule,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createDegradation\", param);\n    }\n  };\n  mainUtilities.createComplexProteinFormation = function (proteinLabels, complexLabel, regulator, orientation, reverse) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createComplexProteinFormation(proteinLabels, complexLabel, regulator, orientation, reverse);\n    } else {\n      var param = {\n        proteinLabels: proteinLabels,\n        complexLabel: complexLabel,\n        regulator: regulator,\n        orientation: orientation,\n        reverse: reverse\n      };\n      cy.undoRedo()[\"do\"](\"createComplexProteinFormation\", param);\n    }\n  };\n  mainUtilities.createMultimerization = function (macromolecule, regulator, regulatorMultimer, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createMultimerization(macromolecule, regulator, regulatorMultimer, orientation);\n    } else {\n      var param = {\n        macromolecule: macromolecule,\n        regulator: regulator,\n        regulatorMultimer: regulatorMultimer,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createMultimerization\", param);\n    }\n  };\n  mainUtilities.createConversion = function (macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createConversion(macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels);\n    } else {\n      var param = {\n        macromolecule: macromolecule,\n        regulator: regulator,\n        regulatorMultimer: regulatorMultimer,\n        orientation: orientation,\n        inputInfoboxLabels: inputInfoboxLabels,\n        outputInfoboxLabels: outputInfoboxLabels\n      };\n      cy.undoRedo()[\"do\"](\"createConversion\", param);\n    }\n  };\n  mainUtilities.createMetabolicReaction = function (inputs, outputs, reversible, regulator, regulatorMultimer, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createMetabolicReaction(inputs, outputs, reversible, regulator, regulatorMultimer, orientation);\n    } else {\n      var param = {\n        inputs: inputs,\n        outputs: outputs,\n        reversible: reversible,\n        regulator: regulator,\n        regulatorMultimer: regulatorMultimer,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createMetabolicReaction\", param);\n    }\n  };\n\n  /*\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\n   */\n  mainUtilities.createMetabolicCatalyticActivity = function (inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createMetabolicCatalyticActivity(inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength);\n    } else {\n      var param = {\n        inputNodeList: inputNodeList,\n        outputNodeList: outputNodeList,\n        catalystName: catalystName,\n        catalystType: catalystType,\n        processPosition: processPosition,\n        tilingPaddingVertical: tilingPaddingVertical,\n        tilingPaddingHorizontal: tilingPaddingHorizontal,\n        edgeLength: edgeLength\n      };\n      cy.undoRedo()[\"do\"](\"createMetabolicCatalyticActivity\", param);\n    }\n  };\n\n  /*\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\n   */\n  mainUtilities.createActivationReaction = function (proteinName, processPosition, edgeLength, reverse) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createActivationReaction(proteinName, processPosition, edgeLength, reverse);\n    } else {\n      var param = {\n        proteinName: proteinName,\n        processPosition: processPosition,\n        edgeLength: edgeLength,\n        reverse: reverse\n      };\n      cy.undoRedo()[\"do\"](\"createActivationReaction\", param);\n    }\n  };\n\n  /*\n   * Creates a template reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\n   */\n  mainUtilities.createTemplateReaction = function (templateType, macromoleculeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      if (templateType === \"reversible\") {\n        elementUtilities.setMapType(\"HybridAny\");\n      }\n      elementUtilities.createTemplateReaction(templateType, macromoleculeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam);\n    } else {\n      var param = {\n        templateType: templateType,\n        macromoleculeList: macromoleculeList,\n        complexName: complexName,\n        processPosition: processPosition,\n        tilingPaddingVertical: tilingPaddingVertical,\n        tilingPaddingHorizontal: tilingPaddingHorizontal,\n        edgeLength: edgeLength,\n        layoutParam: layoutParam\n      };\n      if (templateType === \"reversible\") {\n        var actions = [];\n        actions.push({\n          name: \"changeMapType\",\n          param: {\n            mapType: \"HybridAny\",\n            callback: function callback() {}\n          }\n        });\n        actions.push({\n          name: \"createTemplateReaction\",\n          param: param\n        });\n        cy.undoRedo()[\"do\"](\"batch\", actions);\n      } else {\n        cy.undoRedo()[\"do\"](\"createTemplateReaction\", param);\n      }\n    }\n  };\n\n  /*\n   * Resize given nodes if useAspectRatio is truthy one of width or height should not be set.\n   * Considers undoable option.\n   */\n  mainUtilities.resizeNodes = function (nodes, width, height, useAspectRatio, preserveRelativePos) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        nodes: nodes,\n        width: width,\n        height: height,\n        useAspectRatio: useAspectRatio,\n        performOperation: true,\n        preserveRelativePos: preserveRelativePos\n      };\n      cy.undoRedo()[\"do\"](\"resizeNodes\", param);\n    } else {\n      elementUtilities.resizeNodes(nodes, width, height, useAspectRatio);\n      cy.style().update();\n    }\n  };\n\n  /*\n   * Resize given nodes if useAspectRatio is truthy one of width or height should not be set.\n   * Considers undoable option.\n   */\n  mainUtilities.resizeNodesToContent = function (nodes, useAspectRatio) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var actions = [];\n      nodes.forEach(function (node) {\n        var width = elementUtilities.calculateMinWidth(node);\n        var height = elementUtilities.calculateMinHeight(node);\n        actions.push({\n          name: \"resizeNodes\",\n          param: {\n            nodes: node,\n            width: width,\n            height: height,\n            useAspectRatio: useAspectRatio,\n            performOperation: true,\n            preserveRelativePos: true\n          }\n        });\n        var stateAndInfos = node.data('statesandinfos');\n        var length = stateAndInfos.length;\n        if (length != 0) {\n          var param = {\n            node: node,\n            locations: [\"top\", \"right\", \"bottom\", \"left\"]\n          };\n          actions.push({\n            name: \"fitUnits\",\n            param: param\n          });\n        }\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n      cy.style().update();\n      return actions;\n    } else {\n      nodes.forEach(function (node) {\n        var width = elementUtilities.calculateMinWidth(node);\n        var height = elementUtilities.calculateMinHeight(node);\n        elementUtilities.resizeNodes(node, width, height, useAspectRatio, true);\n      });\n    }\n    cy.style().update();\n  };\n\n  /*\n   * Changes the label of the given nodes to the given label. Considers undoable option.\n   */\n  mainUtilities.changeNodeLabel = function (nodes, label) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      nodes.data('label', label);\n    } else {\n      var param = {\n        nodes: nodes,\n        label: label,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"changeNodeLabel\", param);\n    }\n    cy.style().update();\n  };\n\n  /*\n   * Change font properties for given nodes use the given font data.\n   * Considers undoable option.\n   */\n  mainUtilities.changeFontProperties = function (eles, data) {\n    if (eles.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        eles: eles,\n        data: data,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"changeFontProperties\", param);\n    } else {\n      elementUtilities.changeFontProperties(eles, data);\n    }\n    cy.style().update();\n  };\n\n  /*\n   * Change state value or unit of information box of given nodes with given index.\n   * Considers undoable option.\n   * For more information about the parameters see elementUtilities.changeStateOrInfoBox\n   */\n  mainUtilities.changeStateOrInfoBox = function (nodes, index, value, type) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        index: index,\n        value: value,\n        type: type,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"changeStateOrInfoBox\", param);\n    } else {\n      return elementUtilities.changeStateOrInfoBox(nodes, index, value, type);\n    }\n    cy.style().update();\n  };\n\n  // Add a new state or info box to given nodes.\n  // The box is represented by the parameter obj.\n  // Considers undoable option.\n  mainUtilities.addStateOrInfoBox = function (nodes, obj) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.addStateOrInfoBox(nodes, obj);\n    } else {\n      var param = {\n        obj: obj,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"addStateOrInfoBox\", param);\n    }\n    cy.style().update();\n  };\n\n  // Remove the state or info boxes of the given nodes at given index.\n  // Considers undoable option.\n  mainUtilities.removeStateOrInfoBox = function (nodes, index) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.removeStateOrInfoBox(nodes, {\n        index: index\n      });\n    } else {\n      var param = {\n        locationObj: {\n          index: index\n        },\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"removeStateOrInfoBox\", param);\n    }\n    cy.style().update();\n  };\n\n  //Arrange information boxes\n  //If force check is true, it rearranges all information boxes\n  mainUtilities.fitUnits = function (node, locations) {\n    if (node.data('auxunitlayouts') === undefined || node.data('statesandinfos').length <= 0) {\n      return;\n    }\n    if (locations === undefined || locations.length <= 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.fitUnits(node, locations);\n    } else {\n      var param = {\n        node: node,\n        locations: locations\n      };\n      cy.undoRedo()[\"do\"](\"fitUnits\", param);\n    }\n    cy.style().update();\n  };\n\n  /*\n   * Set multimer status of the given nodes to the given status.\n   * Considers undoable option.\n   */\n  mainUtilities.setMultimerStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setMultimerStatus\", param);\n    } else {\n      elementUtilities.setMultimerStatus(nodes, status);\n    }\n    cy.style().update();\n  };\n  mainUtilities.setActiveStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setActiveStatus\", param);\n    } else {\n      elementUtilities.setActiveStatus(nodes, status);\n    }\n    cy.style().update();\n  };\n  mainUtilities.setHypotheticalStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setHypotheticalStatus\", param);\n    } else {\n      elementUtilities.setHypotheticalStatus(nodes, status);\n    }\n    cy.style().update();\n  };\n\n  /**\n   * Redraw clone markers on given nodes without considering undo.\n   * See https://github.com/iVis-at-Bilkent/newt/issues/574 \n   */\n  mainUtilities.redrawCloneMarkers = function (nodes) {\n    elementUtilities.setCloneMarkerStatus(nodes, true);\n  };\n\n  /*\n   * Set clone marker status of given nodes to the given status.\n   * Considers undoable option.\n   */\n  mainUtilities.setCloneMarkerStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setCloneMarkerStatus\", param);\n    } else {\n      elementUtilities.setCloneMarkerStatus(nodes, status);\n    }\n    cy.style().update();\n  };\n\n  /*\n   * Change style/css of given eles by setting getting property name to the given given value/values (Note that valueMap parameter may be\n   * a single string or an id to value map). Considers undoable option.\n   */\n  mainUtilities.changeCss = function (eles, name, valueMap) {\n    if (eles.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.changeCss(eles, name, valueMap);\n    } else {\n      var param = {\n        eles: eles,\n        valueMap: valueMap,\n        name: name\n      };\n      cy.undoRedo()[\"do\"](\"changeCss\", param);\n    }\n    cy.style().update();\n  };\n\n  /*\n   * Change data of given eles by setting getting property name to the given given value/values (Note that valueMap parameter may be\n   * a single string or an id to value map). Considers undoable option.\n   */\n  mainUtilities.changeData = function (eles, name, valueMap) {\n    if (eles.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.changeData(eles, name, valueMap);\n    } else {\n      var param = {\n        eles: eles,\n        valueMap: valueMap,\n        name: name\n      };\n      cy.undoRedo()[\"do\"](\"changeData\", param);\n    }\n    cy.style().update();\n  };\n  mainUtilities.updateSetField = function (ele, fieldName, toDelete, toAdd, callback) {\n    if (!options.undoable) {\n      elementUtilities.changeData(ele, fieldName, toDelete, toAdd, callback);\n    } else {\n      var param = {\n        ele: ele,\n        fieldName: fieldName,\n        toDelete: toDelete,\n        toAdd: toAdd,\n        callback: callback\n      };\n      cy.undoRedo()[\"do\"](\"updateSetField\", param);\n    }\n  };\n  mainUtilities.setDefaultProperty = function (_class, name, value) {\n    if (!options.undoable) {\n      var propMap = {};\n      propMap[name] = value;\n      elementUtilities.setDefaultProperties(_class, propMap);\n    } else {\n      var param = {\n        \"class\": _class,\n        name: name,\n        value: value\n      };\n      cy.undoRedo()[\"do\"](\"setDefaultProperty\", param);\n    }\n  };\n  mainUtilities.updateInfoboxStyle = function (node, index, newProps) {\n    if (!options.undoable) {\n      elementUtilities.updateInfoboxStyle(node, index, newProps);\n    } else {\n      var param = {\n        node: node,\n        index: index,\n        newProps: newProps\n      };\n      cy.undoRedo()[\"do\"](\"updateInfoboxStyle\", param);\n    }\n    cy.style().update();\n  };\n  mainUtilities.updateInfoboxObj = function (node, index, newProps) {\n    if (!options.undoable) {\n      elementUtilities.updateInfoboxObj(node, index, newProps);\n    } else {\n      var param = {\n        node: node,\n        index: index,\n        newProps: newProps\n      };\n      cy.undoRedo()[\"do\"](\"updateInfoboxObj\", param);\n    }\n    cy.style().update();\n  };\n  mainUtilities.deleteAndPerformLayout = function (eles, layoutparam) {\n    var nodes = eles.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToKeep = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToRemove = allNodes.not(nodesToKeep);\n    if (nodesToRemove.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.deleteAndPerformLayout(nodesToRemove, layoutparam);\n    } else {\n      var param = {\n        eles: nodesToRemove,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"deleteAndPerformLayout\", param);\n    }\n  };\n\n  /*\n   * Hides given eles (the ones which are selected) and perform given layout afterward. Layout parameter may be layout options\n   * or a function to call. Requires viewUtilities extension and considers undoable option.\n   */\n  mainUtilities.hideAndPerformLayout = function (eles, layoutparam) {\n    var nodes = eles.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n    if (nodesToHide.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);\n      elementUtilities.hideAndPerformLayout(nodesToHide, layoutparam);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thickenBorder(nodesWithHiddenNeighbor);\n    } else {\n      var param = {\n        eles: nodesToHide,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);\n      ur.action(\"thinBorder\", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(nodesToHide);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hideAndPerformLayout\",\n        param: param\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    }\n  };\n\n  /*\n   * Shows all elements (the ones which are hidden if any) and perform given layout afterward. Layout parameter may be layout options\n   * or a function to call. Requires viewUtilities extension and considers undoable option.\n   */\n  mainUtilities.showAllAndPerformLayout = function (layoutparam) {\n    var hiddenEles = cy.elements(':hidden');\n    if (hiddenEles.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);\n      elementUtilities.showAndPerformLayout(hiddenEles, layoutparam);\n    } else {\n      var param = {\n        eles: hiddenEles,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);\n      ur.action(\"thinBorder\", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.nodes(\"[thickBorder]\");\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"showAndPerformLayout\",\n        param: param\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    }\n  };\n\n  /*\n   * Unhide given eles (the ones which are hidden if any) and perform given layout afterward. Layout parameter may be layout options\n   * or a function to call. Requires viewUtilities extension and considers undoable option.\n   */\n  mainUtilities.showAndPerformLayout = function (mainEle, eles, layoutparam) {\n    var hiddenEles = eles.filter(':hidden');\n    if (hiddenEles.length === 0) {\n      return;\n    }\n    mainUtilities.closeUpElements(mainEle, hiddenEles.nodes());\n    if (!options.undoable) {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);\n      elementUtilities.showAndPerformLayout(hiddenEles, layoutparam);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thickenBorder(nodesWithHiddenNeighbor);\n    } else {\n      var param = {\n        eles: hiddenEles,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);\n      ur.action(\"thinBorder\", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);\n      var actions = [];\n      var nodesToThinBorder = hiddenEles.neighborhood(\":visible\").nodes(\"[thickBorder]\").difference(cy.edges(\":hidden\").difference(hiddenEles.edges().union(hiddenEles.nodes().connectedEdges())).connectedNodes());\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesToThinBorder\n      });\n      actions.push({\n        name: \"showAndPerformLayout\",\n        param: param\n      });\n      var nodesToThickenBorder = hiddenEles.nodes().edgesWith(cy.nodes(\":hidden\").difference(hiddenEles.nodes())).connectedNodes().intersection(hiddenEles.nodes());\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesToThickenBorder\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    }\n  };\n\n  /*\n  * Takes the hidden elements close to the nodes whose neighbors will be shown\n  * */\n  mainUtilities.closeUpElements = function (mainEle, hiddenEles) {\n    var leftX = Number.MAX_VALUE;\n    var rightX = Number.MIN_VALUE;\n    var topY = Number.MAX_VALUE;\n    var bottomY = Number.MIN_VALUE;\n    // Check the x and y limits of all hidden elements and store them in the variables above\n    hiddenEles.forEach(function (ele) {\n      if (ele.data('class') != 'compartment' && ele.data('class') != 'complex') {\n        var halfWidth = ele.outerWidth() / 2;\n        var halfHeight = ele.outerHeight() / 2;\n        if (ele.position(\"x\") - halfWidth < leftX) leftX = ele.position(\"x\") - halfWidth;\n        if (ele.position(\"x\") + halfWidth > rightX) rightX = ele.position(\"x\") + halfWidth;\n        if (ele.position(\"y\") - halfHeight < topY) topY = ele.position(\"y\") - halfHeight;\n        if (ele.position(\"y\") + halfHeight > topY) bottomY = ele.position(\"y\") + halfHeight;\n      }\n    });\n\n    //The coordinates of the old center containing the hidden nodes\n    var oldCenterX = (leftX + rightX) / 2;\n    var oldCenterY = (topY + bottomY) / 2;\n\n    //Here we calculate two parameters which define the area in which the hidden elements are placed initially\n    var minHorizontalParam = mainEle.outerWidth() / 2 + (rightX - leftX) / 2;\n    var maxHorizontalParam = mainEle.outerWidth() + (rightX - leftX) / 2;\n    var minVerticalParam = mainEle.outerHeight() / 2 + (bottomY - topY) / 2;\n    var maxVerticalParam = mainEle.outerHeight() + (bottomY - topY) / 2;\n\n    //Quadrants is an object of the form {first:\"obtained\", second:\"free\", third:\"free\", fourth:\"obtained\"}\n    // which holds which quadrant are free (that's where hidden nodes will be brought)\n    var quadrants = mainUtilities.checkOccupiedQuadrants(mainEle, hiddenEles);\n    var freeQuadrants = [];\n    for (var property in quadrants) {\n      if (quadrants[property] === \"free\") freeQuadrants.push(property);\n    }\n\n    //Can take values 1 and -1 and are used to place the hidden nodes in the random quadrant\n    var horizontalMult;\n    var verticalMult;\n    if (freeQuadrants.length > 0) {\n      if (freeQuadrants.length === 3) {\n        if (freeQuadrants.includes('first') && freeQuadrants.includes('second') && freeQuadrants.includes('third')) {\n          horizontalMult = -1;\n          verticalMult = -1;\n        } else if (freeQuadrants.includes('first') && freeQuadrants.includes('second') && freeQuadrants.includes('fourth')) {\n          horizontalMult = 1;\n          verticalMult = -1;\n        } else if (freeQuadrants.includes('first') && freeQuadrants.includes('third') && freeQuadrants.includes('fourth')) {\n          horizontalMult = 1;\n          verticalMult = 1;\n        } else if (freeQuadrants.includes('second') && freeQuadrants.includes('third') && freeQuadrants.includes('fourth')) {\n          horizontalMult = -1;\n          verticalMult = 1;\n        }\n      } else {\n        //Randomly picks one quadrant from the free quadrants\n        var randomQuadrant = freeQuadrants[Math.floor(Math.random() * freeQuadrants.length)];\n        if (randomQuadrant === \"first\") {\n          horizontalMult = 1;\n          verticalMult = -1;\n        } else if (randomQuadrant === \"second\") {\n          horizontalMult = -1;\n          verticalMult = -1;\n        } else if (randomQuadrant === \"third\") {\n          horizontalMult = -1;\n          verticalMult = 1;\n        } else if (randomQuadrant === \"fourth\") {\n          horizontalMult = 1;\n          verticalMult = 1;\n        }\n      }\n    } else {\n      horizontalMult = 0;\n      verticalMult = 0;\n    }\n    // If the horizontalMult is 0 it means that no quadrant is free, so we randomly choose a quadrant\n    var horizontalParam = mainUtilities.generateRandom(minHorizontalParam, maxHorizontalParam, horizontalMult);\n    var verticalParam = mainUtilities.generateRandom(minVerticalParam, maxVerticalParam, verticalMult);\n\n    //The coordinates of the center where the hidden nodes will be transfered\n    var newCenterX = mainEle.position(\"x\") + horizontalParam;\n    var newCenterY = mainEle.position(\"y\") + verticalParam;\n    var xdiff = newCenterX - oldCenterX;\n    var ydiff = newCenterY - oldCenterY;\n\n    //Change the position of hidden elements\n    hiddenEles.forEach(function (ele) {\n      var newx = ele.position(\"x\") + xdiff;\n      var newy = ele.position(\"y\") + ydiff;\n      ele.position(\"x\", newx);\n      ele.position(\"y\", newy);\n    });\n  };\n\n  /*\n   * Generates a number between 2 nr and multimplies it with 1 or -1\n   * */\n  mainUtilities.generateRandom = function (min, max, mult) {\n    var val = [-1, 1];\n    if (mult === 0) mult = val[Math.floor(Math.random() * val.length)];\n    return (Math.floor(Math.random() * (max - min + 1)) + min) * mult;\n  };\n\n  /*\n   * This function makes sure that the random number lies in free quadrant\n   * */\n  mainUtilities.checkOccupiedQuadrants = function (mainEle, hiddenEles) {\n    if (elementUtilities.getMapType() == 'PD') {\n      var visibleNeighborEles = mainEle.neighborhood().difference(hiddenEles).nodes();\n      var visibleNeighborsOfNeighbors = visibleNeighborEles.neighborhood().difference(hiddenEles).difference(mainEle).nodes();\n      var visibleEles = visibleNeighborEles.union(visibleNeighborsOfNeighbors);\n    } else var visibleEles = mainEle.neighborhood().difference(hiddenEles).nodes();\n    var occupiedQuadrants = {\n      first: \"free\",\n      second: \"free\",\n      third: \"free\",\n      fourth: \"free\"\n    };\n    visibleEles.forEach(function (ele) {\n      if (ele.data('class') != 'compartment' && ele.data('class') != 'complex') {\n        if (ele.position(\"x\") < mainEle.position(\"x\") && ele.position(\"y\") < mainEle.position(\"y\")) occupiedQuadrants.second = \"occupied\";else if (ele.position(\"x\") > mainEle.position(\"x\") && ele.position(\"y\") < mainEle.position(\"y\")) occupiedQuadrants.first = \"occupied\";else if (ele.position(\"x\") < mainEle.position(\"x\") && ele.position(\"y\") > mainEle.position(\"y\")) occupiedQuadrants.third = \"occupied\";else if (ele.position(\"x\") > mainEle.position(\"x\") && ele.position(\"y\") > mainEle.position(\"y\")) occupiedQuadrants.fourth = \"occupied\";\n      }\n    });\n    return occupiedQuadrants;\n  };\n\n  // Overrides highlightProcesses from SBGNVIZ - do not highlight any nodes when the map type is AF\n  mainUtilities.highlightProcesses = function (_nodes) {\n    if (elementUtilities.getMapType() == \"AF\") return;\n    sbgnvizInstance.highlightProcesses(_nodes);\n  };\n\n  /**\n   * Resets map type to undefined\n   */\n  mainUtilities.resetMapType = function () {\n    elementUtilities.resetMapType();\n  };\n\n  /**\n   * return : map type\n   */\n  mainUtilities.getMapType = function () {\n    return elementUtilities.getMapType();\n  };\n  mainUtilities.addBackgroundImage = function (nodes, bgObj, updateInfo, promptInvalidImage, validateURL) {\n    if (nodes.length === 0 || !bgObj) {\n      return;\n    }\n    bgObj['firstTime'] = true;\n    if (options.undoable) {\n      var param = {\n        bgObj: bgObj,\n        nodes: nodes,\n        updateInfo: updateInfo,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n      cy.undoRedo()[\"do\"](\"addBackgroundImage\", param);\n    } else {\n      elementUtilities.addBackgroundImage(nodes, bgObj, updateInfo, promptInvalidImage, validateURL);\n    }\n    cy.style().update();\n  };\n  mainUtilities.removeBackgroundImage = function (nodes, bgObj) {\n    if (nodes.length === 0 || !bgObj) {\n      return;\n    }\n    bgObj['firstTime'] = true;\n    if (options.undoable) {\n      var param = {\n        bgObj: bgObj,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"removeBackgroundImage\", param);\n    } else {\n      elementUtilities.removeBackgroundImage(nodes, bgObj);\n    }\n    cy.style().update();\n  };\n  mainUtilities.updateBackgroundImage = function (nodes, bgObj) {\n    if (nodes.length === 0 || !bgObj) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        bgObj: bgObj,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"updateBackgroundImage\", param);\n    } else {\n      elementUtilities.updateBackgroundImage(nodes, bgObj);\n    }\n    cy.style().update();\n  };\n  mainUtilities.changeBackgroundImage = function (nodes, oldImg, newImg, updateInfo, promptInvalidImage, validateURL) {\n    if (nodes.length === 0 || !oldImg || !newImg) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        oldImg: oldImg,\n        newImg: newImg,\n        nodes: nodes,\n        firstTime: true,\n        updateInfo: updateInfo,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n      cy.undoRedo()[\"do\"](\"changeBackgroundImage\", param);\n    } else {\n      elementUtilities.changeBackgroundImage(nodes, oldImg, newImg, true, updateInfo, promptInvalidImage, validateURL);\n    }\n    cy.style().update();\n  };\n  return mainUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/main-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/option-utilities-factory.js":
/*!***************************************************!*\
  !*** ./src/utilities/option-utilities-factory.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/*\n *  Extend default options and get current options by using this file\n */\n\nmodule.exports = function () {\n  // default options\n  var defaults = {\n    // The path of core library images when sbgnviz is required from npm and the index html\n    // file and node_modules are under the same folder then using the default value is fine\n    imgPath: 'node_modules/sbgnviz/src/img',\n    // Whether to fit labels to nodes\n    fitLabelsToNodes: function fitLabelsToNodes() {\n      return false;\n    },\n    fitLabelsToInfoboxes: function fitLabelsToInfoboxes() {\n      return false;\n    },\n    // dynamic label size it may be 'small', 'regular', 'large'\n    dynamicLabelSize: function dynamicLabelSize() {\n      return 'regular';\n    },\n    // Whether to infer nesting on load \n    inferNestingOnLoad: function inferNestingOnLoad() {\n      return false;\n    },\n    // percentage used to calculate compound paddings\n    compoundPadding: function compoundPadding() {\n      return 10;\n    },\n    // The selector of the component containing the sbgn network\n    networkContainerSelector: '#sbgn-network-container',\n    // Whether the actions are undoable, requires cytoscape-undo-redo extension\n    undoable: true,\n    // Whether to have undoable drag feature in undo/redo extension. This options will be passed to undo/redo extension\n    undoableDrag: true\n  };\n  var optionUtilities = function optionUtilities() {};\n\n  // Extend the defaults options with the user options\n  optionUtilities.extendOptions = function (options) {\n    var result = {};\n    for (var prop in defaults) {\n      result[prop] = defaults[prop];\n    }\n    for (var prop in options) {\n      result[prop] = options[prop];\n    }\n    optionUtilities.options = result;\n    return options;\n  };\n  optionUtilities.getOptions = function () {\n    return optionUtilities.options;\n  };\n  return optionUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL29wdGlvbi11dGlsaXRpZXMtZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0cyIsImltZ1BhdGgiLCJmaXRMYWJlbHNUb05vZGVzIiwiZml0TGFiZWxzVG9JbmZvYm94ZXMiLCJkeW5hbWljTGFiZWxTaXplIiwiaW5mZXJOZXN0aW5nT25Mb2FkIiwiY29tcG91bmRQYWRkaW5nIiwibmV0d29ya0NvbnRhaW5lclNlbGVjdG9yIiwidW5kb2FibGUiLCJ1bmRvYWJsZURyYWciLCJvcHRpb25VdGlsaXRpZXMiLCJleHRlbmRPcHRpb25zIiwib3B0aW9ucyIsInJlc3VsdCIsInByb3AiLCJnZXRPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGlzZS8uL3NyYy91dGlsaXRpZXMvb3B0aW9uLXV0aWxpdGllcy1mYWN0b3J5LmpzPzllNDciXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICBFeHRlbmQgZGVmYXVsdCBvcHRpb25zIGFuZCBnZXQgY3VycmVudCBvcHRpb25zIGJ5IHVzaW5nIHRoaXMgZmlsZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgLy8gVGhlIHBhdGggb2YgY29yZSBsaWJyYXJ5IGltYWdlcyB3aGVuIHNiZ252aXogaXMgcmVxdWlyZWQgZnJvbSBucG0gYW5kIHRoZSBpbmRleCBodG1sXG4gICAgLy8gZmlsZSBhbmQgbm9kZV9tb2R1bGVzIGFyZSB1bmRlciB0aGUgc2FtZSBmb2xkZXIgdGhlbiB1c2luZyB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBmaW5lXG4gICAgaW1nUGF0aDogJ25vZGVfbW9kdWxlcy9zYmdudml6L3NyYy9pbWcnLFxuICAgIC8vIFdoZXRoZXIgdG8gZml0IGxhYmVscyB0byBub2Rlc1xuICAgIGZpdExhYmVsc1RvTm9kZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIGZpdExhYmVsc1RvSW5mb2JveGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICAvLyBkeW5hbWljIGxhYmVsIHNpemUgaXQgbWF5IGJlICdzbWFsbCcsICdyZWd1bGFyJywgJ2xhcmdlJ1xuICAgIGR5bmFtaWNMYWJlbFNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAncmVndWxhcic7XG4gICAgfSxcbiAgICAvLyBXaGV0aGVyIHRvIGluZmVyIG5lc3Rpbmcgb24gbG9hZCBcbiAgICBpbmZlck5lc3RpbmdPbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIC8vIHBlcmNlbnRhZ2UgdXNlZCB0byBjYWxjdWxhdGUgY29tcG91bmQgcGFkZGluZ3NcbiAgICBjb21wb3VuZFBhZGRpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAxMDtcbiAgICB9LFxuICAgIC8vIFRoZSBzZWxlY3RvciBvZiB0aGUgY29tcG9uZW50IGNvbnRhaW5pbmcgdGhlIHNiZ24gbmV0d29ya1xuICAgIG5ldHdvcmtDb250YWluZXJTZWxlY3RvcjogJyNzYmduLW5ldHdvcmstY29udGFpbmVyJyxcbiAgICAvLyBXaGV0aGVyIHRoZSBhY3Rpb25zIGFyZSB1bmRvYWJsZSwgcmVxdWlyZXMgY3l0b3NjYXBlLXVuZG8tcmVkbyBleHRlbnNpb25cbiAgICB1bmRvYWJsZTogdHJ1ZSxcbiAgICAvLyBXaGV0aGVyIHRvIGhhdmUgdW5kb2FibGUgZHJhZyBmZWF0dXJlIGluIHVuZG8vcmVkbyBleHRlbnNpb24uIFRoaXMgb3B0aW9ucyB3aWxsIGJlIHBhc3NlZCB0byB1bmRvL3JlZG8gZXh0ZW5zaW9uXG4gICAgdW5kb2FibGVEcmFnOiB0cnVlXG4gIH07XG5cbiAgdmFyIG9wdGlvblV0aWxpdGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgfTtcblxuICAvLyBFeHRlbmQgdGhlIGRlZmF1bHRzIG9wdGlvbnMgd2l0aCB0aGUgdXNlciBvcHRpb25zXG4gIG9wdGlvblV0aWxpdGllcy5leHRlbmRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIGRlZmF1bHRzKSB7XG4gICAgICByZXN1bHRbcHJvcF0gPSBkZWZhdWx0c1twcm9wXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgfVxuXG4gICAgb3B0aW9uVXRpbGl0aWVzLm9wdGlvbnMgPSByZXN1bHQ7XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfTtcblxuICBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gb3B0aW9uVXRpbGl0aWVzLm9wdGlvbnM7XG4gIH07XG5cbiAgcmV0dXJuIG9wdGlvblV0aWxpdGllcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBWTtFQUUzQjtFQUNBLElBQUlDLFFBQVEsR0FBRztJQUNiO0lBQ0E7SUFDQUMsT0FBTyxFQUFFLDhCQUE4QjtJQUN2QztJQUNBQyxnQkFBZ0IsRUFBRSxTQUFsQkEsZ0JBQWdCQSxDQUFBLEVBQWM7TUFDNUIsT0FBTyxLQUFLO0lBQ2QsQ0FBQztJQUNEQyxvQkFBb0IsRUFBRSxTQUF0QkEsb0JBQW9CQSxDQUFBLEVBQWM7TUFDaEMsT0FBTyxLQUFLO0lBQ2QsQ0FBQztJQUNEO0lBQ0FDLGdCQUFnQixFQUFFLFNBQWxCQSxnQkFBZ0JBLENBQUEsRUFBYztNQUM1QixPQUFPLFNBQVM7SUFDbEIsQ0FBQztJQUNEO0lBQ0FDLGtCQUFrQixFQUFFLFNBQXBCQSxrQkFBa0JBLENBQUEsRUFBYztNQUM5QixPQUFPLEtBQUs7SUFDZCxDQUFDO0lBQ0Q7SUFDQUMsZUFBZSxFQUFFLFNBQWpCQSxlQUFlQSxDQUFBLEVBQWM7TUFDM0IsT0FBTyxFQUFFO0lBQ1gsQ0FBQztJQUNEO0lBQ0FDLHdCQUF3QixFQUFFLHlCQUF5QjtJQUNuRDtJQUNBQyxRQUFRLEVBQUUsSUFBSTtJQUNkO0lBQ0FDLFlBQVksRUFBRTtFQUNoQixDQUFDO0VBRUQsSUFBSUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFlQSxDQUFBLEVBQWUsQ0FDbEMsQ0FBQzs7RUFFRDtFQUNBQSxlQUFlLENBQUNDLGFBQWEsR0FBRyxVQUFVQyxPQUFPLEVBQUU7SUFDakQsSUFBSUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUVmLEtBQUssSUFBSUMsSUFBSSxJQUFJZCxRQUFRLEVBQUU7TUFDekJhLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLEdBQUdkLFFBQVEsQ0FBQ2MsSUFBSSxDQUFDO0lBQy9CO0lBRUEsS0FBSyxJQUFJQSxJQUFJLElBQUlGLE9BQU8sRUFBRTtNQUN4QkMsTUFBTSxDQUFDQyxJQUFJLENBQUMsR0FBR0YsT0FBTyxDQUFDRSxJQUFJLENBQUM7SUFDOUI7SUFFQUosZUFBZSxDQUFDRSxPQUFPLEdBQUdDLE1BQU07SUFFaEMsT0FBT0QsT0FBTztFQUNoQixDQUFDO0VBRURGLGVBQWUsQ0FBQ0ssVUFBVSxHQUFHLFlBQVk7SUFDdkMsT0FBT0wsZUFBZSxDQUFDRSxPQUFPO0VBQ2hDLENBQUM7RUFFRCxPQUFPRixlQUFlO0FBQ3hCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/option-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/register-undo-redo-actions-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/register-undo-redo-actions-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar $ = libs.jQuery;\nmodule.exports = function () {\n  var undoRedoActionFunctions, options, cy;\n  var registerUndoRedoActions = function registerUndoRedoActions(param) {\n    undoRedoActionFunctions = param.undoRedoActionFunctions;\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    if (!options.undoable) {\n      return;\n    }\n\n    // create undo-redo instance\n    var ur = cy.undoRedo({\n      undoableDrag: options.undoableDrag\n    });\n\n    // register add remove actions\n    ur.action(\"addNode\", undoRedoActionFunctions.addNode, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"deleteElesSimple\", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);\n    ur.action(\"addEdge\", undoRedoActionFunctions.addEdge, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"addProcessWithConvenientEdges\", undoRedoActionFunctions.addProcessWithConvenientEdges, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"deleteElesSmart\", undoRedoActionFunctions.deleteElesSmart, undoRedoActionFunctions.restoreEles);\n    ur.action(\"createCompoundForGivenNodes\", undoRedoActionFunctions.createCompoundForGivenNodes, undoRedoActionFunctions.createCompoundForGivenNodes);\n\n    // register general actions\n    ur.action(\"resizeNodes\", undoRedoActionFunctions.resizeNodes, undoRedoActionFunctions.resizeNodes);\n    ur.action(\"changeNodeLabel\", undoRedoActionFunctions.changeNodeLabel, undoRedoActionFunctions.changeNodeLabel);\n    ur.action(\"changeData\", undoRedoActionFunctions.changeData, undoRedoActionFunctions.changeData);\n    ur.action(\"updateSetField\", undoRedoActionFunctions.updateSetField, undoRedoActionFunctions.updateSetField);\n    ur.action(\"changeCss\", undoRedoActionFunctions.changeCss, undoRedoActionFunctions.changeCss);\n    ur.action(\"changeBendPoints\", undoRedoActionFunctions.changeBendPoints, undoRedoActionFunctions.changeBendPoints);\n    ur.action(\"changeFontProperties\", undoRedoActionFunctions.changeFontProperties, undoRedoActionFunctions.changeFontProperties);\n    ur.action(\"showAndPerformLayout\", undoRedoActionFunctions.showAndPerformLayout, undoRedoActionFunctions.undoShowAndPerformLayout);\n    ur.action(\"hideAndPerformLayout\", undoRedoActionFunctions.hideAndPerformLayout, undoRedoActionFunctions.undoHideAndPerformLayout);\n    ur.action(\"deleteAndPerformLayout\", undoRedoActionFunctions.deleteAndPerformLayout, undoRedoActionFunctions.undoDeleteAndPerformLayout);\n    ur.action(\"applySIFTopologyGrouping\", undoRedoActionFunctions.applySIFTopologyGrouping, undoRedoActionFunctions.applySIFTopologyGrouping);\n\n    // register SBGN actions\n    ur.action(\"addStateOrInfoBox\", undoRedoActionFunctions.addStateOrInfoBox, undoRedoActionFunctions.removeStateOrInfoBox);\n    ur.action(\"changeStateOrInfoBox\", undoRedoActionFunctions.changeStateOrInfoBox, undoRedoActionFunctions.changeStateOrInfoBox);\n    ur.action(\"setMultimerStatus\", undoRedoActionFunctions.setMultimerStatus, undoRedoActionFunctions.setMultimerStatus);\n    ur.action(\"setActiveStatus\", undoRedoActionFunctions.setActiveStatus, undoRedoActionFunctions.setActiveStatus);\n    ur.action(\"setHypotheticalStatus\", undoRedoActionFunctions.setHypotheticalStatus, undoRedoActionFunctions.setHypotheticalStatus);\n    ur.action(\"setCloneMarkerStatus\", undoRedoActionFunctions.setCloneMarkerStatus, undoRedoActionFunctions.setCloneMarkerStatus);\n    ur.action(\"removeStateOrInfoBox\", undoRedoActionFunctions.removeStateOrInfoBox, undoRedoActionFunctions.addStateOrInfoBox);\n    ur.action(\"fitUnits\", undoRedoActionFunctions.fitUnits, undoRedoActionFunctions.restoreUnits);\n    ur.action(\"addBackgroundImage\", undoRedoActionFunctions.addBackgroundImage, undoRedoActionFunctions.removeBackgroundImage);\n    ur.action(\"removeBackgroundImage\", undoRedoActionFunctions.removeBackgroundImage, undoRedoActionFunctions.addBackgroundImage);\n    ur.action(\"updateBackgroundImage\", undoRedoActionFunctions.updateBackgroundImage, undoRedoActionFunctions.updateBackgroundImage);\n    ur.action(\"changeBackgroundImage\", undoRedoActionFunctions.changeBackgroundImage, undoRedoActionFunctions.changeBackgroundImage);\n    ur.action(\"updateInfoboxStyle\", undoRedoActionFunctions.updateInfoboxStyle, undoRedoActionFunctions.updateInfoboxStyle);\n    ur.action(\"updateInfoboxObj\", undoRedoActionFunctions.updateInfoboxObj, undoRedoActionFunctions.updateInfoboxObj);\n\n    // register easy creation actions\n    ur.action(\"createTemplateReaction\", undoRedoActionFunctions.createTemplateReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createActivationReaction\", undoRedoActionFunctions.createActivationReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createMetabolicCatalyticActivity\", undoRedoActionFunctions.createMetabolicCatalyticActivity, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createMetabolicReaction\", undoRedoActionFunctions.createMetabolicReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createConversion\", undoRedoActionFunctions.createConversion, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createMultimerization\", undoRedoActionFunctions.createMultimerization, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createComplexProteinFormation\", undoRedoActionFunctions.createComplexProteinFormation, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createDegradation\", undoRedoActionFunctions.createDegradation, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranscription\", undoRedoActionFunctions.createTranscription, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranslation\", undoRedoActionFunctions.createTranslation, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranscriptionReaction\", undoRedoActionFunctions.createTranscriptionReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranslationReaction\", undoRedoActionFunctions.createTranslationReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"setDefaultProperty\", undoRedoActionFunctions.setDefaultProperty, undoRedoActionFunctions.setDefaultProperty);\n    ur.action(\"convertIntoReversibleReaction\", undoRedoActionFunctions.convertIntoReversibleReaction, undoRedoActionFunctions.convertIntoReversibleReaction);\n    ur.action(\"moveEdge\", undoRedoActionFunctions.moveEdge, undoRedoActionFunctions.moveEdge);\n    ur.action(\"fixError\", undoRedoActionFunctions.fixError, undoRedoActionFunctions.unfixError);\n    ur.action(\"cloneHighDegreeNode\", undoRedoActionFunctions.cloneHighDegreeNode, undoRedoActionFunctions.unCloneHighDegreeNode);\n    ur.action(\"changeMapType\", undoRedoActionFunctions.changeMapType, undoRedoActionFunctions.changeMapType);\n    ur.action(\"setCompoundPadding\", undoRedoActionFunctions.setCompoundPadding, undoRedoActionFunctions.setCompoundPadding);\n  };\n  return registerUndoRedoActions;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/register-undo-redo-actions-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnviz-instance-utilities-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/sbgnviz-instance-utilities-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nmodule.exports = function () {\n  var instance;\n  function sbgnvizInstanceUtilities(options) {\n    instance = libs.sbgnviz(options);\n    return instance;\n  }\n  sbgnvizInstanceUtilities.getInstance = function () {\n    return instance;\n  };\n  sbgnvizInstanceUtilities.getCy = function () {\n    return this.getInstance().getCy();\n  };\n  return sbgnvizInstanceUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ252aXotaW5zdGFuY2UtdXRpbGl0aWVzLWZhY3RvcnkuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSSxHQUFHQyx3RkFBa0MsQ0FBQyxDQUFDO0FBRS9DRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFZO0VBRTNCLElBQUlDLFFBQVE7RUFFWixTQUFTQyx3QkFBd0JBLENBQUVDLE9BQU8sRUFBRTtJQUUxQ0YsUUFBUSxHQUFHTCxJQUFJLENBQUNRLE9BQU8sQ0FBQ0QsT0FBTyxDQUFDO0lBRWhDLE9BQU9GLFFBQVE7RUFDakI7RUFFQUMsd0JBQXdCLENBQUNHLFdBQVcsR0FBRyxZQUFZO0lBQ2pELE9BQU9KLFFBQVE7RUFDakIsQ0FBQztFQUVEQyx3QkFBd0IsQ0FBQ0ksS0FBSyxHQUFHLFlBQVk7SUFDM0MsT0FBTyxJQUFJLENBQUNELFdBQVcsQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DLENBQUM7RUFFRCxPQUFPSix3QkFBd0I7QUFDakMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoaXNlLy4vc3JjL3V0aWxpdGllcy9zYmdudml6LWluc3RhbmNlLXV0aWxpdGllcy1mYWN0b3J5LmpzPzMzYzgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGxpYnMgPSByZXF1aXJlKCcuL2xpYi11dGlsaXRpZXMnKS5nZXRMaWJzKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gIHZhciBpbnN0YW5jZTtcblxuICBmdW5jdGlvbiBzYmdudml6SW5zdGFuY2VVdGlsaXRpZXMgKG9wdGlvbnMpIHtcblxuICAgIGluc3RhbmNlID0gbGlicy5zYmdudml6KG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgc2JnbnZpekluc3RhbmNlVXRpbGl0aWVzLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuXG4gIHNiZ252aXpJbnN0YW5jZVV0aWxpdGllcy5nZXRDeSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZSgpLmdldEN5KCk7XG4gIH1cblxuICByZXR1cm4gc2JnbnZpekluc3RhbmNlVXRpbGl0aWVzO1xufTtcbiJdLCJuYW1lcyI6WyJsaWJzIiwicmVxdWlyZSIsImdldExpYnMiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5zdGFuY2UiLCJzYmdudml6SW5zdGFuY2VVdGlsaXRpZXMiLCJvcHRpb25zIiwic2JnbnZpeiIsImdldEluc3RhbmNlIiwiZ2V0Q3kiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/sbgnviz-instance-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/topology-grouping-factory.js":
/*!****************************************************!*\
  !*** ./src/utilities/topology-grouping-factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isEqual = __webpack_require__(/*! lodash.isequal */ \"./node_modules/lodash.isequal/index.js\");\nmodule.exports = function () {\n  var cy, elementUtilities;\n  var groupCompoundType, metaEdgeIdentifier, lockGraphTopology, shouldApply;\n  var DEFAULT_GROUP_COMPOUND_TYPE = 'topology group';\n  var EDGE_STYLE_NAMES = ['line-color', 'width'];\n  function topologyGrouping(param, props) {\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    elementUtilities = param.elementUtilities;\n    groupCompoundType = props.groupCompoundType || DEFAULT_GROUP_COMPOUND_TYPE;\n    metaEdgeIdentifier = props.metaEdgeIdentifier;\n    lockGraphTopology = props.lockGraphTopology;\n    shouldApply = props.shouldApply || true;\n    topologyGrouping.applied = false;\n    initMetaStyleMap();\n  }\n  topologyGrouping.apply = function () {\n    if (topologyGrouping.applied || !evalOpt(shouldApply)) {\n      return;\n    }\n    var list = cy.nodes().map(function (node) {\n      return [node];\n    });\n\n    // determine node groups by their topology\n    var groups = getNodeGroups(list);\n\n    // apply grouping in cy level\n    var metaEdges = topologyGrouping.getMetaEdges();\n    var compounds = topologyGrouping.getGroupCompounds();\n    applyGrouping(groups, metaEdges, compounds);\n    topologyGrouping.applied = true;\n    if (lockGraphTopology) {\n      elementUtilities.lockGraphTopology();\n    }\n    return groups;\n  };\n  topologyGrouping.unapply = function () {\n    if (!topologyGrouping.applied) {\n      return;\n    }\n    var metaEdges = topologyGrouping.getMetaEdges();\n    metaEdges.forEach(function (edge) {\n      var toRestore = edge.data('tg-to-restore');\n      edge.remove();\n      toRestore.restore();\n      EDGE_STYLE_NAMES.forEach(function (name) {\n        var oldVal = topologyGrouping.metaStyleMap[name][edge.id()];\n        var newVal = edge.data(name);\n        if (oldVal !== newVal) {\n          toRestore.data(name, newVal);\n        }\n      });\n    });\n    initMetaStyleMap();\n    var parents = topologyGrouping.getGroupCompounds();\n    elementUtilities.changeParent(parents.children(), null);\n    parents.remove();\n    topologyGrouping.applied = false;\n    if (lockGraphTopology) {\n      elementUtilities.unlockGraphTopology();\n    }\n  };\n  topologyGrouping.getMetaEdges = function () {\n    var metaEdges = cy.edges('[' + metaEdgeIdentifier + ']');\n    return metaEdges;\n  };\n  topologyGrouping.getGroupCompounds = function () {\n    var className = groupCompoundType;\n    return cy.nodes('[class=\"' + className + '\"]');\n  };\n  topologyGrouping.clearAppliedFlag = function () {\n    topologyGrouping.applied = false;\n  };\n  topologyGrouping.setAppliedFlag = function (applied) {\n    topologyGrouping.applied = applied;\n  };\n  topologyGrouping.toggleAppliedFlag = function () {\n    topologyGrouping.applied = !topologyGrouping.applied;\n  };\n  function initMetaStyleMap() {\n    topologyGrouping.metaStyleMap = {};\n    EDGE_STYLE_NAMES.forEach(function (name) {\n      topologyGrouping.metaStyleMap[name] = {};\n    });\n  }\n  function evalOpt(opt) {\n    if (typeof opt === 'function') {\n      return opt();\n    }\n    return opt;\n  }\n  function getNodeGroups(list) {\n    if (list.length <= 1) {\n      return list;\n    }\n    var halves = getHalves(list);\n    var firstPart = getNodeGroups(halves[0]);\n    var secondPart = getNodeGroups(halves[1]);\n    // merge the halves\n    var groups = mergeGroups(firstPart, secondPart);\n    return groups;\n  }\n  function getParentOrSelf(node) {\n    var parent = node.parent();\n    return parent.size() > 0 ? parent : node;\n  }\n  function calcGroupingKey(edge) {\n    var srcId = getParentOrSelf(edge.source()).id();\n    var tgtId = getParentOrSelf(edge.target()).id();\n    var edgeType = getEdgeType(edge);\n    return [edgeType, srcId, tgtId].join('-');\n  }\n  function addToMapChain(map, key, val) {\n    if (!map[key]) {\n      map[key] = cy.collection();\n    }\n    map[key] = map[key].add(val);\n  }\n  function applyGrouping(groups, metaEdges, groupCompounds) {\n    var compounds;\n    if (groupCompounds.length > 0) {\n      compounds = groupCompounds;\n    } else {\n      groups.forEach(function (group) {\n        createGroupCompound(group);\n      });\n      compounds = topologyGrouping.getGroupCompounds();\n    }\n    var childrenEdges = compounds.children().connectedEdges();\n    var edgesMap = [];\n    childrenEdges.forEach(function (edge) {\n      var key = calcGroupingKey(edge);\n      addToMapChain(edgesMap, key, edge);\n      edge.remove();\n    });\n    if (metaEdges.length > 0) {\n      Object.keys(edgesMap).forEach(function (key) {\n        var edges = edgesMap[key];\n        var temp = edges[0];\n        var metaEdge = metaEdges.filter(function (edge) {\n          return edge.source().id() === getParentOrSelf(temp.source()).id() && edge.target().id() === getParentOrSelf(temp.target()).id();\n        })[0];\n        metaEdge.data('tg-to-restore', edges);\n        edges.remove();\n      });\n    } else {\n      Object.keys(edgesMap).forEach(function (key) {\n        createMetaEdgeFor(edgesMap[key]);\n      });\n    }\n  }\n  function createGroupCompound(group) {\n    if (group.length < 2) {\n      return;\n    }\n    var collection = cy.collection();\n    group.forEach(function (node) {\n      collection = collection.add(node);\n    });\n    elementUtilities.createCompoundForGivenNodes(collection, groupCompoundType);\n  }\n  function createMetaEdgeFor(edges) {\n    var srcId = getParentOrSelf(edges.source()).id();\n    var tgtId = getParentOrSelf(edges.target()).id();\n    var type = edges.data('class');\n    cy.remove(edges);\n    var metaEdge = elementUtilities.addEdge(srcId, tgtId, type);\n    metaEdge.data('tg-to-restore', edges);\n    metaEdge.data(metaEdgeIdentifier, true);\n    EDGE_STYLE_NAMES.forEach(function (styleName) {\n      edges.forEach(function (edge) {\n        topologyGrouping.metaStyleMap[styleName][edge.id()] = edge.data(styleName);\n      });\n      var commonVal = elementUtilities.getCommonProperty(edges, styleName, 'data');\n      if (commonVal) {\n        metaEdge.data(styleName, commonVal);\n      }\n    });\n    return metaEdge;\n  }\n  function mergeGroups(groups1, groups2) {\n    // notMergedGrs will include members of groups1 that are not merged\n    // mergedGrs will include the merged members from 2 groups\n    var notMergedGrs = [],\n      mergedGrs = [];\n    groups1.forEach(function (gr1) {\n      var merged = false;\n      mergedGrs.concat(groups2).forEach(function (gr2, index2) {\n        // if groups should be merged merge them, remove gr2 from where it\n        // comes from and push the merge result to mergedGrs\n        if (shouldMerge(gr1, gr2)) {\n          var mergedGr = gr1.concat(gr2);\n          if (index2 >= mergedGrs.length) {\n            removeAt(groups2, index2 - mergedGrs.length);\n          } else {\n            removeAt(mergedGrs, index2);\n          }\n\n          // mark as merged and break the loop\n          mergedGrs.push(mergedGr);\n          merged = true;\n          return;\n        }\n      });\n\n      // if gr1 is not merged push it to notMergedGrs\n      if (!merged) {\n        notMergedGrs.push(gr1);\n      }\n    });\n\n    // the groups that comes from groups2 but not merged are still included\n    // in groups2 add them to the result together with mergedGrs and notMergedGrs\n    return notMergedGrs.concat(mergedGrs, groups2);\n  }\n  function shouldMerge(group1, group2) {\n    // using first elements is enough to decide whether to merge\n    var node1 = group1[0];\n    var node2 = group2[0];\n    if (node1.edges().length !== node2.edges().length) {\n      return false;\n    }\n    var getUndirectedEdges = function getUndirectedEdges(node) {\n      var edges = node.connectedEdges().filter(isUndirectedEdge);\n      return edges;\n    };\n    // undirected edges of node1 and node2 respectively\n    var undir1 = getUndirectedEdges(node1);\n    var undir2 = getUndirectedEdges(node2);\n    var in1 = node1.incomers().edges().not(undir1);\n    var in2 = node2.incomers().edges().not(undir2);\n    var out1 = node1.outgoers().edges().not(undir1);\n    var out2 = node2.outgoers().edges().not(undir2);\n    return compareEdgeGroup(in1, in2, node1, node2) && compareEdgeGroup(out1, out2, node1, node2) && compareEdgeGroup(undir1, undir2, node1, node2);\n  }\n\n  // decide if 2 edge groups contains set of edges with similar content (type,\n  // source,target) relative to their nodes where gr1 are edges of node1 and gr2 are edges of\n  // node2\n  function compareEdgeGroup(gr1, gr2, node1, node2) {\n    var id1 = node1.id();\n    var id2 = node2.id();\n    var map1 = fillIdToTypeSetMap(gr1, node1);\n    var map2 = fillIdToTypeSetMap(gr2, node2);\n    if (Object.keys(map1).length !== Object.keys(map2).length) {\n      return;\n    }\n    var failed = false;\n    Object.keys(map1).forEach(function (key) {\n      // if already failed just return\n      if (failed) {\n        return;\n      }\n\n      // if key is id2 use id1 instead because comparison is relative to nodes\n      var otherKey = key == id2 ? id1 : key;\n\n      // check if the sets have the same content\n      // if check fails return false\n      if (!isEqual(map1[key], map2[otherKey])) {\n        failed = true;\n      }\n    });\n\n    // if check passes for each key return true\n    return !failed;\n  }\n  function fillIdToTypeSetMap(edgeGroup, node) {\n    var map = {};\n    var nodeId = node.id();\n    edgeGroup.forEach(function (edge) {\n      var srcId = edge.data('source');\n      var tgtId = edge.data('target');\n      var edgeId = edge.id();\n      var otherEnd = nodeId === tgtId ? srcId : tgtId;\n      function addToRelatedSet(sideStr, value) {\n        if (!map[sideStr]) {\n          map[sideStr] = new Set();\n        }\n        map[sideStr].add(value);\n      }\n      var edgeType = getEdgeType(edge);\n      addToRelatedSet(otherEnd, edgeType);\n    });\n    return map;\n  }\n  function getEdgeType(edge) {\n    return edge.data('class');\n  }\n  function isUndirectedEdge(edge) {\n    return elementUtilities.isUndirectedEdge(edge);\n  }\n\n  // get halves of a list. It is assumed that list size is at least 2.\n  function getHalves(list) {\n    var s = list.length;\n    var halfIndex = Math.floor(s / 2);\n    var firstHalf = list.slice(0, halfIndex);\n    var secondHalf = list.slice(halfIndex, s);\n    return [firstHalf, secondHalf];\n  }\n  function removeAt(arr, index) {\n    arr.splice(index, 1);\n  }\n  return topologyGrouping;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/topology-grouping-factory.js\n");

/***/ }),

/***/ "./src/utilities/ur-action-functions-extender-factory.js":
/*!***************************************************************!*\
  !*** ./src/utilities/ur-action-functions-extender-factory.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Extends sbgnviz.undoRedoActionFunctions\nvar libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nmodule.exports = function () {\n  var sbgnvizInstance, undoRedoActionFunctions, elementUtilities, cy, topologyGrouping;\n  function undoRedoActionFunctionsExtender(param) {\n    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    undoRedoActionFunctions = sbgnvizInstance.undoRedoActionFunctions;\n    elementUtilities = param.elementUtilities;\n    topologyGrouping = param.sifTopologyGrouping;\n    extend();\n  }\n\n  // Extends undoRedoActionFunctions with chise specific features\n  function extend() {\n    undoRedoActionFunctions.applySIFTopologyGrouping = function (param) {\n      var oldEles, newEles;\n      if (param.firstTime) {\n        oldEles = cy.elements();\n        if (param.apply) {\n          topologyGrouping.apply();\n        } else {\n          topologyGrouping.unapply();\n        }\n        newEles = cy.elements();\n      } else {\n        oldEles = param.oldEles;\n        newEles = param.newEles;\n        if (elementUtilities.isGraphTopologyLocked()) {\n          elementUtilities.unlockGraphTopology();\n        } else {\n          elementUtilities.lockGraphTopology();\n        }\n        oldEles.remove();\n        newEles.restore();\n        topologyGrouping.toggleAppliedFlag();\n      }\n      var result = {\n        oldEles: newEles,\n        newEles: oldEles\n      };\n      return result;\n    };\n\n    // Section Start\n    // add/remove action functions\n\n    undoRedoActionFunctions.addNode = function (param) {\n      var result;\n      if (param.firstTime) {\n        var newNode = param.newNode;\n        result = elementUtilities.addNode(newNode.x, newNode.y, newNode[\"class\"], newNode.id, newNode.parent, newNode.visibility);\n      } else {\n        result = elementUtilities.restoreEles(param);\n      }\n      return {\n        eles: result\n      };\n    };\n    undoRedoActionFunctions.addEdge = function (param) {\n      var result;\n      if (param.firstTime) {\n        var newEdge = param.newEdge;\n        result = elementUtilities.addEdge(newEdge.source, newEdge.target, newEdge[\"class\"], newEdge.id, newEdge.visibility);\n      } else {\n        result = elementUtilities.restoreEles(param);\n      }\n      return {\n        eles: result\n      };\n    };\n    undoRedoActionFunctions.addProcessWithConvenientEdges = function (param) {\n      var result;\n      if (param.firstTime) {\n        result = elementUtilities.addProcessWithConvenientEdges(param.source, param.target, param.processType);\n      } else {\n        result = elementUtilities.restoreEles(param);\n      }\n      return {\n        eles: result\n      };\n    };\n    undoRedoActionFunctions.createCompoundForGivenNodes = function (param) {\n      var result = {};\n      if (param.firstTime) {\n        // Nodes to make compound, their descendants and edges connected to them will be removed during createCompoundForGivenNodes operation\n        // (internally by eles.move() operation), so mark them as removed eles for undo operation.\n        var nodesToMakeCompound = param.nodesToMakeCompound;\n        var removedEles = nodesToMakeCompound.union(nodesToMakeCompound.descendants());\n        removedEles = removedEles.union(removedEles.connectedEdges());\n        result.removedEles = removedEles;\n        // Assume that all nodes to make compound have the same parent\n        var oldParentId = nodesToMakeCompound[0].data(\"parent\");\n        // The parent of new compound will be the old parent of the nodes to make compound\n        // New eles includes new compound and the moved eles and will be used in undo operation.\n        result.newEles = elementUtilities.createCompoundForGivenNodes(nodesToMakeCompound, param.compoundType);\n      } else {\n        result.removedEles = param.newEles.remove();\n        result.newEles = param.removedEles.restore();\n        elementUtilities.maintainPointer(result.newEles);\n      }\n      return result;\n    };\n\n    // Section End\n    // add/remove action functions\n\n    // Section Start\n    // easy creation action functions\n\n    undoRedoActionFunctions.createTemplateReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createTemplateReaction(param.templateType, param.macromoleculeList, param.complexName, param.processPosition, param.tilingPaddingVertical, param.tilingPaddingHorizontal, param.edgeLength, param.layoutParam);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createActivationReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createActivationReaction(param.proteinName, param.processPosition, param.edgeLength, param.reverse);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createTranslation = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createTranslation(param.regulatorLabel, param.outputLabel, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createTranscription = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createTranscription(param.label, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createDegradation = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createDegradation(param.macromolecule, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createComplexProteinFormation = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createComplexProteinFormation(param.proteinLabels, param.complexLabel, param.regulator, param.orientation, param.reverse);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createMultimerization = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createMultimerization(param.macromolecule, param.regulator, param.regulatorMultimer, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createConversion = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createConversion(param.macromolecule, param.regulator, param.regulatorMultimer, param.orientation, param.inputInfoboxLabels, param.outputInfoboxLabels);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createMetabolicReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createMetabolicReaction(param.inputs, param.outputs, param.reversible, param.regulator, param.regulatorMultimer, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createMetabolicCatalyticActivity = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createMetabolicCatalyticActivity(param.inputNodeList, param.outputNodeList, param.catalystName, param.catalystType, param.processPosition, param.tilingPaddingVertical, param.tilingPaddingHorizontal, param.edgeLength);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createTranscriptionReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createTranscriptionReaction(param.geneName, param.mRnaName, param.processPosition, param.edgeLength);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createTranslationReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createTranslationReaction(param.mRnaName, param.proteinName, param.processPosition, param.edgeLength);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n\n    // Section End\n    // easy creation action functions\n\n    // Section Start\n    // general action functions\n\n    undoRedoActionFunctions.getNodePositions = function () {\n      var positions = {};\n      var nodes = cy.nodes();\n      nodes.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        positions[ele.id()] = {\n          x: ele.position(\"x\"),\n          y: ele.position(\"y\")\n        };\n      });\n      return positions;\n    };\n    undoRedoActionFunctions.returnToPositions = function (positions) {\n      var currentPositions = {};\n      cy.nodes().positions(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        currentPositions[ele.id()] = {\n          x: ele.position(\"x\"),\n          y: ele.position(\"y\")\n        };\n        var pos = positions[ele.id()];\n        return {\n          x: pos.x,\n          y: pos.y\n        };\n      });\n      return currentPositions;\n    };\n    undoRedoActionFunctions.resizeNodes = function (param) {\n      var result = {\n        performOperation: true\n      };\n      var nodes = param.nodes;\n      result.sizeMap = {};\n      result.useAspectRatio = false;\n      result.preserveRelativePos = param.preserveRelativePos;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        if (node.isParent()) {\n          result.sizeMap[node.id()] = {\n            w: node.data(\"minWidth\") || 0,\n            h: node.data(\"minHeight\") || 0,\n            biasL: node.data(\"minWidthBiasLeft\") || 0,\n            biasR: node.data(\"minWidthBiasRight\") || 0,\n            biasT: node.data(\"minHeightBiasTop\") || 0,\n            biasB: node.data(\"minHeightBiasBottom\") || 0\n            // w: node.css(\"minWidth\") != 0?  node.data(\"minWidth\") : node.children().boundingBox().w,\n            //h: node.css(\"min-height\") != 0?  node.data(\"minHeight\") : node.children().boundingBox().h\n          };\n        } else {\n          result.sizeMap[node.id()] = {\n            w: node.width(),\n            h: node.height()\n          };\n        }\n      }\n      result.nodes = nodes;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        if (param.performOperation) {\n          if (param.sizeMap) {\n            /* if (param.preserveRelativePos === true) {\n              var oldWidth = node.data(\"bbox\").w;\n              var oldHeight = node.data(\"bbox\").h;\n            } */\n\n            if (node.isParent()) {\n              node.data(\"minHeight\", param.sizeMap[node.id()].h);\n              node.data(\"minWidth\", param.sizeMap[node.id()].w);\n              node.data(\"minWidthBiasLeft\", param.sizeMap[node.id()].biasL);\n              node.data(\"minWidthBiasRight\", param.sizeMap[node.id()].biasR);\n              node.data(\"minHeightBiasTop\", param.sizeMap[node.id()].biasT);\n              node.data(\"minHeightBiasBottom\", param.sizeMap[node.id()].biasB);\n            } else {\n              node.data(\"bbox\").w = param.sizeMap[node.id()].w;\n              node.data(\"bbox\").h = param.sizeMap[node.id()].h;\n            }\n\n            /* if (param.preserveRelativePos === true) {\n              var statesandinfos = node.data('statesandinfos');\n              var topBottom = statesandinfos.filter(box => (box.anchorSide === \"top\" || box.anchorSide === \"bottom\"));\n              var rightLeft = statesandinfos.filter(box => (box.anchorSide === \"right\" || box.anchorSide === \"left\"));\n               topBottom.forEach(function(box){\n                if (box.bbox.x < 0) {\n                  box.bbox.x = 0;\n                }\n                else if (box.bbox.x > oldWidth) {\n                  box.bbox.x = oldWidth;\n                }\n                box.bbox.x = node.data(\"bbox\").w * box.bbox.x / oldWidth;\n              });\n               rightLeft.forEach(function(box){\n                if (box.bbox.y < 0) {\n                  box.bbox.y = 0;\n                }\n                else if (box.bbox.y > oldHeight) {\n                  box.bbox.y = oldHeight;\n                }\n                box.bbox.y = node.data(\"bbox\").h * box.bbox.y / oldHeight;\n              });\n            } */\n          } else {\n            elementUtilities.resizeNodes(param.nodes, param.width, param.height, param.useAspectRatio, param.preserveRelativePos);\n          }\n        }\n      }\n      cy.style().update();\n      return result;\n    };\n    undoRedoActionFunctions.changeNodeLabel = function (param) {\n      var result = {};\n      var nodes = param.nodes;\n      result.nodes = nodes;\n      result.label = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        result.label[node.id()] = node._private.data.label;\n      }\n      if (param.firstTime) {\n        nodes.data('label', param.label);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          node._private.data.label = param.label[node.id()];\n        }\n      }\n      return result;\n    };\n    undoRedoActionFunctions.updateInfoboxStyle = function (param) {\n      var result = {};\n      var style = param.node.data('statesandinfos')[param.index].style;\n      result.newProps = $.extend({}, style);\n      result.node = param.node;\n      result.index = param.index;\n      elementUtilities.updateInfoboxStyle(param.node, param.index, param.newProps);\n      return result;\n    };\n    undoRedoActionFunctions.updateInfoboxObj = function (param) {\n      var result = {};\n      var obj = param.node.data('statesandinfos')[param.index];\n      result.newProps = $.extend({}, obj);\n      result.node = param.node;\n      result.index = param.index;\n      elementUtilities.updateInfoboxObj(param.node, param.index, param.newProps);\n      return result;\n    };\n    undoRedoActionFunctions.changeData = function (param) {\n      var result = {};\n      var eles = param.eles;\n      result.name = param.name;\n      result.valueMap = {};\n      result.eles = eles;\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        result.valueMap[ele.id()] = ele.data(param.name);\n      }\n      elementUtilities.changeData(param.eles, param.name, param.valueMap);\n      return result;\n    };\n    undoRedoActionFunctions.updateSetField = function (param) {\n      var updates = elementUtilities.updateSetField(param.ele, param.fieldName, param.toDelete, param.toAdd, param.callback);\n      var result = {\n        ele: param.ele,\n        fieldName: param.fieldName,\n        callback: param.callback,\n        toDelete: updates.added,\n        toAdd: updates.deleted\n      };\n      return result;\n    };\n    undoRedoActionFunctions.changeCss = function (param) {\n      var result = {};\n      var eles = param.eles;\n      result.name = param.name;\n      result.valueMap = {};\n      result.eles = eles;\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        result.valueMap[ele.id()] = ele.css(param.name);\n      }\n      elementUtilities.changeCss(param.eles, param.name, param.valueMap);\n      return result;\n    };\n    undoRedoActionFunctions.changeFontProperties = function (param) {\n      var result = {};\n      var eles = param.eles;\n      result.data = {};\n      result.eles = eles;\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        result.data[ele.id()] = {};\n        var data = param.firstTime ? param.data : param.data[ele.id()];\n        for (var prop in data) {\n          result.data[ele.id()][prop] = ele.data(prop);\n        }\n      }\n      if (param.firstTime) {\n        elementUtilities.changeFontProperties(eles, data);\n      } else {\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          elementUtilities.changeFontProperties(ele, data);\n        }\n      }\n      return result;\n    };\n\n    /*\n     * Show eles and perform layout.\n     */\n    undoRedoActionFunctions.showAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      if (param.firstTime) {\n        result.eles = elementUtilities.showAndPerformLayout(param.eles, param.layoutparam);\n      } else {\n        result.eles = cy.viewUtilities().show(eles); // Show given eles\n        undoRedoActionFunctions.returnToPositions(param.positions);\n      }\n      return result;\n    };\n    undoRedoActionFunctions.undoShowAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      result.eles = cy.viewUtilities().hide(eles); // Hide previously unhidden eles;\n\n      undoRedoActionFunctions.returnToPositions(param.positions);\n      return result;\n    };\n\n    /*\n     * Hide eles and perform layout.\n     */\n    undoRedoActionFunctions.hideAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      if (param.firstTime) {\n        result.eles = elementUtilities.hideAndPerformLayout(param.eles, param.layoutparam);\n      } else {\n        result.eles = cy.viewUtilities().hide(eles); // Hide given eles\n        undoRedoActionFunctions.returnToPositions(param.positions);\n      }\n      return result;\n    };\n    undoRedoActionFunctions.undoHideAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      result.eles = cy.viewUtilities().show(eles); // Show previously hidden eles\n\n      undoRedoActionFunctions.returnToPositions(param.positions);\n      return result;\n    };\n\n    /*\n     * Delete eles and perform layout.\n     */\n    undoRedoActionFunctions.deleteAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      if (param.firstTime) {\n        result.eles = elementUtilities.deleteAndPerformLayout(param.eles, param.layoutparam);\n      } else {\n        result.eles = eles.remove();\n        undoRedoActionFunctions.returnToPositions(param.positions);\n      }\n      return result;\n    };\n    undoRedoActionFunctions.undoDeleteAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      result.eles = elementUtilities.restoreEles(eles);\n      undoRedoActionFunctions.returnToPositions(param.positions);\n      return result;\n    };\n\n    // Section End\n    // general action functions\n\n    // Section Start\n    // sbgn action functions\n\n    undoRedoActionFunctions.changeStateOrInfoBox = function (param) {\n      var result = {};\n      result.type = param.type;\n      result.nodes = param.nodes;\n      result.index = param.index;\n      var data = param.data;\n      var tempData = elementUtilities.saveUnits(param.nodes);\n      result.value = elementUtilities.changeStateOrInfoBox(param.nodes, param.index, param.value, param.type);\n      /* var locations = elementUtilities.checkFit(param.nodes);\n      if (locations !== undefined && locations.length > 0) {\n        elementUtilities.fitUnits(param.nodes, locations);\n      } */\n      if (data !== undefined) {\n        elementUtilities.restoreUnits(param.nodes, data);\n      }\n      cy.forceRender();\n      result.data = tempData;\n      return result;\n    };\n    undoRedoActionFunctions.addStateOrInfoBox = function (param) {\n      var obj = param.obj;\n      var nodes = param.nodes;\n      var data = param.data;\n      var tempData = elementUtilities.saveUnits(nodes);\n      var locationObj = elementUtilities.addStateOrInfoBox(nodes, obj);\n      /*  var locations = elementUtilities.checkFit(nodes);\n       if (locations !== undefined && locations.length > 0) {\n         elementUtilities.fitUnits(nodes, locations);\n       } */\n      if (data !== undefined) {\n        elementUtilities.restoreUnits(nodes, data);\n      }\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        locationObj: locationObj,\n        obj: obj,\n        data: tempData\n      };\n      return result;\n    };\n    undoRedoActionFunctions.removeStateOrInfoBox = function (param) {\n      var locationObj = param.locationObj;\n      var nodes = param.nodes;\n      var data = param.data;\n      var tempData = elementUtilities.saveUnits(nodes);\n      var obj = elementUtilities.removeStateOrInfoBox(nodes, locationObj);\n      if (data !== undefined) {\n        elementUtilities.restoreUnits(nodes, data);\n      }\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        obj: obj,\n        data: tempData\n      };\n      return result;\n    };\n    undoRedoActionFunctions.fitUnits = function (param) {\n      var node = param.node;\n      var locations = param.locations;\n      var obj = elementUtilities.fitUnits(node, locations);\n      cy.forceRender();\n      var result = {\n        node: node,\n        obj: obj,\n        locations: locations\n      };\n      return result;\n    };\n    undoRedoActionFunctions.restoreUnits = function (param) {\n      var node = param.node;\n      var locations = param.locations;\n      var obj = param.obj;\n      var index = 0;\n      node.data('statesandinfos').forEach(function (ele) {\n        var box = obj[index++];\n        ele.bbox.x = box.x;\n        ele.bbox.y = box.y;\n        var oldSide = ele.anchorSide;\n        ele.anchorSide = box.anchorSide;\n        elementUtilities.modifyUnits(node, ele, oldSide);\n      });\n      cy.forceRender();\n      var result = {\n        node: node,\n        locations: locations\n      };\n      return result;\n    };\n    undoRedoActionFunctions.setMultimerStatus = function (param) {\n      var firstTime = param.firstTime;\n      var nodes = param.nodes;\n      var status = param.status;\n      var resultStatus = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var isMultimer = node.data('class').endsWith(' multimer');\n        resultStatus[node.id()] = isMultimer;\n      }\n\n      // If this is the first time change the status of all nodes at once.\n      // If not change status of each seperately to the values mapped to their id.\n      if (firstTime) {\n        elementUtilities.setMultimerStatus(nodes, status);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          elementUtilities.setMultimerStatus(node, status[node.id()]);\n        }\n      }\n\n      //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-multimer').attr(\"checked\", !$('#inspector-is-multimer').attr(\"checked\"));\n      //  }\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n    undoRedoActionFunctions.setActiveStatus = function (param) {\n      var firstTime = param.firstTime;\n      var nodes = param.nodes;\n      var status = param.status;\n      var resultStatus = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var isActive = node.data('class').startsWith('active ');\n        resultStatus[node.id()] = isActive;\n      }\n\n      // If this is the first time change the status of all nodes at once.\n      // If not change status of each seperately to the values mapped to their id.\n      if (firstTime) {\n        elementUtilities.setActiveStatus(nodes, status);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          elementUtilities.setActiveStatus(node, status[node.id()]);\n        }\n      }\n\n      //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-multimer').attr(\"checked\", !$('#inspector-is-multimer').attr(\"checked\"));\n      //  }\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n    undoRedoActionFunctions.setHypotheticalStatus = function (param) {\n      var firstTime = param.firstTime;\n      var nodes = param.nodes;\n      var status = param.status;\n      var resultStatus = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var isHypothetical = node.data('class').includes('hypothetical');\n        resultStatus[node.id()] = isHypothetical;\n      }\n\n      // If this is the first time change the status of all nodes at once.\n      // If not change status of each seperately to the values mapped to their id.\n      if (firstTime) {\n        elementUtilities.setHypotheticalStatus(nodes, status);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          elementUtilities.setHypotheticalStatus(node, status[node.id()]);\n          //elementUtilities.setHypothteticalStatus\n        }\n      }\n\n      //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-multimer').attr(\"checked\", !$('#inspector-is-multimer').attr(\"checked\"));\n      //  }\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n    undoRedoActionFunctions.setCloneMarkerStatus = function (param) {\n      var nodes = param.nodes;\n      var status = param.status;\n      var firstTime = param.firstTime;\n      var resultStatus = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        resultStatus[node.id()] = node.data('clonemarker');\n        var currentStatus = firstTime ? status : status[node.id()];\n        elementUtilities.setCloneMarkerStatus(node, currentStatus);\n      }\n\n      //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-clone-marker').attr(\"checked\", !$('#inspector-is-clone-marker').attr(\"checked\"));\n      //  }\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n\n    // param: {class: sbgnclass, name: propertyName, value: value}\n    undoRedoActionFunctions.setDefaultProperty = function (param) {\n      var sbgnclass = param[\"class\"];\n      var name = param.name;\n      var value = param.value;\n      var classDefaults = elementUtilities.getDefaultProperties(sbgnclass);\n      var result = {\n        \"class\": sbgnclass,\n        name: name,\n        value: classDefaults.hasOwnProperty(name) ? classDefaults[name] : undefined\n      };\n      var propMap = {};\n      propMap[name] = value;\n      elementUtilities.setDefaultProperties(sbgnclass, propMap);\n      return result;\n    };\n    undoRedoActionFunctions.addBackgroundImage = function (param) {\n      var bgObj = param.bgObj;\n      var nodes = param.nodes;\n      var updateInfo = param.updateInfo;\n      var promptInvalidImage = param.promptInvalidImage;\n      var validateURL = param.validateURL;\n      elementUtilities.addBackgroundImage(nodes, bgObj, updateInfo, promptInvalidImage, validateURL);\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        bgObj: bgObj,\n        updateInfo: updateInfo,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n      return result;\n    };\n    undoRedoActionFunctions.removeBackgroundImage = function (param) {\n      var bgObj = param.bgObj;\n      var nodes = param.nodes;\n      elementUtilities.removeBackgroundImage(nodes, bgObj);\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        bgObj: bgObj\n      };\n      return result;\n    };\n    undoRedoActionFunctions.updateBackgroundImage = function (param) {\n      var bgObj = param.bgObj;\n      var nodes = param.nodes;\n      var oldBgObj = elementUtilities.updateBackgroundImage(nodes, bgObj);\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        bgObj: oldBgObj\n      };\n      return result;\n    };\n    undoRedoActionFunctions.changeBackgroundImage = function (param) {\n      var oldImg = param.oldImg;\n      var newImg = param.newImg;\n      var nodes = param.nodes;\n      var firstTime = param.firstTime;\n      var updateInfo = param.updateInfo;\n      var promptInvalidImage = param.promptInvalidImage;\n      var validateURL = param.validateURL;\n      var result = elementUtilities.changeBackgroundImage(nodes, oldImg, newImg, firstTime, updateInfo, promptInvalidImage, validateURL);\n      cy.forceRender();\n      return result;\n    };\n\n    // Section End\n    // sbgn action functions\n    undoRedoActionFunctions.convertIntoReversibleReaction = function (param) {\n      var collection = cy.collection();\n      var mapType = elementUtilities.getMapType();\n      elementUtilities.setMapType(param.mapType);\n      $('#map-type').val(param.mapType);\n      param.collection.forEach(function (edge) {\n        var sourceNode = edge._private.data.source;\n        var targetNode = edge._private.data.target;\n        edge.move({\n          source: targetNode,\n          target: sourceNode\n        });\n        var convertedEdge = cy.getElementById(edge.id());\n        if (convertedEdge.data(\"cyedgebendeditingDistances\")) {\n          var distance = convertedEdge.data(\"cyedgebendeditingDistances\");\n          distance = distance.map(function (element) {\n            return -1 * element;\n          });\n          convertedEdge.data(\"cyedgebendeditingDistances\", distance.reverse());\n          var weight = convertedEdge.data(\"cyedgebendeditingWeights\");\n          weight = weight.map(function (element) {\n            return 1 - element;\n          });\n          convertedEdge.data(\"cyedgebendeditingWeights\", weight.reverse());\n        }\n        if (convertedEdge.data(\"cyedgecontroleditingDistances\")) {\n          var _distance = convertedEdge.data(\"cyedgecontroleditingDistances\");\n          _distance = _distance.map(function (element) {\n            return -1 * element;\n          });\n          convertedEdge.data(\"cyedgecontroleditingDistances\", _distance.reverse());\n          var _weight = convertedEdge.data(\"cyedgecontroleditingWeigths\");\n          _weight = _weight.map(function (element) {\n            return 1 - element;\n          });\n          convertedEdge.data(\"cyedgecontroleditingWeigths\", _weight.reverse());\n        }\n        if (convertedEdge._private.data[\"class\"] === \"consumption\") {\n          convertedEdge._private.data[\"class\"] = \"production\";\n          convertedEdge._private.data.portsource = targetNode + \".1\";\n          convertedEdge._private.data.porttarget = sourceNode;\n        } else if (convertedEdge._private.data[\"class\"] === \"production\") {\n          convertedEdge._private.data[\"class\"] = \"consumption\";\n          convertedEdge._private.data.portsource = targetNode;\n          convertedEdge._private.data.porttarget = sourceNode + \".1\";\n        }\n        collection = collection.add(convertedEdge);\n        cy.style().update();\n      });\n      var result = {\n        collection: collection,\n        mapType: mapType,\n        processId: param.processId\n      };\n      return result;\n    };\n    undoRedoActionFunctions.moveEdge = function (param) {\n      var result = {};\n      var edge = param.edge;\n      result.name = param.name;\n      result.source = edge.source().id();\n      result.target = edge.target().id();\n      result.portsource = edge.data(\"portsource\");\n      result.porttarget = edge.data(\"porttarget\");\n      elementUtilities.changeData(edge, 'source', param.source);\n      elementUtilities.changeData(edge, 'target', param.target);\n      elementUtilities.changeData(edge, 'portsource', param.portsource);\n      elementUtilities.changeData(edge, 'porttarget', param.porttarget);\n      edge = edge.move({\n        target: param.target,\n        source: param.source\n      });\n      result.edge = edge;\n      return result;\n    };\n    undoRedoActionFunctions.fixError = function (param) {\n      var errorCode = param.errorCode;\n      var result = {};\n      result.errorCode = errorCode;\n      if (errorCode == \"pd10101\" || errorCode == 'pd10102') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10103\" || errorCode == 'pd10107') {\n        param.newNodes.forEach(function (newNode) {\n          elementUtilities.addNode(newNode.x, newNode.y, newNode[\"class\"], newNode.id, undefined);\n        });\n        param.newEdges.forEach(function (newEdge) {\n          elementUtilities.addEdge(newEdge.source, newEdge.target, newEdge[\"class\"]);\n        });\n        param.oldEdges.forEach(function (oldEdge) {\n          cy.elements().unselect();\n          //return \n          oldEdge.remove();\n        });\n        param.node.remove();\n        return param;\n      } else if (errorCode == \"pd10105\" || errorCode == 'pd10106') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10140\") {\n        param.node.remove();\n        return param;\n      } else if (errorCode == \"pd10104\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        param.nodes.forEach(function (node) {\n          node.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10108\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        param.nodes.forEach(function (node) {\n          node.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10111\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10126\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        param.nodes.forEach(function (node) {\n          node.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10109\" || errorCode == \"pd10124\") {\n        result.newSource = param.edge.data().source;\n        result.newTarget = param.edge.data().target;\n        result.portsource = param.edge.data().portsource;\n        var clonedEdge = param.edge.clone();\n        var edgeParams = {\n          \"class\": clonedEdge.data()[\"class\"],\n          language: clonedEdge.data().language\n        };\n        clonedEdge.data().source = param.newSource;\n        clonedEdge.data().target = param.newTarget;\n        cy.remove(param.edge);\n        result.edge = elementUtilities.addEdge(param.newSource, param.newTarget, edgeParams, clonedEdge.data().id);\n        return result;\n      } else if (errorCode == \"pd10112\") {\n        param.callback = elementUtilities.maintainPointer;\n        // If this is first time we should move the node to its new parent and relocate it by given posDiff params\n        // else we should remove the moved eles and restore the eles to restore\n        if (param.firstTime) {\n          var newParentId = param.parentData == undefined ? null : param.parentData;\n          // These eles includes the nodes and their connected edges and will be removed in nodes.move().\n          // They should be restored in undo\n          var withDescendant = param.nodes.union(param.nodes.descendants());\n          result.elesToRestore = withDescendant.union(withDescendant.connectedEdges());\n          // These are the eles created by nodes.move(), they should be removed in undo.\n          result.movedEles = param.nodes.move({\n            \"parent\": newParentId\n          });\n          var posDiff = {\n            x: param.posDiffX,\n            y: param.posDiffY\n          };\n          elementUtilities.moveNodes(posDiff, result.movedEles);\n        } else {\n          result.elesToRestore = param.movedEles.remove();\n          result.movedEles = param.elesToRestore.restore();\n        }\n        if (param.callback) {\n          result.callback = param.callback; // keep the provided callback so it can be reused after undo/redo\n          param.callback(result.movedEles); // apply the callback on newly created elements\n        }\n        return result;\n      } else if (errorCode == \"pd10125\") {\n        result.edge = param.edge.remove();\n        result.newEdge = {};\n        var edgeclass = param.newEdge.edgeParams[\"class\"] ? param.newEdge.edgeParams[\"class\"] : param.newEdge.edgeParams;\n        var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(param.newEdge.source), cy.getElementById(param.newEdge.target));\n        if (validation === 'reverse') {\n          var temp = param.newEdge.source;\n          param.newEdge.source = param.newEdge.target;\n          param.newEdge.target = temp;\n        }\n        result.newEdge.id = elementUtilities.addEdge(param.newEdge.source, param.newEdge.target, param.newEdge.edgeParams).id();\n        result.newEdge.source = param.newEdge.source;\n        result.newEdge.target = param.newEdge.target;\n        result.newEdge.edgeParams = param.newEdge.edgeParams;\n        return result;\n      } else if (errorCode == \"pd10142\") {\n        result.edge = param.edge.remove();\n        result.newEdge = {};\n        var edgeclass = param.newEdge.edgeParams[\"class\"] ? param.newEdge.edgeParams[\"class\"] : param.newEdge.edgeParams;\n        var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(param.newEdge.source), cy.getElementById(param.newEdge.target));\n        if (validation === 'reverse') {\n          var temp = param.newEdge.source;\n          param.newEdge.source = param.newEdge.target;\n          param.newEdge.target = temp;\n        }\n        result.newEdge.id = elementUtilities.addEdge(param.newEdge.source, param.newEdge.target, param.newEdge.edgeParams).id();\n        result.newEdge.source = param.newEdge.source;\n        result.newEdge.target = param.newEdge.target;\n        result.newEdge.edgeParams = param.newEdge.edgeParams;\n        return result;\n      } else {\n        result.newSource = param.edge.source().id();\n        result.newTarget = param.edge.target().id();\n        result.porttarget = param.edge.data(\"porttarget\");\n        result.edge = param.edge.move({\n          target: param.newTarget,\n          source: param.newSource\n        });\n        elementUtilities.changeData(result.edge, 'porttarget', param.porttarget);\n        return result;\n      }\n    };\n    undoRedoActionFunctions.unfixError = function (param) {\n      var errorCode = param.errorCode;\n      var result = {};\n      result.errorCode = errorCode;\n      if (errorCode == \"pd10101\" || errorCode == 'pd10102') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10103\" || errorCode == 'pd10107') {\n        param.newNodes.forEach(function (newNode) {\n          cy.remove(cy.$('#' + newNode.id));\n        });\n        param.node.restore();\n        param.oldEdges.forEach(function (oldEdge) {\n          oldEdge.restore();\n        });\n        cy.animate({\n          duration: 100,\n          easing: 'ease',\n          fit: {\n            eles: {},\n            padding: 20\n          },\n          complete: function complete() {}\n        });\n        return param;\n      } else if (errorCode == \"pd10105\" || errorCode == 'pd10106') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10140\") {\n        param.node.restore();\n        cy.animate({\n          duration: 100,\n          easing: 'ease',\n          fit: {\n            eles: {},\n            padding: 20\n          },\n          complete: function complete() {}\n        });\n        return param;\n      } else if (errorCode == \"pd10104\") {\n        param.nodes.forEach(function (node) {\n          node.restore();\n        });\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10108\") {\n        param.nodes.forEach(function (node) {\n          node.restore();\n        });\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10111\") {\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10126\") {\n        param.nodes.forEach(function (node) {\n          node.restore();\n        });\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10109\" || errorCode == \"pd10124\") {\n        result.newSource = param.edge.source().id();\n        result.newTarget = param.edge.target().id();\n        result.portsource = param.portsource;\n        result.edge = param.edge.move({\n          target: param.newTarget,\n          source: param.newSource\n        });\n        elementUtilities.changeData(result.edge, 'portsource', param.portsource);\n        return result;\n      } else if (errorCode == \"pd10112\") {\n        // If this is first time we should move the node to its new parent and relocate it by given posDiff params\n        // else we should remove the moved eles and restore the eles to restore\n        if (param.firstTime) {\n          var newParentId = param.parentData == undefined ? null : param.parentData;\n          // These eles includes the nodes and their connected edges and will be removed in nodes.move().\n          // They should be restored in undo\n          var withDescendant = param.nodes.union(param.nodes.descendants());\n          result.elesToRestore = withDescendant.union(withDescendant.connectedEdges());\n          // These are the eles created by nodes.move(), they should be removed in undo.\n          result.movedEles = param.nodes.move({\n            \"parent\": newParentId\n          });\n          var posDiff = {\n            x: param.posDiffX,\n            y: param.posDiffY\n          };\n          elementUtilities.moveNodes(posDiff, result.movedEles);\n        } else {\n          result.elesToRestore = param.movedEles.remove();\n          result.movedEles = param.elesToRestore.restore();\n        }\n        if (param.callback) {\n          result.callback = param.callback; // keep the provided callback so it can be reused after undo/redo\n          param.callback(result.movedEles); // apply the callback on newly created elements\n        }\n        return result;\n      } else if (errorCode == \"pd10125\") {\n        cy.$('#' + param.newEdge.id).remove();\n        param.edge = param.edge.restore();\n        return param;\n      } else if (errorCode == \"pd10142\") {\n        cy.$('#' + param.newEdge.id).remove();\n        param.edge = param.edge.restore();\n        return param;\n      } else {\n        result.newSource = param.edge.source().id();\n        result.newTarget = param.edge.target().id();\n        result.porttarget = param.edge.data(\"porttarget\");\n        result.edge = param.edge.move({\n          target: param.newTarget,\n          source: param.newSource\n        });\n        elementUtilities.changeData(result.edge, 'porttarget', param.porttarget);\n        return result;\n      }\n    };\n    undoRedoActionFunctions.cloneHighDegreeNode = function (node) {\n      var result = {};\n      var oldX = node.position().x;\n      var oldY = node.position().y;\n      var claculateNewClonePosition = function claculateNewClonePosition(sourceEndPointX, sourceEndPointY, targetEndPointX, targetEndPointY, desiredDistance, direction) {\n        var distance = Math.sqrt(Math.pow(targetEndPointY - sourceEndPointY, 2) + Math.pow(targetEndPointX - sourceEndPointX, 2));\n        var ratio = desiredDistance / distance;\n        var result = {};\n        if (direction == \"source\") {\n          result.cx = (1 - ratio) * sourceEndPointX + ratio * targetEndPointX;\n          result.cy = (1 - ratio) * sourceEndPointY + ratio * targetEndPointY;\n        } else {\n          result.cx = (1 - ratio) * targetEndPointX + ratio * sourceEndPointX;\n          result.cy = (1 - ratio) * targetEndPointY + ratio * sourceEndPointY;\n        }\n        return result;\n      };\n      var edges = node.connectedEdges();\n      var desiredDistance = (node.height() > node.width() ? node.height() : node.width()) * 0.1;\n      for (var i = 1; i < edges.length; i++) {\n        var edge = edges[i];\n        var index = i;\n        var edgeClone = edge.clone();\n        var startPosition = edge.source().id() == node.id() ? \"source\" : \"target\";\n        var newPosition = claculateNewClonePosition(edge.sourceEndpoint().x, edge.sourceEndpoint().y, edge.targetEndpoint().x, edge.targetEndpoint().y, desiredDistance, startPosition);\n        var newNodeId = node.id() + 'clone-' + index;\n        //edgeClone.data().id = edgeClone.data().id+ \"-\"+newNodeId;\n        if (edge.source().id() == node.id()) {\n          edgeClone.data().source = newNodeId;\n          edgeClone.data().portsource = newNodeId;\n        } else {\n          edgeClone.data().target = newNodeId;\n          edgeClone.data().porttarget = newNodeId;\n        }\n        var newNode = node.clone();\n        newNode.data().id = newNodeId;\n        cy.add(newNode);\n        edge.remove();\n        cy.add(edgeClone);\n        newNode.position({\n          x: newPosition.cx,\n          y: newPosition.cy\n        });\n        elementUtilities.setCloneMarkerStatus(newNode, true);\n      }\n      var newPosition = claculateNewClonePosition(edges[0].sourceEndpoint().x, edges[0].sourceEndpoint().y, edges[0].targetEndpoint().x, edges[0].targetEndpoint().y, desiredDistance, edges[0].source().id() == node.id() ? \"source\" : \"target\");\n      var cloneEdge = edges[0].clone();\n      //cloneEdge.data().id = cloneEdge.data().id+ \"-\"+node.id()+'clone-0';\n\n      edges[0].remove();\n      cy.add(cloneEdge);\n      elementUtilities.setCloneMarkerStatus(node, true);\n      node.position({\n        x: newPosition.cx,\n        y: newPosition.cy\n      });\n      result.oldX = oldX;\n      result.oldY = oldY;\n      result.node = node;\n      result.numberOfEdges = edges.length;\n      return result;\n    };\n    undoRedoActionFunctions.unCloneHighDegreeNode = function (param) {\n      var node = param.node;\n      elementUtilities.setCloneMarkerStatus(node, false);\n      node.position({\n        x: param.oldX,\n        y: param.oldY\n      });\n      for (var i = 1; i < param.numberOfEdges; i++) {\n        var cloneId = node.id() + 'clone-' + i;\n        var clone = cy.$(\"#\" + cloneId);\n        var cloneEdge = clone.connectedEdges()[0];\n        var edge = cloneEdge.clone();\n        if (edge.data().source == cloneId) {\n          edge.data().source = node.id();\n          edge.data().portsource = node.id();\n        } else {\n          edge.data().target = node.id();\n          edge.data().porttarget = node.id();\n        }\n        cloneEdge.remove();\n        clone.remove();\n        cy.add(edge);\n      }\n      return node;\n    };\n    undoRedoActionFunctions.changeMapType = function (param) {\n      var result = {};\n      var currentMapType = elementUtilities.getMapType();\n      elementUtilities.setMapType(param.mapType);\n      result.mapType = currentMapType;\n      result.callback = param.callback;\n      param.callback();\n      return result;\n    };\n  }\n  return undoRedoActionFunctionsExtender;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3VyLWFjdGlvbi1mdW5jdGlvbnMtZXh0ZW5kZXItZmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLElBQUlBLElBQUksR0FBR0Msd0ZBQWtDLENBQUMsQ0FBQztBQUUvQ0UsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBWTtFQUUzQixJQUFJQyxlQUFlLEVBQUVDLHVCQUF1QixFQUFFQyxnQkFBZ0IsRUFBRUMsRUFBRSxFQUFFQyxnQkFBZ0I7RUFFcEYsU0FBU0MsK0JBQStCQSxDQUFFQyxLQUFLLEVBQUU7SUFFL0NOLGVBQWUsR0FBR00sS0FBSyxDQUFDQyx3QkFBd0IsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7SUFDOURMLEVBQUUsR0FBR0csS0FBSyxDQUFDQyx3QkFBd0IsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7SUFDM0NSLHVCQUF1QixHQUFHRCxlQUFlLENBQUNDLHVCQUF1QjtJQUNqRUMsZ0JBQWdCLEdBQUdJLEtBQUssQ0FBQ0osZ0JBQWdCO0lBQ3pDRSxnQkFBZ0IsR0FBR0UsS0FBSyxDQUFDSSxtQkFBbUI7SUFFNUNDLE1BQU0sQ0FBQyxDQUFDO0VBQ1Y7O0VBRUE7RUFDQSxTQUFTQSxNQUFNQSxDQUFBLEVBQUk7SUFFakJWLHVCQUF1QixDQUFDVyx3QkFBd0IsR0FBRyxVQUFTTixLQUFLLEVBQUU7TUFDakUsSUFBSU8sT0FBTyxFQUFFQyxPQUFPO01BQ3BCLElBQUtSLEtBQUssQ0FBQ1MsU0FBUyxFQUFHO1FBQ3JCRixPQUFPLEdBQUdWLEVBQUUsQ0FBQ2EsUUFBUSxDQUFDLENBQUM7UUFFdkIsSUFBSVYsS0FBSyxDQUFDVyxLQUFLLEVBQUU7VUFDZmIsZ0JBQWdCLENBQUNhLEtBQUssQ0FBQyxDQUFDO1FBQzFCLENBQUMsTUFDSTtVQUNIYixnQkFBZ0IsQ0FBQ2MsT0FBTyxDQUFDLENBQUM7UUFDNUI7UUFFQUosT0FBTyxHQUFHWCxFQUFFLENBQUNhLFFBQVEsQ0FBQyxDQUFDO01BQ3pCLENBQUMsTUFDSTtRQUNISCxP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TUFDMUN4TCxNQUFNLENBQUN3TCxPQUFPLEdBQUc4RSxjQUFjO01BQy9CdFEsTUFBTSxDQUFDbUgsUUFBUSxHQUFHdEksS0FBSyxDQUFDc0ksUUFBUTtNQUNoQ3RJLEtBQUssQ0FBQ3NJLFFBQVEsQ0FBQyxDQUFDO01BQ2hCLE9BQU9uSCxNQUFNO0lBQ2YsQ0FBQztFQUVEO0VBRUEsT0FBT3BCLCtCQUErQjtBQUN4QyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hpc2UvLi9zcmMvdXRpbGl0aWVzL3VyLWFjdGlvbi1mdW5jdGlvbnMtZXh0ZW5kZXItZmFjdG9yeS5qcz8zYjU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEV4dGVuZHMgc2JnbnZpei51bmRvUmVkb0FjdGlvbkZ1bmN0aW9uc1xudmFyIGxpYnMgPSByZXF1aXJlKCcuL2xpYi11dGlsaXRpZXMnKS5nZXRMaWJzKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gIHZhciBzYmdudml6SW5zdGFuY2UsIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLCBlbGVtZW50VXRpbGl0aWVzLCBjeSwgdG9wb2xvZ3lHcm91cGluZztcblxuICBmdW5jdGlvbiB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9uc0V4dGVuZGVyIChwYXJhbSkge1xuXG4gICAgc2JnbnZpekluc3RhbmNlID0gcGFyYW0uc2JnbnZpekluc3RhbmNlVXRpbGl0aWVzLmdldEluc3RhbmNlKCk7XG4gICAgY3kgPSBwYXJhbS5zYmdudml6SW5zdGFuY2VVdGlsaXRpZXMuZ2V0Q3koKTtcbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucyA9IHNiZ252aXpJbnN0YW5jZS51bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucztcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcbiAgICB0b3BvbG9neUdyb3VwaW5nID0gcGFyYW0uc2lmVG9wb2xvZ3lHcm91cGluZztcblxuICAgIGV4dGVuZCgpO1xuICB9XG5cbiAgLy8gRXh0ZW5kcyB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucyB3aXRoIGNoaXNlIHNwZWNpZmljIGZlYXR1cmVzXG4gIGZ1bmN0aW9uIGV4dGVuZCAoKSB7XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5hcHBseVNJRlRvcG9sb2d5R3JvdXBpbmcgPSBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgdmFyIG9sZEVsZXMsIG5ld0VsZXM7XG4gICAgICBpZiAoIHBhcmFtLmZpcnN0VGltZSApIHtcbiAgICAgICAgb2xkRWxlcyA9IGN5LmVsZW1lbnRzKCk7XG5cbiAgICAgICAgaWYgKHBhcmFtLmFwcGx5KSB7XG4gICAgICAgICAgdG9wb2xvZ3lHcm91cGluZy5hcHBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRvcG9sb2d5R3JvdXBpbmcudW5hcHBseSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3RWxlcyA9IGN5LmVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgb2xkRWxlcyA9IHBhcmFtLm9sZEVsZXM7XG4gICAgICAgIG5ld0VsZXMgPSBwYXJhbS5uZXdFbGVzO1xuXG4gICAgICAgIGlmICggZWxlbWVudFV0aWxpdGllcy5pc0dyYXBoVG9wb2xvZ3lMb2NrZWQoKSApIHtcbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnVubG9ja0dyYXBoVG9wb2xvZ3koKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmxvY2tHcmFwaFRvcG9sb2d5KCk7XG4gICAgICAgIH1cblxuICAgICAgICBvbGRFbGVzLnJlbW92ZSgpO1xuICAgICAgICBuZXdFbGVzLnJlc3RvcmUoKTtcblxuICAgICAgICB0b3BvbG9neUdyb3VwaW5nLnRvZ2dsZUFwcGxpZWRGbGFnKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSB7IG9sZEVsZXM6IG5ld0VsZXMsIG5ld0VsZXM6IG9sZEVsZXMgfTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8vIFNlY3Rpb24gU3RhcnRcbiAgICAvLyBhZGQvcmVtb3ZlIGFjdGlvbiBmdW5jdGlvbnNcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmFkZE5vZGUgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAocGFyYW0uZmlyc3RUaW1lKSB7XG4gICAgICAgIHZhciBuZXdOb2RlID0gcGFyYW0ubmV3Tm9kZTtcbiAgICAgICAgcmVzdWx0ID0gZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKG5ld05vZGUueCwgbmV3Tm9kZS55LCBuZXdOb2RlLmNsYXNzLCBuZXdOb2RlLmlkLCBuZXdOb2RlLnBhcmVudCwgbmV3Tm9kZS52aXNpYmlsaXR5KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBlbGVtZW50VXRpbGl0aWVzLnJlc3RvcmVFbGVzKHBhcmFtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlczogcmVzdWx0XG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5hZGRFZGdlID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKHBhcmFtLmZpcnN0VGltZSkge1xuICAgICAgICB2YXIgbmV3RWRnZSA9IHBhcmFtLm5ld0VkZ2U7XG4gICAgICAgIHJlc3VsdCA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShuZXdFZGdlLnNvdXJjZSwgbmV3RWRnZS50YXJnZXQsIG5ld0VkZ2UuY2xhc3MsIG5ld0VkZ2UuaWQsIG5ld0VkZ2UudmlzaWJpbGl0eSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gZWxlbWVudFV0aWxpdGllcy5yZXN0b3JlRWxlcyhwYXJhbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZXM6IHJlc3VsdFxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuYWRkUHJvY2Vzc1dpdGhDb252ZW5pZW50RWRnZXMgPSBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmIChwYXJhbS5maXJzdFRpbWUpIHtcbiAgICAgICAgcmVzdWx0ID0gZWxlbWVudFV0aWxpdGllcy5hZGRQcm9jZXNzV2l0aENvbnZlbmllbnRFZGdlcyhwYXJhbS5zb3VyY2UsIHBhcmFtLnRhcmdldCwgcGFyYW0ucHJvY2Vzc1R5cGUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGVsZW1lbnRVdGlsaXRpZXMucmVzdG9yZUVsZXMocGFyYW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiByZXN1bHRcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNyZWF0ZUNvbXBvdW5kRm9yR2l2ZW5Ob2RlcyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gICAgICBpZiAocGFyYW0uZmlyc3RUaW1lKSB7XG4gICAgICAgIC8vIE5vZGVzIHRvIG1ha2UgY29tcG91bmQsIHRoZWlyIGRlc2NlbmRhbnRzIGFuZCBlZGdlcyBjb25uZWN0ZWQgdG8gdGhlbSB3aWxsIGJlIHJlbW92ZWQgZHVyaW5nIGNyZWF0ZUNvbXBvdW5kRm9yR2l2ZW5Ob2RlcyBvcGVyYXRpb25cbiAgICAgICAgLy8gKGludGVybmFsbHkgYnkgZWxlcy5tb3ZlKCkgb3BlcmF0aW9uKSwgc28gbWFyayB0aGVtIGFzIHJlbW92ZWQgZWxlcyBmb3IgdW5kbyBvcGVyYXRpb24uXG4gICAgICAgIHZhciBub2Rlc1RvTWFrZUNvbXBvdW5kID0gcGFyYW0ubm9kZXNUb01ha2VDb21wb3VuZDtcbiAgICAgICAgdmFyIHJlbW92ZWRFbGVzID0gbm9kZXNUb01ha2VDb21wb3VuZC51bmlvbihub2Rlc1RvTWFrZUNvbXBvdW5kLmRlc2NlbmRhbnRzKCkpO1xuICAgICAgICByZW1vdmVkRWxlcyA9IHJlbW92ZWRFbGVzLnVuaW9uKHJlbW92ZWRFbGVzLmNvbm5lY3RlZEVkZ2VzKCkpO1xuICAgICAgICByZXN1bHQucmVtb3ZlZEVsZXMgPSByZW1vdmVkRWxlcztcbiAgICAgICAgLy8gQXNzdW1lIHRoYXQgYWxsIG5vZGVzIHRvIG1ha2UgY29tcG91bmQgaGF2ZSB0aGUgc2FtZSBwYXJlbnRcbiAgICAgICAgdmFyIG9sZFBhcmVudElkID0gbm9kZXNUb01ha2VDb21wb3VuZFswXS5kYXRhKFwicGFyZW50XCIpO1xuICAgICAgICAvLyBUaGUgcGFyZW50IG9mIG5ldyBjb21wb3VuZCB3aWxsIGJlIHRoZSBvbGQgcGFyZW50IG9mIHRoZSBub2RlcyB0byBtYWtlIGNvbXBvdW5kXG4gICAgICAgIC8vIE5ldyBlbGVzIGluY2x1ZGVzIG5ldyBjb21wb3VuZCBhbmQgdGhlIG1vdmVkIGVsZXMgYW5kIHdpbGwgYmUgdXNlZCBpbiB1bmRvIG9wZXJhdGlvbi5cbiAgICAgICAgcmVzdWx0Lm5ld0VsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZUNvbXBvdW5kRm9yR2l2ZW5Ob2Rlcyhub2Rlc1RvTWFrZUNvbXBvdW5kLCBwYXJhbS5jb21wb3VuZFR5cGUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdC5yZW1vdmVkRWxlcyA9IHBhcmFtLm5ld0VsZXMucmVtb3ZlKCk7XG4gICAgICAgIHJlc3VsdC5uZXdFbGVzID0gcGFyYW0ucmVtb3ZlZEVsZXMucmVzdG9yZSgpO1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLm1haW50YWluUG9pbnRlcihyZXN1bHQubmV3RWxlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8vIFNlY3Rpb24gRW5kXG4gICAgLy8gYWRkL3JlbW92ZSBhY3Rpb24gZnVuY3Rpb25zXG5cbiAgICAvLyBTZWN0aW9uIFN0YXJ0XG4gICAgLy8gZWFzeSBjcmVhdGlvbiBhY3Rpb24gZnVuY3Rpb25zXG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVUZW1wbGF0ZVJlYWN0aW9uID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgZmlyc3RUaW1lID0gcGFyYW0uZmlyc3RUaW1lO1xuICAgICAgdmFyIGVsZXM7XG5cbiAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlVGVtcGxhdGVSZWFjdGlvbihwYXJhbS50ZW1wbGF0ZVR5cGUsIHBhcmFtLm1hY3JvbW9sZWN1bGVMaXN0LCBwYXJhbS5jb21wbGV4TmFtZSwgcGFyYW0ucHJvY2Vzc1Bvc2l0aW9uLCBwYXJhbS50aWxpbmdQYWRkaW5nVmVydGljYWwsIHBhcmFtLnRpbGluZ1BhZGRpbmdIb3Jpem9udGFsLCBwYXJhbS5lZGdlTGVuZ3RoLCBwYXJhbS5sYXlvdXRQYXJhbSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbGVzID0gcGFyYW07XG4gICAgICAgIGN5LmFkZChlbGVzKTtcblxuICAgICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICAgIGVsZXMuc2VsZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZXM6IGVsZXNcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNyZWF0ZUFjdGl2YXRpb25SZWFjdGlvbiA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICB2YXIgZmlyc3RUaW1lID0gcGFyYW0uZmlyc3RUaW1lO1xuICAgICAgdmFyIGVsZXM7XG5cbiAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlQWN0aXZhdGlvblJlYWN0aW9uKHBhcmFtLnByb3RlaW5OYW1lLCBwYXJhbS5wcm9jZXNzUG9zaXRpb24sIHBhcmFtLmVkZ2VMZW5ndGgsIHBhcmFtLnJldmVyc2UpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICBsZXQgZmlyc3RUaW1lID0gcGFyYW0uZmlyc3RUaW1lO1xuICAgICAgbGV0IGVsZXM7XG5cbiAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlVHJhbnNsYXRpb24ocGFyYW0ucmVndWxhdG9yTGFiZWwsIHBhcmFtLm91dHB1dExhYmVsLCBwYXJhbS5vcmllbnRhdGlvbik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVUcmFuc2NyaXB0aW9uID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIGxldCBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICBsZXQgZWxlcztcblxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVzID0gZWxlbWVudFV0aWxpdGllcy5jcmVhdGVUcmFuc2NyaXB0aW9uKHBhcmFtLmxhYmVsLCBwYXJhbS5vcmllbnRhdGlvbik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVEZWdyYWRhdGlvbiA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICBsZXQgZmlyc3RUaW1lID0gcGFyYW0uZmlyc3RUaW1lO1xuICAgICAgbGV0IGVsZXM7XG5cbiAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlRGVncmFkYXRpb24ocGFyYW0ubWFjcm9tb2xlY3VsZSwgcGFyYW0ub3JpZW50YXRpb24pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsZXMgPSBwYXJhbTtcbiAgICAgICAgY3kuYWRkKGVsZXMpO1xuXG4gICAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgICAgZWxlcy5zZWxlY3QoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlczogZWxlc1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY3JlYXRlQ29tcGxleFByb3RlaW5Gb3JtYXRpb24gPSBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgbGV0IGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIGxldCBlbGVzO1xuXG4gICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgIGVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZUNvbXBsZXhQcm90ZWluRm9ybWF0aW9uKHBhcmFtLnByb3RlaW5MYWJlbHMsIHBhcmFtLmNvbXBsZXhMYWJlbCwgcGFyYW0ucmVndWxhdG9yLCBwYXJhbS5vcmllbnRhdGlvbiwgcGFyYW0ucmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVNdWx0aW1lcml6YXRpb24gPSBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgbGV0IGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIGxldCBlbGVzO1xuXG4gICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgIGVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZU11bHRpbWVyaXphdGlvbihwYXJhbS5tYWNyb21vbGVjdWxlLCBwYXJhbS5yZWd1bGF0b3IsIHBhcmFtLnJlZ3VsYXRvck11bHRpbWVyLCBwYXJhbS5vcmllbnRhdGlvbik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVDb252ZXJzaW9uID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIGxldCBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICBsZXQgZWxlcztcblxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVzID0gZWxlbWVudFV0aWxpdGllcy5jcmVhdGVDb252ZXJzaW9uKHBhcmFtLm1hY3JvbW9sZWN1bGUsIHBhcmFtLnJlZ3VsYXRvciwgcGFyYW0ucmVndWxhdG9yTXVsdGltZXIsIHBhcmFtLm9yaWVudGF0aW9uLCBwYXJhbS5pbnB1dEluZm9ib3hMYWJlbHMsIHBhcmFtLm91dHB1dEluZm9ib3hMYWJlbHMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsZXMgPSBwYXJhbTtcbiAgICAgICAgY3kuYWRkKGVsZXMpO1xuXG4gICAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgICAgZWxlcy5zZWxlY3QoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlczogZWxlc1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY3JlYXRlTWV0YWJvbGljUmVhY3Rpb24gPSBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgbGV0IGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIGxldCBlbGVzO1xuXG4gICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgIGVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZU1ldGFib2xpY1JlYWN0aW9uKHBhcmFtLmlucHV0cywgcGFyYW0ub3V0cHV0cywgcGFyYW0ucmV2ZXJzaWJsZSwgcGFyYW0ucmVndWxhdG9yLCBwYXJhbS5yZWd1bGF0b3JNdWx0aW1lciwgcGFyYW0ub3JpZW50YXRpb24pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsZXMgPSBwYXJhbTtcbiAgICAgICAgY3kuYWRkKGVsZXMpO1xuXG4gICAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgICAgZWxlcy5zZWxlY3QoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlczogZWxlc1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY3JlYXRlTWV0YWJvbGljQ2F0YWx5dGljQWN0aXZpdHkgPSBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgdmFyIGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIHZhciBlbGVzO1xuXG4gICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgIGVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZU1ldGFib2xpY0NhdGFseXRpY0FjdGl2aXR5KHBhcmFtLmlucHV0Tm9kZUxpc3QsIHBhcmFtLm91dHB1dE5vZGVMaXN0LCBwYXJhbS5jYXRhbHlzdE5hbWUsIHBhcmFtLmNhdGFseXN0VHlwZSwgcGFyYW0ucHJvY2Vzc1Bvc2l0aW9uLCBwYXJhbS50aWxpbmdQYWRkaW5nVmVydGljYWwsIHBhcmFtLnRpbGluZ1BhZGRpbmdIb3Jpem9udGFsLCBwYXJhbS5lZGdlTGVuZ3RoKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsZXMgPSBwYXJhbTtcbiAgICAgICAgY3kuYWRkKGVsZXMpO1xuXG4gICAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgICAgZWxlcy5zZWxlY3QoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlczogZWxlc1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY3JlYXRlVHJhbnNjcmlwdGlvblJlYWN0aW9uID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIHZhciBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICB2YXIgZWxlcztcblxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVzID0gZWxlbWVudFV0aWxpdGllcy5jcmVhdGVUcmFuc2NyaXB0aW9uUmVhY3Rpb24ocGFyYW0uZ2VuZU5hbWUsIHBhcmFtLm1SbmFOYW1lLCBwYXJhbS5wcm9jZXNzUG9zaXRpb24sIHBhcmFtLmVkZ2VMZW5ndGgpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVUcmFuc2xhdGlvblJlYWN0aW9uID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIHZhciBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICB2YXIgZWxlcztcblxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVzID0gZWxlbWVudFV0aWxpdGllcy5jcmVhdGVUcmFuc2xhdGlvblJlYWN0aW9uKHBhcmFtLm1SbmFOYW1lLCBwYXJhbS5wcm90ZWluTmFtZSwgcGFyYW0ucHJvY2Vzc1Bvc2l0aW9uLCBwYXJhbS5lZGdlTGVuZ3RoKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsZXMgPSBwYXJhbTtcbiAgICAgICAgY3kuYWRkKGVsZXMpO1xuXG4gICAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgICAgZWxlcy5zZWxlY3QoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlczogZWxlc1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLy8gU2VjdGlvbiBFbmRcbiAgICAvLyBlYXN5IGNyZWF0aW9uIGFjdGlvbiBmdW5jdGlvbnNcblxuICAgIC8vIFNlY3Rpb24gU3RhcnRcbiAgICAvLyBnZW5lcmFsIGFjdGlvbiBmdW5jdGlvbnNcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmdldE5vZGVQb3NpdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcG9zaXRpb25zID0ge307XG4gICAgICB2YXIgbm9kZXMgPSBjeS5ub2RlcygpO1xuXG4gICAgICBub2Rlcy5lYWNoKGZ1bmN0aW9uKGVsZSwgaSkge1xuICAgICAgICBpZih0eXBlb2YgZWxlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgZWxlID0gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uc1tlbGUuaWQoKV0gPSB7XG4gICAgICAgICAgeDogZWxlLnBvc2l0aW9uKFwieFwiKSxcbiAgICAgICAgICB5OiBlbGUucG9zaXRpb24oXCJ5XCIpXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHBvc2l0aW9ucztcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMucmV0dXJuVG9Qb3NpdGlvbnMgPSBmdW5jdGlvbiAocG9zaXRpb25zKSB7XG4gICAgICB2YXIgY3VycmVudFBvc2l0aW9ucyA9IHt9O1xuICAgICAgY3kubm9kZXMoKS5wb3NpdGlvbnMoZnVuY3Rpb24gKGVsZSwgaSkge1xuICAgICAgICBpZih0eXBlb2YgZWxlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgZWxlID0gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRQb3NpdGlvbnNbZWxlLmlkKCldID0ge1xuICAgICAgICAgIHg6IGVsZS5wb3NpdGlvbihcInhcIiksXG4gICAgICAgICAgeTogZWxlLnBvc2l0aW9uKFwieVwiKVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBwb3MgPSBwb3NpdGlvbnNbZWxlLmlkKCldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IHBvcy54LFxuICAgICAgICAgIHk6IHBvcy55XG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGN1cnJlbnRQb3NpdGlvbnM7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJlc2l6ZU5vZGVzID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBwZXJmb3JtT3BlcmF0aW9uOiB0cnVlXG4gICAgICB9O1xuXG4gICAgICB2YXIgbm9kZXMgPSBwYXJhbS5ub2RlcztcblxuICAgICAgcmVzdWx0LnNpemVNYXAgPSB7fTtcbiAgICAgIHJlc3VsdC51c2VBc3BlY3RSYXRpbyA9IGZhbHNlO1xuICAgICAgcmVzdWx0LnByZXNlcnZlUmVsYXRpdmVQb3MgPSBwYXJhbS5wcmVzZXJ2ZVJlbGF0aXZlUG9zO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmKG5vZGUuaXNQYXJlbnQoKSl7XG4gICAgICAgICAgcmVzdWx0LnNpemVNYXBbbm9kZS5pZCgpXSA9IHtcbiAgICAgICAgICAgIHc6IG5vZGUuZGF0YShcIm1pbldpZHRoXCIpIHx8IDAsXG4gICAgICAgICAgICBoOiBub2RlLmRhdGEoXCJtaW5IZWlnaHRcIikgfHwgMCxcbiAgICAgICAgICAgIGJpYXNMIDogbm9kZS5kYXRhKFwibWluV2lkdGhCaWFzTGVmdFwiKSB8fCAwLFxuICAgICAgICAgICAgYmlhc1IgOiBub2RlLmRhdGEoXCJtaW5XaWR0aEJpYXNSaWdodFwiKSB8fCAwLFxuICAgICAgICAgICAgYmlhc1QgOiBub2RlLmRhdGEoXCJtaW5IZWlnaHRCaWFzVG9wXCIpIHx8IDAsXG4gICAgICAgICAgICBiaWFzQiA6IG5vZGUuZGF0YShcIm1pbkhlaWdodEJpYXNCb3R0b21cIikgfHwgMFxuICAgICAgICAgICAvLyB3OiBub2RlLmNzcyhcIm1pbldpZHRoXCIpICE9IDA/ICBub2RlLmRhdGEoXCJtaW5XaWR0aFwiKSA6IG5vZGUuY2hpbGRyZW4oKS5ib3VuZGluZ0JveCgpLncsXG4gICAgICAgICAgICAvL2g6IG5vZGUuY3NzKFwibWluLWhlaWdodFwiKSAhPSAwPyAgbm9kZS5kYXRhKFwibWluSGVpZ2h0XCIpIDogbm9kZS5jaGlsZHJlbigpLmJvdW5kaW5nQm94KCkuaFxuICAgICAgICAgIH07XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHJlc3VsdC5zaXplTWFwW25vZGUuaWQoKV0gPSB7XG4gICAgICAgICAgICB3OiBub2RlLndpZHRoKCksXG4gICAgICAgICAgICBoOiBub2RlLmhlaWdodCgpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH1cblxuICAgICAgcmVzdWx0Lm5vZGVzID0gbm9kZXM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcblxuICAgICAgICBpZiAocGFyYW0ucGVyZm9ybU9wZXJhdGlvbikge1xuICAgICAgICAgIGlmIChwYXJhbS5zaXplTWFwKSB7XG4gICAgICAgICAgICAvKiBpZiAocGFyYW0ucHJlc2VydmVSZWxhdGl2ZVBvcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICB2YXIgb2xkV2lkdGggPSBub2RlLmRhdGEoXCJiYm94XCIpLnc7XG4gICAgICAgICAgICAgIHZhciBvbGRIZWlnaHQgPSBub2RlLmRhdGEoXCJiYm94XCIpLmg7XG4gICAgICAgICAgICB9ICovXG5cbiAgICAgICAgICAgIGlmKG5vZGUuaXNQYXJlbnQoKSl7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBub2RlLmRhdGEoXCJtaW5IZWlnaHRcIiAsIHBhcmFtLnNpemVNYXBbbm9kZS5pZCgpXS5oKTtcbiAgICAgICAgICAgICAgbm9kZS5kYXRhKFwibWluV2lkdGhcIiAsIHBhcmFtLnNpemVNYXBbbm9kZS5pZCgpXS53KTtcbiAgICAgICAgICAgICAgbm9kZS5kYXRhKFwibWluV2lkdGhCaWFzTGVmdFwiLCBwYXJhbS5zaXplTWFwW25vZGUuaWQoKV0uYmlhc0wpO1xuICAgICAgICAgICAgICBub2RlLmRhdGEoXCJtaW5XaWR0aEJpYXNSaWdodFwiLCBwYXJhbS5zaXplTWFwW25vZGUuaWQoKV0uYmlhc1IpO1xuICAgICAgICAgICAgICBub2RlLmRhdGEoXCJtaW5IZWlnaHRCaWFzVG9wXCIsIHBhcmFtLnNpemVNYXBbbm9kZS5pZCgpXS5iaWFzVCk7XG4gICAgICAgICAgICAgIG5vZGUuZGF0YShcIm1pbkhlaWdodEJpYXNCb3R0b21cIiwgcGFyYW0uc2l6ZU1hcFtub2RlLmlkKCldLmJpYXNCKTtcblxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIG5vZGUuZGF0YShcImJib3hcIikudyA9IHBhcmFtLnNpemVNYXBbbm9kZS5pZCgpXS53O1xuICAgICAgICAgICAgICBub2RlLmRhdGEoXCJiYm94XCIpLmggPSBwYXJhbS5zaXplTWFwW25vZGUuaWQoKV0uaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgXG5cbiAgICAgICAgICAgIC8qIGlmIChwYXJhbS5wcmVzZXJ2ZVJlbGF0aXZlUG9zID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHZhciBzdGF0ZXNhbmRpbmZvcyA9IG5vZGUuZGF0YSgnc3RhdGVzYW5kaW5mb3MnKTtcbiAgICAgICAgICAgICAgdmFyIHRvcEJvdHRvbSA9IHN0YXRlc2FuZGluZm9zLmZpbHRlcihib3ggPT4gKGJveC5hbmNob3JTaWRlID09PSBcInRvcFwiIHx8IGJveC5hbmNob3JTaWRlID09PSBcImJvdHRvbVwiKSk7XG4gICAgICAgICAgICAgIHZhciByaWdodExlZnQgPSBzdGF0ZXNhbmRpbmZvcy5maWx0ZXIoYm94ID0+IChib3guYW5jaG9yU2lkZSA9PT0gXCJyaWdodFwiIHx8IGJveC5hbmNob3JTaWRlID09PSBcImxlZnRcIikpO1xuXG4gICAgICAgICAgICAgIHRvcEJvdHRvbS5mb3JFYWNoKGZ1bmN0aW9uKGJveCl7XG4gICAgICAgICAgICAgICAgaWYgKGJveC5iYm94LnggPCAwKSB7XG4gICAgICAgICAgICAgICAgICBib3guYmJveC54ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYm94LmJib3gueCA+IG9sZFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICBib3guYmJveC54ID0gb2xkV2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJveC5iYm94LnggPSBub2RlLmRhdGEoXCJiYm94XCIpLncgKiBib3guYmJveC54IC8gb2xkV2lkdGg7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHJpZ2h0TGVmdC5mb3JFYWNoKGZ1bmN0aW9uKGJveCl7XG4gICAgICAgICAgICAgICAgaWYgKGJveC5iYm94LnkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICBib3guYmJveC55ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYm94LmJib3gueSA+IG9sZEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgYm94LmJib3gueSA9IG9sZEhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYm94LmJib3gueSA9IG5vZGUuZGF0YShcImJib3hcIikuaCAqIGJveC5iYm94LnkgLyBvbGRIZWlnaHQ7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSAqL1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMucmVzaXplTm9kZXMocGFyYW0ubm9kZXMsIHBhcmFtLndpZHRoLCBwYXJhbS5oZWlnaHQsIHBhcmFtLnVzZUFzcGVjdFJhdGlvLCBwYXJhbS5wcmVzZXJ2ZVJlbGF0aXZlUG9zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jaGFuZ2VOb2RlTGFiZWwgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICB9O1xuICAgICAgdmFyIG5vZGVzID0gcGFyYW0ubm9kZXM7XG4gICAgICByZXN1bHQubm9kZXMgPSBub2RlcztcbiAgICAgIHJlc3VsdC5sYWJlbCA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHJlc3VsdC5sYWJlbFtub2RlLmlkKCldID0gbm9kZS5fcHJpdmF0ZS5kYXRhLmxhYmVsO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW0uZmlyc3RUaW1lKSB7XG4gICAgICAgIG5vZGVzLmRhdGEoJ2xhYmVsJywgcGFyYW0ubGFiZWwpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgIG5vZGUuX3ByaXZhdGUuZGF0YS5sYWJlbCA9IHBhcmFtLmxhYmVsW25vZGUuaWQoKV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMudXBkYXRlSW5mb2JveFN0eWxlID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgfTtcbiAgICAgIHZhciBzdHlsZSA9IHBhcmFtLm5vZGUuZGF0YSgnc3RhdGVzYW5kaW5mb3MnKVtwYXJhbS5pbmRleF0uc3R5bGU7XG4gICAgICByZXN1bHQubmV3UHJvcHMgPSAkLmV4dGVuZCgge30sIHN0eWxlICk7XG4gICAgICByZXN1bHQubm9kZSA9IHBhcmFtLm5vZGU7XG4gICAgICByZXN1bHQuaW5kZXggPSBwYXJhbS5pbmRleDtcblxuICAgICAgZWxlbWVudFV0aWxpdGllcy51cGRhdGVJbmZvYm94U3R5bGUoIHBhcmFtLm5vZGUsIHBhcmFtLmluZGV4LCBwYXJhbS5uZXdQcm9wcyApO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51cGRhdGVJbmZvYm94T2JqID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgfTtcbiAgICAgIHZhciBvYmogPSBwYXJhbS5ub2RlLmRhdGEoJ3N0YXRlc2FuZGluZm9zJylbcGFyYW0uaW5kZXhdO1xuICAgICAgcmVzdWx0Lm5ld1Byb3BzID0gJC5leHRlbmQoIHt9LCBvYmogKTtcbiAgICAgIHJlc3VsdC5ub2RlID0gcGFyYW0ubm9kZTtcbiAgICAgIHJlc3VsdC5pbmRleCA9IHBhcmFtLmluZGV4O1xuXG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnVwZGF0ZUluZm9ib3hPYmooIHBhcmFtLm5vZGUsIHBhcmFtLmluZGV4LCBwYXJhbS5uZXdQcm9wcyApO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jaGFuZ2VEYXRhID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgfTtcbiAgICAgIHZhciBlbGVzID0gcGFyYW0uZWxlcztcbiAgICAgIHJlc3VsdC5uYW1lID0gcGFyYW0ubmFtZTtcbiAgICAgIHJlc3VsdC52YWx1ZU1hcCA9IHt9O1xuICAgICAgcmVzdWx0LmVsZXMgPSBlbGVzO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZSA9IGVsZXNbaV07XG4gICAgICAgIHJlc3VsdC52YWx1ZU1hcFtlbGUuaWQoKV0gPSBlbGUuZGF0YShwYXJhbS5uYW1lKTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VEYXRhKHBhcmFtLmVsZXMsIHBhcmFtLm5hbWUsIHBhcmFtLnZhbHVlTWFwKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMudXBkYXRlU2V0RmllbGQgPSBmdW5jdGlvbiggcGFyYW0gKSB7XG4gICAgICB2YXIgdXBkYXRlcyA9IGVsZW1lbnRVdGlsaXRpZXMudXBkYXRlU2V0RmllbGQoIHBhcmFtLmVsZSwgcGFyYW0uZmllbGROYW1lLCBwYXJhbS50b0RlbGV0ZSwgcGFyYW0udG9BZGQsIHBhcmFtLmNhbGxiYWNrICk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGVsZTogcGFyYW0uZWxlLFxuICAgICAgICBmaWVsZE5hbWU6IHBhcmFtLmZpZWxkTmFtZSxcbiAgICAgICAgY2FsbGJhY2s6IHBhcmFtLmNhbGxiYWNrLFxuICAgICAgICB0b0RlbGV0ZTogdXBkYXRlcy5hZGRlZCxcbiAgICAgICAgdG9BZGQ6IHVwZGF0ZXMuZGVsZXRlZFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY2hhbmdlQ3NzID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgfTtcbiAgICAgIHZhciBlbGVzID0gcGFyYW0uZWxlcztcbiAgICAgIHJlc3VsdC5uYW1lID0gcGFyYW0ubmFtZTtcbiAgICAgIHJlc3VsdC52YWx1ZU1hcCA9IHt9O1xuICAgICAgcmVzdWx0LmVsZXMgPSBlbGVzO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZSA9IGVsZXNbaV07XG4gICAgICAgIHJlc3VsdC52YWx1ZU1hcFtlbGUuaWQoKV0gPSBlbGUuY3NzKHBhcmFtLm5hbWUpO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50VXRpbGl0aWVzLmNoYW5nZUNzcyhwYXJhbS5lbGVzLCBwYXJhbS5uYW1lLCBwYXJhbS52YWx1ZU1hcCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNoYW5nZUZvbnRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgfTtcblxuICAgICAgdmFyIGVsZXMgPSBwYXJhbS5lbGVzO1xuICAgICAgcmVzdWx0LmRhdGEgPSB7fTtcbiAgICAgIHJlc3VsdC5lbGVzID0gZWxlcztcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbGUgPSBlbGVzW2ldO1xuXG4gICAgICAgIHJlc3VsdC5kYXRhW2VsZS5pZCgpXSA9IHt9O1xuXG4gICAgICAgIHZhciBkYXRhID0gcGFyYW0uZmlyc3RUaW1lID8gcGFyYW0uZGF0YSA6IHBhcmFtLmRhdGFbZWxlLmlkKCldO1xuXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZGF0YSkge1xuICAgICAgICAgIHJlc3VsdC5kYXRhW2VsZS5pZCgpXVtwcm9wXSA9IGVsZS5kYXRhKHByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbS5maXJzdFRpbWUpIHtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VGb250UHJvcGVydGllcyhlbGVzLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgZWxlID0gZWxlc1tpXTtcblxuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlRm9udFByb3BlcnRpZXMoZWxlLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKlxuICAgICAqIFNob3cgZWxlcyBhbmQgcGVyZm9ybSBsYXlvdXQuXG4gICAgICovXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuc2hvd0FuZFBlcmZvcm1MYXlvdXQgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBlbGVzID0gcGFyYW0uZWxlcztcblxuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgcmVzdWx0LnBvc2l0aW9ucyA9IHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmdldE5vZGVQb3NpdGlvbnMoKTtcblxuICAgICAgaWYgKHBhcmFtLmZpcnN0VGltZSkge1xuICAgICAgICByZXN1bHQuZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuc2hvd0FuZFBlcmZvcm1MYXlvdXQocGFyYW0uZWxlcywgcGFyYW0ubGF5b3V0cGFyYW0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdC5lbGVzID0gY3kudmlld1V0aWxpdGllcygpLnNob3coZWxlcyk7IC8vIFNob3cgZ2l2ZW4gZWxlc1xuICAgICAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5yZXR1cm5Ub1Bvc2l0aW9ucyhwYXJhbS5wb3NpdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51bmRvU2hvd0FuZFBlcmZvcm1MYXlvdXQgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBlbGVzID0gcGFyYW0uZWxlcztcblxuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgcmVzdWx0LnBvc2l0aW9ucyA9IHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmdldE5vZGVQb3NpdGlvbnMoKTtcbiAgICAgIHJlc3VsdC5lbGVzID0gY3kudmlld1V0aWxpdGllcygpLmhpZGUoZWxlcyk7IC8vIEhpZGUgcHJldmlvdXNseSB1bmhpZGRlbiBlbGVzO1xuXG4gICAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5yZXR1cm5Ub1Bvc2l0aW9ucyhwYXJhbS5wb3NpdGlvbnMpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKlxuICAgICAqIEhpZGUgZWxlcyBhbmQgcGVyZm9ybSBsYXlvdXQuXG4gICAgICovXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuaGlkZUFuZFBlcmZvcm1MYXlvdXQgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgdmFyIGVsZXMgPSBwYXJhbS5lbGVzO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgcmVzdWx0LnBvc2l0aW9ucyA9IHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmdldE5vZGVQb3NpdGlvbnMoKTtcblxuICAgICAgICBpZiAocGFyYW0uZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICByZXN1bHQuZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuaGlkZUFuZFBlcmZvcm1MYXlvdXQocGFyYW0uZWxlcywgcGFyYW0ubGF5b3V0cGFyYW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LmVsZXMgPSBjeS52aWV3VXRpbGl0aWVzKCkuaGlkZShlbGVzKTsgLy8gSGlkZSBnaXZlbiBlbGVzXG4gICAgICAgICAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5yZXR1cm5Ub1Bvc2l0aW9ucyhwYXJhbS5wb3NpdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMudW5kb0hpZGVBbmRQZXJmb3JtTGF5b3V0ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgIHZhciBlbGVzID0gcGFyYW0uZWxlcztcblxuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgIHJlc3VsdC5wb3NpdGlvbnMgPSB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5nZXROb2RlUG9zaXRpb25zKCk7XG4gICAgICAgIHJlc3VsdC5lbGVzID0gY3kudmlld1V0aWxpdGllcygpLnNob3coZWxlcyk7IC8vIFNob3cgcHJldmlvdXNseSBoaWRkZW4gZWxlc1xuXG4gICAgICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJldHVyblRvUG9zaXRpb25zKHBhcmFtLnBvc2l0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBEZWxldGUgZWxlcyBhbmQgcGVyZm9ybSBsYXlvdXQuXG4gICAgICovXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZGVsZXRlQW5kUGVyZm9ybUxheW91dCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGVsZXMgPSBwYXJhbS5lbGVzO1xuXG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICByZXN1bHQucG9zaXRpb25zID0gdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZ2V0Tm9kZVBvc2l0aW9ucygpO1xuXG4gICAgICBpZiAocGFyYW0uZmlyc3RUaW1lKSB7XG4gICAgICAgICAgcmVzdWx0LmVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmRlbGV0ZUFuZFBlcmZvcm1MYXlvdXQocGFyYW0uZWxlcywgcGFyYW0ubGF5b3V0cGFyYW0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LmVsZXMgPSBlbGVzLnJlbW92ZSgpO1xuICAgICAgICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJldHVyblRvUG9zaXRpb25zKHBhcmFtLnBvc2l0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMudW5kb0RlbGV0ZUFuZFBlcmZvcm1MYXlvdXQgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBlbGVzID0gcGFyYW0uZWxlcztcblxuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgcmVzdWx0LnBvc2l0aW9ucyA9IHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmdldE5vZGVQb3NpdGlvbnMoKTtcbiAgICAgIHJlc3VsdC5lbGVzID0gZWxlbWVudFV0aWxpdGllcy5yZXN0b3JlRWxlcyhlbGVzKTsgXG5cbiAgICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJldHVyblRvUG9zaXRpb25zKHBhcmFtLnBvc2l0aW9ucyk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgICAvLyBTZWN0aW9uIEVuZFxuICAgIC8vIGdlbmVyYWwgYWN0aW9uIGZ1bmN0aW9uc1xuXG4gICAgLy8gU2VjdGlvbiBTdGFydFxuICAgIC8vIHNiZ24gYWN0aW9uIGZ1bmN0aW9uc1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY2hhbmdlU3RhdGVPckluZm9Cb3ggPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICB9O1xuICAgICAgcmVzdWx0LnR5cGUgPSBwYXJhbS50eXBlO1xuICAgICAgcmVzdWx0Lm5vZGVzID0gcGFyYW0ubm9kZXM7XG4gICAgICByZXN1bHQuaW5kZXggPSBwYXJhbS5pbmRleDtcbiAgICAgIHZhciBkYXRhID0gcGFyYW0uZGF0YTtcblxuICAgICAgdmFyIHRlbXBEYXRhID0gZWxlbWVudFV0aWxpdGllcy5zYXZlVW5pdHMocGFyYW0ubm9kZXMpO1xuICAgICAgcmVzdWx0LnZhbHVlID0gZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VTdGF0ZU9ySW5mb0JveChwYXJhbS5ub2RlcywgcGFyYW0uaW5kZXgsIHBhcmFtLnZhbHVlLCBwYXJhbS50eXBlKTtcbiAgICAgIC8qIHZhciBsb2NhdGlvbnMgPSBlbGVtZW50VXRpbGl0aWVzLmNoZWNrRml0KHBhcmFtLm5vZGVzKTtcbiAgICAgIGlmIChsb2NhdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmZpdFVuaXRzKHBhcmFtLm5vZGVzLCBsb2NhdGlvbnMpO1xuICAgICAgfSAqL1xuICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnJlc3RvcmVVbml0cyhwYXJhbS5ub2RlcywgZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGN5LmZvcmNlUmVuZGVyKCk7XG4gICAgICByZXN1bHQuZGF0YSA9IHRlbXBEYXRhO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuYWRkU3RhdGVPckluZm9Cb3ggPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBvYmogPSBwYXJhbS5vYmo7XG4gICAgICB2YXIgbm9kZXMgPSBwYXJhbS5ub2RlcztcbiAgICAgIHZhciBkYXRhID0gcGFyYW0uZGF0YTtcblxuICAgICAgdmFyIHRlbXBEYXRhID0gZWxlbWVudFV0aWxpdGllcy5zYXZlVW5pdHMobm9kZXMpO1xuICAgICAgdmFyIGxvY2F0aW9uT2JqID0gZWxlbWVudFV0aWxpdGllcy5hZGRTdGF0ZU9ySW5mb0JveChub2Rlcywgb2JqKTtcbiAgICAgLyogIHZhciBsb2NhdGlvbnMgPSBlbGVtZW50VXRpbGl0aWVzLmNoZWNrRml0KG5vZGVzKTtcbiAgICAgIGlmIChsb2NhdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmZpdFVuaXRzKG5vZGVzLCBsb2NhdGlvbnMpO1xuICAgICAgfSAqL1xuICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnJlc3RvcmVVbml0cyhub2RlcywgZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGN5LmZvcmNlUmVuZGVyKCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIG5vZGVzOiBub2RlcyxcbiAgICAgICAgbG9jYXRpb25PYmo6IGxvY2F0aW9uT2JqLFxuICAgICAgICBvYmo6IG9iaixcbiAgICAgICAgZGF0YTogdGVtcERhdGFcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5yZW1vdmVTdGF0ZU9ySW5mb0JveCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGxvY2F0aW9uT2JqID0gcGFyYW0ubG9jYXRpb25PYmo7XG4gICAgICB2YXIgbm9kZXMgPSBwYXJhbS5ub2RlcztcbiAgICAgIHZhciBkYXRhID0gcGFyYW0uZGF0YTtcblxuICAgICAgdmFyIHRlbXBEYXRhID0gZWxlbWVudFV0aWxpdGllcy5zYXZlVW5pdHMobm9kZXMpO1xuICAgICAgdmFyIG9iaiA9IGVsZW1lbnRVdGlsaXRpZXMucmVtb3ZlU3RhdGVPckluZm9Cb3gobm9kZXMsIGxvY2F0aW9uT2JqKTtcbiAgICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5yZXN0b3JlVW5pdHMobm9kZXMsIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICBjeS5mb3JjZVJlbmRlcigpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBub2Rlczogbm9kZXMsXG4gICAgICAgIG9iajogb2JqLFxuICAgICAgICBkYXRhOiB0ZW1wRGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmZpdFVuaXRzID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgbm9kZSA9IHBhcmFtLm5vZGU7XG4gICAgICB2YXIgbG9jYXRpb25zID0gcGFyYW0ubG9jYXRpb25zO1xuICAgICAgdmFyIG9iaiA9IGVsZW1lbnRVdGlsaXRpZXMuZml0VW5pdHMobm9kZSwgbG9jYXRpb25zKTtcblxuICAgICAgY3kuZm9yY2VSZW5kZXIoKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgb2JqOiBvYmosXG4gICAgICAgIGxvY2F0aW9uczogbG9jYXRpb25zXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMucmVzdG9yZVVuaXRzID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgbm9kZSA9IHBhcmFtLm5vZGU7XG4gICAgICB2YXIgbG9jYXRpb25zID0gcGFyYW0ubG9jYXRpb25zO1xuICAgICAgdmFyIG9iaiA9IHBhcmFtLm9iajtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICBub2RlLmRhdGEoJ3N0YXRlc2FuZGluZm9zJykuZm9yRWFjaCggZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICB2YXIgYm94ID0gb2JqW2luZGV4KytdO1xuICAgICAgICBlbGUuYmJveC54ID0gYm94Lng7XG4gICAgICAgIGVsZS5iYm94LnkgPSBib3gueTtcbiAgICAgICAgdmFyIG9sZFNpZGUgPSBlbGUuYW5jaG9yU2lkZTtcbiAgICAgICAgZWxlLmFuY2hvclNpZGUgPSBib3guYW5jaG9yU2lkZTtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5tb2RpZnlVbml0cyhub2RlLCBlbGUsIG9sZFNpZGUpO1xuICAgICAgfSk7XG5cbiAgICAgIGN5LmZvcmNlUmVuZGVyKCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgIGxvY2F0aW9uczogbG9jYXRpb25zXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuc2V0TXVsdGltZXJTdGF0dXMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICB2YXIgbm9kZXMgPSBwYXJhbS5ub2RlcztcbiAgICAgIHZhciBzdGF0dXMgPSBwYXJhbS5zdGF0dXM7XG4gICAgICB2YXIgcmVzdWx0U3RhdHVzID0ge307XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgdmFyIGlzTXVsdGltZXIgPSBub2RlLmRhdGEoJ2NsYXNzJykuZW5kc1dpdGgoJyBtdWx0aW1lcicpO1xuXG4gICAgICAgIHJlc3VsdFN0YXR1c1tub2RlLmlkKCldID0gaXNNdWx0aW1lcjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSBjaGFuZ2UgdGhlIHN0YXR1cyBvZiBhbGwgbm9kZXMgYXQgb25jZS5cbiAgICAgIC8vIElmIG5vdCBjaGFuZ2Ugc3RhdHVzIG9mIGVhY2ggc2VwZXJhdGVseSB0byB0aGUgdmFsdWVzIG1hcHBlZCB0byB0aGVpciBpZC5cbiAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRNdWx0aW1lclN0YXR1cyhub2Rlcywgc3RhdHVzKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE11bHRpbWVyU3RhdHVzKG5vZGUsIHN0YXR1c1tub2RlLmlkKCldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLy8gIGlmICghZmlyc3RUaW1lICYmIF8uaXNFcXVhbChub2RlcywgY3kubm9kZXMoJzpzZWxlY3RlZCcpKSkge1xuICAgIC8vICAgICQoJyNpbnNwZWN0b3ItaXMtbXVsdGltZXInKS5hdHRyKFwiY2hlY2tlZFwiLCAhJCgnI2luc3BlY3Rvci1pcy1tdWx0aW1lcicpLmF0dHIoXCJjaGVja2VkXCIpKTtcbiAgICAvLyAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBzdGF0dXM6IHJlc3VsdFN0YXR1cyxcbiAgICAgICAgbm9kZXM6IG5vZGVzXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5zZXRBY3RpdmVTdGF0dXMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICB2YXIgbm9kZXMgPSBwYXJhbS5ub2RlcztcbiAgICAgIHZhciBzdGF0dXMgPSBwYXJhbS5zdGF0dXM7XG4gICAgICB2YXIgcmVzdWx0U3RhdHVzID0ge307XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgdmFyIGlzQWN0aXZlID0gbm9kZS5kYXRhKCdjbGFzcycpLnN0YXJ0c1dpdGgoJ2FjdGl2ZSAnKTtcblxuICAgICAgICByZXN1bHRTdGF0dXNbbm9kZS5pZCgpXSA9IGlzQWN0aXZlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIGNoYW5nZSB0aGUgc3RhdHVzIG9mIGFsbCBub2RlcyBhdCBvbmNlLlxuICAgICAgLy8gSWYgbm90IGNoYW5nZSBzdGF0dXMgb2YgZWFjaCBzZXBlcmF0ZWx5IHRvIHRoZSB2YWx1ZXMgbWFwcGVkIHRvIHRoZWlyIGlkLlxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldEFjdGl2ZVN0YXR1cyhub2Rlcywgc3RhdHVzKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldEFjdGl2ZVN0YXR1cyhub2RlLCBzdGF0dXNbbm9kZS5pZCgpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIC8vICBpZiAoIWZpcnN0VGltZSAmJiBfLmlzRXF1YWwobm9kZXMsIGN5Lm5vZGVzKCc6c2VsZWN0ZWQnKSkpIHtcbiAgICAvLyAgICAkKCcjaW5zcGVjdG9yLWlzLW11bHRpbWVyJykuYXR0cihcImNoZWNrZWRcIiwgISQoJyNpbnNwZWN0b3ItaXMtbXVsdGltZXInKS5hdHRyKFwiY2hlY2tlZFwiKSk7XG4gICAgLy8gIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHRTdGF0dXMsXG4gICAgICAgIG5vZGVzOiBub2Rlc1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5zZXRIeXBvdGhldGljYWxTdGF0dXMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICB2YXIgbm9kZXMgPSBwYXJhbS5ub2RlcztcbiAgICAgIHZhciBzdGF0dXMgPSBwYXJhbS5zdGF0dXM7XG4gICAgICB2YXIgcmVzdWx0U3RhdHVzID0ge307XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgdmFyIGlzSHlwb3RoZXRpY2FsID0gbm9kZS5kYXRhKCdjbGFzcycpLmluY2x1ZGVzKCdoeXBvdGhldGljYWwnKTtcblxuICAgICAgICByZXN1bHRTdGF0dXNbbm9kZS5pZCgpXSA9IGlzSHlwb3RoZXRpY2FsO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIGNoYW5nZSB0aGUgc3RhdHVzIG9mIGFsbCBub2RlcyBhdCBvbmNlLlxuICAgICAgLy8gSWYgbm90IGNoYW5nZSBzdGF0dXMgb2YgZWFjaCBzZXBlcmF0ZWx5IHRvIHRoZSB2YWx1ZXMgbWFwcGVkIHRvIHRoZWlyIGlkLlxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldEh5cG90aGV0aWNhbFN0YXR1cyhub2Rlcywgc3RhdHVzKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldEh5cG90aGV0aWNhbFN0YXR1cyhub2RlLCBzdGF0dXNbbm9kZS5pZCgpXSk7XG4gICAgICAgICAgLy9lbGVtZW50VXRpbGl0aWVzLnNldEh5cG90aHRldGljYWxTdGF0dXNcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLy8gIGlmICghZmlyc3RUaW1lICYmIF8uaXNFcXVhbChub2RlcywgY3kubm9kZXMoJzpzZWxlY3RlZCcpKSkge1xuICAgIC8vICAgICQoJyNpbnNwZWN0b3ItaXMtbXVsdGltZXInKS5hdHRyKFwiY2hlY2tlZFwiLCAhJCgnI2luc3BlY3Rvci1pcy1tdWx0aW1lcicpLmF0dHIoXCJjaGVja2VkXCIpKTtcbiAgICAvLyAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBzdGF0dXM6IHJlc3VsdFN0YXR1cyxcbiAgICAgICAgbm9kZXM6IG5vZGVzXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5zZXRDbG9uZU1hcmtlclN0YXR1cyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIG5vZGVzID0gcGFyYW0ubm9kZXM7XG4gICAgICB2YXIgc3RhdHVzID0gcGFyYW0uc3RhdHVzO1xuICAgICAgdmFyIGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIHZhciByZXN1bHRTdGF0dXMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICByZXN1bHRTdGF0dXNbbm9kZS5pZCgpXSA9IG5vZGUuZGF0YSgnY2xvbmVtYXJrZXInKTtcbiAgICAgICAgdmFyIGN1cnJlbnRTdGF0dXMgPSBmaXJzdFRpbWUgPyBzdGF0dXMgOiBzdGF0dXNbbm9kZS5pZCgpXTtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRDbG9uZU1hcmtlclN0YXR1cyhub2RlLCBjdXJyZW50U3RhdHVzKTtcbiAgICAgIH1cblxuICAgIC8vICBpZiAoIWZpcnN0VGltZSAmJiBfLmlzRXF1YWwobm9kZXMsIGN5Lm5vZGVzKCc6c2VsZWN0ZWQnKSkpIHtcbiAgICAvLyAgICAkKCcjaW5zcGVjdG9yLWlzLWNsb25lLW1hcmtlcicpLmF0dHIoXCJjaGVja2VkXCIsICEkKCcjaW5zcGVjdG9yLWlzLWNsb25lLW1hcmtlcicpLmF0dHIoXCJjaGVja2VkXCIpKTtcbiAgICAvLyAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBzdGF0dXM6IHJlc3VsdFN0YXR1cyxcbiAgICAgICAgbm9kZXM6IG5vZGVzXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvLyBwYXJhbToge2NsYXNzOiBzYmduY2xhc3MsIG5hbWU6IHByb3BlcnR5TmFtZSwgdmFsdWU6IHZhbHVlfVxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnNldERlZmF1bHRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIHNiZ25jbGFzcyA9IHBhcmFtLmNsYXNzO1xuICAgICAgdmFyIG5hbWUgPSBwYXJhbS5uYW1lO1xuICAgICAgdmFyIHZhbHVlID0gcGFyYW0udmFsdWU7XG4gICAgICB2YXIgY2xhc3NEZWZhdWx0cyA9IGVsZW1lbnRVdGlsaXRpZXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMoc2JnbmNsYXNzKTtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGNsYXNzOiBzYmduY2xhc3MsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHZhbHVlOiBjbGFzc0RlZmF1bHRzLmhhc093blByb3BlcnR5KG5hbWUpID8gY2xhc3NEZWZhdWx0c1tuYW1lXSA6IHVuZGVmaW5lZFxuICAgICAgfTtcblxuICAgICAgdmFyIHByb3BNYXAgPSB7fTtcbiAgICAgIHByb3BNYXBbIG5hbWUgXSA9IHZhbHVlO1xuXG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnNldERlZmF1bHRQcm9wZXJ0aWVzKCBzYmduY2xhc3MsIHByb3BNYXAgKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuYWRkQmFja2dyb3VuZEltYWdlID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgYmdPYmogPSBwYXJhbS5iZ09iajtcbiAgICAgIHZhciBub2RlcyA9IHBhcmFtLm5vZGVzO1xuICAgICAgdmFyIHVwZGF0ZUluZm8gPSBwYXJhbS51cGRhdGVJbmZvO1xuICAgICAgdmFyIHByb21wdEludmFsaWRJbWFnZSA9IHBhcmFtLnByb21wdEludmFsaWRJbWFnZTtcbiAgICAgIHZhciB2YWxpZGF0ZVVSTCA9IHBhcmFtLnZhbGlkYXRlVVJMO1xuXG4gICAgICBlbGVtZW50VXRpbGl0aWVzLmFkZEJhY2tncm91bmRJbWFnZShub2RlcywgYmdPYmosIHVwZGF0ZUluZm8sIHByb21wdEludmFsaWRJbWFnZSwgdmFsaWRhdGVVUkwpO1xuXG4gICAgICBjeS5mb3JjZVJlbmRlcigpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBub2Rlczogbm9kZXMsXG4gICAgICAgIGJnT2JqOiBiZ09iaixcbiAgICAgICAgdXBkYXRlSW5mbzogdXBkYXRlSW5mbyxcbiAgICAgICAgcHJvbXB0SW52YWxpZEltYWdlOiBwcm9tcHRJbnZhbGlkSW1hZ2UsXG4gICAgICAgIHZhbGlkYXRlVVJMOiB2YWxpZGF0ZVVSTFxuICAgICAgfTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJlbW92ZUJhY2tncm91bmRJbWFnZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGJnT2JqID0gcGFyYW0uYmdPYmo7XG4gICAgICB2YXIgbm9kZXMgPSBwYXJhbS5ub2RlcztcblxuICAgICAgZWxlbWVudFV0aWxpdGllcy5yZW1vdmVCYWNrZ3JvdW5kSW1hZ2Uobm9kZXMsIGJnT2JqKTtcblxuICAgICAgY3kuZm9yY2VSZW5kZXIoKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgbm9kZXM6IG5vZGVzLFxuICAgICAgICBiZ09iajogYmdPYmpcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51cGRhdGVCYWNrZ3JvdW5kSW1hZ2UgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBiZ09iaiA9IHBhcmFtLmJnT2JqO1xuICAgICAgdmFyIG5vZGVzID0gcGFyYW0ubm9kZXM7XG5cbiAgICAgIHZhciBvbGRCZ09iaiA9IGVsZW1lbnRVdGlsaXRpZXMudXBkYXRlQmFja2dyb3VuZEltYWdlKG5vZGVzLCBiZ09iaik7XG5cbiAgICAgIGN5LmZvcmNlUmVuZGVyKCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIG5vZGVzOiBub2RlcyxcbiAgICAgICAgYmdPYmo6IG9sZEJnT2JqXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY2hhbmdlQmFja2dyb3VuZEltYWdlID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgb2xkSW1nID0gcGFyYW0ub2xkSW1nO1xuICAgICAgdmFyIG5ld0ltZyA9IHBhcmFtLm5ld0ltZztcbiAgICAgIHZhciBub2RlcyA9IHBhcmFtLm5vZGVzO1xuICAgICAgdmFyIGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIHZhciB1cGRhdGVJbmZvID0gcGFyYW0udXBkYXRlSW5mbztcbiAgICAgIHZhciBwcm9tcHRJbnZhbGlkSW1hZ2UgPSBwYXJhbS5wcm9tcHRJbnZhbGlkSW1hZ2U7XG4gICAgICB2YXIgdmFsaWRhdGVVUkw9IHBhcmFtLnZhbGlkYXRlVVJMO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VCYWNrZ3JvdW5kSW1hZ2Uobm9kZXMsIG9sZEltZywgbmV3SW1nLCBmaXJzdFRpbWUsIHVwZGF0ZUluZm8sIHByb21wdEludmFsaWRJbWFnZSwgdmFsaWRhdGVVUkwpO1xuXG4gICAgICBjeS5mb3JjZVJlbmRlcigpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvLyBTZWN0aW9uIEVuZFxuICAgIC8vIHNiZ24gYWN0aW9uIGZ1bmN0aW9uc1xuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNvbnZlcnRJbnRvUmV2ZXJzaWJsZVJlYWN0aW9uID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICBsZXQgY29sbGVjdGlvbiA9IGN5LmNvbGxlY3Rpb24oKTtcbiAgICAgIGxldCBtYXBUeXBlID0gZWxlbWVudFV0aWxpdGllcy5nZXRNYXBUeXBlKCk7XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE1hcFR5cGUocGFyYW0ubWFwVHlwZSk7XG4gICAgICAkKCcjbWFwLXR5cGUnKS52YWwocGFyYW0ubWFwVHlwZSk7XG5cbiAgICAgIHBhcmFtLmNvbGxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgIHZhciBzb3VyY2VOb2RlID0gZWRnZS5fcHJpdmF0ZS5kYXRhLnNvdXJjZTtcbiAgICAgICAgdmFyIHRhcmdldE5vZGUgPSBlZGdlLl9wcml2YXRlLmRhdGEudGFyZ2V0O1xuXG4gICAgICAgIGVkZ2UubW92ZSh7c291cmNlOiB0YXJnZXROb2RlLCB0YXJnZXQ6IHNvdXJjZU5vZGV9KTtcblxuICAgICAgICBsZXQgY29udmVydGVkRWRnZSA9IGN5LmdldEVsZW1lbnRCeUlkKGVkZ2UuaWQoKSk7XG5cbiAgICAgICAgaWYoY29udmVydGVkRWRnZS5kYXRhKFwiY3llZGdlYmVuZGVkaXRpbmdEaXN0YW5jZXNcIikpe1xuICAgICAgICAgIGxldCBkaXN0YW5jZSA9IGNvbnZlcnRlZEVkZ2UuZGF0YShcImN5ZWRnZWJlbmRlZGl0aW5nRGlzdGFuY2VzXCIpO1xuICAgICAgICAgIGRpc3RhbmNlID0gZGlzdGFuY2UubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAtMSplbGVtZW50O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnZlcnRlZEVkZ2UuZGF0YShcImN5ZWRnZWJlbmRlZGl0aW5nRGlzdGFuY2VzXCIsIGRpc3RhbmNlLnJldmVyc2UoKSk7XG5cbiAgICAgICAgICBsZXQgd2VpZ2h0ID0gY29udmVydGVkRWRnZS5kYXRhKFwiY3llZGdlYmVuZGVkaXRpbmdXZWlnaHRzXCIpO1xuICAgICAgICAgIHdlaWdodCA9IHdlaWdodC5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIDEtZWxlbWVudDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb252ZXJ0ZWRFZGdlLmRhdGEoXCJjeWVkZ2ViZW5kZWRpdGluZ1dlaWdodHNcIiwgd2VpZ2h0LnJldmVyc2UoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihjb252ZXJ0ZWRFZGdlLmRhdGEoXCJjeWVkZ2Vjb250cm9sZWRpdGluZ0Rpc3RhbmNlc1wiKSl7XG4gICAgICAgICAgbGV0IGRpc3RhbmNlID0gY29udmVydGVkRWRnZS5kYXRhKFwiY3llZGdlY29udHJvbGVkaXRpbmdEaXN0YW5jZXNcIik7XG4gICAgICAgICAgZGlzdGFuY2UgPSBkaXN0YW5jZS5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xKmVsZW1lbnQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29udmVydGVkRWRnZS5kYXRhKFwiY3llZGdlY29udHJvbGVkaXRpbmdEaXN0YW5jZXNcIiwgZGlzdGFuY2UucmV2ZXJzZSgpKTtcblxuICAgICAgICAgIGxldCB3ZWlnaHQgPSBjb252ZXJ0ZWRFZGdlLmRhdGEoXCJjeWVkZ2Vjb250cm9sZWRpdGluZ1dlaWd0aHNcIik7XG4gICAgICAgICAgd2VpZ2h0ID0gd2VpZ2h0Lm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gMS1lbGVtZW50O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnZlcnRlZEVkZ2UuZGF0YShcImN5ZWRnZWNvbnRyb2xlZGl0aW5nV2VpZ3Roc1wiLCB3ZWlnaHQucmV2ZXJzZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb252ZXJ0ZWRFZGdlLl9wcml2YXRlLmRhdGEuY2xhc3MgPT09IFwiY29uc3VtcHRpb25cIikge1xuICAgICAgICAgIGNvbnZlcnRlZEVkZ2UuX3ByaXZhdGUuZGF0YS5jbGFzcyA9IFwicHJvZHVjdGlvblwiO1xuICAgICAgICAgIGNvbnZlcnRlZEVkZ2UuX3ByaXZhdGUuZGF0YS5wb3J0c291cmNlID0gdGFyZ2V0Tm9kZSArIFwiLjFcIjtcbiAgICAgICAgICBjb252ZXJ0ZWRFZGdlLl9wcml2YXRlLmRhdGEucG9ydHRhcmdldCA9IHNvdXJjZU5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29udmVydGVkRWRnZS5fcHJpdmF0ZS5kYXRhLmNsYXNzID09PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIGNvbnZlcnRlZEVkZ2UuX3ByaXZhdGUuZGF0YS5jbGFzcyA9IFwiY29uc3VtcHRpb25cIjtcbiAgICAgICAgICBjb252ZXJ0ZWRFZGdlLl9wcml2YXRlLmRhdGEucG9ydHNvdXJjZSA9IHRhcmdldE5vZGU7XG4gICAgICAgICAgY29udmVydGVkRWRnZS5fcHJpdmF0ZS5kYXRhLnBvcnR0YXJnZXQgPSBzb3VyY2VOb2RlICsgXCIuMVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb24uYWRkKGNvbnZlcnRlZEVkZ2UpO1xuICAgICAgICBjeS5zdHlsZSgpLnVwZGF0ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24sXG4gICAgICAgIG1hcFR5cGU6IG1hcFR5cGUsXG4gICAgICAgIHByb2Nlc3NJZDogcGFyYW0ucHJvY2Vzc0lkXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5tb3ZlRWRnZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIH07XG4gICAgICB2YXIgZWRnZSA9IHBhcmFtLmVkZ2U7XG4gICAgICByZXN1bHQubmFtZSA9IHBhcmFtLm5hbWU7ICAgICAgXG4gICAgIFxuXG4gICAgICByZXN1bHQuc291cmNlID0gZWRnZS5zb3VyY2UoKS5pZCgpO1xuICAgICAgcmVzdWx0LnRhcmdldCA9IGVkZ2UudGFyZ2V0KCkuaWQoKTsgICAgICBcbiAgICAgIHJlc3VsdC5wb3J0c291cmNlICA9ZWRnZS5kYXRhKFwicG9ydHNvdXJjZVwiKTtcbiAgICAgIHJlc3VsdC5wb3J0dGFyZ2V0ID0gZWRnZS5kYXRhKFwicG9ydHRhcmdldFwiKTtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlRGF0YShlZGdlLCAnc291cmNlJywgcGFyYW0uc291cmNlKTtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlRGF0YShlZGdlLCAndGFyZ2V0JywgcGFyYW0udGFyZ2V0KTtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlRGF0YShlZGdlLCAncG9ydHNvdXJjZScsIHBhcmFtLnBvcnRzb3VyY2UpO1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VEYXRhKGVkZ2UsICdwb3J0dGFyZ2V0JywgcGFyYW0ucG9ydHRhcmdldCk7IFxuICAgICAgZWRnZSA9IGVkZ2UubW92ZSh7XG4gICAgICAgIHRhcmdldDogcGFyYW0udGFyZ2V0LFxuICAgICAgICBzb3VyY2UgOiBwYXJhbS5zb3VyY2VcbiAgICBcbiAgICAgfSk7XG5cbiAgICAgcmVzdWx0LmVkZ2UgPSBlZGdlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZml4RXJyb3IgPSBmdW5jdGlvbihwYXJhbSl7XG4gICAgICBcbiAgICAgIHZhciBlcnJvckNvZGUgPSBwYXJhbS5lcnJvckNvZGU7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICByZXN1bHQuZXJyb3JDb2RlID0gZXJyb3JDb2RlO1xuICAgICAgaWYoZXJyb3JDb2RlID09IFwicGQxMDEwMVwiIHx8IGVycm9yQ29kZSA9PSAncGQxMDEwMicpe1xuXG4gICAgICAgIHJlc3VsdC5lZGdlID0gZWxlbWVudFV0aWxpdGllcy5yZXZlcnNlRWRnZShwYXJhbS5lZGdlKTtcblxuICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMDNcIiB8fCBlcnJvckNvZGUgPT0gJ3BkMTAxMDcnKXtcblxuICAgICAgIFxuICAgICAgICBcbiAgICAgICAgcGFyYW0ubmV3Tm9kZXMuZm9yRWFjaChmdW5jdGlvbihuZXdOb2RlKXtcbiAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuYWRkTm9kZShuZXdOb2RlLngsIG5ld05vZGUueSwgbmV3Tm9kZS5jbGFzcywgbmV3Tm9kZS5pZCwgdW5kZWZpbmVkKTtcblxuICAgICAgICAgIFxuICAgICAgICB9KTtcblxuICAgICAgICBwYXJhbS5uZXdFZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKG5ld0VkZ2UpeyAgICAgICAgICBcbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmFkZEVkZ2UobmV3RWRnZS5zb3VyY2UsbmV3RWRnZS50YXJnZXQsbmV3RWRnZS5jbGFzcyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBhcmFtLm9sZEVkZ2VzLmZvckVhY2goZnVuY3Rpb24ob2xkRWRnZSl7XG4gICAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICAgIC8vcmV0dXJuIFxuICAgICAgICAgIG9sZEVkZ2UucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBhcmFtLm5vZGUucmVtb3ZlKCk7XG5cbiAgICAgICAgcmV0dXJuIHBhcmFtO1xuXG4gICAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTA1XCIgfHwgZXJyb3JDb2RlID09ICdwZDEwMTA2Jyl7XG4gICBcbiAgICAgICAgcmVzdWx0LmVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLnJldmVyc2VFZGdlKHBhcmFtLmVkZ2UpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDE0MFwiKXtcbiAgICAgICAgcGFyYW0ubm9kZS5yZW1vdmUoKTtcbiAgICAgICAgcmV0dXJuIHBhcmFtO1xuICAgICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDEwNFwiKSB7XG4gICAgICAgIFxuICAgICAgICBwYXJhbS5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2Upe1xuICAgICAgICAgIGVkZ2UucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBwYXJhbS5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgICAgIG5vZGUucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTA4XCIpe1xuICAgICAgICBwYXJhbS5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2Upe1xuICAgICAgICAgIGVkZ2UucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBwYXJhbS5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgICAgIG5vZGUucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTExXCIpe1xuICAgICAgICBwYXJhbS5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2Upe1xuICAgICAgICAgIGVkZ2UucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTI2XCIpe1xuICAgICAgICBwYXJhbS5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2Upe1xuICAgICAgICAgIGVkZ2UucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBwYXJhbS5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgICAgIG5vZGUucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTA5XCIgfHwgZXJyb3JDb2RlID09IFwicGQxMDEyNFwiKSB7XG4gICAgICAgIFxuICAgICAgICByZXN1bHQubmV3U291cmNlID0gcGFyYW0uZWRnZS5kYXRhKCkuc291cmNlO1xuICAgICAgICByZXN1bHQubmV3VGFyZ2V0ID0gcGFyYW0uZWRnZS5kYXRhKCkudGFyZ2V0O1xuICAgICAgICByZXN1bHQucG9ydHNvdXJjZSA9IHBhcmFtLmVkZ2UuZGF0YSgpLnBvcnRzb3VyY2U7XG4gICAgICAgIHZhciBjbG9uZWRFZGdlID0gcGFyYW0uZWRnZS5jbG9uZSgpO1xuICAgICAgIFxuICAgICAgICB2YXIgZWRnZVBhcmFtcyA9IHtjbGFzcyA6IGNsb25lZEVkZ2UuZGF0YSgpLmNsYXNzLCBsYW5ndWFnZSA6Y2xvbmVkRWRnZS5kYXRhKCkubGFuZ3VhZ2V9O1xuICAgICAgICBjbG9uZWRFZGdlLmRhdGEoKS5zb3VyY2UgPSBwYXJhbS5uZXdTb3VyY2U7XG4gICAgICAgIGNsb25lZEVkZ2UuZGF0YSgpLnRhcmdldCA9IHBhcmFtLm5ld1RhcmdldDtcbiAgICAgICAgY3kucmVtb3ZlKHBhcmFtLmVkZ2UpO1xuICAgICAgICByZXN1bHQuZWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShwYXJhbS5uZXdTb3VyY2UscGFyYW0ubmV3VGFyZ2V0LGVkZ2VQYXJhbXMsIGNsb25lZEVkZ2UuZGF0YSgpLmlkKTsgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDExMlwiKSB7ICAgIFxuICAgICAgICBcbiAgICAgICAgcGFyYW0uY2FsbGJhY2sgPSBlbGVtZW50VXRpbGl0aWVzLm1haW50YWluUG9pbnRlcjsgIFxuICAgICAgICAvLyBJZiB0aGlzIGlzIGZpcnN0IHRpbWUgd2Ugc2hvdWxkIG1vdmUgdGhlIG5vZGUgdG8gaXRzIG5ldyBwYXJlbnQgYW5kIHJlbG9jYXRlIGl0IGJ5IGdpdmVuIHBvc0RpZmYgcGFyYW1zXG4gICAgICAgIC8vIGVsc2Ugd2Ugc2hvdWxkIHJlbW92ZSB0aGUgbW92ZWQgZWxlcyBhbmQgcmVzdG9yZSB0aGUgZWxlcyB0byByZXN0b3JlXG4gICAgICAgIGlmIChwYXJhbS5maXJzdFRpbWUpIHtcbiAgICAgICAgICB2YXIgbmV3UGFyZW50SWQgPSBwYXJhbS5wYXJlbnREYXRhID09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbS5wYXJlbnREYXRhO1xuICAgICAgICAgIC8vIFRoZXNlIGVsZXMgaW5jbHVkZXMgdGhlIG5vZGVzIGFuZCB0aGVpciBjb25uZWN0ZWQgZWRnZXMgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBub2Rlcy5tb3ZlKCkuXG4gICAgICAgICAgLy8gVGhleSBzaG91bGQgYmUgcmVzdG9yZWQgaW4gdW5kb1xuICAgICAgICAgIHZhciB3aXRoRGVzY2VuZGFudCA9IHBhcmFtLm5vZGVzLnVuaW9uKHBhcmFtLm5vZGVzLmRlc2NlbmRhbnRzKCkpO1xuICAgICAgICAgIHJlc3VsdC5lbGVzVG9SZXN0b3JlID0gd2l0aERlc2NlbmRhbnQudW5pb24od2l0aERlc2NlbmRhbnQuY29ubmVjdGVkRWRnZXMoKSk7XG4gICAgICAgICAgLy8gVGhlc2UgYXJlIHRoZSBlbGVzIGNyZWF0ZWQgYnkgbm9kZXMubW92ZSgpLCB0aGV5IHNob3VsZCBiZSByZW1vdmVkIGluIHVuZG8uXG4gICAgICAgICAgcmVzdWx0Lm1vdmVkRWxlcyA9IHBhcmFtLm5vZGVzLm1vdmUoe1wicGFyZW50XCI6IG5ld1BhcmVudElkfSk7XG5cbiAgICAgICAgICB2YXIgcG9zRGlmZiA9IHtcbiAgICAgICAgICAgIHg6IHBhcmFtLnBvc0RpZmZYLFxuICAgICAgICAgICAgeTogcGFyYW0ucG9zRGlmZllcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgZWxlbWVudFV0aWxpdGllcy5tb3ZlTm9kZXMocG9zRGlmZiwgcmVzdWx0Lm1vdmVkRWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LmVsZXNUb1Jlc3RvcmUgPSBwYXJhbS5tb3ZlZEVsZXMucmVtb3ZlKCk7XG4gICAgICAgICAgcmVzdWx0Lm1vdmVkRWxlcyA9IHBhcmFtLmVsZXNUb1Jlc3RvcmUucmVzdG9yZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtLmNhbGxiYWNrKSB7XG4gICAgICAgICAgcmVzdWx0LmNhbGxiYWNrID0gcGFyYW0uY2FsbGJhY2s7IC8vIGtlZXAgdGhlIHByb3ZpZGVkIGNhbGxiYWNrIHNvIGl0IGNhbiBiZSByZXVzZWQgYWZ0ZXIgdW5kby9yZWRvXG4gICAgICAgICAgcGFyYW0uY2FsbGJhY2socmVzdWx0Lm1vdmVkRWxlcyk7IC8vIGFwcGx5IHRoZSBjYWxsYmFjayBvbiBuZXdseSBjcmVhdGVkIGVsZW1lbnRzXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgXG4gICAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTI1XCIpIHtcblxuICAgICAgIHJlc3VsdC5lZGdlID0gcGFyYW0uZWRnZS5yZW1vdmUoKTsgICAgICAgXG4gICAgICAgcmVzdWx0Lm5ld0VkZ2UgPXt9O1xuICAgICAgIHZhciBlZGdlY2xhc3MgPSBwYXJhbS5uZXdFZGdlLmVkZ2VQYXJhbXMuY2xhc3MgPyBwYXJhbS5uZXdFZGdlLmVkZ2VQYXJhbXMuY2xhc3MgOiBwYXJhbS5uZXdFZGdlLmVkZ2VQYXJhbXM7XG4gICAgICAgdmFyIHZhbGlkYXRpb24gPSBlbGVtZW50VXRpbGl0aWVzLnZhbGlkYXRlQXJyb3dFbmRzKGVkZ2VjbGFzcywgY3kuZ2V0RWxlbWVudEJ5SWQocGFyYW0ubmV3RWRnZS5zb3VyY2UpLCBjeS5nZXRFbGVtZW50QnlJZChwYXJhbS5uZXdFZGdlLnRhcmdldCkpO1xuXG4gICAgICAgaWYgKHZhbGlkYXRpb24gPT09ICdyZXZlcnNlJykge1xuICAgICAgICB2YXIgdGVtcCA9IHBhcmFtLm5ld0VkZ2Uuc291cmNlO1xuICAgICAgICBwYXJhbS5uZXdFZGdlLnNvdXJjZSA9IHBhcmFtLm5ld0VkZ2UudGFyZ2V0O1xuICAgICAgICBwYXJhbS5uZXdFZGdlLnRhcmdldCA9IHRlbXA7XG4gICAgICB9XG4gICAgICAgcmVzdWx0Lm5ld0VkZ2UuaWQgPWVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShwYXJhbS5uZXdFZGdlLnNvdXJjZSxwYXJhbS5uZXdFZGdlLnRhcmdldCxwYXJhbS5uZXdFZGdlLmVkZ2VQYXJhbXMpLmlkKCk7XG4gICAgICAgcmVzdWx0Lm5ld0VkZ2Uuc291cmNlID0gcGFyYW0ubmV3RWRnZS5zb3VyY2U7XG4gICAgICAgcmVzdWx0Lm5ld0VkZ2UudGFyZ2V0ID0gcGFyYW0ubmV3RWRnZS50YXJnZXQ7XG4gICAgICAgcmVzdWx0Lm5ld0VkZ2UuZWRnZVBhcmFtcyA9IHBhcmFtLm5ld0VkZ2UuZWRnZVBhcmFtcztcbiAgICAgICBcbiAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIFxuICAgICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDE0MlwiKSB7XG4gICAgICAgIHJlc3VsdC5lZGdlID0gcGFyYW0uZWRnZS5yZW1vdmUoKTsgICAgICAgXG4gICAgICAgIHJlc3VsdC5uZXdFZGdlID17fTtcbiAgICAgICAgdmFyIGVkZ2VjbGFzcyA9IHBhcmFtLm5ld0VkZ2UuZWRnZVBhcmFtcy5jbGFzcyA/IHBhcmFtLm5ld0VkZ2UuZWRnZVBhcmFtcy5jbGFzcyA6IHBhcmFtLm5ld0VkZ2UuZWRnZVBhcmFtcztcbiAgICAgICAgdmFyIHZhbGlkYXRpb24gPSBlbGVtZW50VXRpbGl0aWVzLnZhbGlkYXRlQXJyb3dFbmRzKGVkZ2VjbGFzcywgY3kuZ2V0RWxlbWVudEJ5SWQocGFyYW0ubmV3RWRnZS5zb3VyY2UpLCBjeS5nZXRFbGVtZW50QnlJZChwYXJhbS5uZXdFZGdlLnRhcmdldCkpO1xuXG4gICAgICAgIGlmICh2YWxpZGF0aW9uID09PSAncmV2ZXJzZScpIHtcbiAgICAgICAgIHZhciB0ZW1wID0gcGFyYW0ubmV3RWRnZS5zb3VyY2U7XG4gICAgICAgICBwYXJhbS5uZXdFZGdlLnNvdXJjZSA9IHBhcmFtLm5ld0VkZ2UudGFyZ2V0O1xuICAgICAgICAgcGFyYW0ubmV3RWRnZS50YXJnZXQgPSB0ZW1wO1xuICAgICAgIH1cbiAgICAgICAgcmVzdWx0Lm5ld0VkZ2UuaWQgPWVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShwYXJhbS5uZXdFZGdlLnNvdXJjZSxwYXJhbS5uZXdFZGdlLnRhcmdldCxwYXJhbS5uZXdFZGdlLmVkZ2VQYXJhbXMpLmlkKCk7XG4gICAgICAgIHJlc3VsdC5uZXdFZGdlLnNvdXJjZSA9IHBhcmFtLm5ld0VkZ2Uuc291cmNlO1xuICAgICAgICByZXN1bHQubmV3RWRnZS50YXJnZXQgPSBwYXJhbS5uZXdFZGdlLnRhcmdldDtcbiAgICAgICAgcmVzdWx0Lm5ld0VkZ2UuZWRnZVBhcmFtcyA9IHBhcmFtLm5ld0VkZ2UuZWRnZVBhcmFtcztcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9ZWxzZSB7XG5cbiAgICAgICAgcmVzdWx0Lm5ld1NvdXJjZSA9IHBhcmFtLmVkZ2Uuc291cmNlKCkuaWQoKTtcbiAgICAgICAgcmVzdWx0Lm5ld1RhcmdldCA9IHBhcmFtLmVkZ2UudGFyZ2V0KCkuaWQoKTtcbiAgICAgICAgcmVzdWx0LnBvcnR0YXJnZXQgPSBwYXJhbS5lZGdlLmRhdGEoXCJwb3J0dGFyZ2V0XCIpO1xuICAgICAgICByZXN1bHQuZWRnZSA9IHBhcmFtLmVkZ2UubW92ZSh7XG4gICAgICAgICAgdGFyZ2V0OiBwYXJhbS5uZXdUYXJnZXQsXG4gICAgICAgICAgc291cmNlIDogcGFyYW0ubmV3U291cmNlICAgICAgXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlRGF0YShyZXN1bHQuZWRnZSwgJ3BvcnR0YXJnZXQnLCBwYXJhbS5wb3J0dGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgXG4gICAgICB9XG4gICAgICBcbiAgfVxuICBcbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMudW5maXhFcnJvciA9IGZ1bmN0aW9uKHBhcmFtKXtcbiAgICB2YXIgZXJyb3JDb2RlID0gcGFyYW0uZXJyb3JDb2RlO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICByZXN1bHQuZXJyb3JDb2RlID0gZXJyb3JDb2RlO1xuICAgIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMDFcIiB8fCBlcnJvckNvZGUgPT0gJ3BkMTAxMDInKXtcbiAgICAgXG4gICAgICAgIHJlc3VsdC5lZGdlID0gZWxlbWVudFV0aWxpdGllcy5yZXZlcnNlRWRnZShwYXJhbS5lZGdlKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDEwM1wiIHx8IGVycm9yQ29kZSA9PSAncGQxMDEwNycpe1xuXG4gICAgICBwYXJhbS5uZXdOb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5ld05vZGUpeyAgICBcbiAgICAgICAgY3kucmVtb3ZlKGN5LiQoJyMnK25ld05vZGUuaWQpKSAgICAgIFxuICAgICAgICBcbiAgICAgIH0pO1xuXG4gICAgICBwYXJhbS5ub2RlLnJlc3RvcmUoKTtcblxuICAgICAgcGFyYW0ub2xkRWRnZXMuZm9yRWFjaChmdW5jdGlvbihvbGRFZGdlKXsgIFxuICAgICAgICBvbGRFZGdlLnJlc3RvcmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjeS5hbmltYXRlKHtcbiAgICAgICAgZHVyYXRpb246IDEwMCxcbiAgICAgICAgZWFzaW5nOiAnZWFzZScsXG4gICAgICAgIGZpdCA6e2VsZXM6e30scGFkZGluZzoyMH0sIFxuICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcGFyYW07XG5cbiAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTA1XCIgfHwgZXJyb3JDb2RlID09ICdwZDEwMTA2Jyl7ICBcblxuICAgICAgcmVzdWx0LmVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLnJldmVyc2VFZGdlKHBhcmFtLmVkZ2UpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxNDBcIil7XG4gICAgICBwYXJhbS5ub2RlLnJlc3RvcmUoKTtcbiAgICAgIGN5LmFuaW1hdGUoe1xuICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICBlYXNpbmc6ICdlYXNlJyxcbiAgICAgICAgZml0IDp7ZWxlczp7fSxwYWRkaW5nOjIwfSwgXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDEwNFwiKSB7XG4gICAgICBcbiAgICAgIHBhcmFtLm5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSl7XG4gICAgICAgIG5vZGUucmVzdG9yZSgpO1xuICAgICAgfSk7XG4gICAgICBwYXJhbS5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2Upe1xuICAgICAgICBlZGdlLnJlc3RvcmUoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcmFtO1xuICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMDhcIil7XG4gICAgICBcbiAgICAgIHBhcmFtLm5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSl7XG4gICAgICAgIG5vZGUucmVzdG9yZSgpO1xuICAgICAgfSk7XG4gICAgICBwYXJhbS5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2Upe1xuICAgICAgICBlZGdlLnJlc3RvcmUoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcmFtO1xuICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMTFcIil7XG4gICAgICBwYXJhbS5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2Upe1xuICAgICAgICBlZGdlLnJlc3RvcmUoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcmFtO1xuICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMjZcIil7XG4gICAgICBwYXJhbS5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgICBub2RlLnJlc3RvcmUoKTtcbiAgICAgIH0pO1xuICAgICAgcGFyYW0uZWRnZXMuZm9yRWFjaChmdW5jdGlvbihlZGdlKXtcbiAgICAgICAgZWRnZS5yZXN0b3JlKCk7XG4gICAgICB9KTsgICAgICAgXG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDEwOVwiIHx8IGVycm9yQ29kZSA9PSBcInBkMTAxMjRcIikge1xuXG4gICAgICByZXN1bHQubmV3U291cmNlID0gcGFyYW0uZWRnZS5zb3VyY2UoKS5pZCgpO1xuICAgICAgcmVzdWx0Lm5ld1RhcmdldCA9IHBhcmFtLmVkZ2UudGFyZ2V0KCkuaWQoKTtcbiAgICAgIHJlc3VsdC5wb3J0c291cmNlID0gcGFyYW0ucG9ydHNvdXJjZTtcbiAgICAgIHJlc3VsdC5lZGdlID0gcGFyYW0uZWRnZS5tb3ZlKHtcbiAgICAgICAgdGFyZ2V0OiBwYXJhbS5uZXdUYXJnZXQsXG4gICAgICAgIHNvdXJjZSA6IHBhcmFtLm5ld1NvdXJjZSAgICAgIFxuICAgICAgfSk7XG5cbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlRGF0YShyZXN1bHQuZWRnZSwgJ3BvcnRzb3VyY2UnLCBwYXJhbS5wb3J0c291cmNlKTsgXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMTJcIikge1xuICAgICBcbiAgICAgIC8vIElmIHRoaXMgaXMgZmlyc3QgdGltZSB3ZSBzaG91bGQgbW92ZSB0aGUgbm9kZSB0byBpdHMgbmV3IHBhcmVudCBhbmQgcmVsb2NhdGUgaXQgYnkgZ2l2ZW4gcG9zRGlmZiBwYXJhbXNcbiAgICAgIC8vIGVsc2Ugd2Ugc2hvdWxkIHJlbW92ZSB0aGUgbW92ZWQgZWxlcyBhbmQgcmVzdG9yZSB0aGUgZWxlcyB0byByZXN0b3JlXG4gICAgICBpZiAocGFyYW0uZmlyc3RUaW1lKSB7XG4gICAgICAgIHZhciBuZXdQYXJlbnRJZCA9IHBhcmFtLnBhcmVudERhdGEgPT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtLnBhcmVudERhdGE7XG4gICAgICAgIC8vIFRoZXNlIGVsZXMgaW5jbHVkZXMgdGhlIG5vZGVzIGFuZCB0aGVpciBjb25uZWN0ZWQgZWRnZXMgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBub2Rlcy5tb3ZlKCkuXG4gICAgICAgIC8vIFRoZXkgc2hvdWxkIGJlIHJlc3RvcmVkIGluIHVuZG9cbiAgICAgICAgdmFyIHdpdGhEZXNjZW5kYW50ID0gcGFyYW0ubm9kZXMudW5pb24ocGFyYW0ubm9kZXMuZGVzY2VuZGFudHMoKSk7XG4gICAgICAgIHJlc3VsdC5lbGVzVG9SZXN0b3JlID0gd2l0aERlc2NlbmRhbnQudW5pb24od2l0aERlc2NlbmRhbnQuY29ubmVjdGVkRWRnZXMoKSk7XG4gICAgICAgIC8vIFRoZXNlIGFyZSB0aGUgZWxlcyBjcmVhdGVkIGJ5IG5vZGVzLm1vdmUoKSwgdGhleSBzaG91bGQgYmUgcmVtb3ZlZCBpbiB1bmRvLlxuICAgICAgICByZXN1bHQubW92ZWRFbGVzID0gcGFyYW0ubm9kZXMubW92ZSh7XCJwYXJlbnRcIjogbmV3UGFyZW50SWR9KTtcblxuICAgICAgICB2YXIgcG9zRGlmZiA9IHtcbiAgICAgICAgICB4OiBwYXJhbS5wb3NEaWZmWCxcbiAgICAgICAgICB5OiBwYXJhbS5wb3NEaWZmWVxuICAgICAgICB9O1xuXG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMubW92ZU5vZGVzKHBvc0RpZmYsIHJlc3VsdC5tb3ZlZEVsZXMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdC5lbGVzVG9SZXN0b3JlID0gcGFyYW0ubW92ZWRFbGVzLnJlbW92ZSgpO1xuICAgICAgICByZXN1bHQubW92ZWRFbGVzID0gcGFyYW0uZWxlc1RvUmVzdG9yZS5yZXN0b3JlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbS5jYWxsYmFjaykge1xuICAgICAgICByZXN1bHQuY2FsbGJhY2sgPSBwYXJhbS5jYWxsYmFjazsgLy8ga2VlcCB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgc28gaXQgY2FuIGJlIHJldXNlZCBhZnRlciB1bmRvL3JlZG9cbiAgICAgICAgcGFyYW0uY2FsbGJhY2socmVzdWx0Lm1vdmVkRWxlcyk7IC8vIGFwcGx5IHRoZSBjYWxsYmFjayBvbiBuZXdseSBjcmVhdGVkIGVsZW1lbnRzXG4gICAgICB9XG5cbiAgICAgXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgXG4gICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDEyNVwiKSB7XG5cbiAgICAgIGN5LiQoJyMnK3BhcmFtLm5ld0VkZ2UuaWQpLnJlbW92ZSgpO1xuICAgICAgcGFyYW0uZWRnZSA9IHBhcmFtLmVkZ2UucmVzdG9yZSgpO1xuXG4gICAgXG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgICBcbiAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTQyXCIpIHtcbiAgICAgIGN5LiQoJyMnK3BhcmFtLm5ld0VkZ2UuaWQpLnJlbW92ZSgpO1xuICAgICAgcGFyYW0uZWRnZSA9IHBhcmFtLmVkZ2UucmVzdG9yZSgpO1xuXG4gICAgXG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfWVsc2Uge1xuXG4gICAgICByZXN1bHQubmV3U291cmNlID0gcGFyYW0uZWRnZS5zb3VyY2UoKS5pZCgpO1xuICAgICAgcmVzdWx0Lm5ld1RhcmdldCA9IHBhcmFtLmVkZ2UudGFyZ2V0KCkuaWQoKTtcbiAgICAgIHJlc3VsdC5wb3J0dGFyZ2V0ID0gcGFyYW0uZWRnZS5kYXRhKFwicG9ydHRhcmdldFwiKTtcbiAgICAgIHJlc3VsdC5lZGdlID0gcGFyYW0uZWRnZS5tb3ZlKHtcbiAgICAgICAgdGFyZ2V0OiBwYXJhbS5uZXdUYXJnZXQsXG4gICAgICAgIHNvdXJjZSA6IHBhcmFtLm5ld1NvdXJjZSAgICAgIFxuICAgICAgfSk7XG5cbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlRGF0YShyZXN1bHQuZWRnZSwgJ3BvcnR0YXJnZXQnLCBwYXJhbS5wb3J0dGFyZ2V0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgIFxuICAgIH1cbiAgICBcbiAgfVxuXG4gIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNsb25lSGlnaERlZ3JlZU5vZGUgPSBmdW5jdGlvbihub2RlKXtcblxuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgb2xkWCA9IG5vZGUucG9zaXRpb24oKS54O1xuICAgIHZhciBvbGRZID0gbm9kZS5wb3NpdGlvbigpLnk7XG4gICAgXG4gICAgXG4gICAgdmFyIGNsYWN1bGF0ZU5ld0Nsb25lUG9zaXRpb24gPSBmdW5jdGlvbihzb3VyY2VFbmRQb2ludFgsc291cmNlRW5kUG9pbnRZLHRhcmdldEVuZFBvaW50WCx0YXJnZXRFbmRQb2ludFksZGVzaXJlZERpc3RhbmNlLGRpcmVjdGlvbil7XG4gICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3codGFyZ2V0RW5kUG9pbnRZLXNvdXJjZUVuZFBvaW50WSwyKSsgTWF0aC5wb3codGFyZ2V0RW5kUG9pbnRYLXNvdXJjZUVuZFBvaW50WCwyKSk7XG4gICAgICB2YXIgcmF0aW8gPSBkZXNpcmVkRGlzdGFuY2UvZGlzdGFuY2U7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZihkaXJlY3Rpb24gPT0gXCJzb3VyY2VcIil7IFxuICAgICAgICByZXN1bHQuY3ggPSAoKDEtcmF0aW8pICogc291cmNlRW5kUG9pbnRYKSAgKyAocmF0aW8gKiB0YXJnZXRFbmRQb2ludFgpO1xuICAgICAgICByZXN1bHQuY3kgPSAoKDEtcmF0aW8pICogc291cmNlRW5kUG9pbnRZKSAgKyAocmF0aW8gKiB0YXJnZXRFbmRQb2ludFkpO1xuICAgICAgfWVsc2V7ICAgICAgXG4gICAgICAgIHJlc3VsdC5jeCA9ICgoMS1yYXRpbykgKiB0YXJnZXRFbmRQb2ludFgpICArIChyYXRpbyAqIHNvdXJjZUVuZFBvaW50WCk7XG4gICAgICAgIHJlc3VsdC5jeSA9ICgoMS1yYXRpbykgKiB0YXJnZXRFbmRQb2ludFkpICArIChyYXRpbyAqIHNvdXJjZUVuZFBvaW50WSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTsgICBcbiAgICB2YXIgZWRnZXMgPSBub2RlLmNvbm5lY3RlZEVkZ2VzKCk7XG4gICAgdmFyIGRlc2lyZWREaXN0YW5jZSA9IChub2RlLmhlaWdodCgpID4gbm9kZS53aWR0aCgpPyBub2RlLmhlaWdodCgpOiBub2RlLndpZHRoKCkpKiAwLjE7XG4gICAgZm9yKHZhciBpID0gMSA7IGkgPCBlZGdlcy5sZW5ndGggOyBpKyspe1xuICAgICAgdmFyIGVkZ2UgPSBlZGdlc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGk7XG4gICAgICB2YXIgZWRnZUNsb25lID0gZWRnZS5jbG9uZSgpO1xuICAgICAgdmFyIHN0YXJ0UG9zaXRpb24gPSBlZGdlLnNvdXJjZSgpLmlkKCkgPT0gbm9kZS5pZCgpID8gXCJzb3VyY2VcIiA6IFwidGFyZ2V0XCI7ICAgIFxuICAgICAgdmFyIG5ld1Bvc2l0aW9uID0gY2xhY3VsYXRlTmV3Q2xvbmVQb3NpdGlvbihlZGdlLnNvdXJjZUVuZHBvaW50KCkueCxlZGdlLnNvdXJjZUVuZHBvaW50KCkueSxlZGdlLnRhcmdldEVuZHBvaW50KCkueCxlZGdlLnRhcmdldEVuZHBvaW50KCkueSxkZXNpcmVkRGlzdGFuY2Usc3RhcnRQb3NpdGlvbik7IFxuICAgICAgdmFyIG5ld05vZGVJZCA9IG5vZGUuaWQoKSsnY2xvbmUtJytpbmRleDtcbiAgICAgIC8vZWRnZUNsb25lLmRhdGEoKS5pZCA9IGVkZ2VDbG9uZS5kYXRhKCkuaWQrIFwiLVwiK25ld05vZGVJZDtcbiAgICAgIGlmKGVkZ2Uuc291cmNlKCkuaWQoKSA9PSBub2RlLmlkKCkpeyAgICAgICAgXG4gICAgICAgIGVkZ2VDbG9uZS5kYXRhKCkuc291cmNlID0gbmV3Tm9kZUlkO1xuICAgICAgICBlZGdlQ2xvbmUuZGF0YSgpLnBvcnRzb3VyY2UgPSBuZXdOb2RlSWQ7ICAgIFxuICAgICAgfWVsc2V7XG4gICAgICAgICAgXG4gICAgICAgIGVkZ2VDbG9uZS5kYXRhKCkudGFyZ2V0ID0gbmV3Tm9kZUlkO1xuICAgICAgICBlZGdlQ2xvbmUuZGF0YSgpLnBvcnR0YXJnZXQgPSBuZXdOb2RlSWQ7ICAgIFxuICAgICAgfVxuICAgICAgdmFyIG5ld05vZGUgPSBub2RlLmNsb25lKCk7XG4gICAgICBuZXdOb2RlLmRhdGEoKS5pZCA9IG5ld05vZGVJZDtcbiAgICAgIGN5LmFkZChuZXdOb2RlKTtcbiAgICAgXG4gICAgICBlZGdlLnJlbW92ZSgpO1xuICAgICAgY3kuYWRkKGVkZ2VDbG9uZSk7XG4gICAgICBuZXdOb2RlLnBvc2l0aW9uKHtcbiAgICAgICAgeDogbmV3UG9zaXRpb24uY3gsXG4gICAgICAgIHk6IG5ld1Bvc2l0aW9uLmN5XG4gICAgICB9KTtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0Q2xvbmVNYXJrZXJTdGF0dXMobmV3Tm9kZSwgdHJ1ZSk7XG4gICAgICBcbiAgICB9ICBcbiAgICBcbiAgICB2YXIgbmV3UG9zaXRpb24gPSBjbGFjdWxhdGVOZXdDbG9uZVBvc2l0aW9uKFxuICAgICAgZWRnZXNbMF0uc291cmNlRW5kcG9pbnQoKS54LFxuICAgICAgZWRnZXNbMF0uc291cmNlRW5kcG9pbnQoKS55LFxuICAgICAgZWRnZXNbMF0udGFyZ2V0RW5kcG9pbnQoKS54LFxuICAgICAgZWRnZXNbMF0udGFyZ2V0RW5kcG9pbnQoKS55LFxuICAgICAgZGVzaXJlZERpc3RhbmNlLGVkZ2VzWzBdLnNvdXJjZSgpLmlkKCkgPT0gbm9kZS5pZCgpID8gXCJzb3VyY2VcIiA6IFwidGFyZ2V0XCJcbiAgICAgICk7XG4gIFxuICAgIHZhciBjbG9uZUVkZ2UgPSBlZGdlc1swXS5jbG9uZSgpO1xuICAgIC8vY2xvbmVFZGdlLmRhdGEoKS5pZCA9IGNsb25lRWRnZS5kYXRhKCkuaWQrIFwiLVwiK25vZGUuaWQoKSsnY2xvbmUtMCc7XG4gICAgXG4gICAgZWRnZXNbMF0ucmVtb3ZlKCk7XG4gICAgY3kuYWRkKGNsb25lRWRnZSk7XG4gICAgZWxlbWVudFV0aWxpdGllcy5zZXRDbG9uZU1hcmtlclN0YXR1cyhub2RlLHRydWUpO1xuICAgIG5vZGUucG9zaXRpb24oe1xuICAgICAgeDogbmV3UG9zaXRpb24uY3gsXG4gICAgICB5OiBuZXdQb3NpdGlvbi5jeVxuICAgIH0pO1xuICBcbiAgICByZXN1bHQub2xkWCA9IG9sZFg7ICAgIFxuICAgIHJlc3VsdC5vbGRZID0gb2xkWTtcbiAgICByZXN1bHQubm9kZSA9IG5vZGU7XG4gICAgcmVzdWx0Lm51bWJlck9mRWRnZXMgPSBlZGdlcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJlc3VsdDtcblxuICB9XG5cbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMudW5DbG9uZUhpZ2hEZWdyZWVOb2RlID0gZnVuY3Rpb24ocGFyYW0pe1xuXG4gICAgdmFyIG5vZGUgPSBwYXJhbS5ub2RlO1xuICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0Q2xvbmVNYXJrZXJTdGF0dXMobm9kZSxmYWxzZSk7XG4gICAgbm9kZS5wb3NpdGlvbih7XG4gICAgICB4OiBwYXJhbS5vbGRYLFxuICAgICAgeTogcGFyYW0ub2xkWVxuICAgIH0pO1xuICBcbiAgICBmb3IodmFyIGkgPSAxIDsgaSA8IHBhcmFtLm51bWJlck9mRWRnZXMgOyBpKyspe1xuICAgICAgdmFyIGNsb25lSWQgPSBub2RlLmlkKCkrJ2Nsb25lLScraTtcbiAgICAgIHZhciBjbG9uZSA9IGN5LiQoXCIjXCIrY2xvbmVJZCk7XG4gICAgICB2YXIgY2xvbmVFZGdlID0gY2xvbmUuY29ubmVjdGVkRWRnZXMoKVswXTtcbiAgICAgIHZhciBlZGdlID0gY2xvbmVFZGdlLmNsb25lKCk7XG4gICAgICBcbiAgICBcbiAgICAgIGlmKGVkZ2UuZGF0YSgpLnNvdXJjZSA9PSBjbG9uZUlkKXsgICAgICAgIFxuICAgICAgICBlZGdlLmRhdGEoKS5zb3VyY2UgPSBub2RlLmlkKCk7XG4gICAgICAgIGVkZ2UuZGF0YSgpLnBvcnRzb3VyY2UgPSAgbm9kZS5pZCgpOyAgICBcbiAgICAgIH1lbHNleyAgICAgICAgICBcbiAgICAgICAgZWRnZS5kYXRhKCkudGFyZ2V0ID0gIG5vZGUuaWQoKTtcbiAgICAgICAgZWRnZS5kYXRhKCkucG9ydHRhcmdldCA9ICBub2RlLmlkKCk7ICAgIFxuICAgICAgfVxuXG4gICAgICBjbG9uZUVkZ2UucmVtb3ZlKCk7XG4gICAgICBjbG9uZS5yZW1vdmUoKTtcbiAgICAgIFxuICAgICAgY3kuYWRkKGVkZ2UpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY2hhbmdlTWFwVHlwZSA9IGZ1bmN0aW9uKHBhcmFtKXtcbiAgICB2YXIgcmVzdWx0ID17fTtcbiAgICB2YXIgY3VycmVudE1hcFR5cGUgPSBlbGVtZW50VXRpbGl0aWVzLmdldE1hcFR5cGUoKTtcbiAgICBlbGVtZW50VXRpbGl0aWVzLnNldE1hcFR5cGUocGFyYW0ubWFwVHlwZSk7XG4gICAgcmVzdWx0Lm1hcFR5cGUgPSBjdXJyZW50TWFwVHlwZTtcbiAgICByZXN1bHQuY2FsbGJhY2sgPSBwYXJhbS5jYWxsYmFjaztcbiAgICBwYXJhbS5jYWxsYmFjaygpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB9XG5cbiAgcmV0dXJuIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zRXh0ZW5kZXI7XG59O1xuIl0sIm5hbWVzIjpbImxpYnMiLCJyZXF1aXJlIiwiZ2V0TGlicyIsIm1vZHVsZSIsImV4cG9ydHMiLCJzYmdudml6SW5zdGFuY2UiLCJ1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucyIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInRvcG9sb2d5R3JvdXBpbmciLCJ1bmRvUmVkb0FjdGlvbkZ1bmN0aW9uc0V4dGVuZGVyIiwicGFyYW0iLCJzYmdudml6SW5zdGFuY2VVdGlsaXRpZXMiLCJnZXRJbnN0YW5jZSIsImdldEN5Iiwic2lmVG9wb2xvZ3lHcm91cGluZyIsImV4dGVuZCIsImFwcGx5U0lGVG9wb2xvZ3lHcm91cGluZyIsIm9sZEVsZXMiLCJuZXdFbGVzIiwiZmlyc3RUaW1lIiwiZWxlbWVudHMiLCJhcHBseSIsInVuYXBwbHkiLCJpc0dyYXBoVG9wb2xvZ3lMb2NrZWQiLCJ1bmxvY2tHcmFwaFRvcG9sb2d5IiwibG9ja0dyYXBoVG9wb2xvZ3kiLCJyZW1vdmUiLCJyZXN0b3JlIiwidG9nZ2xlQXBwbGllZEZsYWciLCJyZXN1bHQiLCJhZGROb2RlIiwibmV3Tm9kZSIsIngiLCJ5IiwiaWQiLCJwYXJlbnQiLCJ2aXNpYmlsaXR5IiwicmVzdG9yZUVsZXMiLCJlbGVzIiwiYWRkRWRnZSIsIm5ld0VkZ2UiLCJzb3VyY2UiLCJ0YXJnZXQiLCJhZGRQcm9jZXNzV2l0aENvbnZlbmllbnRFZGdlcyIsInByb2Nlc3NUeXBlIiwiY3JlYXRlQ29tcG91bmRGb3JHaXZlbk5vZGVzIiwibm9kZXNUb01ha2VDb21wb3VuZCIsInJlbW92ZWRFbGVzIiwidW5pb24iLCJkZXNjZW5kYW50cyIsImNvbm5lY3RlZEVkZ2VzIiwib2xkUGFyZW50SWQiLCJkYXRhIiwiY29tcG91bmRUeXBlIiwibWFpbnRhaW5Qb2ludGVyIiwiY3JlYXRlVGVtcGxhdGVSZWFjdGlvbiIsInRlbXBsYXRlVHlwZSIsIm1hY3JvbW9sZWN1bGVMaXN0IiwiY29tcGxleE5hbWUiLCJwcm9jZXNzUG9zaXRpb24iLCJ0aWxpbmdQYWRkaW5nVmVydGljYWwiLCJ0aWxpbmdQYWRkaW5nSG9yaXpvbnRhbCIsImVkZ2VMZW5ndGgiLCJsYXlvdXRQYXJhbSIsImFkZCIsInVuc2VsZWN0Iiwic2VsZWN0IiwiY3JlYXRlQWN0aXZhdGlvblJlYWN0aW9uIiwicHJvdGVpbk5hbWUiLCJyZXZlcnNlIiwiY3JlYXRlVHJhbnNsYXRpb24iLCJyZWd1bGF0b3JMYWJlbCIsIm91dHB1dExhYmVsIiwib3JpZW50YXRpb24iLCJjcmVhdGVUcmFuc2NyaXB0aW9uIiwibGFiZWwiLCJjcmVhdGVEZWdyYWRhdGlvbiIsIm1hY3JvbW9sZWN1bGUiLCJjcmVhdGVDb21wbGV4UHJvdGVpbkZvcm1hdGlvbiIsInByb3RlaW5MYWJlbHMiLCJjb21wbGV4TGFiZWwiLCJyZWd1bGF0b3IiLCJjcmVhdGVNdWx0aW1lcml6YXRpb24iLCJyZWd1bGF0b3JNdWx0aW1lciIsImNyZWF0ZUNvbnZlcnNpb24iLCJpbnB1dEluZm9ib3hMYWJlbHMiLCJvdXRwdXRJbmZvYm94TGFiZWxzIiwiY3JlYXRlTWV0YWJvbGljUmVhY3Rpb24iLCJpbnB1dHMiLCJvdXRwdXRzIiwicmV2ZXJzaWJsZSIsImNyZWF0ZU1ldGFib2xpY0NhdGFseXRpY0FjdGl2aXR5IiwiaW5wdXROb2RlTGlzdCIsIm91dHB1dE5vZGVMaXN0IiwiY2F0YWx5c3ROYW1lIiwiY2F0YWx5c3RUeXBlIiwiY3JlYXRlVHJhbnNjcmlwdGlvblJlYWN0aW9uIiwiZ2VuZU5hbWUiLCJtUm5hTmFtZSIsImNyZWF0ZVRyYW5zbGF0aW9uUmVhY3Rpb24iLCJnZXROb2RlUG9zaXRpb25zIiwicG9zaXRpb25zIiwibm9kZXMiLCJlYWNoIiwiZWxlIiwiaSIsInBvc2l0aW9uIiwicmV0dXJuVG9Qb3NpdGlvbnMiLCJjdXJyZW50UG9zaXRpb25zIiwicG9zIiwicmVzaXplTm9kZXMiLCJwZXJmb3JtT3BlcmF0aW9uIiwic2l6ZU1hcCIsInVzZUFzcGVjdFJhdGlvIiwicHJlc2VydmVSZWxhdGl2ZVBvcyIsImxlbmd0aCIsIm5vZGUiLCJpc1BhcmVudCIsInciLCJoIiwiYmlhc0wiLCJiaWFzUiIsImJpYXNUIiwiYmlhc0IiLCJ3aWR0aCIsImhlaWdodCIsInN0eWxlIiwidXBkYXRlIiwiY2hhbmdlTm9kZUxhYmVsIiwiX3ByaXZhdGUiLCJ1cGRhdGVJbmZvYm94U3R5bGUiLCJpbmRleCIsIm5ld1Byb3BzIiwiJCIsInVwZGF0ZUluZm9ib3hPYmoiLCJvYmoiLCJjaGFuZ2VEYXRhIiwibmFtZSIsInZhbHVlTWFwIiwidXBkYXRlU2V0RmllbGQiLCJ1cGRhdGVzIiwiZmllbGROYW1lIiwidG9EZWxldGUiLCJ0b0FkZCIsImNhbGxiYWNrIiwiYWRkZWQiLCJkZWxldGVkIiwiY2hhbmdlQ3NzIiwiY3NzIiwiY2hhbmdlRm9udFByb3BlcnRpZXMiLCJwcm9wIiwic2hvd0FuZFBlcmZvcm1MYXlvdXQiLCJsYXlvdXRwYXJhbSIsInZpZXdVdGlsaXRpZXMiLCJzaG93IiwidW5kb1Nob3dBbmRQZXJmb3JtTGF5b3V0IiwiaGlkZSIsImhpZGVBbmRQZXJmb3JtTGF5b3V0IiwidW5kb0hpZGVBbmRQZXJmb3JtTGF5b3V0IiwiZGVsZXRlQW5kUGVyZm9ybUxheW91dCIsInVuZG9EZWxldGVBbmRQZXJmb3JtTGF5b3V0IiwiY2hhbmdlU3RhdGVPckluZm9Cb3giLCJ0eXBlIiwidGVtcERhdGEiLCJzYXZlVW5pdHMiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsInJlc3RvcmVVbml0cyIsImZvcmNlUmVuZGVyIiwiYWRkU3RhdGVPckluZm9Cb3giLCJsb2NhdGlvbk9iaiIsInJlbW92ZVN0YXRlT3JJbmZvQm94IiwiZml0VW5pdHMiLCJsb2NhdGlvbnMiLCJmb3JFYWNoIiwiYm94IiwiYmJveCIsIm9sZFNpZGUiLCJhbmNob3JTaWRlIiwibW9kaWZ5VW5pdHMiLCJzZXRNdWx0aW1lclN0YXR1cyIsInN0YXR1cyIsInJlc3VsdFN0YXR1cyIsImlzTXVsdGltZXIiLCJlbmRzV2l0aCIsInNldEFjdGl2ZVN0YXR1cyIsImlzQWN0aXZlIiwic3RhcnRzV2l0aCIsInNldEh5cG90aGV0aWNhbFN0YXR1cyIsImlzSHlwb3RoZXRpY2FsIiwiaW5jbHVkZXMiLCJzZXRDbG9uZU1hcmtlclN0YXR1cyIsImN1cnJlbnRTdGF0dXMiLCJzZXREZWZhdWx0UHJvcGVydHkiLCJzYmduY2xhc3MiLCJjbGFzc0RlZmF1bHRzIiwiZ2V0RGVmYXVsdFByb3BlcnRpZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3BNYXAiLCJzZXREZWZhdWx0UHJvcGVydGllcyIsImFkZEJhY2tncm91bmRJbWFnZSIsImJnT2JqIiwidXBkYXRlSW5mbyIsInByb21wdEludmFsaWRJbWFnZSIsInZhbGlkYXRlVVJMIiwicmVtb3ZlQmFja2dyb3VuZEltYWdlIiwidXBkYXRlQmFja2dyb3VuZEltYWdlIiwib2xkQmdPYmoiLCJjaGFuZ2VCYWNrZ3JvdW5kSW1hZ2UiLCJvbGRJbWciLCJuZXdJbWciLCJjb252ZXJ0SW50b1JldmVyc2libGVSZWFjdGlvbiIsImNvbGxlY3Rpb24iLCJtYXBUeXBlIiwiZ2V0TWFwVHlwZSIsInNldE1hcFR5cGUiLCJ2YWwiLCJlZGdlIiwic291cmNlTm9kZSIsInRhcmdldE5vZGUiLCJtb3ZlIiwiY29udmVydGVkRWRnZSIsImdldEVsZW1lbnRCeUlkIiwiZGlzdGFuY2UiLCJtYXAiLCJlbGVtZW50Iiwid2VpZ2h0IiwicG9ydHNvdXJjZSIsInBvcnR0YXJnZXQiLCJwcm9jZXNzSWQiLCJtb3ZlRWRnZSIsImZpeEVycm9yIiwiZXJyb3JDb2RlIiwicmV2ZXJzZUVkZ2UiLCJuZXdOb2RlcyIsIm5ld0VkZ2VzIiwib2xkRWRnZXMiLCJvbGRFZGdlIiwiZWRnZXMiLCJuZXdTb3VyY2UiLCJuZXdUYXJnZXQiLCJjbG9uZWRFZGdlIiwiY2xvbmUiLCJlZGdlUGFyYW1zIiwibGFuZ3VhZ2UiLCJuZXdQYXJlbnRJZCIsInBhcmVudERhdGEiLCJ3aXRoRGVzY2VuZGFudCIsImVsZXNUb1Jlc3RvcmUiLCJtb3ZlZEVsZXMiLCJwb3NEaWZmIiwicG9zRGlmZlgiLCJwb3NEaWZmWSIsIm1vdmVOb2RlcyIsImVkZ2VjbGFzcyIsInZhbGlkYXRpb24iLCJ2YWxpZGF0ZUFycm93RW5kcyIsInRlbXAiLCJ1bmZpeEVycm9yIiwiYW5pbWF0ZSIsImR1cmF0aW9uIiwiZWFzaW5nIiwiZml0IiwicGFkZGluZyIsImNvbXBsZXRlIiwiY2xvbmVIaWdoRGVncmVlTm9kZSIsIm9sZFgiLCJvbGRZIiwiY2xhY3VsYXRlTmV3Q2xvbmVQb3NpdGlvbiIsInNvdXJjZUVuZFBvaW50WCIsInNvdXJjZUVuZFBvaW50WSIsInRhcmdldEVuZFBvaW50WCIsInRhcmdldEVuZFBvaW50WSIsImRlc2lyZWREaXN0YW5jZSIsImRpcmVjdGlvbiIsIk1hdGgiLCJzcXJ0IiwicG93IiwicmF0aW8iLCJjeCIsImVkZ2VDbG9uZSIsInN0YXJ0UG9zaXRpb24iLCJuZXdQb3NpdGlvbiIsInNvdXJjZUVuZHBvaW50IiwidGFyZ2V0RW5kcG9pbnQiLCJuZXdOb2RlSWQiLCJjbG9uZUVkZ2UiLCJudW1iZXJPZkVkZ2VzIiwidW5DbG9uZUhpZ2hEZWdyZWVOb2RlIiwiY2xvbmVJZCIsImNoYW5nZU1hcFR5cGUiLCJjdXJyZW50TWFwVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/ur-action-functions-extender-factory.js\n");

/***/ }),

/***/ "./node_modules/lodash.isequal/index.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash.isequal/index.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.isequal/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});