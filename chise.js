/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["chise"] = factory();
	else
		root["chise"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function () {\n  var chise = function chise(_options) {\n    var param = {}; // Access the libs\n\n    var libs = (__webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n\n    var optionUtilities = __webpack_require__(/*! ./utilities/option-utilities-factory */ \"./src/utilities/option-utilities-factory.js\")();\n\n    var options = optionUtilities.extendOptions(_options); // Extends the default options with the given options\n    // Create an sbgnviz instance\n\n    var sbgnvizInstanceUtilities = __webpack_require__(/*! ./utilities/sbgnviz-instance-utilities-factory */ \"./src/utilities/sbgnviz-instance-utilities-factory.js\")();\n\n    var sbgnvizInstance = sbgnvizInstanceUtilities(options); // Register undo/redo actions\n\n    var registerUndoRedoActions = __webpack_require__(/*! ./utilities/register-undo-redo-actions-factory */ \"./src/utilities/register-undo-redo-actions-factory.js\")();\n\n    var mainUtilities = __webpack_require__(/*! ./utilities/main-utilities-factory */ \"./src/utilities/main-utilities-factory.js\")();\n\n    var elementUtilitiesExtender = __webpack_require__(/*! ./utilities/element-utilities-extender-factory */ \"./src/utilities/element-utilities-extender-factory.js\")();\n\n    var undoRedoActionFunctionsExtender = __webpack_require__(/*! ./utilities/ur-action-functions-extender-factory */ \"./src/utilities/ur-action-functions-extender-factory.js\")();\n\n    var sifTopologyGrouping = __webpack_require__(/*! ./utilities/topology-grouping-factory */ \"./src/utilities/topology-grouping-factory.js\")();\n\n    var elementUtilities = sbgnvizInstance.elementUtilities;\n    var undoRedoActionFunctions = sbgnvizInstance.undoRedoActionFunctions;\n    param.sbgnvizInstanceUtilities = sbgnvizInstanceUtilities;\n    param.optionUtilities = optionUtilities;\n    param.elementUtilities = elementUtilities;\n    param.undoRedoActionFunctions = undoRedoActionFunctions;\n    param.sifTopologyGrouping = sifTopologyGrouping;\n\n    var shouldApply = function shouldApply() {\n      return param.elementUtilities.mapType === 'SIF';\n    };\n\n    undoRedoActionFunctionsExtender(param);\n    elementUtilitiesExtender(param);\n    registerUndoRedoActions(param);\n    mainUtilities(param);\n    sifTopologyGrouping(param, {\n      metaEdgeIdentifier: 'sif-meta',\n      lockGraphTopology: true,\n      shouldApply: shouldApply\n    }); // Expose the api\n\n    var api = {}; // Expose the properties inherited from sbgnviz\n    // then override some of these properties and expose some new properties\n\n    for (var prop in sbgnvizInstance) {\n      api[prop] = sbgnvizInstance[prop];\n    } // Expose each main utility seperately\n\n\n    for (var prop in mainUtilities) {\n      api[prop] = mainUtilities[prop];\n    } // Expose getSbgnvizInstance()\n\n\n    api.getSbgnvizInstance = sbgnvizInstanceUtilities.getInstance; // Expose elementUtilities and undoRedoActionFunctions as is\n\n    api.elementUtilities = elementUtilities;\n    api.undoRedoActionFunctions = undoRedoActionFunctions;\n    api.sifTopologyGrouping = sifTopologyGrouping;\n    return api;\n  }; // Register chise with given libraries\n\n\n  chise.register = function (_libs) {\n    var libs = {};\n    libs.jQuery = _libs.jQuery || jQuery;\n    libs.cytoscape = _libs.cytoscape || cytoscape;\n    libs.sbgnviz = _libs.sbgnviz || sbgnviz;\n    libs.saveAs = _libs.filesaver ? _libs.filesaver.saveAs : saveAs;\n    libs.sbgnviz.register(_libs); // Register sbgnviz with the given libs\n    // inherit exposed static properties of sbgnviz other than register\n\n    for (var prop in libs.sbgnviz) {\n      if (prop !== 'register') {\n        chise[prop] = libs.sbgnviz[prop];\n      }\n    } // Set the libraries to access them from any file\n\n\n    var libUtilities = __webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\n    libUtilities.setLibs(libs);\n  };\n\n  if ( true && module.exports) {\n    module.exports = chise;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/utilities/element-utilities-extender-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/element-utilities-extender-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// Extends sbgnviz.elementUtilities\nvar libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n\nvar jQuery = $ = libs.jQuery;\n\nmodule.exports = function () {\n  var options, sbgnvizInstance, elementUtilities, cy;\n\n  function elementUtilitiesExtender(param) {\n    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();\n    options = param.optionUtilities.getOptions();\n    elementUtilities = sbgnvizInstance.elementUtilities;\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    extend(); // Return the extended elementUtilities\n\n    return elementUtilities;\n  } // Extends elementUtilities with chise specific facilities\n\n\n  function extend() {\n    // Section Start\n    // Add remove utilities\n    elementUtilities.addNode = function (x, y, nodeParams, id, parent, visibility) {\n      if (_typeof(nodeParams) != 'object') {\n        var sbgnclass = nodeParams;\n      } else {\n        var sbgnclass = nodeParams[\"class\"];\n        var language = nodeParams.language;\n      }\n\n      var css = {}; //('sbgnclass', sbgnclass)\n      // if there is no specific default width or height for\n      // sbgnclass these sizes are used\n\n      var defaultWidth = 50;\n      var defaultHeight = 50;\n\n      if (visibility) {\n        css.visibility = visibility;\n      }\n\n      var data = {\n        \"class\": sbgnclass,\n        language: language,\n        bbox: {\n          w: defaultWidth,\n          h: defaultHeight,\n          x: x,\n          y: y\n        },\n        statesandinfos: [],\n        ports: []\n      }; //console.log(\"data\", data)\n\n      if (id) {\n        data.id = id;\n      } else {\n        data.id = elementUtilities.generateNodeId();\n      }\n\n      if (parent) {\n        data.parent = parent;\n      }\n\n      this.extendNodeDataWithClassDefaults(data, sbgnclass); // some defaults are not set by extendNodeDataWithClassDefaults()\n      //console.log(\"sbgnclass\", sbgnclass)\n\n      var defaults = this.getDefaultProperties(sbgnclass);\n\n      if (defaults['multimer']) {\n        data[\"class\"] += ' multimer';\n      }\n\n      if (defaults['clonemarker']) {\n        data['clonemarker'] = true;\n      }\n\n      if (defaults['active']) {\n        data[\"class\"] = 'active ' + data[\"class\"];\n      }\n\n      if (defaults['hypothetical']) {\n        data[\"class\"] = 'hypothetical ' + data[\"class\"];\n      }\n\n      data.bbox['w'] = defaults['width'];\n      data.bbox['h'] = defaults['height']; //console.log(\"data\", data)\n\n      var eles = cy.add({\n        group: \"nodes\",\n        data: data,\n        css: css,\n        position: {\n          x: x,\n          y: y\n        }\n      }); //console.log('eles', eles)\n\n      var newNode = eles[eles.length - 1]; // Get the default ports ordering for the nodes with given sbgnclass\n\n      var ordering = defaults['ports-ordering']; // If there is a default ports ordering for the nodes with given sbgnclass and it is different than 'none' set the ports ordering to that ordering\n\n      if (ordering && ordering !== 'none') {\n        this.setPortsOrdering(newNode, ordering);\n      }\n\n      if (language == \"AF\" && !elementUtilities.canHaveMultipleUnitOfInformation(newNode)) {\n        if (sbgnclass != \"BA plain\") {\n          // if AF node can have label i.e: not plain biological activity\n          var uoi_obj = {\n            clazz: \"unit of information\"\n          };\n          uoi_obj.label = {\n            text: \"\"\n          };\n          uoi_obj.bbox = {\n            w: 12,\n            h: 12\n          };\n          elementUtilities.addStateOrInfoBox(newNode, uoi_obj);\n        }\n      } // node bg image was unexpectedly not rendered until it is clicked\n      // use this dirty hack until finding a solution to the problem\n\n\n      var bgImage = newNode.data('background-image'); //alert('bgImage', bgImage)\n\n      if (bgImage) {\n        newNode.data('background-image', bgImage);\n      }\n\n      return newNode;\n    }; //Saves old aux units of given node\n\n\n    elementUtilities.saveUnits = function (node) {\n      var tempData = [];\n      var index = 0;\n      node.data('statesandinfos').forEach(function (ele) {\n        tempData.push({\n          x: ele.bbox.x,\n          y: ele.bbox.y,\n          anchorSide: ele.anchorSide\n        });\n        index++;\n      });\n      return tempData;\n    }; //Restores from given data\n\n\n    elementUtilities.restoreUnits = function (node, data) {\n      var index = 0;\n      node.data('statesandinfos').forEach(function (ele) {\n        if (data !== undefined) {\n          ele.bbox.x = data[index].x;\n          ele.bbox.y = data[index].y;\n          var anchorSide = ele.anchorSide;\n          ele.anchorSide = data[index].anchorSide;\n          elementUtilities.modifyUnits(node, ele, anchorSide);\n          index++;\n        }\n      });\n    }; //Modify aux unit layouts\n\n\n    elementUtilities.modifyUnits = function (node, ele, anchorSide) {\n      console.log(\"elementUtilities.modifyUnits\", node);\n      instance.classes.AuxUnitLayout.modifyUnits(node, ele, anchorSide, cy);\n    }; //For reversible reactions both side of the process can be input/output\n    //Group ID identifies to which group of nodes the edge is going to be connected for reversible reactions(0: group 1 ID and 1:group 2 ID)\n\n\n    elementUtilities.addEdge = function (source, target, edgeParams, id, visibility, groupID) {\n      if (_typeof(edgeParams) != 'object') {\n        var sbgnclass = edgeParams;\n      } else {\n        var sbgnclass = edgeParams[\"class\"];\n        var language = edgeParams.language;\n      }\n\n      var css = {};\n\n      if (visibility) {\n        css.visibility = visibility;\n      }\n\n      var data = {\n        source: source,\n        target: target,\n        \"class\": sbgnclass,\n        language: language\n      };\n      var defaults = elementUtilities.getDefaultProperties(sbgnclass); // extend the data with default properties of edge style\n\n      Object.keys(defaults).forEach(function (prop) {\n        data[prop] = defaults[prop];\n      });\n\n      if (id) {\n        data.id = id;\n      } else {\n        data.id = elementUtilities.generateEdgeId();\n      }\n\n      if (elementUtilities.canHaveSBGNCardinality(sbgnclass)) {\n        data.cardinality = 0;\n      }\n\n      var sourceNode = cy.getElementById(source); // The original source node\n\n      var targetNode = cy.getElementById(target); // The original target node\n\n      var sourceHasPorts = sourceNode.data('ports').length === 2;\n      var targetHasPorts = targetNode.data('ports').length === 2; // The portsource and porttarget variables\n\n      var portsource;\n      var porttarget;\n      /*\n       * Get input/output port id's of a node with the assumption that the node has valid ports.\n       */\n\n      var getIOPortIds = function getIOPortIds(node) {\n        var nodeInputPortId, nodeOutputPortId;\n        var nodePortsOrdering = sbgnvizInstance.elementUtilities.getPortsOrdering(node);\n        var nodePorts = node.data('ports');\n\n        if (nodePortsOrdering === 'L-to-R' || nodePortsOrdering === 'R-to-L') {\n          var leftPortId = nodePorts[0].x < 0 ? nodePorts[0].id : nodePorts[1].id; // The x value of left port is supposed to be negative\n\n          var rightPortId = nodePorts[0].x > 0 ? nodePorts[0].id : nodePorts[1].id; // The x value of right port is supposed to be positive\n\n          /*\n           * If the port ordering is left to right then the input port is the left port and the output port is the right port.\n           * Else if it is right to left it is vice versa\n           */\n\n          nodeInputPortId = nodePortsOrdering === 'L-to-R' ? leftPortId : rightPortId;\n          nodeOutputPortId = nodePortsOrdering === 'R-to-L' ? leftPortId : rightPortId;\n        } else if (nodePortsOrdering === 'T-to-B' || nodePortsOrdering === 'B-to-T') {\n          var topPortId = nodePorts[0].y < 0 ? nodePorts[0].id : nodePorts[1].id; // The y value of top port is supposed to be negative\n\n          var bottomPortId = nodePorts[0].y > 0 ? nodePorts[0].id : nodePorts[1].id; // The y value of bottom port is supposed to be positive\n\n          /*\n           * If the port ordering is top to bottom then the input port is the top port and the output port is the bottom port.\n           * Else if it is right to left it is vice versa\n           */\n\n          nodeInputPortId = nodePortsOrdering === 'T-to-B' ? topPortId : bottomPortId;\n          nodeOutputPortId = nodePortsOrdering === 'B-to-T' ? topPortId : bottomPortId;\n        } // Return an object containing the IO ports of the node\n\n\n        return {\n          inputPortId: nodeInputPortId,\n          outputPortId: nodeOutputPortId\n        };\n      }; // If at least one end of the edge has ports then we should determine the ports where the edge should be connected.\n\n\n      if (sourceHasPorts || targetHasPorts) {\n        var sourceNodeInputPortId, sourceNodeOutputPortId, targetNodeInputPortId, targetNodeOutputPortId; // If source node has ports set the variables dedicated for its IO ports\n\n        if (sourceHasPorts) {\n          var ioPorts = getIOPortIds(sourceNode);\n          sourceNodeInputPortId = ioPorts.inputPortId;\n          sourceNodeOutputPortId = ioPorts.outputPortId;\n        } // If target node has ports set the variables dedicated for its IO ports\n\n\n        if (targetHasPorts) {\n          var ioPorts = getIOPortIds(targetNode);\n          targetNodeInputPortId = ioPorts.inputPortId;\n          targetNodeOutputPortId = ioPorts.outputPortId;\n        }\n\n        if (sbgnclass === 'consumption') {\n          // A consumption edge should be connected to the input port of the target node which is supposed to be a process (any kind of)\n          portsource = sourceNodeOutputPortId;\n          porttarget = targetNodeInputPortId;\n        } else if (sbgnclass === 'production') {\n          // A production edge should be connected to the output port of the source node which is supposed to be a process (any kind of)\n          // A modulation edge may have a logical operator as source node in this case the edge should be connected to the output port of it\n          // The below assignment satisfy all of these condition\n          if (groupID == 0 || groupID == undefined) {\n            // groupID 0 for reversible reactions group 0\n            portsource = sourceNodeOutputPortId;\n            porttarget = targetNodeInputPortId;\n          } else {\n            //if reaction is reversible and edge belongs to group 1\n            portsource = sourceNodeInputPortId;\n          }\n        } else if (elementUtilities.isModulationArcClass(sbgnclass) || elementUtilities.isAFArcClass(sbgnclass)) {\n          portsource = sourceNodeOutputPortId;\n        } else if (sbgnclass === 'logic arc') {\n          var srcClass = sourceNode.data('class');\n          var tgtClass = targetNode.data('class');\n          var isSourceLogicalOp = srcClass === 'and' || srcClass === 'or' || srcClass === 'not';\n          var isTargetLogicalOp = tgtClass === 'and' || tgtClass === 'or' || tgtClass === 'not';\n\n          if (isSourceLogicalOp && isTargetLogicalOp) {\n            // If both end are logical operators then the edge should be connected to the input port of the target and the output port of the input\n            porttarget = targetNodeInputPortId;\n            portsource = sourceNodeOutputPortId;\n          } // If just one end of logical operator then the edge should be connected to the input port of the logical operator\n          else if (isSourceLogicalOp) {\n            portsource = sourceNodeInputPortId;\n            porttarget = targetNodeOutputPortId;\n          } else if (isTargetLogicalOp) {\n            portsource = sourceNodeOutputPortId;\n            porttarget = targetNodeInputPortId;\n          }\n        }\n      } // The default portsource/porttarget are the source/target themselves. If they are not set use these defaults.\n      // The portsource and porttarget are determined set them in data object.\n\n\n      data.portsource = portsource || source;\n      data.porttarget = porttarget || target;\n      var eles = cy.add({\n        group: \"edges\",\n        data: data,\n        css: css\n      });\n      var newEdge = eles[eles.length - 1];\n      return newEdge;\n    };\n\n    elementUtilities.addProcessWithConvenientEdges = function (_source, _target, nodeParams) {\n      // If source and target IDs are given get the elements by IDs\n      var source = typeof _source === 'string' ? cy.getElementById(_source) : _source;\n      var target = typeof _target === 'string' ? cy.getElementById(_target) : _target; // Process parent should be the closest common ancestor of the source and target nodes\n\n      var processParent = cy.collection([source[0], target[0]]).commonAncestors().first(); // Process should be at the middle of the source and target nodes\n\n      var x = (source.position('x') + target.position('x')) / 2;\n      var y = (source.position('y') + target.position('y')) / 2; // Create the process with given/calculated variables\n\n      var process = elementUtilities.addNode(x, y, nodeParams, undefined, processParent.id());\n      var xdiff = source.position('x') - target.position('x');\n      var ydiff = source.position('y') - target.position('y');\n\n      if (Math.abs(xdiff) >= Math.abs(ydiff)) {\n        if (xdiff < 0) elementUtilities.setPortsOrdering(process, 'L-to-R');else elementUtilities.setPortsOrdering(process, 'R-to-L');\n      } else {\n        if (ydiff < 0) elementUtilities.setPortsOrdering(process, 'T-to-B');else elementUtilities.setPortsOrdering(process, 'B-to-T');\n      } // Create the edges one is between the process and the source node (which should be a consumption),\n      // the other one is between the process and the target node (which should be a production).\n      // For more information please refer to SBGN-PD reference card.\n\n\n      var edgeBtwSrc = elementUtilities.addEdge(source.id(), process.id(), {\n        \"class\": 'consumption',\n        language: nodeParams.language\n      });\n      var edgeBtwTgt = elementUtilities.addEdge(process.id(), target.id(), {\n        \"class\": 'production',\n        language: nodeParams.language\n      }); // Create a collection including the elements and to be returned\n\n      var collection = cy.collection([process[0], edgeBtwSrc[0], edgeBtwTgt[0]]);\n      return collection;\n    };\n    /*\n     * This method assumes that param.nodesToMakeCompound contains at least one node\n     * and all of the nodes including in it have the same parent. It creates a compound fot the given nodes an having the given type.\n     */\n\n\n    elementUtilities.createCompoundForGivenNodes = function (nodesToMakeCompound, compoundType) {\n      var oldParentId = nodesToMakeCompound[0].data(\"parent\");\n      var language = nodesToMakeCompound[0].data(\"language\"); // if nodesToMakeCompound contain both PD and AF nodes, then set language of compound as Unknown\n\n      for (var i = 1; i < nodesToMakeCompound.length; i++) {\n        if (nodesToMakeCompound[i] != language) {\n          language = \"Unknown\";\n          break;\n        }\n      } // The parent of new compound will be the old parent of the nodes to make compound. x, y and id parameters are not set.\n\n\n      var newCompound = elementUtilities.addNode(undefined, undefined, {\n        \"class\": compoundType,\n        language: language\n      }, undefined, oldParentId);\n      var newCompoundId = newCompound.id();\n      var newEles = elementUtilities.changeParent(nodesToMakeCompound, newCompoundId);\n      newEles = newEles.union(newCompound);\n      return newEles;\n    };\n\n    elementUtilities.createTranslationReaction = function (mRnaName, proteinName, processPosition, edgeLength) {\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"translation\");\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data('justAdded', true);\n      var xPosOfSourceAndSinkNode = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var yPosOfSourceAndSinkNode = processPosition.y;\n      var sourceAndSinkNode = elementUtilities.addNode(xPosOfSourceAndSinkNode, yPosOfSourceAndSinkNode, {\n        \"class\": 'empty set',\n        language: 'PD'\n      });\n      sourceAndSinkNode.data('justAdded', true);\n      var consumptionEdge = elementUtilities.addEdge(sourceAndSinkNode.id(), processNode.id(), {\n        \"class\": 'consumption',\n        language: 'PD'\n      });\n      consumptionEdge.data('justAdded', true);\n      var xPosOfmRnaNode = processPosition.x;\n      var yPosOfmRnaNode = processPosition.y - edgeLength - processHeight / 2 - nucleicAcidFeatureHeight / 2;\n      var mRnaNode = elementUtilities.addNode(xPosOfmRnaNode, yPosOfmRnaNode, {\n        \"class\": 'nucleic acid feature',\n        language: 'PD'\n      });\n      mRnaNode.data('justAdded', true);\n      mRnaNode.data('label', mRnaName);\n      var infoboxObjectOfGene = {\n        clazz: \"unit of information\",\n        label: {\n          text: 'ct:mRNA'\n        },\n        bbox: {\n          w: 45,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(mRnaNode, infoboxObjectOfGene);\n      var necessaryStimulationEdge = elementUtilities.addEdge(mRnaNode.id(), processNode.id(), {\n        \"class\": 'necessary stimulation',\n        language: 'PD'\n      });\n      necessaryStimulationEdge.data('justAdded', true);\n      var xPosOfProteinNode = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPostOfProteinNode = processPosition.y;\n      var proteinNode = elementUtilities.addNode(xPosOfProteinNode, yPostOfProteinNode, {\n        \"class\": 'macromolecule',\n        language: 'PD'\n      });\n      proteinNode.data('justAdded', true);\n      proteinNode.data('label', proteinName);\n      var productionEdge = elementUtilities.addEdge(processNode.id(), proteinNode.id(), {\n        \"class\": 'production',\n        language: 'PD'\n      });\n      productionEdge.data('justAdded', true);\n      cy.endBatch(); //filter the just added elememts to return them and remove just added mark\n\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n\n    elementUtilities.createTranscriptionReaction = function (geneName, mRnaName, processPosition, edgeLength) {\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"transcription\");\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data('justAdded', true);\n      var xPosOfSourceAndSinkNode = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var yPosOfSourceAndSinkNode = processPosition.y;\n      var sourceAndSinkNode = elementUtilities.addNode(xPosOfSourceAndSinkNode, yPosOfSourceAndSinkNode, {\n        \"class\": 'empty set',\n        language: 'PD'\n      });\n      sourceAndSinkNode.data('justAdded', true);\n      var consumptionEdge = elementUtilities.addEdge(sourceAndSinkNode.id(), processNode.id(), {\n        \"class\": 'consumption',\n        language: 'PD'\n      });\n      consumptionEdge.data('justAdded', true);\n      var xPosOfGeneNode = processPosition.x;\n      var yPosOfGeneNode = processPosition.y - edgeLength - processHeight / 2 - nucleicAcidFeatureHeight / 2;\n      var geneNode = elementUtilities.addNode(xPosOfGeneNode, yPosOfGeneNode, {\n        \"class\": 'nucleic acid feature',\n        language: 'PD'\n      });\n      geneNode.data('justAdded', true);\n      geneNode.data('label', geneName);\n      var infoboxObjectOfGene = {\n        clazz: \"unit of information\",\n        label: {\n          text: 'ct:gene'\n        },\n        bbox: {\n          w: 36,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(geneNode, infoboxObjectOfGene);\n      var necessaryStimulationEdge = elementUtilities.addEdge(geneNode.id(), processNode.id(), {\n        \"class\": 'necessary stimulation',\n        language: 'PD'\n      });\n      necessaryStimulationEdge.data('justAdded', true);\n      var xPosOfmRnaNode = processPosition.x + edgeLength + processWidth / 2 + nucleicAcidFeatureWidth / 2;\n      var yPostOfmRnaNode = processPosition.y;\n      var mRnaNode = elementUtilities.addNode(xPosOfmRnaNode, yPostOfmRnaNode, {\n        \"class\": 'nucleic acid feature',\n        language: 'PD'\n      });\n      mRnaNode.data('justAdded', true);\n      mRnaNode.data('label', mRnaName);\n      var infoboxObjectOfmRna = {\n        clazz: \"unit of information\",\n        label: {\n          text: 'ct:mRNA'\n        },\n        bbox: {\n          w: 45,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(mRnaNode, infoboxObjectOfmRna);\n      var productionEdge = elementUtilities.addEdge(processNode.id(), mRnaNode.id(), {\n        \"class\": 'production',\n        language: 'PD'\n      });\n      productionEdge.data('justAdded', true);\n      cy.endBatch(); //filter the just added elememts to return them and remove just added mark\n\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n\n    elementUtilities.rotate90 = function (point, center) {\n      var relativeX = center.x - point.x;\n      var relativeY = center.y - point.y;\n      var relativeRotatedX = relativeY;\n      var relativeRotatedY = -1 * relativeX;\n      var resultX = relativeRotatedX + center.x;\n      var resultY = relativeRotatedY + center.y;\n      return {\n        x: resultX,\n        y: resultY\n      };\n    };\n\n    elementUtilities.createTranslation = function (regulatorLabel, outputLabel, orientation) {\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var defaultMacromoleculePropeties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"process\");\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var macromoleculeWidth = defaultMacromoleculePropeties.width || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var vertical = orientation === \"vertical\";\n      var processPortsOrdering = vertical ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 15;\n      var widthPerChar = 6;\n      var regulatorInfoboxLabel = \"ct:mRNA\";\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data('justAdded', true);\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": 'empty set',\n        language: 'PD'\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", label);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": 'consumption',\n        language: 'PD'\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: 'PD'\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", outputLabel);\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": 'production',\n        language: 'PD'\n      });\n      outputEdge.data(\"justAdded\", true);\n      var xPosOfRegulator = processPosition.x;\n      var dimension = vertical ? nucleicAcidFeatureWidth : nucleicAcidFeatureHeight;\n      var yPosOfRegulator = processPosition.y - (processHeight / 2 + dimension / 2 + edgeLength);\n      nodePosition = {\n        x: xPosOfRegulator,\n        y: yPosOfRegulator\n      };\n\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"nucleic acid feature\",\n        language: 'PD'\n      });\n      regulatorNode.data('justAdded', true);\n      regulatorNode.data('label', regulatorLabel);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: regulatorInfoboxLabel\n        },\n        bbox: {\n          w: Math.max(regulatorInfoboxLabel.length * widthPerChar, minInfoboxDimension),\n          h: minInfoboxDimension\n        }\n      };\n      elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n      var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n        \"class\": 'necessary stimulation',\n        language: 'PD'\n      });\n      regulatorEdge.data('justAdded', true);\n      cy.endBatch();\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n\n    elementUtilities.createTranscription = function (label, orientation) {\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"process\");\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var vertical = orientation === \"vertical\";\n      var processPortsOrdering = vertical ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 15;\n      var widthPerChar = 6;\n      var outputInfoboxLabel = \"ct:mRNA\";\n      var regulatorInfoboxLabel = \"ct:gene\";\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data('justAdded', true);\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + nucleicAcidFeatureWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": 'empty set',\n        language: 'PD'\n      });\n      inputNode.data(\"justAdded\", true);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": 'consumption',\n        language: 'PD'\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": 'nucleic acid feature',\n        language: 'PD'\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", label);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: outputInfoboxLabel\n        },\n        bbox: {\n          w: Math.max(outputInfoboxLabel.length * widthPerChar, minInfoboxDimension),\n          h: minInfoboxDimension\n        }\n      };\n      elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": 'production',\n        language: 'PD'\n      });\n      outputEdge.data(\"justAdded\", true);\n      var xPosOfRegulator = processPosition.x;\n      var dimension = vertical ? nucleicAcidFeatureWidth : nucleicAcidFeatureHeight;\n      var yPosOfRegulator = processPosition.y - (processHeight / 2 + dimension / 2 + edgeLength);\n      nodePosition = {\n        x: xPosOfRegulator,\n        y: yPosOfRegulator\n      };\n\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"nucleic acid feature\",\n        language: 'PD'\n      });\n      regulatorNode.data('justAdded', true);\n      regulatorNode.data('label', label);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: regulatorInfoboxLabel\n        },\n        bbox: {\n          w: Math.max(regulatorInfoboxLabel.length * widthPerChar, minInfoboxDimension),\n          h: minInfoboxDimension\n        }\n      };\n      elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n      var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n        \"class\": 'necessary stimulation',\n        language: 'PD'\n      });\n      regulatorEdge.data('justAdded', true);\n      cy.endBatch();\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n\n    elementUtilities.createDegradation = function (macromolecule, orientation) {\n      var macromoleculeName = macromolecule.name;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var vertical = orientation === \"vertical\";\n      var processPortsOrdering = vertical ? \"T-to-B\" : \"L-to-R\";\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data('justAdded', true);\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": 'macromolecule',\n        language: 'PD'\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", macromoleculeName);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": 'consumption',\n        language: 'PD'\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": 'empty set',\n        language: 'PD'\n      });\n      outputNode.data(\"justAdded\", true);\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": 'production',\n        language: 'PD'\n      });\n      outputEdge.data(\"justAdded\", true);\n      cy.endBatch();\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n\n    elementUtilities.createComplexProteinFormation = function (proteinLabels, complexLabel, regulator, orientation, reverse) {\n      var hasRegulator = regulator.name !== undefined;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 20;\n      var widthPerChar = 6;\n      var tilingPaddingVertical = 15;\n      var tilingPaddingHorizontal = 15;\n      var multimerOffset = 6;\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data('justAdded', true);\n      var offsetX = processWidth / 2 + edgeLength + macromoleculeWidth / 2;\n      var xPosOfProtein = reverse ? processPosition.x + offsetX : processPosition.x - offsetX;\n      var proteinCount = proteinLabels.length;\n      var macromoleculeDimension = orientation === \"vertical\" ? macromoleculeWidth : macromoleculeHeight;\n      var stepOffset = macromoleculeDimension + tilingPaddingVertical;\n      var offsetY = (proteinCount - 1) / 2 * (macromoleculeDimension + tilingPaddingVertical);\n      var horizontalOffsetX = (proteinCount - 1) / 2 * (macromoleculeDimension + tilingPaddingHorizontal);\n      var yPosOfProtein = processPosition.y - offsetY;\n      proteinLabels.forEach(function (label) {\n        var nodePosition = {\n          x: xPosOfProtein,\n          y: yPosOfProtein\n        };\n\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n\n        var node = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": \"macromolecule\",\n          language: \"PD\"\n        });\n        node.data(\"label\", label);\n        node.data(\"justAdded\", true);\n        yPosOfProtein += stepOffset;\n        var source = reverse ? processNode.id() : node.id();\n        var target = reverse ? node.id() : processNode.id();\n        var edgeClass = reverse ? \"production\" : \"consumption\";\n        var edge = elementUtilities.addEdge(source, target, {\n          \"class\": edgeClass,\n          language: \"PD\"\n        });\n        edge.data(\"justAdded\", true);\n      });\n      var complexPos = {\n        x: processPosition.x + (reverse ? -1 : 1) * offsetX,\n        y: processPosition.y\n      };\n\n      if (orientation === \"vertical\") {\n        complexPos = elementUtilities.rotate90(complexPos, processPosition);\n      }\n\n      var complex = elementUtilities.addNode(complexPos.x, complexPos.y, {\n        \"class\": \"complex\",\n        language: \"PD\"\n      });\n      complex.data(\"label\", complexLabel);\n      complex.data(\"justAdded\", true);\n      var source = reverse ? complex.id() : processNode.id();\n      var target = reverse ? processNode.id() : complex.id();\n      var edgeClass = reverse ? \"consumption\" : \"production\";\n      var complexEdge = elementUtilities.addEdge(source, target, {\n        \"class\": edgeClass,\n        language: \"PD\"\n      });\n      complexEdge.data(\"justAdded\", true);\n\n      if (orientation === \"vertical\") {\n        xPosOfProtein = complex.position(\"x\") - horizontalOffsetX;\n        yPosOfProtein = complex.position(\"y\");\n      } else {\n        xPosOfProtein = complex.position(\"x\");\n        yPosOfProtein = complex.position(\"y\") - offsetY;\n      }\n\n      proteinLabels.forEach(function (label) {\n        var nodePosition = {\n          x: xPosOfProtein,\n          y: yPosOfProtein\n        };\n        var node = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": \"macromolecule\",\n          language: \"PD\"\n        }, undefined, complex.id());\n        node.data(\"label\", label);\n        node.data(\"justAdded\", true);\n\n        if (orientation === \"vertical\") {\n          xPosOfProtein += stepOffset;\n        } else {\n          yPosOfProtein += stepOffset;\n        }\n      });\n\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var regulatorEdgeType = regulator.edgeType;\n        var regulatorMultimer = regulator.multimer;\n        var xPosOfRegulator = processPosition.x;\n\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n\n        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": regulatorType,\n          language: 'PD'\n        });\n        regulatorNode.data('justAdded', true);\n        regulatorNode.data('label', regulatorName);\n\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var cardinality = regulatorMultimer.cardinality;\n\n          if (cardinality != '') {\n            var infoboxLabel = \"N:\" + cardinality;\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: infoboxLabel\n              },\n              bbox: {\n                w: infoboxLabel.length * widthPerChar,\n                h: minInfoboxDimension\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": regulatorEdgeType,\n          language: 'PD'\n        });\n        regulatorEdge.data('justAdded', true);\n      }\n\n      cy.endBatch();\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n\n    elementUtilities.createMultimerization = function (macromolecule, regulator, regulatorMultimer, orientation) {\n      var hasRegulator = regulator.name !== undefined;\n      var macromoleculeName = macromolecule.name;\n      var macromoleculeMultimerCardinality = macromolecule.cardinality;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 20;\n      var widthPerChar = 6;\n      var multimerOffset = 6;\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data('justAdded', true);\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": 'macromolecule',\n        language: 'PD'\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", macromoleculeName);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": 'consumption',\n        language: 'PD'\n      });\n      inputEdge.data(\"justAdded\", true);\n      var cardinality = macromoleculeMultimerCardinality;\n\n      if (cardinality !== '') {\n        inputEdge.data(\"cardinality\", cardinality);\n      }\n\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": 'macromolecule',\n        language: 'PD'\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", macromoleculeName);\n      elementUtilities.setMultimerStatus(outputNode, true);\n\n      if (cardinality !== '') {\n        var infoboxLabel = \"N:\" + cardinality;\n        infoboxObject = {\n          clazz: \"unit of information\",\n          label: {\n            text: infoboxLabel\n          },\n          bbox: {\n            w: infoboxLabel.length * widthPerChar,\n            h: minInfoboxDimension\n          }\n        };\n        elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      }\n\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": 'production',\n        language: 'PD'\n      });\n      outputEdge.data(\"justAdded\", true);\n\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var regulatorEdgeType = regulator.edgeType;\n        var xPosOfRegulator = processPosition.x;\n\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n\n        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": regulatorType,\n          language: 'PD'\n        });\n        regulatorNode.data('justAdded', true);\n        regulatorNode.data('label', regulatorName);\n\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var _cardinality = regulatorMultimer.cardinality;\n\n          if (_cardinality != '') {\n            var _infoboxLabel = \"N:\" + _cardinality;\n\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: _infoboxLabel\n              },\n              bbox: {\n                w: _infoboxLabel.length * widthPerChar,\n                h: minInfoboxDimension\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": regulatorEdgeType,\n          language: 'PD'\n        });\n        regulatorEdge.data('justAdded', true);\n      }\n\n      cy.endBatch();\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n\n    elementUtilities.createConversion = function (macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels) {\n      var hasRegulator = regulator.name !== undefined;\n      var macromoleculeName = macromolecule.name;\n      var macromoleculeIsMultimer = macromolecule.multimer.enabled;\n      var macromoleculeMultimerCardinality = macromolecule.multimer.cardinality;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 20;\n      var widthPerChar = 6;\n      var multimerOffset = 6;\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data('justAdded', true);\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": 'macromolecule',\n        language: 'PD'\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", macromoleculeName);\n\n      if (macromoleculeIsMultimer) {\n        elementUtilities.setMultimerStatus(inputNode, true);\n        var cardinality = macromoleculeMultimerCardinality;\n\n        if (cardinality != '') {\n          var infoboxLabel = \"N:\" + cardinality;\n          infoboxObject = {\n            clazz: \"unit of information\",\n            label: {\n              text: infoboxLabel\n            },\n            bbox: {\n              w: infoboxLabel.length * widthPerChar,\n              h: minInfoboxDimension\n            }\n          };\n          elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);\n        }\n      }\n\n      inputInfoboxLabels.forEach(function (label) {\n        var inputInfoboxWidth = label.length > 0 ? Math.max(widthPerChar * label.length, minInfoboxDimension) : minInfoboxDimension;\n        var infoboxObject = {\n          clazz: \"unit of information\",\n          label: {\n            text: label\n          },\n          bbox: {\n            w: inputInfoboxWidth,\n            h: minInfoboxDimension\n          },\n          style: {\n            \"shape-name\": \"ellipse\"\n          }\n        };\n        elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);\n      });\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": 'consumption',\n        language: 'PD'\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": 'macromolecule',\n        language: 'PD'\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", macromoleculeName);\n\n      if (macromoleculeIsMultimer) {\n        elementUtilities.setMultimerStatus(outputNode, true);\n        var _cardinality2 = macromoleculeMultimerCardinality;\n\n        if (_cardinality2 != '') {\n          var _infoboxLabel2 = \"N:\" + _cardinality2;\n\n          infoboxObject = {\n            clazz: \"unit of information\",\n            label: {\n              text: _infoboxLabel2\n            },\n            bbox: {\n              w: _infoboxLabel2.length * widthPerChar,\n              h: minInfoboxDimension\n            }\n          };\n          elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n        }\n      }\n\n      outputInfoboxLabels.forEach(function (label) {\n        var outputInfoboxWidth = label.length > 0 ? Math.max(widthPerChar * label.length, minInfoboxDimension) : minInfoboxDimension;\n        infoboxObject = {\n          clazz: \"unit of information\",\n          label: {\n            text: label\n          },\n          bbox: {\n            w: outputInfoboxWidth,\n            h: minInfoboxDimension\n          },\n          style: {\n            \"shape-name\": \"ellipse\"\n          }\n        };\n        elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      });\n      [inputNode, outputNode].forEach(function (node) {\n        var width = elementUtilities.calculateMinWidth(node);\n        elementUtilities.resizeNodes(node, width, macromoleculeHeight, false, true);\n      });\n\n      if (orientation === \"horizontal\") {\n        var newInputXPos = processPosition.x - edgeLength - processWidth / 2 - inputNode.data('bbox').w / 2;\n        inputNode.position('x', newInputXPos);\n        var newOutputXPos = processPosition.x + edgeLength + processWidth / 2 + outputNode.data('bbox').w / 2;\n        outputNode.position('x', newOutputXPos);\n      } else {\n        var newInputYPos = processPosition.y - edgeLength - processWidth / 2 - inputNode.data('bbox').h / 2;\n        inputNode.position('y', newInputYPos);\n        var newOutputYPos = processPosition.y + edgeLength + processWidth / 2 + outputNode.data('bbox').h / 2;\n        outputNode.position('y', newOutputYPos);\n      }\n\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": 'production',\n        language: 'PD'\n      });\n      outputEdge.data(\"justAdded\", true);\n\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var xPosOfRegulator = processPosition.x;\n\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n\n        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": regulatorType,\n          language: 'PD'\n        });\n        regulatorNode.data('justAdded', true);\n        regulatorNode.data('label', regulatorName);\n\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var _cardinality3 = regulatorMultimer.cardinality;\n\n          if (_cardinality3 != '') {\n            var _infoboxLabel3 = \"N:\" + _cardinality3;\n\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: _infoboxLabel3\n              },\n              bbox: {\n                w: _infoboxLabel3.length * widthPerChar,\n                h: minInfoboxDimension\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": 'catalysis',\n          language: 'PD'\n        });\n        regulatorEdge.data('justAdded', true);\n      }\n\n      cy.endBatch();\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n\n    elementUtilities.createMetabolicReaction = function (inputs, outputs, reversible, regulator, regulatorMultimer, orientation) {\n      var rotate90 = function rotate90(point, center) {\n        var relativeX = center.x - point.x;\n        var relativeY = center.y - point.y;\n        var relativeRotatedX = relativeY;\n        var relativeRotatedY = -1 * relativeX;\n        var resultX = relativeRotatedX + center.x;\n        var resultY = relativeRotatedY + center.y;\n        return {\n          x: resultX,\n          y: resultY\n        };\n      };\n\n      var hasRegulator = regulator.name !== undefined;\n      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties(\"simple chemical\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;\n      var simpleChemicalWidth = defaultSimpleChemicalProperties.width || 35;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var tilingPaddingVertical = 15;\n      var edgeLength = 30;\n      var processLeftSideEdgeType = reversible ? \"production\" : \"consumption\";\n      var processRightSideEdgeType = \"production\";\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var multimerOffset = 6;\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - simpleChemicalWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + simpleChemicalWidth / 2;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data('justAdded', true);\n      var numOfInputNodes = inputs.length;\n      var numOfOutputNodes = outputs.length;\n      var yPosOfInput = processPosition.y - (numOfInputNodes - 1) / 2 * (simpleChemicalHeight + tilingPaddingVertical);\n      inputs.forEach(function (data, index) {\n        var nodeName = data.name;\n        var nodeType = data.type;\n\n        if (index === 0) {\n          yPosOfInput = processPosition.y;\n        } else if (index % 2 === 1) {\n          yPosOfInput = processPosition.y - (simpleChemicalHeight + tilingPaddingVertical) * Math.ceil(index / 2);\n        } else {\n          yPosOfInput = processPosition.y + (simpleChemicalHeight + tilingPaddingVertical) * (index / 2);\n        }\n\n        var nodePosition = {\n          x: xPosOfInput,\n          y: yPosOfInput\n        };\n\n        if (orientation === \"vertical\") {\n          nodePosition = rotate90(nodePosition, processPosition);\n        }\n\n        var newNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": nodeType.toLowerCase(),\n          language: \"PD\"\n        });\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", nodeName);\n        var newEdge;\n\n        if (reversible) {\n          newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {\n            \"class\": processLeftSideEdgeType,\n            language: \"PD\"\n          }, undefined, undefined, 1);\n        } else {\n          newEdge = elementUtilities.addEdge(newNode.id(), processNode.id(), {\n            \"class\": processLeftSideEdgeType,\n            language: \"PD\"\n          });\n        }\n\n        newEdge.data(\"justAdded\", true);\n      });\n      var yPosOfOutput = processPosition.y - (numOfOutputNodes - 1) / 2 * (simpleChemicalHeight + tilingPaddingVertical);\n      outputs.forEach(function (data, index) {\n        var nodeName = data.name;\n        var nodeType = data.type;\n\n        if (index === 0) {\n          yPosOfOutput = processPosition.y;\n        } else if (index % 2 === 1) {\n          yPosOfOutput = processPosition.y - (simpleChemicalHeight + tilingPaddingVertical) * Math.ceil(index / 2);\n        } else {\n          yPosOfOutput = processPosition.y + (simpleChemicalHeight + tilingPaddingVertical) * (index / 2);\n        }\n\n        var nodePosition = {\n          x: xPosOfOutput,\n          y: yPosOfOutput\n        };\n\n        if (orientation === \"vertical\") {\n          nodePosition = rotate90(nodePosition, processPosition);\n        }\n\n        var newNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": nodeType.toLowerCase(),\n          language: \"PD\"\n        });\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", nodeName);\n        var newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {\n          \"class\": processRightSideEdgeType,\n          language: \"PD\"\n        }, undefined, undefined, 0);\n        newEdge.data(\"justAdded\", true);\n      }); // add regulator node\n\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var xPosOfRegulator = processPosition.x;\n\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        var _nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n\n        if (orientation === \"vertical\") {\n          _nodePosition = rotate90(_nodePosition, processPosition);\n        }\n\n        var regulatorNode = elementUtilities.addNode(_nodePosition.x, _nodePosition.y, {\n          \"class\": regulatorType,\n          language: 'PD'\n        });\n        regulatorNode.data('justAdded', true);\n        regulatorNode.data('label', regulatorName);\n\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var cardinality = regulatorMultimer.cardinality;\n\n          if (cardinality != '') {\n            var infoboxLabel = \"N:\" + cardinality;\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: infoboxLabel\n              },\n              bbox: {\n                w: infoboxLabel.length * 6,\n                h: 15\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": 'catalysis',\n          language: 'PD'\n        });\n        regulatorEdge.data('justAdded', true);\n      }\n\n      cy.endBatch();\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n\n    elementUtilities.createMetabolicCatalyticActivity = function (inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength) {\n      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties(\"simple chemical\");\n      var defaultCatalystTypeProperties = elementUtilities.getDefaultProperties(catalystType);\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;\n      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculProperties.height || 50;\n      var catalystHeight = defaultCatalystTypeProperties.height || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var tilingPaddingVertical = tilingPaddingVertical || 15;\n      var tilingPaddingHorizontal = tilingPaddingHorizontal || 15;\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data('justAdded', true);\n      var numOfInputNodes = inputNodeList.length;\n      var numOfOutputNodes = outputNodeList.length;\n      var yPosOfInput = processPosition.y - (numOfInputNodes - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical); // add input side nodes\n\n      for (var i = 0; i < numOfInputNodes; i++) {\n        if (inputNodeList[i].type == \"Simple Chemical\") {\n          var newNode = elementUtilities.addNode(xPosOfInput, yPosOfInput, {\n            \"class\": 'simple chemical',\n            language: 'PD'\n          });\n          yPosOfInput += simpleChemicalHeight + tilingPaddingVertical;\n        } else {\n          var newNode = elementUtilities.addNode(xPosOfInput, yPosOfInput, {\n            \"class\": 'macromolecule',\n            language: 'PD'\n          }); //update the y position\n\n          yPosOfInput += macromoleculeHeight + tilingPaddingVertical;\n        }\n\n        newNode.data('justAdded', true);\n        newNode.data('label', inputNodeList[i].name);\n        var newEdge = elementUtilities.addEdge(newNode.id(), processNode.id(), {\n          \"class\": 'consumption',\n          language: 'PD'\n        });\n        newEdge.data('justAdded', true);\n      }\n\n      var yPosOfOutput = processPosition.y - (numOfOutputNodes - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical); // add output side nodes\n\n      for (var i = 0; i < numOfOutputNodes; i++) {\n        if (outputNodeList[i].type == \"Simple Chemical\") {\n          var newNode = elementUtilities.addNode(xPosOfOutput, yPosOfOutput, {\n            \"class\": 'simple chemical',\n            language: 'PD'\n          });\n          yPosOfOutput += simpleChemicalHeight + tilingPaddingVertical;\n        } else {\n          var newNode = elementUtilities.addNode(xPosOfOutput, yPosOfOutput, {\n            \"class\": 'macromolecule',\n            language: 'PD'\n          }); //update the y position\n\n          yPosOfOutput += macromoleculeHeight + tilingPaddingVertical;\n        }\n\n        newNode.data('justAdded', true);\n        newNode.data('label', outputNodeList[i].name);\n        var newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {\n          \"class\": 'production',\n          language: 'PD'\n        });\n        newEdge.data('justAdded', true);\n      } // add catalyst node\n\n\n      var xPosOfCatalyst = processPosition.x;\n      var yPosOfCatalyst = processPosition.y - (processHeight + catalystHeight + tilingPaddingVertical);\n      var catalystNode = elementUtilities.addNode(xPosOfCatalyst, yPosOfCatalyst, {\n        \"class\": catalystType,\n        language: 'PD'\n      });\n      catalystNode.data('justAdded', true);\n      catalystNode.data('label', catalystName);\n      var catalystEdge = elementUtilities.addEdge(catalystNode.id(), processNode.id(), {\n        \"class\": 'catalysis',\n        language: 'PD'\n      });\n      catalystEdge.data('justAdded', true);\n      cy.endBatch(); //filter the just added elememts to return them and remove just added mark\n\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n\n    elementUtilities.createActivationReaction = function (proteinName, processPosition, edgeLength, reverse) {\n      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"activation\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data('justAdded', true);\n      var yPosition = processPosition.y;\n      var inputNode = elementUtilities.addNode(xPosOfInput, yPosition, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", proteinName);\n      var infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: reverse ? \"active\" : \"inactive\"\n        },\n        style: {\n          \"shape-name\": \"ellipse\"\n        },\n        bbox: {\n          w: 36,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);\n      var outputNode = elementUtilities.addNode(xPosOfOutput, yPosition, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", proteinName);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: reverse ? \"inactive\" : \"active\"\n        },\n        style: {\n          \"shape-name\": \"ellipse\"\n        },\n        bbox: {\n          w: 36,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      var inputSideEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputSideEdge.data(\"justAdded\", true);\n      var outputSideEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputSideEdge.data(\"justAdded\", true);\n      cy.endBatch(); //filter the just added elememts to return them and remove just added mark\n\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n    /*\n     * Creates a template reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n     * in the complex. Parameters are explained below.\n     * templateType: The type of the template reaction. It may be 'association', 'dissociation', 'reversible' or 'irreversible'.\n     * nodeList: The list of the names and types of molecules which will involve in the reaction.\n     * complexName: The name of the complex in the reaction.\n     * processPosition: The modal position of the process in the reaction. The default value is the center of the canvas.\n     * tilingPaddingVertical: This option will be passed to the cose-bilkent layout with the same name. The default value is 15.\n     * tilingPaddingHorizontal: This option will be passed to the cose-bilkent layout with the same name. The default value is 15.\n     * edgeLength: The distance between the process and the macromolecules at the both sides.\n     */\n\n\n    elementUtilities.createTemplateReaction = function (templateType, nodeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam) {\n      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties(\"simple chemical\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(templateType);\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculProperties.height || 50;\n      var simpleChemicalWidth = defaultSimpleChemicalProperties.width || 35;\n      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var nodeList = nodeList;\n      var complexName = complexName;\n      var numOfMolecules = nodeList.length;\n      var tilingPaddingVertical = tilingPaddingVertical || 15;\n      var tilingPaddingHorizontal = tilingPaddingHorizontal || 15;\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n\n      var xPositionOfFreeMacromolecules;\n      var xPositionOfInputMacromolecules;\n\n      if (templateType === 'association') {\n        xPositionOfFreeMacromolecules = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      } else if (templateType === 'dissociation') {\n        xPositionOfFreeMacromolecules = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      } else {\n        xPositionOfFreeMacromolecules = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n        xPositionOfInputMacromolecules = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      } //Create the process in template type\n\n\n      var process;\n\n      if (templateType === 'reversible' || templateType === 'irreversible') {\n        process = elementUtilities.addNode(processPosition.x, processPosition.y, {\n          \"class\": 'process',\n          language: 'PD'\n        });\n        elementUtilities.setPortsOrdering(process, 'L-to-R');\n      } else {\n        process = elementUtilities.addNode(processPosition.x, processPosition.y, {\n          \"class\": templateType,\n          language: 'PD'\n        });\n        elementUtilities.setPortsOrdering(process, 'L-to-R');\n      }\n\n      process.data('justAdded', true); //Define the starting y position\n\n      var yPosition = processPosition.y - (numOfMolecules - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical); //Create the free molecules\n\n      for (var i = 0; i < numOfMolecules; i++) {\n        // node addition operation is determined by molecule type\n        if (nodeList[i].type == \"Simple Chemical\") {\n          var newNode = elementUtilities.addNode(xPositionOfFreeMacromolecules, yPosition, {\n            \"class\": 'simple chemical',\n            language: 'PD'\n          }); //update the y position\n\n          yPosition += simpleChemicalHeight + tilingPaddingVertical;\n        } else {\n          var newNode = elementUtilities.addNode(xPositionOfFreeMacromolecules, yPosition, {\n            \"class\": 'macromolecule',\n            language: 'PD'\n          }); //update the y position\n\n          yPosition += macromoleculeHeight + tilingPaddingVertical;\n        }\n\n        newNode.data('justAdded', true);\n        newNode.data('label', nodeList[i].name); //create the edge connected to the new molecule\n\n        var newEdge;\n\n        if (templateType === 'association') {\n          newEdge = elementUtilities.addEdge(newNode.id(), process.id(), {\n            \"class\": 'consumption',\n            language: 'PD'\n          });\n        } else if (templateType === 'dissociation') {\n          newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n            \"class\": 'production',\n            language: 'PD'\n          });\n        } else {\n          //Group right or top elements in group id 1\n          if (templateType === \"irreversible\") {\n            newEdge = elementUtilities.addEdge(newNode.id(), process.id(), {\n              \"class\": \"consumption\",\n              language: 'PD'\n            });\n          } else {\n            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n              \"class\": \"production\",\n              language: 'PD'\n            }, undefined, undefined, 1);\n          }\n        }\n\n        newEdge.data('justAdded', true);\n      }\n\n      if (templateType === 'association' || templateType == 'dissociation') {\n        //Create the complex including macromolecules inside of it\n        //Temprorarily add it to the process position we will move it according to the last size of it\n        var complex = elementUtilities.addNode(processPosition.x, processPosition.y, {\n          \"class\": 'complex',\n          language: 'PD'\n        });\n        complex.data('justAdded', true);\n        complex.data('justAddedLayoutNode', true); //If a name is specified for the complex set its label accordingly\n\n        if (complexName) {\n          complex.data('label', complexName);\n        } //create the edge connnected to the complex\n\n\n        var edgeOfComplex;\n\n        if (templateType === 'association') {\n          edgeOfComplex = elementUtilities.addEdge(process.id(), complex.id(), {\n            \"class\": 'production',\n            language: 'PD'\n          });\n        } else {\n          edgeOfComplex = elementUtilities.addEdge(complex.id(), process.id(), {\n            \"class\": 'consumption',\n            language: 'PD'\n          });\n        }\n\n        edgeOfComplex.data('justAdded', true);\n\n        for (var i = 0; i < numOfMolecules; i++) {\n          // Add a molecule(dependent on it's type) not having a previously defined id and having the complex created in this reaction as parent\n          if (nodeList[i].type == 'Simple Chemical') {\n            var newNode = elementUtilities.addNode(complex.position('x'), complex.position('y'), {\n              \"class\": 'simple chemical',\n              language: 'PD'\n            }, undefined, complex.id());\n          } else {\n            var newNode = elementUtilities.addNode(complex.position('x'), complex.position('y'), {\n              \"class\": 'macromolecule',\n              language: 'PD'\n            }, undefined, complex.id());\n          }\n\n          newNode.data('justAdded', true);\n          newNode.data('label', nodeList[i].name);\n          newNode.data('justAddedLayoutNode', true);\n        }\n      } else {\n        //Create the input macromolecules\n        var numOfInputMacromolecules = complexName.length;\n        yPosition = processPosition.y - (numOfInputMacromolecules - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical);\n\n        for (var i = 0; i < numOfInputMacromolecules; i++) {\n          if (complexName[i].type == 'Simple Chemical') {\n            var newNode = elementUtilities.addNode(xPositionOfInputMacromolecules, yPosition, {\n              \"class\": 'simple chemical',\n              language: 'PD'\n            });\n            yPosition += simpleChemicalHeight + tilingPaddingVertical;\n          } else {\n            var newNode = elementUtilities.addNode(xPositionOfInputMacromolecules, yPosition, {\n              \"class\": 'macromolecule',\n              language: 'PD'\n            });\n            yPosition += macromoleculeHeight + tilingPaddingVertical;\n          }\n\n          newNode.data('justAdded', true);\n          newNode.data('label', complexName[i].name); //create the edge connected to the new macromolecule\n\n          var newEdge; //Group the left or bottom elements in group id 0 if reversible\n\n          if (templateType === \"irreversible\") {\n            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n              \"class\": \"production\",\n              language: 'PD'\n            });\n          } else {\n            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n              \"class\": \"production\",\n              language: 'PD'\n            }, undefined, undefined, 0);\n          }\n\n          newEdge.data('justAdded', true);\n        }\n      }\n\n      cy.endBatch();\n      var layoutNodes = cy.nodes('[justAddedLayoutNode]');\n      layoutNodes.removeData('justAddedLayoutNode');\n      var layout = layoutNodes.layout({\n        name: layoutParam.name,\n        randomize: false,\n        fit: false,\n        animate: false,\n        tilingPaddingVertical: tilingPaddingVertical,\n        tilingPaddingHorizontal: tilingPaddingHorizontal,\n        stop: function stop() {\n          //If it is a reversible reaction no need to re-position complexes\n          if (templateType === 'reversible') return; //re-position the nodes inside the complex\n\n          var supposedXPosition;\n          var supposedYPosition = processPosition.y;\n\n          if (templateType === 'association') {\n            supposedXPosition = processPosition.x + edgeLength + processWidth / 2 + complex.outerWidth() / 2;\n          } else {\n            supposedXPosition = processPosition.x - edgeLength - processWidth / 2 - complex.outerWidth() / 2;\n          }\n\n          var positionDiffX = (supposedXPosition - complex.position('x')) / 2;\n          var positionDiffY = (supposedYPosition - complex.position('y')) / 2;\n          elementUtilities.moveNodes({\n            x: positionDiffX,\n            y: positionDiffY\n          }, complex);\n        }\n      }); // Do this check for cytoscape.js backward compatibility\n\n      if (layout && layout.run && templateType !== 'reversible' && templateType !== 'irreversible') {\n        layout.run();\n      } //filter the just added elememts to return them and remove just added mark\n\n\n      var eles = cy.elements('[justAdded]');\n      eles.removeData('justAdded');\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n    /*\n     * Move the nodes to a new parent and change their position if possDiff params are set.\n     */\n\n\n    elementUtilities.changeParent = function (nodes, newParent, posDiffX, posDiffY) {\n      var newParentId = newParent == undefined || typeof newParent === 'string' ? newParent : newParent.id();\n      var movedEles = nodes.move({\n        \"parent\": newParentId\n      });\n\n      if (typeof posDiffX != 'undefined' || typeof posDiffY != 'undefined') {\n        elementUtilities.moveNodes({\n          x: posDiffX,\n          y: posDiffY\n        }, nodes);\n      }\n\n      elementUtilities.maintainPointer(movedEles);\n      return movedEles;\n    };\n\n    elementUtilities.updateInfoboxStyle = function (node, index, newProps) {\n      var infoboxObj = node.data('statesandinfos')[index];\n      $.extend(infoboxObj.style, newProps);\n      cy.style().update();\n    };\n\n    elementUtilities.updateInfoboxObj = function (node, index, newProps) {\n      var infoboxObj = node.data('statesandinfos')[index];\n      $.extend(infoboxObj, newProps);\n    }; // Resize given nodes if useAspectRatio is truthy one of width or height should not be set.\n\n\n    elementUtilities.resizeNodes = function (nodes, width, height, useAspectRatio, preserveRelativePos) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var ratio = undefined;\n        var eleMustBeSquare = elementUtilities.mustBeSquare(node.data('class'));\n\n        if (preserveRelativePos === true) {\n          var oldWidth = node.data(\"bbox\").w;\n          var oldHeight = node.data(\"bbox\").h;\n        } // Note that both width and height should not be set if useAspectRatio is truthy\n\n\n        if (!node.isParent()) {\n          if (width) {\n            if (useAspectRatio || eleMustBeSquare) {\n              ratio = width / node.width();\n            }\n\n            node.data(\"bbox\").w = width;\n          }\n\n          if (height) {\n            if (useAspectRatio || eleMustBeSquare) {\n              ratio = height / node.height();\n            }\n\n            node.data(\"bbox\").h = height;\n          }\n\n          if (ratio && !height) {\n            node.data(\"bbox\").h = node.height() * ratio;\n          } else if (ratio && !width) {\n            node.data(\"bbox\").w = node.width() * ratio;\n          }\n        } else {\n          node.data(\"minHeight\", \"\" + height);\n          node.data(\"minWidth\", \"\" + width);\n          node.data(\"minWidthBiasLeft\", \"50%\");\n          node.data(\"minWidthBiasRight\", \"50%\");\n          node.data(\"minHeightBiasTop\", \"50%\");\n          node.data(\"minHeightBiasBottom\", \"50%\");\n        }\n        /*    if (preserveRelativePos === true) {\n             var statesandinfos = node.data('statesandinfos');\n             var topBottom = statesandinfos.filter(box => (box.anchorSide === \"top\" || box.anchorSide === \"bottom\"));\n             var rightLeft = statesandinfos.filter(box => (box.anchorSide === \"right\" || box.anchorSide === \"left\"));\n              topBottom.forEach(function(box){\n               if (box.bbox.x < 0) {\n                 box.bbox.x = 0;\n               }\n               else if (box.bbox.x > oldWidth) {\n                 box.bbox.x = oldWidth;\n               }\n               box.bbox.x = node.data(\"bbox\").w * box.bbox.x / oldWidth;\n             });\n              rightLeft.forEach(function(box){\n               if (box.bbox.y < 0) {\n                 box.bbox.y = 0;\n               }\n               else if (box.bbox.y > oldHeight) {\n                 box.bbox.y = oldHeight;\n               }\n               box.bbox.y = node.data(\"bbox\").h * box.bbox.y / oldHeight;\n             });\n           } */\n\n      }\n    };\n\n    elementUtilities.calculateMinWidth = function (node) {\n      var defaultWidth = this.getDefaultProperties(node.data('class')).width; // Label width calculation\n\n      var style = node.style();\n      var fontFamiliy = style['font-family'];\n      var fontSize = style['font-size'];\n      var labelText = style['label'];\n\n      if (labelText === \"\" && node.data('label') && node.data('label') !== \"\") {\n        labelText = node.data('label');\n      }\n\n      var labelWidth = elementUtilities.getWidthByContent(labelText, fontFamiliy, fontSize);\n      var statesandinfos = node.data('statesandinfos'); //Top and bottom infoBoxes\n      //var topInfoBoxes = statesandinfos.filter(box => (box.anchorSide === \"top\" || ((box.anchorSide === \"right\" || box.anchorSide === \"left\") && (box.bbox.y <= 12))));\n      //var bottomInfoBoxes = statesandinfos.filter(box => (box.anchorSide === \"bottom\" || ((box.anchorSide === \"right\" || box.anchorSide === \"left\") && (box.bbox.y >= node.data('bbox').h - 12))));\n\n      var unitGap = 5;\n      var topIdealWidth = unitGap;\n      var bottomIdealWidth = unitGap;\n      var rightMaxWidth = 0;\n      var leftMaxWidth = 0;\n      statesandinfos.forEach(function (box) {\n        if (box.anchorSide === \"top\") {\n          topIdealWidth += box.bbox.w + unitGap;\n        } else if (box.anchorSide === \"bottom\") {\n          bottomIdealWidth += box.bbox.w + unitGap;\n        } else if (box.anchorSide === \"right\") {\n          rightMaxWidth = box.bbox.w > rightMaxWidth ? box.bbox.w : rightMaxWidth;\n        } else {\n          leftMaxWidth = box.bbox.w > leftMaxWidth ? box.bbox.w : leftMaxWidth;\n        }\n      });\n      var middleWidth = labelWidth + 2 * Math.max(rightMaxWidth / 2, leftMaxWidth / 2);\n      var compoundWidth = 0;\n\n      if (node.isParent()) {\n        compoundWidth = node.children().boundingBox().w;\n      }\n\n      return Math.max(middleWidth, defaultWidth / 2, topIdealWidth, bottomIdealWidth, compoundWidth);\n    };\n\n    elementUtilities.calculateMinHeight = function (node) {\n      var statesandinfos = node.data('statesandinfos');\n      var margin = 7;\n      var unitGap = 5;\n      var defaultHeight = this.getDefaultProperties(node.data('class')).height;\n      var leftInfoBoxes = statesandinfos.filter(function (box) {\n        return box.anchorSide === \"left\";\n      });\n      var leftHeight = unitGap;\n      leftInfoBoxes.forEach(function (box) {\n        leftHeight += box.bbox.h + unitGap;\n      });\n      var rightInfoBoxes = statesandinfos.filter(function (box) {\n        return box.anchorSide === \"right\";\n      });\n      var rightHeight = unitGap;\n      rightInfoBoxes.forEach(function (box) {\n        rightHeight += box.bbox.h + unitGap;\n      });\n      var style = node.style();\n      var labelText = style['label'].split(\"\\n\").filter(function (text) {\n        return text !== '';\n      });\n      var fontSize = parseFloat(style['font-size'].substring(0, style['font-size'].length - 2));\n      var totalHeight = labelText.length * fontSize + 2 * margin;\n      var compoundHeight = 0;\n\n      if (node.isParent()) {\n        compoundHeight = node.children().boundingBox().h;\n      }\n\n      return Math.max(totalHeight, defaultHeight / 2, leftHeight, rightHeight, compoundHeight);\n    };\n\n    elementUtilities.isResizedToContent = function (node) {\n      if (!node || !node.isNode() || !node.data('bbox')) {\n        return false;\n      } //var w = node.data('bbox').w;\n      //var h = node.data('bbox').h;\n\n\n      var w = node.width();\n      var h = node.height();\n      var minW = elementUtilities.calculateMinWidth(node);\n      var minH = elementUtilities.calculateMinHeight(node);\n      if (w === minW && h === minH) return true;else return false;\n    }; // Section End\n    // Add remove utilities\n    // Relocates state and info boxes. This function is expected to be called after add/remove state and info boxes\n\n\n    elementUtilities.relocateStateAndInfos = function (ele) {\n      var stateAndInfos = ele.isNode && ele.isNode() ? ele.data('statesandinfos') : ele;\n      var length = stateAndInfos.length;\n\n      if (length == 0) {\n        return;\n      } else if (length == 1) {\n        stateAndInfos[0].bbox.x = 0;\n        stateAndInfos[0].bbox.y = -50;\n      } else if (length == 2) {\n        stateAndInfos[0].bbox.x = 0;\n        stateAndInfos[0].bbox.y = -50;\n        stateAndInfos[1].bbox.x = 0;\n        stateAndInfos[1].bbox.y = 50;\n      } else if (length == 3) {\n        stateAndInfos[0].bbox.x = -25;\n        stateAndInfos[0].bbox.y = -50;\n        stateAndInfos[1].bbox.x = 25;\n        stateAndInfos[1].bbox.y = -50;\n        stateAndInfos[2].bbox.x = 0;\n        stateAndInfos[2].bbox.y = 50;\n      } else {\n        stateAndInfos[0].bbox.x = -25;\n        stateAndInfos[0].bbox.y = -50;\n        stateAndInfos[1].bbox.x = 25;\n        stateAndInfos[1].bbox.y = -50;\n        stateAndInfos[2].bbox.x = -25;\n        stateAndInfos[2].bbox.y = 50;\n        stateAndInfos[3].bbox.x = 25;\n        stateAndInfos[3].bbox.y = 50;\n      }\n    }; // Change state value or unit of information box of given nodes with given index.\n    // Type parameter indicates whether to change value or variable, it is valid if the box at the given index is a state variable.\n    // Value parameter is the new value to set.\n    // This method returns the old value of the changed data (We assume that the old value of the changed data was the same for all nodes).\n    // Each character assumed to occupy 8 unit\n    // Each infobox can have at most 32 units of width\n\n\n    elementUtilities.changeStateOrInfoBox = function (nodes, index, value, type) {\n      var result;\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data('class');\n        var stateAndInfos = node.data('statesandinfos');\n        var box = stateAndInfos[index];\n        var oldLength = box.bbox.w;\n        var newLength = 0;\n        var content = '';\n\n        if (box.clazz == \"state variable\") {\n          if (!result) {\n            result = box.state[type];\n          }\n\n          box.state[type] = value;\n\n          if (box.state[\"value\"] !== undefined) {\n            content += box.state[\"value\"];\n          }\n\n          if (box.state[\"variable\"] !== undefined && box.state[\"variable\"].length > 0) {\n            content += box.state[\"variable\"] + \"@\";\n          }\n        } else if (box.clazz == \"unit of information\") {\n          if (!result) {\n            result = box.label.text;\n          }\n\n          content += value;\n          box.label.text = value;\n        } else if (box.clazz == \"residue variable\") {\n          if (!result) {\n            result = box.residue[type];\n          }\n\n          box.residue[type] = value;\n\n          if (box.residue[\"value\"] !== undefined) {\n            content += box.residue[\"value\"];\n          }\n\n          if (box.residue[\"variable\"] !== undefined && box.residue[\"variable\"].length > 0) {\n            content += box.residue[\"variable\"] + \"@\";\n          }\n        }\n\n        var min = sbgnclass === 'SIF macromolecule' || sbgnclass === 'SIF simple chemical' ? 15 : 12;\n        var fontFamily = box.style['font-family'];\n        var fontSize = box.style['font-size'];\n        var borderWidth = box.style['border-width'];\n        var opts = {\n          min: min,\n          max: 48,\n          margin: borderWidth / 2 + 0.5\n        };\n        var previousWidth = box.bbox.w;\n        box.bbox.w = elementUtilities.getWidthByContent(content, fontFamily, fontSize, opts);\n\n        if (box.anchorSide == \"top\" || box.anchorSide == \"bottom\") {\n          var unitLayout = node.data()[\"auxunitlayouts\"][box.anchorSide];\n\n          if (unitLayout.units[unitLayout.units.length - 1].id == box.id) {\n            var borderWidth = node.data()['border-width'];\n            var shiftAmount = (box.bbox.w - previousWidth) / 2 * 100 / (node.outerWidth() - borderWidth);\n\n            if (shiftAmount >= 0) {\n              if (box.bbox.x + shiftAmount <= 100) {\n                box.bbox.x = box.bbox.x + shiftAmount;\n              }\n            }\n            /*  else{\n               var previousInfoBbox = {x : 0, w:0};\n               if(unitLayout.units.length > 1){\n                 previousInfoBbox= unitLayout.units[unitLayout.units.length-2].bbox;      \n               }\n                \n               \n               sbgnvizInstance.classes.AuxUnitLayout.setIdealGap(node, box.anchorSide);\n               var idealGap = sbgnvizInstance.classes.AuxUnitLayout.getCurrentGap(box.anchorSide);\n               var newPosition = previousInfoBbox.x + (previousInfoBbox.w/2 + idealGap + box.bbox.w/2)*100 / (node.outerWidth() - borderWidth);\n               box.bbox.x = newPosition;\n               \n             } */\n\n          }\n        }\n        /* if (box.anchorSide === \"top\" || box.anchorSide === \"bottom\") {\n          box.bbox.x += (box.bbox.w - oldLength) / 2;\n          var units = (node.data('auxunitlayouts')[box.anchorSide]).units;\n          var shiftIndex = 0;\n          for (var i = 0; i < units.length; i++) {\n            if(units[i] === box){\n              shiftIndex = i;\n              break;\n            }\n          }\n          for (var j = shiftIndex+1; j < units.length; j++) {\n              units[j].bbox.x += (box.bbox.w - oldLength);\n          }\n        } */\n\n      } //TODO find a way to elimate this redundancy to update info-box positions\n\n\n      node.data('border-width', node.data('border-width'));\n      return result;\n    }; // Add a new state or info box to given nodes.\n    // The box is represented by the parameter obj.\n    // This method returns the index of the just added box.\n\n\n    elementUtilities.addStateOrInfoBox = function (nodes, obj) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var locationObj;\n        var defaultProps = elementUtilities.getDefaultProperties(node.data('class'));\n        var infoboxProps = defaultProps[obj.clazz];\n        console.log(\"inforBoxProps\", infoboxProps);\n        var bbox = obj.bbox || {\n          w: infoboxProps.width,\n          h: infoboxProps.height\n        };\n        var style = elementUtilities.getDefaultInfoboxStyle(node.data('class'), obj.clazz);\n\n        if (obj.style) {\n          $.extend(style, obj.style);\n        }\n\n        if (obj.clazz == \"unit of information\") {\n          locationObj = sbgnvizInstance.classes.UnitOfInformation.create(node, cy, obj.label.text, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        } else if (obj.clazz == \"state variable\") {\n          locationObj = sbgnvizInstance.classes.StateVariable.create(node, cy, obj.state.value, obj.state.variable, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        } else if (obj.clazz == \"residue variable\") {\n          locationObj = sbgnvizInstance.classes.ResidueVariable.create(node, cy, obj.residue.value, obj.residue.variable, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        }\n      }\n\n      return locationObj;\n    }; // Remove the state or info boxes of the given nodes at given index.\n    // Returns the removed box.\n\n\n    elementUtilities.removeStateOrInfoBox = function (nodes, locationObj) {\n      var obj;\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var stateAndInfos = node.data('statesandinfos');\n        var unit = stateAndInfos[locationObj.index];\n        var unitClass = sbgnvizInstance.classes.getAuxUnitClass(unit);\n        obj = unitClass.remove(unit, cy);\n      }\n\n      return obj;\n    }; //Tiles informations boxes for given anchorSides\n\n\n    elementUtilities.fitUnits = function (node, locations) {\n      var obj = [];\n      node.data('statesandinfos').forEach(function (ele) {\n        obj.push({\n          x: ele.bbox.x,\n          y: ele.bbox.y,\n          anchorSide: ele.anchorSide\n        });\n      });\n      sbgnvizInstance.classes.AuxUnitLayout.fitUnits(node, cy, locations);\n      return obj;\n    }; //Check which anchorsides fits\n\n\n    elementUtilities.checkFit = function (node, location) {\n      //if no location given, it checks all possible locations\n      console.log(\"elementUtilities.checkFit\", node);\n      return sbgnvizInstance.classes.AuxUnitLayout.checkFit(node, cy, location);\n    }; //Modify array of aux layout units\n\n\n    elementUtilities.modifyUnits = function (node, unit, anchorSide) {\n      sbgnvizInstance.classes.AuxUnitLayout.modifyUnits(node, unit, anchorSide, cy);\n    }; // Set multimer status of the given nodes to the given status.\n\n\n    elementUtilities.setMultimerStatus = function (nodes, status) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data('class');\n        var isMultimer = node.data('class').endsWith(' multimer');\n\n        if (status) {\n          // Make multimer status true\n          if (!isMultimer) {\n            node.data('class', sbgnclass + ' multimer');\n          }\n        } else {\n          // Make multimer status false\n          if (isMultimer) {\n            node.data('class', sbgnclass.replace(' multimer', ''));\n          }\n        }\n      }\n    }; //Need to add this to doc : TO-DO\n\n\n    elementUtilities.setActiveStatus = function (nodes, status) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data('class');\n        var isActive = node.data('class').startsWith('active ');\n\n        if (status) {\n          // Make multimer status true\n          if (!isActive) {\n            node.data('class', 'active ' + sbgnclass); //node.data('class', sbgnclass + ' multimer');\n          }\n        } else {\n          // Make multimer status false\n          if (isActive) {\n            node.data('class', sbgnclass.replace('active ', '')); //node.data('class', sbgnclass.replace(' multimer', ''));\n          }\n        }\n      }\n    }; //Need to add this to doc : TO-DO\n\n\n    elementUtilities.setHypotheticalStatus = function (nodes, status) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data('class');\n        var isHypothetical = node.data('class').includes('hypothetical');\n        var isActive = node.data('class').startsWith('active ');\n\n        if (status) {\n          // Make multimer status true\n          if (!isHypothetical) {\n            if (isActive) {\n              var tmp = sbgnclass.substring(7);\n              node.data('class', 'active hypothetical ' + tmp);\n            } else {\n              node.data('class', 'hypothetical ' + sbgnclass);\n            } //node.data('class', sbgnclass + ' multimer');\n\n          }\n        } else {\n          // Make multimer status false\n          if (isHypothetical) {\n            node.data('class', sbgnclass.replace('hypothetical ', '')); //node.data('class', sbgnclass.replace(' multimer', ''));\n          }\n        }\n      }\n    }; // Change font properties of the given elements with given font data\n\n\n    elementUtilities.changeFontProperties = function (eles, data) {\n      for (var prop in data) {\n        eles.data(prop, data[prop]);\n      }\n    }; // This function gets an edge, and ends of that edge (Optionally it may take just the classes of the edge as well) as parameters.\n    // It may return 'valid' (that ends is valid for that edge), 'reverse' (that ends is not valid for that edge but they would be valid\n    // if you reverse the source and target), 'invalid' (that ends are totally invalid for that edge).\n\n\n    elementUtilities.validateArrowEnds = function (edge, source, target, isReplacement) {\n      // if map type is Unknown -- no rules applied\n      if (elementUtilities.getMapType() == \"HybridAny\" || elementUtilities.getMapType() == \"HybridSbgn\" || !elementUtilities.getMapType()) return \"valid\";\n      var edgeclass = typeof edge === 'string' ? edge : edge.data('class');\n      var sourceclass = source.data('class');\n      var targetclass = target.data('class');\n      var mapType = elementUtilities.getMapType();\n      var edgeConstraints = elementUtilities[mapType].connectivityConstraints[edgeclass];\n\n      if (mapType == \"AF\") {\n        if (sourceclass.startsWith(\"BA\")) // we have separate classes for each biological activity\n          sourceclass = \"biological activity\"; // but same rule applies to all of them\n\n        if (targetclass.startsWith(\"BA\")) // we have separate classes for each biological activity\n          targetclass = \"biological activity\"; // but same rule applies to all of them\n      } else if (mapType == \"PD\") {\n        sourceclass = sourceclass.replace(/\\s*multimer$/, '');\n        targetclass = targetclass.replace(/\\s*multimer$/, '');\n      } else if (mapType == \"SBML\") {\n        sourceclass = sourceclass.replace(/\\s*multimer$/, '');\n        targetclass = targetclass.replace(/\\s*multimer$/, '');\n        sourceclass = sourceclass.replace(\"active \", '');\n        targetclass = targetclass.replace(\"active \", '');\n        sourceclass = sourceclass.replace(\"hypothetical \", '');\n        targetclass = targetclass.replace(\"hypothetical \", '');\n      } // given a node, acting as source or target, returns boolean wether or not it has too many edges already\n\n\n      function hasTooManyEdges(node, sourceOrTarget) {\n        var nodeclass = node.data('class');\n        nodeclass = nodeclass.replace(/\\s*multimer$/, '');\n        nodeclass = nodeclass.replace(\"active \", '');\n        nodeclass = nodeclass.replace(\"hypothetical \", '');\n        if (nodeclass.startsWith(\"BA\")) nodeclass = \"biological activity\";\n        /*\n          On the logic below:\n           Current edge count (incoming or outgoing) of nodes should be strictly less \n          than the maximum allowed if we are adding an edge to the node. This way\n          it will never exceed the max count.\n          \n          Edges can be added in two different ways. Either they are added directly or\n          they are added by being replaced from another node, i.e disconnected from\n          one and connected to another.\n           We can detect if the edge being added is added from a replacement by checking\n          whether the source stayed the same when checking edge counts of the source node,\n          and whether the target stayed the same when checking edge counts of the\n          target node.\n           Current edge count of nodes can be allowed to be equal to the maximum in \n          cases where a replacement is made. But we should be careful that this\n          replacement operation is not also an addition operation as described above.\n        */\n\n        var totalTooMany = true;\n        var edgeTooMany = true;\n\n        if (sourceOrTarget == \"source\") {\n          var sameEdgeCountOut = node.outgoers('edge[class=\"' + edgeclass + '\"]').size();\n          var totalEdgeCountOut = node.outgoers('edge').size();\n          var maxTotal = edgeConstraints[nodeclass].asSource.maxTotal;\n          var maxEdge = edgeConstraints[nodeclass].asSource.maxEdge;\n          var compareStrict = !(isReplacement && edge.source() === source);\n          var withinLimits = !maxTotal || compareStrict && totalEdgeCountOut < maxTotal || !compareStrict && totalEdgeCountOut <= maxTotal;\n\n          if (withinLimits) {\n            totalTooMany = false;\n          } // then check limits for this specific edge class\n\n\n          withinLimits = !maxEdge || compareStrict && sameEdgeCountOut < maxEdge || !compareStrict && sameEdgeCountOut <= maxEdge;\n\n          if (withinLimits) {\n            edgeTooMany = false;\n          } // if only one of the limits is reached then edge is invalid\n\n\n          return totalTooMany || edgeTooMany;\n        } else {\n          // node is used as target\n          var sameEdgeCountIn = node.incomers('edge[class=\"' + edgeclass + '\"]').size();\n          var totalEdgeCountIn = node.incomers('edge').size();\n          var maxTotal = edgeConstraints[nodeclass].asTarget.maxTotal;\n          var maxEdge = edgeConstraints[nodeclass].asTarget.maxEdge;\n          var compareStrict = !(isReplacement && edge.target() === target);\n          var withinLimits = !maxTotal || compareStrict && totalEdgeCountIn < maxTotal || !compareStrict && totalEdgeCountIn <= maxTotal;\n\n          if (withinLimits) {\n            totalTooMany = false;\n          }\n\n          withinLimits = !maxEdge || compareStrict && sameEdgeCountIn < maxEdge || !compareStrict && sameEdgeCountIn <= maxEdge;\n\n          if (withinLimits) {\n            edgeTooMany = false;\n          }\n\n          return totalTooMany || edgeTooMany;\n        }\n      }\n\n      function isInComplex(node) {\n        var parentClass = node.parent().data('class');\n        return parentClass && parentClass.startsWith('complex');\n      }\n\n      if (isInComplex(source) || isInComplex(target)) {\n        // subunits of a complex are no longer EPNs, no connection allowed\n        return 'invalid';\n      } // check nature of connection\n\n\n      if (edgeConstraints[sourceclass].asSource.isAllowed && edgeConstraints[targetclass].asTarget.isAllowed) {\n        // check amount of connections\n        if (!hasTooManyEdges(source, \"source\") && !hasTooManyEdges(target, \"target\")) {\n          return 'valid';\n        }\n      } // try to reverse\n\n\n      if (edgeConstraints[targetclass].asSource.isAllowed && edgeConstraints[sourceclass].asTarget.isAllowed) {\n        if (!hasTooManyEdges(target, \"source\") && !hasTooManyEdges(source, \"target\")) {\n          return 'reverse';\n        }\n      }\n\n      return 'invalid';\n    };\n\n    elementUtilities.deleteAndPerformLayout = function (eles, layoutparam) {\n      var result = eles.remove();\n\n      if (typeof layoutparam === 'function') {\n        layoutparam(); // If layoutparam is a function execute it\n      } else {\n        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.\n        // Do this check for cytoscape.js backward compatibility\n\n        if (layout && layout.run) {\n          layout.run();\n        }\n      }\n\n      return result;\n    };\n    /*\n     * Hide given eles and perform given layout afterward. Layout parameter may be layout options\n     * or a function to call.\n     */\n\n\n    elementUtilities.hideAndPerformLayout = function (eles, layoutparam) {\n      var result = cy.viewUtilities().hide(eles); // Hide given eles\n\n      if (typeof layoutparam === 'function') {\n        layoutparam(); // If layoutparam is a function execute it\n      } else {\n        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.\n        // Do this check for cytoscape.js backward compatibility\n\n        if (layout && layout.run) {\n          layout.run();\n        }\n      }\n\n      return result;\n    };\n    /*\n     * Unhide given eles and perform given layout afterward. Layout parameter may be layout options\n     * or a function to call.\n     */\n\n\n    elementUtilities.showAndPerformLayout = function (eles, layoutparam) {\n      var result = cy.viewUtilities().show(eles); // Show given eles\n\n      if (typeof layoutparam === 'function') {\n        layoutparam(); // If layoutparam is a function execute it\n      } else {\n        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.\n        // Do this check for cytoscape.js backward compatibility\n\n        if (layout && layout.run) {\n          layout.run();\n        }\n      }\n\n      return result;\n    };\n    /*\n     * Change style/css of given eles by setting getting property name to the given value/values (Note that valueMap parameter may be\n     * a single string or an id to value map).\n     */\n\n\n    elementUtilities.changeCss = function (eles, name, valueMap) {\n      if (_typeof(valueMap) === 'object') {\n        cy.startBatch();\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = cy.getElementById(eles[i].id());\n          ele.css(name, valueMap[ele.id()]); // valueMap is an id to value map use it in this way\n        }\n\n        cy.endBatch();\n      } else {\n        eles.css(name, valueMap); // valueMap is just a string set css('name') for all eles to this value\n      }\n    };\n    /*\n     * Change data of given eles by setting getting property name to the given value/values (Note that valueMap parameter may be\n     * a single string or an id to value map).\n     */\n\n\n    elementUtilities.changeData = function (eles, name, valueMap) {\n      console.log(\"changing data in chise\");\n\n      if (_typeof(valueMap) === 'object') {\n        cy.startBatch();\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = cy.getElementById(eles[i].id());\n          ele.data(name, valueMap[ele.id()]); // valueMap is an id to value map use it in this way\n        }\n\n        cy.endBatch();\n      } else {\n        eles.data(name, valueMap); // valueMap is just a string set css('name') for all eles to this value\n      }\n    };\n\n    elementUtilities.updateSetField = function (ele, fieldName, toDelete, toAdd, callback) {\n      var set = ele.data(fieldName);\n\n      if (!set) {\n        return;\n      }\n\n      var updates = {};\n\n      if (toDelete != null && set[toDelete]) {\n        delete set[toDelete];\n        updates.deleted = toDelete;\n      }\n\n      if (toAdd != null) {\n        set[toAdd] = true;\n        updates.added = toAdd;\n      }\n\n      if (callback && (updates['deleted'] != null || updates['added'] != null)) {\n        callback();\n      }\n\n      return updates;\n    };\n    /*\n     * Return the set of all nodes present under the given position\n     * renderedPos must be a point defined relatively to cytoscape container\n     * (like renderedPosition field of a node)\n     */\n\n\n    elementUtilities.getNodesAt = function (renderedPos) {\n      var nodes = cy.nodes();\n      var x = renderedPos.x;\n      var y = renderedPos.y;\n      var resultNodes = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var renderedBbox = node.renderedBoundingBox({\n          includeNodes: true,\n          includeEdges: false,\n          includeLabels: false,\n          includeShadows: false\n        });\n\n        if (x >= renderedBbox.x1 && x <= renderedBbox.x2) {\n          if (y >= renderedBbox.y1 && y <= renderedBbox.y2) {\n            resultNodes.push(node);\n          }\n        }\n      }\n\n      return resultNodes;\n    };\n\n    elementUtilities.demultimerizeClass = function (sbgnclass) {\n      return sbgnclass.replace(\" multimer\", \"\");\n    };\n    /**\n     * @param mapType - type of the current map (PD, AF or Unknown)\n     */\n\n\n    elementUtilities.setMapType = function (mapType) {\n      elementUtilities.mapType = mapType;\n      return mapType;\n    };\n    /**\n     * return - map type\n     */\n\n\n    elementUtilities.getMapType = function () {\n      return elementUtilities.mapType;\n    };\n    /**\n     * Resets map type\n     */\n\n\n    elementUtilities.resetMapType = function () {\n      elementUtilities.mapType = undefined;\n    };\n    /**\n     * Keep consistency of links to self inside the data() structure.\n     * This is needed whenever a node changes parents, for example,\n     * as it is destroyed and recreated. But the data() stays identical.\n     * This creates inconsistencies for the pointers stored in data(),\n     * as they now point to a deleted node.\n     */\n\n\n    elementUtilities.maintainPointer = function (eles) {\n      eles.nodes().forEach(function (ele) {\n        // restore background images\n        ele.emit('data'); // skip nodes without any auxiliary units\n\n        if (!ele.data('statesandinfos') || ele.data('statesandinfos').length == 0) {\n          return;\n        }\n\n        for (var side in ele.data('auxunitlayouts')) {\n          ele.data('auxunitlayouts')[side].parentNode = ele.id();\n        }\n\n        for (var i = 0; i < ele.data('statesandinfos').length; i++) {\n          ele.data('statesandinfos')[i].parent = ele.id();\n        }\n      });\n    };\n\n    elementUtilities.anyHasBackgroundImage = function (eles) {\n      var obj = elementUtilities.getBackgroundImageObjs(eles);\n      if (obj === undefined) return false;else {\n        for (var key in obj) {\n          var value = obj[key];\n          if (value && !$.isEmptyObject(value)) return true;\n        }\n\n        return false;\n      }\n    };\n\n    elementUtilities.hasBackgroundImage = function (ele) {\n      if (!ele.isNode() || !ele.data('background-image')) {\n        return false;\n      }\n\n      var bg;\n\n      if (typeof ele.data('background-image') === \"string\") {\n        bg = ele.data('background-image').split(\" \");\n      } else if (Array.isArray(obj['background-image'])) {\n        bg = ele.data('background-image');\n      }\n\n      if (!bg) return false;\n      var cloneImg = 'data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E'; // If cloneImg is not the only image or there are multiple images there is a background image\n\n      var onlyHasCloneMarkerAsBgImage = bg.length === 1 && bg.indexOf(cloneImg) === 0;\n      if (bg.length > 1 || !onlyHasCloneMarkerAsBgImage) return true;\n      return false;\n    };\n\n    elementUtilities.getBackgroundImageURL = function (eles) {\n      'getting background images';\n      if (!eles || eles.length < 1) return;\n      var commonURL = \"\";\n\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        if (!ele.isNode() || !elementUtilities.hasBackgroundImage(ele)) return;\n        var url = ele.data('background-image').split(\" \").pop();\n        if (!url || url.indexOf('http') !== 0 || commonURL !== \"\" && commonURL !== url) return;else if (commonURL === \"\") commonURL = url;\n      }\n\n      return commonURL;\n    };\n\n    elementUtilities.getBackgroundImageObjs = function (eles) {\n      if (!eles || eles.length < 1) return;\n      var list = {};\n\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        var obj = getBgObj(ele);\n        if (Object.keys(obj).length < 1) return;\n        list[ele.data('id')] = obj;\n      }\n\n      return list;\n\n      function getBgObj(ele) {\n        if (ele.isNode() && elementUtilities.hasBackgroundImage(ele)) {\n          var keys = ['background-image', 'background-fit', 'background-image-opacity', 'background-position-x', 'background-position-y', 'background-height', 'background-width'];\n          var obj = {};\n          keys.forEach(function (key) {\n            var value;\n\n            if (ele.data(key) && typeof ele.data(key) === \"string\") {\n              value = ele.data(key).split(\" \")[0];\n            } else {\n              value = ele.data(key);\n            }\n\n            obj[key] = value;\n          });\n          return obj;\n        } else if (ele.isNode()) return {};\n      }\n    };\n\n    elementUtilities.getBackgroundFitOptions = function (eles) {\n      if (!eles || eles.length < 1) return;\n      var commonFit = \"\";\n\n      for (var i = 0; i < eles.length; i++) {\n        var node = eles[i];\n        if (!node.isNode()) return;\n        var fit = getFitOption(node);\n        if (!fit || commonFit !== \"\" && fit !== commonFit) return;else if (commonFit === \"\") commonFit = fit;\n      }\n\n      var options = '<option value=\"none\">None</option>' + '<option value=\"fit\">Fit</option>' + '<option value=\"cover\">Cover</option>' + '<option value=\"contain\">Contain</option>';\n      var searchKey = 'value=\"' + commonFit + '\"';\n      var index = options.indexOf(searchKey) + searchKey.length;\n      return options.substr(0, index) + ' selected' + options.substr(index);\n\n      function getFitOption(node) {\n        if (!elementUtilities.hasBackgroundImage(node)) return;\n        var f = node.data('background-fit');\n        var h = node.data('background-height');\n        if (!f || !h) return;\n        f = f.split(\" \");\n        h = h.split(\" \");\n        if (f[f.length - 1] === \"none\") return h[h.length - 1] === \"auto\" ? \"none\" : \"fit\";else return f[f.length - 1];\n      }\n    };\n\n    elementUtilities.updateBackgroundImage = function (nodes, bgObj) {\n      if (!nodes || nodes.length == 0 || !bgObj) return;\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var obj = bgObj[node.data('id')];\n        if (!obj || $.isEmptyObject(obj)) continue;\n        var imgs = node.data('background-image') ? node.data('background-image').split(\" \") : [];\n        var xPos = node.data('background-position-x') ? node.data('background-position-x').split(\" \") : [];\n        var yPos = node.data('background-position-y') ? node.data('background-position-y').split(\" \") : [];\n        var widths = node.data('background-width') ? node.data('background-width').split(\" \") : [];\n        var heights = node.data('background-height') ? node.data('background-height').split(\" \") : [];\n        var fits = node.data('background-fit') ? node.data('background-fit').split(\" \") : [];\n        var opacities = node.data('background-image-opacity') ? (\"\" + node.data('background-image-opacity')).split(\" \") : [];\n        var index = -1;\n        if (typeof obj['background-image'] === \"string\") index = imgs.indexOf(obj['background-image']);else if (Array.isArray(obj['background-image'])) index = imgs.indexOf(obj['background-image'][0]);\n        if (index < 0) continue;\n\n        if (obj['background-image'] && imgs.length > index) {\n          var tmp = imgs[index];\n          imgs[index] = obj['background-image'];\n          obj['background-image'] = tmp;\n        }\n\n        if (obj['background-fit'] && fits.length > index) {\n          var tmp = fits[index];\n          fits[index] = obj['background-fit'];\n          obj['background-fit'] = tmp;\n        }\n\n        if (obj['background-width'] && widths.length > index) {\n          var tmp = widths[index];\n          widths[index] = obj['background-width'];\n          obj['background-width'] = tmp;\n        }\n\n        if (obj['background-height'] && heights.length > index) {\n          var tmp = heights[index];\n          heights[index] = obj['background-height'];\n          obj['background-height'] = tmp;\n        }\n\n        if (obj['background-position-x'] && xPos.length > index) {\n          var tmp = xPos[index];\n          xPos[index] = obj['background-position-x'];\n          obj['background-position-x'] = tmp;\n        }\n\n        if (obj['background-position-y'] && yPos.length > index) {\n          var tmp = yPos[index];\n          yPos[index] = obj['background-position-y'];\n          obj['background-position-y'] = tmp;\n        }\n\n        if (obj['background-image-opacity'] && opacities.length > index) {\n          var tmp = opacities[index];\n          opacities[index] = obj['background-image-opacity'];\n          obj['background-image-opacity'] = tmp;\n        }\n\n        node.data('background-image', imgs.join(\" \"));\n        node.data('background-position-x', xPos.join(\" \"));\n        node.data('background-position-y', yPos.join(\" \"));\n        node.data('background-width', widths.join(\" \"));\n        node.data('background-height', heights.join(\" \"));\n        node.data('background-fit', fits.join(\" \"));\n        node.data('background-image-opacity', opacities.join(\" \"));\n      }\n\n      return bgObj;\n    };\n\n    elementUtilities.changeBackgroundImage = function (nodes, oldImg, newImg, firstTime, updateInfo, promptInvalidImage, validateURL) {\n      if (!nodes || nodes.length == 0 || !oldImg || !newImg) return;\n      elementUtilities.removeBackgroundImage(nodes, oldImg);\n\n      for (var key in newImg) {\n        newImg[key]['firstTime'] = firstTime;\n      }\n\n      elementUtilities.addBackgroundImage(nodes, newImg, updateInfo, promptInvalidImage, validateURL);\n      return {\n        nodes: nodes,\n        oldImg: newImg,\n        newImg: oldImg,\n        firstTime: false,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n    }; // Add a background image to given nodes.\n\n\n    elementUtilities.addBackgroundImage = function (nodes, bgObj, updateInfo, promptInvalidImage, validateURL) {\n      if (!nodes || nodes.length == 0 || !bgObj) return;\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var obj = bgObj[node.data('id')];\n        if (!obj || $.isEmptyObject(obj)) continue; // Load the image from local, else just put the URL\n\n        if (obj['fromFile']) loadBackgroundThenApply(node, obj); // Validity of given URL should be checked before applying it\n        else if (obj['firstTime']) {\n          if (typeof validateURL === 'function') validateURL(node, obj, applyBackground, promptInvalidImage);else checkGivenURL(node, obj);\n        } else applyBackground(node, obj);\n      }\n\n      function loadBackgroundThenApply(node, bgObj) {\n        var reader = new FileReader();\n        var imgFile = bgObj['background-image']; // Check whether given file is an image file\n\n        if (imgFile.type.indexOf(\"image\") !== 0) {\n          if (promptInvalidImage) promptInvalidImage(\"Invalid image file is given!\");\n          return;\n        }\n\n        reader.readAsDataURL(imgFile);\n\n        reader.onload = function (e) {\n          var img = reader.result;\n\n          if (img) {\n            bgObj['background-image'] = img;\n            bgObj['fromFile'] = false;\n            applyBackground(node, bgObj);\n          } else {\n            if (promptInvalidImage) promptInvalidImage(\"Given file could not be read!\");\n          }\n        };\n      }\n\n      function checkGivenURL(node, bgObj) {\n        var url = bgObj['background-image'];\n        var extension = url.split(/[?#]/)[0].split(\".\").pop();\n        var validExtensions = [\"png\", \"svg\", \"jpg\", \"jpeg\"];\n\n        if (!validExtensions.includes(extension)) {\n          if (typeof promptInvalidImage === 'function') promptInvalidImage(\"Invalid URL is given!\");\n          return;\n        }\n\n        $.ajax({\n          url: url,\n          type: 'GET',\n          success: function success(result, status, xhr) {\n            applyBackground(node, bgObj);\n          },\n          error: function error(xhr, status, _error) {\n            if (promptInvalidImage) promptInvalidImage(\"Invalid URL is given!\");\n          }\n        });\n      }\n\n      function applyBackground(node, bgObj) {\n        if (elementUtilities.hasBackgroundImage(node)) return;\n        var imgs = node.data('background-image') ? node.data('background-image').split(\" \") : [];\n        var xPos = node.data('background-position-x') ? node.data('background-position-x').split(\" \") : [];\n        var yPos = node.data('background-position-y') ? node.data('background-position-y').split(\" \") : [];\n        var widths = node.data('background-width') ? node.data('background-width').split(\" \") : [];\n        var heights = node.data('background-height') ? node.data('background-height').split(\" \") : [];\n        var fits = node.data('background-fit') ? node.data('background-fit').split(\" \") : [];\n        var opacities = node.data('background-image-opacity') ? (\"\" + node.data('background-image-opacity')).split(\" \") : [];\n        var indexToInsert = imgs.length; // insert to length-1\n\n        if (elementUtilities.hasCloneMarker(imgs)) {\n          indexToInsert--;\n        }\n\n        imgs.splice(indexToInsert, 0, bgObj['background-image']);\n        fits.splice(indexToInsert, 0, bgObj['background-fit']);\n        opacities.splice(indexToInsert, 0, bgObj['background-image-opacity']);\n        xPos.splice(indexToInsert, 0, bgObj['background-position-x']);\n        yPos.splice(indexToInsert, 0, bgObj['background-position-y']);\n        widths.splice(indexToInsert, 0, bgObj['background-width']);\n        heights.splice(indexToInsert, 0, bgObj['background-height']);\n        node.data('background-image', imgs.join(\" \"));\n        node.data('background-position-x', xPos.join(\" \"));\n        node.data('background-position-y', yPos.join(\" \"));\n        node.data('background-width', widths.join(\" \"));\n        node.data('background-height', heights.join(\" \"));\n        node.data('background-fit', fits.join(\" \"));\n        node.data('background-image-opacity', opacities.join(\" \"));\n        bgObj['firstTime'] = false;\n        if (updateInfo) updateInfo();\n      }\n    };\n\n    elementUtilities.hasCloneMarker = function (imgs) {\n      var cloneImg = 'data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E';\n      return imgs.indexOf(cloneImg) > -1;\n    }; // Remove a background image from given nodes.\n\n\n    elementUtilities.removeBackgroundImage = function (nodes, bgObj) {\n      if (!nodes || nodes.length == 0 || !bgObj) return;\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var obj = bgObj[node.data('id')];\n        if (!obj) continue;\n        var imgs = node.data('background-image') ? node.data('background-image').split(\" \") : [];\n        var xPos = node.data('background-position-x') ? node.data('background-position-x').split(\" \") : [];\n        var yPos = node.data('background-position-y') ? node.data('background-position-y').split(\" \") : [];\n        var widths = node.data('background-width') ? node.data('background-width').split(\" \") : [];\n        var heights = node.data('background-height') ? node.data('background-height').split(\" \") : [];\n        var fits = node.data('background-fit') ? node.data('background-fit').split(\" \") : [];\n        var opacities = node.data('background-image-opacity') ? (\"\" + node.data('background-image-opacity')).split(\" \") : [];\n        var index = -1;\n        if (typeof obj['background-image'] === \"string\") index = imgs.indexOf(obj['background-image'].split(\" \")[0]);else if (Array.isArray(obj['background-image'])) index = imgs.indexOf(obj['background-image'][0]);\n\n        if (index > -1) {\n          imgs.splice(index, 1);\n          fits.splice(index, 1);\n          opacities.splice(index, 1);\n          xPos.splice(index, 1);\n          yPos.splice(index, 1);\n          widths.splice(index, 1);\n          heights.splice(index, 1);\n        }\n\n        node.data('background-image', imgs.join(\" \"));\n        node.data('background-position-x', xPos.join(\" \"));\n        node.data('background-position-y', yPos.join(\" \"));\n        node.data('background-width', widths.join(\" \"));\n        node.data('background-height', heights.join(\" \"));\n        node.data('background-fit', fits.join(\" \"));\n        node.data('background-image-opacity', opacities.join(\" \"));\n        bgObj['firstTime'] = false;\n      }\n    };\n\n    elementUtilities.reverseEdge = function (edge) {\n      var oldSource = edge.source().id();\n      var oldTarget = edge.target().id();\n      var oldPortSource = edge.data(\"portsource\");\n      var oldPortTarget = edge.data(\"porttarget\");\n      var segmentPoints = edge.segmentPoints();\n      var controlPoints = edge.controlPoints();\n      edge.data().source = oldTarget;\n      edge.data().target = oldSource;\n      edge.data().portsource = oldPortTarget;\n      edge.data().porttarget = oldPortSource;\n      edge = edge.move({\n        target: oldSource,\n        source: oldTarget\n      });\n\n      if (Array.isArray(segmentPoints)) {\n        segmentPoints.reverse();\n        edge.data().bendPointPositions = segmentPoints;\n\n        if (Array.isArray(controlPoints)) {\n          controlPoints.reverse();\n          edge.data().controlPointPositions = controlPoints;\n        }\n\n        var edgeEditing = cy.edgeEditing('get');\n        edgeEditing.initAnchorPoints(edge);\n      }\n\n      return edge;\n    };\n  }\n\n  return elementUtilitiesExtender;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/element-utilities-extender-factory.js\n");

/***/ }),

/***/ "./src/utilities/lib-utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/lib-utilities.js ***!
  \****************************************/
/***/ ((module) => {

eval("/* \n * Utility file to get and set the libraries to which sbgnviz is dependent from any file.\n */\nvar libUtilities = function libUtilities() {};\n\nlibUtilities.setLibs = function (libs) {\n  this.libs = libs;\n};\n\nlibUtilities.getLibs = function () {\n  return this.libs;\n};\n\nmodule.exports = libUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xpYi11dGlsaXRpZXMuanMuanMiLCJuYW1lcyI6WyJsaWJVdGlsaXRpZXMiLCJzZXRMaWJzIiwibGlicyIsImdldExpYnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGlzZS8uL3NyYy91dGlsaXRpZXMvbGliLXV0aWxpdGllcy5qcz9iYWFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIFxuICogVXRpbGl0eSBmaWxlIHRvIGdldCBhbmQgc2V0IHRoZSBsaWJyYXJpZXMgdG8gd2hpY2ggc2JnbnZpeiBpcyBkZXBlbmRlbnQgZnJvbSBhbnkgZmlsZS5cbiAqL1xuXG52YXIgbGliVXRpbGl0aWVzID0gZnVuY3Rpb24oKXtcbn07XG5cbmxpYlV0aWxpdGllcy5zZXRMaWJzID0gZnVuY3Rpb24obGlicykge1xuICB0aGlzLmxpYnMgPSBsaWJzO1xufTtcblxubGliVXRpbGl0aWVzLmdldExpYnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubGlicztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbGliVXRpbGl0aWVzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUEsSUFBSUEsWUFBWSxHQUFHLFNBQWZBLFlBQWUsR0FBVSxDQUM1QixDQUREOztBQUdBQSxZQUFZLENBQUNDLE9BQWIsR0FBdUIsVUFBU0MsSUFBVCxFQUFlO0VBQ3BDLEtBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNELENBRkQ7O0FBSUFGLFlBQVksQ0FBQ0csT0FBYixHQUF1QixZQUFXO0VBQ2hDLE9BQU8sS0FBS0QsSUFBWjtBQUNELENBRkQ7O0FBSUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsWUFBakIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/lib-utilities.js\n");

/***/ }),

/***/ "./src/utilities/main-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/main-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nvar libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n/*\n * The main utilities to be exposed directly.\n */\n\n\nmodule.exports = function () {\n  var elementUtilities, options, cy, sbgnvizInstance;\n\n  function mainUtilities(param) {\n    elementUtilities = param.elementUtilities;\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();\n  }\n\n  ;\n  /*\n   * Adds a new node with the given class and at the given coordinates. Considers undoable option.\n   */\n\n  mainUtilities.addNode = function (x, y, nodeParams, id, parent, visibility) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // update map type\n\n\n    if (_typeof(nodeParams) == 'object') {\n      /* \n            if (!elementUtilities.getMapType())\n              elementUtilities.setMapType(nodeParams.language);\n            else if (elementUtilities.getMapType() != nodeParams.language)\n              elementUtilities.setMapType(\"Unknown\"); */\n    }\n\n    if (!options.undoable) {\n      return elementUtilities.addNode(x, y, nodeParams, id, parent, visibility);\n    } else {\n      var param = {\n        newNode: {\n          x: x,\n          y: y,\n          \"class\": nodeParams,\n          id: id,\n          parent: parent,\n          visibility: visibility\n        }\n      };\n      var result = cy.undoRedo()[\"do\"](\"addNode\", param);\n      return result.eles;\n    }\n  };\n  /*\n   * Adds a new edge with the given class and having the given source and target ids. Considers undoable option.\n   */\n\n\n  mainUtilities.addEdge = function (source, target, edgeParams, invalidEdgeCallback, id, visibility) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // update map type\n\n\n    if (_typeof(edgeParams) == 'object') {\n      /*  if (!elementUtilities.getMapType())\n         elementUtilities.setMapType(edgeParams.language);\n       else if (elementUtilities.getMapType() != edgeParams.language)\n         elementUtilities.setMapType(\"HybridAny\"); */\n    } // Get the validation result\n\n\n    var edgeclass = edgeParams[\"class\"] ? edgeParams[\"class\"] : edgeParams;\n    var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(source), cy.getElementById(target)); // If validation result is 'invalid' cancel the operation\n\n    if (validation === 'invalid') {\n      if (typeof invalidEdgeCallback === \"function\") {\n        invalidEdgeCallback();\n      }\n\n      return;\n    } // If validation result is 'reverse' reverse the source-target pair before creating the edge\n\n\n    if (validation === 'reverse') {\n      var temp = source;\n      source = target;\n      target = temp;\n    }\n\n    if (!options.undoable) {\n      return elementUtilities.addEdge(source, target, edgeParams, id, visibility);\n    } else {\n      var param = {\n        newEdge: {\n          source: source,\n          target: target,\n          \"class\": edgeParams,\n          id: id,\n          visibility: visibility\n        }\n      };\n      var result = cy.undoRedo()[\"do\"](\"addEdge\", param);\n      return result.eles;\n    }\n  };\n  /*\n   * Adds a process with convenient edges. For more information please see 'https://github.com/iVis-at-Bilkent/newt/issues/9'.\n   * Considers undoable option.\n   */\n\n\n  mainUtilities.addProcessWithConvenientEdges = function (_source, _target, processType) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // If source and target IDs are given get the elements by IDs\n\n\n    var source = typeof _source === 'string' ? cy.getElementById(_source) : _source;\n    var target = typeof _target === 'string' ? cy.getElementById(_target) : _target; // If source or target does not have an EPN class the operation is not valid\n\n    if (!elementUtilities.isEPNClass(source) || !elementUtilities.isEPNClass(target)) {\n      return;\n    }\n\n    if (!options.undoable) {\n      return elementUtilities.addProcessWithConvenientEdges(_source, _target, processType);\n    } else {\n      var param = {\n        source: _source,\n        target: _target,\n        processType: processType\n      };\n      cy.undoRedo()[\"do\"](\"addProcessWithConvenientEdges\", param);\n    }\n  }; // convert collapsed compound nodes to simple nodes\n  // and update port values of pasted nodes and edges\n\n\n  var cloneCollapsedNodesAndPorts = function cloneCollapsedNodesAndPorts(elesBefore) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    cy.elements().unselect();\n    var elesAfter = cy.elements();\n    var elesDiff = elesAfter.diff(elesBefore).left; // shallow copy collapsed nodes - collapsed compounds become simple nodes\n    // data related to collapsed nodes are removed from generated clones\n    // related issue: https://github.com/iVis-at-Bilkent/newt/issues/145\n\n    var collapsedNodes = elesDiff.filter('node.cy-expand-collapse-collapsed-node');\n    collapsedNodes.connectedEdges().remove();\n    collapsedNodes.removeClass('cy-expand-collapse-collapsed-node');\n    collapsedNodes.removeData('collapsedChildren');\n    collapsedNodes.removeData('position-before-collapse size-before-collapse');\n    collapsedNodes.removeData('expandcollapseRenderedCueSize expandcollapseRenderedStartX expandcollapseRenderedStartY'); // cloning ports\n\n    elesDiff.nodes().forEach(function (_node) {\n      if (_node.data(\"ports\").length == 2) {\n        var oldPortName0 = _node.data(\"ports\")[0].id;\n\n        var oldPortName1 = _node.data(\"ports\")[1].id;\n\n        _node.data(\"ports\")[0].id = _node.id() + \".1\";\n        _node.data(\"ports\")[1].id = _node.id() + \".2\";\n\n        _node.outgoers().edges().forEach(function (_edge) {\n          if (_edge.data(\"portsource\") == oldPortName0) {\n            _edge.data(\"portsource\", _node.data(\"ports\")[0].id);\n          } else if (_edge.data(\"portsource\") == oldPortName1) {\n            _edge.data(\"portsource\", _node.data(\"ports\")[1].id);\n          } else {\n            _edge.data(\"portsource\", _node.id());\n          }\n        });\n\n        _node.incomers().edges().forEach(function (_edge) {\n          if (_edge.data(\"porttarget\") == oldPortName0) {\n            _edge.data(\"porttarget\", _node.data(\"ports\")[0].id);\n          } else if (_edge.data(\"porttarget\") == oldPortName1) {\n            _edge.data(\"porttarget\", _node.data(\"ports\")[1].id);\n          } else {\n            _edge.data(\"porttarget\", _node.id());\n          }\n        });\n      } else {\n        _node.outgoers().edges().forEach(function (_edge) {\n          _edge.data(\"portsource\", _node.id());\n        });\n\n        _node.incomers().edges().forEach(function (_edge) {\n          _edge.data(\"porttarget\", _node.id());\n        });\n      }\n    });\n    elesDiff.select();\n  };\n  /*\n   * Clone given elements. Considers undoable option. Requires cytoscape-clipboard extension.\n   */\n\n\n  mainUtilities.cloneElements = function (eles, pasteAtMouseLoc) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (eles.length === 0) {\n      return;\n    }\n\n    this.copyElements(eles);\n    this.pasteElements(pasteAtMouseLoc);\n  };\n  /*\n   * Copy given elements to clipboard. Requires cytoscape-clipboard extension.\n   */\n\n\n  mainUtilities.copyElements = function (eles) {\n    cy.clipboard().copy(eles);\n  };\n  /*\n   * Paste the elements copied to clipboard. Considers undoable option. Requires cytoscape-clipboard extension.\n   */\n\n\n  mainUtilities.pasteElements = function (pasteAtMouseLoc) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    var elesBefore = cy.elements();\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"paste\", {\n        pasteAtMouseLoc: pasteAtMouseLoc\n      });\n    } else {\n      cy.clipboard().paste();\n    }\n\n    cloneCollapsedNodesAndPorts(elesBefore);\n    cy.nodes(\":selected\").emit('data');\n  };\n  /*\n   * Aligns given nodes in given horizontal and vertical order.\n   * Horizontal and vertical parameters may be 'none' or undefined.\n   * alignTo parameter indicates the leading node.\n   * Requrires cytoscape-grid-guide extension and considers undoable option.\n   */\n\n\n  mainUtilities.align = function (nodes, horizontal, vertical, alignTo) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"align\", {\n        nodes: nodes,\n        horizontal: horizontal,\n        vertical: vertical,\n        alignTo: alignTo\n      });\n    } else {\n      nodes.align(horizontal, vertical, alignTo);\n    }\n\n    if (cy.edges(\":selected\").length == 1) {\n      cy.edges().unselect();\n    }\n  };\n  /*\n   * Create compound for given nodes. compoundType may be 'complex' or 'compartment'.\n   * This method considers undoable option.\n   */\n\n\n  mainUtilities.createCompoundForGivenNodes = function (_nodes, compoundType) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    var nodes = _nodes;\n    /*\n     * Eleminate the nodes which cannot have a parent with given compound type\n     */\n\n    nodes = _nodes.filter(function (element, i) {\n      if (typeof element === \"number\") {\n        element = i;\n      }\n\n      var sbgnclass = element.data(\"class\");\n      return elementUtilities.isValidParent(sbgnclass, compoundType, element);\n    });\n    nodes = elementUtilities.getTopMostNodes(nodes); // All elements should have the same parent and the common parent should not be a 'complex'\n    // if compoundType is 'compartent'\n    // because the old common parent will be the parent of the new compartment after this operation and\n    // 'complexes' cannot include 'compartments'\n\n    if (nodes.length == 0 || !elementUtilities.allHaveTheSameParent(nodes) || (compoundType === 'compartment' || compoundType == 'submap') && nodes.parent().data('class') && nodes.parent().data('class').startsWith('complex')) {\n      return;\n    }\n\n    if (cy.undoRedo()) {\n      var param = {\n        compoundType: compoundType,\n        nodesToMakeCompound: nodes\n      };\n      cy.undoRedo()[\"do\"](\"createCompoundForGivenNodes\", param);\n    } else {\n      elementUtilities.createCompoundForGivenNodes(nodes, compoundType);\n    }\n  };\n  /*\n   * Move the nodes to a new parent and change their position if possDiff params are set.\n   * Considers undoable option and checks if the operation is valid.\n   */\n\n\n  mainUtilities.changeParent = function (nodes, _newParent, posDiffX, posDiffY) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    var newParent = typeof _newParent === 'string' ? cy.getElementById(_newParent) : _newParent; // New parent is supposed to be one of the root, a complex or a compartment\n\n    if (newParent && !newParent.data(\"class\").startsWith(\"complex\") && newParent.data(\"class\") != \"compartment\" && newParent.data(\"class\") != \"submap\") {\n      return;\n    }\n    /*\n     * Eleminate the nodes which cannot have the newParent as their parent\n     */\n\n\n    nodes = nodes.filter(function (element, i) {\n      if (typeof element === \"number\") {\n        element = i;\n      }\n\n      var sbgnclass = element.data(\"class\");\n      return elementUtilities.isValidParent(sbgnclass, newParent, element);\n    }); // Discard the nodes whose parent is already newParent.\n    // Discard the newParent itself if it is among the nodes\n\n    nodes = nodes.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      } // Discard the newParent if it is among the nodes\n\n\n      if (newParent && ele.id() === newParent.id()) {\n        return false;\n      } // Discard the nodes whose parent is already newParent\n\n\n      if (!newParent) {\n        return ele.data('parent') != null;\n      }\n\n      return ele.data('parent') !== newParent.id();\n    }); // If some nodes are ancestor of new parent eleminate them\n\n    if (newParent) {\n      nodes = nodes.difference(newParent.ancestors());\n    } // If all nodes are eleminated return directly\n\n\n    if (nodes.length === 0) {\n      return;\n    } // Just move the top most nodes\n\n\n    nodes = elementUtilities.getTopMostNodes(nodes);\n    var parentId = newParent ? newParent.id() : null;\n\n    if (options.undoable) {\n      var param = {\n        firstTime: true,\n        parentData: parentId,\n        // It keeps the newParentId (Just an id for each nodes for the first time)\n        nodes: nodes,\n        posDiffX: posDiffX,\n        posDiffY: posDiffY,\n        // This is needed because the changeParent function called is not from elementUtilities\n        // but from the undoRedo extension directly, so maintaining pointer is not automatically done.\n        callback: elementUtilities.maintainPointer\n      };\n      cy.undoRedo()[\"do\"](\"changeParent\", param); // This action is registered by undoRedo extension\n    } else {\n      elementUtilities.changeParent(nodes, parentId, posDiffX, posDiffY);\n    }\n  };\n  /*\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\n   */\n\n\n  mainUtilities.createTranslationReaction = function (mRnaName, proteinName, processPosition, edgeLength) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createTranslationReaction(mRnaName, proteinName, processPosition, edgeLength);\n    } else {\n      var param = {\n        mRnaName: mRnaName,\n        proteinName: proteinName,\n        processPosition: processPosition,\n        edgeLength: edgeLength\n      };\n      cy.undoRedo()[\"do\"](\"createTranslationReaction\", param);\n    }\n  };\n  /*\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\n   */\n\n\n  mainUtilities.createTranscriptionReaction = function (geneName, mRnaName, processPosition, edgeLength) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createTranscriptionReaction(geneName, mRnaName, processPosition, edgeLength);\n    } else {\n      var param = {\n        geneName: geneName,\n        mRnaName: mRnaName,\n        processPosition: processPosition,\n        edgeLength: edgeLength\n      };\n      cy.undoRedo()[\"do\"](\"createTranscriptionReaction\", param);\n    }\n  };\n\n  mainUtilities.createTranslation = function (regulatorLabel, outputLabel, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createTranslation(regulatorLabel, outputLabel, orientation);\n    } else {\n      var param = {\n        regulatorLabel: regulatorLabel,\n        outputLabel: outputLabel,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createTranslation\", param);\n    }\n  };\n\n  mainUtilities.createTranscription = function (label, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createTranscription(label, orientation);\n    } else {\n      var param = {\n        label: label,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createTranscription\", param);\n    }\n  };\n\n  mainUtilities.createDegradation = function (macromolecule, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createDegradation(macromolecule, orientation);\n    } else {\n      var param = {\n        macromolecule: macromolecule,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createDegradation\", param);\n    }\n  };\n\n  mainUtilities.createComplexProteinFormation = function (proteinLabels, complexLabel, regulator, orientation, reverse) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createComplexProteinFormation(proteinLabels, complexLabel, regulator, orientation, reverse);\n    } else {\n      var param = {\n        proteinLabels: proteinLabels,\n        complexLabel: complexLabel,\n        regulator: regulator,\n        orientation: orientation,\n        reverse: reverse\n      };\n      cy.undoRedo()[\"do\"](\"createComplexProteinFormation\", param);\n    }\n  };\n\n  mainUtilities.createMultimerization = function (macromolecule, regulator, regulatorMultimer, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createMultimerization(macromolecule, regulator, regulatorMultimer, orientation);\n    } else {\n      var param = {\n        macromolecule: macromolecule,\n        regulator: regulator,\n        regulatorMultimer: regulatorMultimer,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createMultimerization\", param);\n    }\n  };\n\n  mainUtilities.createConversion = function (macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createConversion(macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels);\n    } else {\n      var param = {\n        macromolecule: macromolecule,\n        regulator: regulator,\n        regulatorMultimer: regulatorMultimer,\n        orientation: orientation,\n        inputInfoboxLabels: inputInfoboxLabels,\n        outputInfoboxLabels: outputInfoboxLabels\n      };\n      cy.undoRedo()[\"do\"](\"createConversion\", param);\n    }\n  };\n\n  mainUtilities.createMetabolicReaction = function (inputs, outputs, reversible, regulator, regulatorMultimer, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createMetabolicReaction(inputs, outputs, reversible, regulator, regulatorMultimer, orientation);\n    } else {\n      var param = {\n        inputs: inputs,\n        outputs: outputs,\n        reversible: reversible,\n        regulator: regulator,\n        regulatorMultimer: regulatorMultimer,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createMetabolicReaction\", param);\n    }\n  };\n  /*\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\n   */\n\n\n  mainUtilities.createMetabolicCatalyticActivity = function (inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createMetabolicCatalyticActivity(inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength);\n    } else {\n      var param = {\n        inputNodeList: inputNodeList,\n        outputNodeList: outputNodeList,\n        catalystName: catalystName,\n        catalystType: catalystType,\n        processPosition: processPosition,\n        tilingPaddingVertical: tilingPaddingVertical,\n        tilingPaddingHorizontal: tilingPaddingHorizontal,\n        edgeLength: edgeLength\n      };\n      cy.undoRedo()[\"do\"](\"createMetabolicCatalyticActivity\", param);\n    }\n  };\n  /*\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\n   */\n\n\n  mainUtilities.createActivationReaction = function (proteinName, processPosition, edgeLength, reverse) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.createActivationReaction(proteinName, processPosition, edgeLength, reverse);\n    } else {\n      var param = {\n        proteinName: proteinName,\n        processPosition: processPosition,\n        edgeLength: edgeLength,\n        reverse: reverse\n      };\n      cy.undoRedo()[\"do\"](\"createActivationReaction\", param);\n    }\n  };\n  /*\n   * Creates a template reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\n   */\n\n\n  mainUtilities.createTemplateReaction = function (templateType, macromoleculeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    if (!options.undoable) {\n      if (templateType === \"reversible\") {\n        elementUtilities.setMapType(\"HybridAny\");\n      }\n\n      elementUtilities.createTemplateReaction(templateType, macromoleculeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam);\n    } else {\n      var param = {\n        templateType: templateType,\n        macromoleculeList: macromoleculeList,\n        complexName: complexName,\n        processPosition: processPosition,\n        tilingPaddingVertical: tilingPaddingVertical,\n        tilingPaddingHorizontal: tilingPaddingHorizontal,\n        edgeLength: edgeLength,\n        layoutParam: layoutParam\n      };\n\n      if (templateType === \"reversible\") {\n        var actions = [];\n        actions.push({\n          name: \"changeMapType\",\n          param: {\n            mapType: \"HybridAny\",\n            callback: function callback() {}\n          }\n        });\n        actions.push({\n          name: \"createTemplateReaction\",\n          param: param\n        });\n        cy.undoRedo()[\"do\"](\"batch\", actions);\n      } else {\n        cy.undoRedo()[\"do\"](\"createTemplateReaction\", param);\n      }\n    }\n  };\n  /*\n   * Resize given nodes if useAspectRatio is truthy one of width or height should not be set.\n   * Considers undoable option.\n   */\n\n\n  mainUtilities.resizeNodes = function (nodes, width, height, useAspectRatio, preserveRelativePos) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var param = {\n        nodes: nodes,\n        width: width,\n        height: height,\n        useAspectRatio: useAspectRatio,\n        performOperation: true,\n        preserveRelativePos: preserveRelativePos\n      };\n      cy.undoRedo()[\"do\"](\"resizeNodes\", param);\n    } else {\n      elementUtilities.resizeNodes(nodes, width, height, useAspectRatio);\n      cy.style().update();\n    }\n  };\n  /*\n   * Resize given nodes if useAspectRatio is truthy one of width or height should not be set.\n   * Considers undoable option.\n   */\n\n\n  mainUtilities.resizeNodesToContent = function (nodes, useAspectRatio) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var actions = [];\n      nodes.forEach(function (node) {\n        var width = elementUtilities.calculateMinWidth(node);\n        var height = elementUtilities.calculateMinHeight(node);\n        actions.push({\n          name: \"resizeNodes\",\n          param: {\n            nodes: node,\n            width: width,\n            height: height,\n            useAspectRatio: useAspectRatio,\n            performOperation: true,\n            preserveRelativePos: true\n          }\n        });\n        var stateAndInfos = node.data('statesandinfos');\n        var length = stateAndInfos.length;\n\n        if (length != 0) {\n          var param = {\n            node: node,\n            locations: [\"top\", \"right\", \"bottom\", \"left\"]\n          };\n          actions.push({\n            name: \"fitUnits\",\n            param: param\n          });\n        }\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n      cy.style().update();\n      return actions;\n    } else {\n      nodes.forEach(function (node) {\n        var width = elementUtilities.calculateMinWidth(node);\n        var height = elementUtilities.calculateMinHeight(node);\n        elementUtilities.resizeNodes(node, width, height, useAspectRatio, true);\n      });\n    }\n\n    cy.style().update();\n  };\n  /*\n   * Changes the label of the given nodes to the given label. Considers undoable option.\n   */\n\n\n  mainUtilities.changeNodeLabel = function (nodes, label) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      nodes.data('label', label);\n    } else {\n      var param = {\n        nodes: nodes,\n        label: label,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"changeNodeLabel\", param);\n    }\n\n    cy.style().update();\n  };\n  /*\n   * Change font properties for given nodes use the given font data.\n   * Considers undoable option.\n   */\n\n\n  mainUtilities.changeFontProperties = function (eles, data) {\n    if (eles.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var param = {\n        eles: eles,\n        data: data,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"changeFontProperties\", param);\n    } else {\n      elementUtilities.changeFontProperties(eles, data);\n    }\n\n    cy.style().update();\n  };\n  /*\n   * Change state value or unit of information box of given nodes with given index.\n   * Considers undoable option.\n   * For more information about the parameters see elementUtilities.changeStateOrInfoBox\n   */\n\n\n  mainUtilities.changeStateOrInfoBox = function (nodes, index, value, type) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var param = {\n        index: index,\n        value: value,\n        type: type,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"changeStateOrInfoBox\", param);\n    } else {\n      return elementUtilities.changeStateOrInfoBox(nodes, index, value, type);\n    }\n\n    cy.style().update();\n  }; // Add a new state or info box to given nodes.\n  // The box is represented by the parameter obj.\n  // Considers undoable option.\n\n\n  mainUtilities.addStateOrInfoBox = function (nodes, obj) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.addStateOrInfoBox(nodes, obj);\n    } else {\n      var param = {\n        obj: obj,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"addStateOrInfoBox\", param);\n    }\n\n    cy.style().update();\n  }; // Remove the state or info boxes of the given nodes at given index.\n  // Considers undoable option.\n\n\n  mainUtilities.removeStateOrInfoBox = function (nodes, index) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.removeStateOrInfoBox(nodes, {\n        index: index\n      });\n    } else {\n      var param = {\n        locationObj: {\n          index: index\n        },\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"removeStateOrInfoBox\", param);\n    }\n\n    cy.style().update();\n  }; //Arrange information boxes\n  //If force check is true, it rearranges all information boxes\n\n\n  mainUtilities.fitUnits = function (node, locations) {\n    if (node.data('auxunitlayouts') === undefined || node.data('statesandinfos').length <= 0) {\n      return;\n    }\n\n    if (locations === undefined || locations.length <= 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.fitUnits(node, locations);\n    } else {\n      var param = {\n        node: node,\n        locations: locations\n      };\n      cy.undoRedo()[\"do\"](\"fitUnits\", param);\n    }\n\n    cy.style().update();\n  };\n  /*\n   * Set multimer status of the given nodes to the given status.\n   * Considers undoable option.\n   */\n\n\n  mainUtilities.setMultimerStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setMultimerStatus\", param);\n    } else {\n      elementUtilities.setMultimerStatus(nodes, status);\n    }\n\n    cy.style().update();\n  };\n\n  mainUtilities.setActiveStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setActiveStatus\", param);\n    } else {\n      elementUtilities.setActiveStatus(nodes, status);\n    }\n\n    cy.style().update();\n  };\n\n  mainUtilities.setHypotheticalStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setHypotheticalStatus\", param);\n    } else {\n      elementUtilities.setHypotheticalStatus(nodes, status);\n    }\n\n    cy.style().update();\n  };\n  /**\n   * Redraw clone markers on given nodes without considering undo.\n   * See https://github.com/iVis-at-Bilkent/newt/issues/574 \n   */\n\n\n  mainUtilities.redrawCloneMarkers = function (nodes) {\n    elementUtilities.setCloneMarkerStatus(nodes, true);\n  };\n  /*\n   * Set clone marker status of given nodes to the given status.\n   * Considers undoable option.\n   */\n\n\n  mainUtilities.setCloneMarkerStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setCloneMarkerStatus\", param);\n    } else {\n      elementUtilities.setCloneMarkerStatus(nodes, status);\n    }\n\n    cy.style().update();\n  };\n  /*\n   * Change style/css of given eles by setting getting property name to the given given value/values (Note that valueMap parameter may be\n   * a single string or an id to value map). Considers undoable option.\n   */\n\n\n  mainUtilities.changeCss = function (eles, name, valueMap) {\n    if (eles.length === 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.changeCss(eles, name, valueMap);\n    } else {\n      var param = {\n        eles: eles,\n        valueMap: valueMap,\n        name: name\n      };\n      cy.undoRedo()[\"do\"](\"changeCss\", param);\n    }\n\n    cy.style().update();\n  };\n  /*\n   * Change data of given eles by setting getting property name to the given given value/values (Note that valueMap parameter may be\n   * a single string or an id to value map). Considers undoable option.\n   */\n\n\n  mainUtilities.changeData = function (eles, name, valueMap) {\n    if (eles.length === 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.changeData(eles, name, valueMap);\n    } else {\n      var param = {\n        eles: eles,\n        valueMap: valueMap,\n        name: name\n      };\n      cy.undoRedo()[\"do\"](\"changeData\", param);\n    }\n\n    cy.style().update();\n  };\n\n  mainUtilities.updateSetField = function (ele, fieldName, toDelete, toAdd, callback) {\n    if (!options.undoable) {\n      elementUtilities.changeData(ele, fieldName, toDelete, toAdd, callback);\n    } else {\n      var param = {\n        ele: ele,\n        fieldName: fieldName,\n        toDelete: toDelete,\n        toAdd: toAdd,\n        callback: callback\n      };\n      cy.undoRedo()[\"do\"](\"updateSetField\", param);\n    }\n  };\n\n  mainUtilities.setDefaultProperty = function (_class, name, value) {\n    if (!options.undoable) {\n      var propMap = {};\n      propMap[name] = value;\n      elementUtilities.setDefaultProperties(_class, propMap);\n    } else {\n      var param = {\n        \"class\": _class,\n        name: name,\n        value: value\n      };\n      cy.undoRedo()[\"do\"](\"setDefaultProperty\", param);\n    }\n  };\n\n  mainUtilities.updateInfoboxStyle = function (node, index, newProps) {\n    if (!options.undoable) {\n      elementUtilities.updateInfoboxStyle(node, index, newProps);\n    } else {\n      var param = {\n        node: node,\n        index: index,\n        newProps: newProps\n      };\n      cy.undoRedo()[\"do\"](\"updateInfoboxStyle\", param);\n    }\n\n    cy.style().update();\n  };\n\n  mainUtilities.updateInfoboxObj = function (node, index, newProps) {\n    if (!options.undoable) {\n      elementUtilities.updateInfoboxObj(node, index, newProps);\n    } else {\n      var param = {\n        node: node,\n        index: index,\n        newProps: newProps\n      };\n      cy.undoRedo()[\"do\"](\"updateInfoboxObj\", param);\n    }\n\n    cy.style().update();\n  };\n\n  mainUtilities.deleteAndPerformLayout = function (eles, layoutparam) {\n    var nodes = eles.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToKeep = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToRemove = allNodes.not(nodesToKeep);\n\n    if (nodesToRemove.length === 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.deleteAndPerformLayout(nodesToRemove, layoutparam);\n    } else {\n      var param = {\n        eles: nodesToRemove,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"deleteAndPerformLayout\", param);\n    }\n  };\n  /*\n   * Hides given eles (the ones which are selected) and perform given layout afterward. Layout parameter may be layout options\n   * or a function to call. Requires viewUtilities extension and considers undoable option.\n   */\n\n\n  mainUtilities.hideAndPerformLayout = function (eles, layoutparam) {\n    var nodes = eles.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n\n    if (nodesToHide.length === 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);\n      elementUtilities.hideAndPerformLayout(nodesToHide, layoutparam);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thickenBorder(nodesWithHiddenNeighbor);\n    } else {\n      var param = {\n        eles: nodesToHide,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);\n      ur.action(\"thinBorder\", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(nodesToHide);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hideAndPerformLayout\",\n        param: param\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    }\n  };\n  /*\n   * Shows all elements (the ones which are hidden if any) and perform given layout afterward. Layout parameter may be layout options\n   * or a function to call. Requires viewUtilities extension and considers undoable option.\n   */\n\n\n  mainUtilities.showAllAndPerformLayout = function (layoutparam) {\n    var hiddenEles = cy.elements(':hidden');\n\n    if (hiddenEles.length === 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);\n      elementUtilities.showAndPerformLayout(hiddenEles, layoutparam);\n    } else {\n      var param = {\n        eles: hiddenEles,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);\n      ur.action(\"thinBorder\", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.nodes(\"[thickBorder]\");\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"showAndPerformLayout\",\n        param: param\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    }\n  };\n  /*\n   * Unhide given eles (the ones which are hidden if any) and perform given layout afterward. Layout parameter may be layout options\n   * or a function to call. Requires viewUtilities extension and considers undoable option.\n   */\n\n\n  mainUtilities.showAndPerformLayout = function (mainEle, eles, layoutparam) {\n    var hiddenEles = eles.filter(':hidden');\n\n    if (hiddenEles.length === 0) {\n      return;\n    }\n\n    mainUtilities.closeUpElements(mainEle, hiddenEles.nodes());\n\n    if (!options.undoable) {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);\n      elementUtilities.showAndPerformLayout(hiddenEles, layoutparam);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thickenBorder(nodesWithHiddenNeighbor);\n    } else {\n      var param = {\n        eles: hiddenEles,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);\n      ur.action(\"thinBorder\", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);\n      var actions = [];\n      var nodesToThinBorder = hiddenEles.neighborhood(\":visible\").nodes(\"[thickBorder]\").difference(cy.edges(\":hidden\").difference(hiddenEles.edges().union(hiddenEles.nodes().connectedEdges())).connectedNodes());\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesToThinBorder\n      });\n      actions.push({\n        name: \"showAndPerformLayout\",\n        param: param\n      });\n      var nodesToThickenBorder = hiddenEles.nodes().edgesWith(cy.nodes(\":hidden\").difference(hiddenEles.nodes())).connectedNodes().intersection(hiddenEles.nodes());\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesToThickenBorder\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    }\n  };\n  /*\n  * Takes the hidden elements close to the nodes whose neighbors will be shown\n  * */\n\n\n  mainUtilities.closeUpElements = function (mainEle, hiddenEles) {\n    var leftX = Number.MAX_VALUE;\n    var rightX = Number.MIN_VALUE;\n    var topY = Number.MAX_VALUE;\n    var bottomY = Number.MIN_VALUE; // Check the x and y limits of all hidden elements and store them in the variables above\n\n    hiddenEles.forEach(function (ele) {\n      if (ele.data('class') != 'compartment' && ele.data('class') != 'complex') {\n        var halfWidth = ele.outerWidth() / 2;\n        var halfHeight = ele.outerHeight() / 2;\n        if (ele.position(\"x\") - halfWidth < leftX) leftX = ele.position(\"x\") - halfWidth;\n        if (ele.position(\"x\") + halfWidth > rightX) rightX = ele.position(\"x\") + halfWidth;\n        if (ele.position(\"y\") - halfHeight < topY) topY = ele.position(\"y\") - halfHeight;\n        if (ele.position(\"y\") + halfHeight > topY) bottomY = ele.position(\"y\") + halfHeight;\n      }\n    }); //The coordinates of the old center containing the hidden nodes\n\n    var oldCenterX = (leftX + rightX) / 2;\n    var oldCenterY = (topY + bottomY) / 2; //Here we calculate two parameters which define the area in which the hidden elements are placed initially\n\n    var minHorizontalParam = mainEle.outerWidth() / 2 + (rightX - leftX) / 2;\n    var maxHorizontalParam = mainEle.outerWidth() + (rightX - leftX) / 2;\n    var minVerticalParam = mainEle.outerHeight() / 2 + (bottomY - topY) / 2;\n    var maxVerticalParam = mainEle.outerHeight() + (bottomY - topY) / 2; //Quadrants is an object of the form {first:\"obtained\", second:\"free\", third:\"free\", fourth:\"obtained\"}\n    // which holds which quadrant are free (that's where hidden nodes will be brought)\n\n    var quadrants = mainUtilities.checkOccupiedQuadrants(mainEle, hiddenEles);\n    var freeQuadrants = [];\n\n    for (var property in quadrants) {\n      if (quadrants[property] === \"free\") freeQuadrants.push(property);\n    } //Can take values 1 and -1 and are used to place the hidden nodes in the random quadrant\n\n\n    var horizontalMult;\n    var verticalMult;\n\n    if (freeQuadrants.length > 0) {\n      if (freeQuadrants.length === 3) {\n        if (freeQuadrants.includes('first') && freeQuadrants.includes('second') && freeQuadrants.includes('third')) {\n          horizontalMult = -1;\n          verticalMult = -1;\n        } else if (freeQuadrants.includes('first') && freeQuadrants.includes('second') && freeQuadrants.includes('fourth')) {\n          horizontalMult = 1;\n          verticalMult = -1;\n        } else if (freeQuadrants.includes('first') && freeQuadrants.includes('third') && freeQuadrants.includes('fourth')) {\n          horizontalMult = 1;\n          verticalMult = 1;\n        } else if (freeQuadrants.includes('second') && freeQuadrants.includes('third') && freeQuadrants.includes('fourth')) {\n          horizontalMult = -1;\n          verticalMult = 1;\n        }\n      } else {\n        //Randomly picks one quadrant from the free quadrants\n        var randomQuadrant = freeQuadrants[Math.floor(Math.random() * freeQuadrants.length)];\n\n        if (randomQuadrant === \"first\") {\n          horizontalMult = 1;\n          verticalMult = -1;\n        } else if (randomQuadrant === \"second\") {\n          horizontalMult = -1;\n          verticalMult = -1;\n        } else if (randomQuadrant === \"third\") {\n          horizontalMult = -1;\n          verticalMult = 1;\n        } else if (randomQuadrant === \"fourth\") {\n          horizontalMult = 1;\n          verticalMult = 1;\n        }\n      }\n    } else {\n      horizontalMult = 0;\n      verticalMult = 0;\n    } // If the horizontalMult is 0 it means that no quadrant is free, so we randomly choose a quadrant\n\n\n    var horizontalParam = mainUtilities.generateRandom(minHorizontalParam, maxHorizontalParam, horizontalMult);\n    var verticalParam = mainUtilities.generateRandom(minVerticalParam, maxVerticalParam, verticalMult); //The coordinates of the center where the hidden nodes will be transfered\n\n    var newCenterX = mainEle.position(\"x\") + horizontalParam;\n    var newCenterY = mainEle.position(\"y\") + verticalParam;\n    var xdiff = newCenterX - oldCenterX;\n    var ydiff = newCenterY - oldCenterY; //Change the position of hidden elements\n\n    hiddenEles.forEach(function (ele) {\n      var newx = ele.position(\"x\") + xdiff;\n      var newy = ele.position(\"y\") + ydiff;\n      ele.position(\"x\", newx);\n      ele.position(\"y\", newy);\n    });\n  };\n  /*\n   * Generates a number between 2 nr and multimplies it with 1 or -1\n   * */\n\n\n  mainUtilities.generateRandom = function (min, max, mult) {\n    var val = [-1, 1];\n    if (mult === 0) mult = val[Math.floor(Math.random() * val.length)];\n    return (Math.floor(Math.random() * (max - min + 1)) + min) * mult;\n  };\n  /*\n   * This function makes sure that the random number lies in free quadrant\n   * */\n\n\n  mainUtilities.checkOccupiedQuadrants = function (mainEle, hiddenEles) {\n    if (elementUtilities.getMapType() == 'PD') {\n      var visibleNeighborEles = mainEle.neighborhood().difference(hiddenEles).nodes();\n      var visibleNeighborsOfNeighbors = visibleNeighborEles.neighborhood().difference(hiddenEles).difference(mainEle).nodes();\n      var visibleEles = visibleNeighborEles.union(visibleNeighborsOfNeighbors);\n    } else var visibleEles = mainEle.neighborhood().difference(hiddenEles).nodes();\n\n    var occupiedQuadrants = {\n      first: \"free\",\n      second: \"free\",\n      third: \"free\",\n      fourth: \"free\"\n    };\n    visibleEles.forEach(function (ele) {\n      if (ele.data('class') != 'compartment' && ele.data('class') != 'complex') {\n        if (ele.position(\"x\") < mainEle.position(\"x\") && ele.position(\"y\") < mainEle.position(\"y\")) occupiedQuadrants.second = \"occupied\";else if (ele.position(\"x\") > mainEle.position(\"x\") && ele.position(\"y\") < mainEle.position(\"y\")) occupiedQuadrants.first = \"occupied\";else if (ele.position(\"x\") < mainEle.position(\"x\") && ele.position(\"y\") > mainEle.position(\"y\")) occupiedQuadrants.third = \"occupied\";else if (ele.position(\"x\") > mainEle.position(\"x\") && ele.position(\"y\") > mainEle.position(\"y\")) occupiedQuadrants.fourth = \"occupied\";\n      }\n    });\n    return occupiedQuadrants;\n  }; // Overrides highlightProcesses from SBGNVIZ - do not highlight any nodes when the map type is AF\n\n\n  mainUtilities.highlightProcesses = function (_nodes) {\n    if (elementUtilities.getMapType() == \"AF\") return;\n    sbgnvizInstance.highlightProcesses(_nodes);\n  };\n  /**\n   * Resets map type to undefined\n   */\n\n\n  mainUtilities.resetMapType = function () {\n    elementUtilities.resetMapType();\n  };\n  /**\n   * return : map type\n   */\n\n\n  mainUtilities.getMapType = function () {\n    return elementUtilities.getMapType();\n  };\n\n  mainUtilities.addBackgroundImage = function (nodes, bgObj, updateInfo, promptInvalidImage, validateURL) {\n    if (nodes.length === 0 || !bgObj) {\n      return;\n    }\n\n    bgObj['firstTime'] = true;\n\n    if (options.undoable) {\n      var param = {\n        bgObj: bgObj,\n        nodes: nodes,\n        updateInfo: updateInfo,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n      cy.undoRedo()[\"do\"](\"addBackgroundImage\", param);\n    } else {\n      elementUtilities.addBackgroundImage(nodes, bgObj, updateInfo, promptInvalidImage, validateURL);\n    }\n\n    cy.style().update();\n  };\n\n  mainUtilities.removeBackgroundImage = function (nodes, bgObj) {\n    if (nodes.length === 0 || !bgObj) {\n      return;\n    }\n\n    bgObj['firstTime'] = true;\n\n    if (options.undoable) {\n      var param = {\n        bgObj: bgObj,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"removeBackgroundImage\", param);\n    } else {\n      elementUtilities.removeBackgroundImage(nodes, bgObj);\n    }\n\n    cy.style().update();\n  };\n\n  mainUtilities.updateBackgroundImage = function (nodes, bgObj) {\n    if (nodes.length === 0 || !bgObj) {\n      return;\n    }\n\n    if (options.undoable) {\n      var param = {\n        bgObj: bgObj,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"updateBackgroundImage\", param);\n    } else {\n      elementUtilities.updateBackgroundImage(nodes, bgObj);\n    }\n\n    cy.style().update();\n  };\n\n  mainUtilities.changeBackgroundImage = function (nodes, oldImg, newImg, updateInfo, promptInvalidImage, validateURL) {\n    if (nodes.length === 0 || !oldImg || !newImg) {\n      return;\n    }\n\n    if (options.undoable) {\n      var param = {\n        oldImg: oldImg,\n        newImg: newImg,\n        nodes: nodes,\n        firstTime: true,\n        updateInfo: updateInfo,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n      cy.undoRedo()[\"do\"](\"changeBackgroundImage\", param);\n    } else {\n      elementUtilities.changeBackgroundImage(nodes, oldImg, newImg, true, updateInfo, promptInvalidImage, validateURL);\n    }\n\n    cy.style().update();\n  };\n\n  return mainUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/main-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/option-utilities-factory.js":
/*!***************************************************!*\
  !*** ./src/utilities/option-utilities-factory.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/*\n *  Extend default options and get current options by using this file\n */\nmodule.exports = function () {\n  // default options\n  var defaults = {\n    // The path of core library images when sbgnviz is required from npm and the index html\n    // file and node_modules are under the same folder then using the default value is fine\n    imgPath: 'node_modules/sbgnviz/src/img',\n    // Whether to fit labels to nodes\n    fitLabelsToNodes: function fitLabelsToNodes() {\n      return false;\n    },\n    fitLabelsToInfoboxes: function fitLabelsToInfoboxes() {\n      return false;\n    },\n    // dynamic label size it may be 'small', 'regular', 'large'\n    dynamicLabelSize: function dynamicLabelSize() {\n      return 'regular';\n    },\n    // Whether to infer nesting on load \n    inferNestingOnLoad: function inferNestingOnLoad() {\n      return false;\n    },\n    // percentage used to calculate compound paddings\n    compoundPadding: function compoundPadding() {\n      return 10;\n    },\n    // The selector of the component containing the sbgn network\n    networkContainerSelector: '#sbgn-network-container',\n    // Whether the actions are undoable, requires cytoscape-undo-redo extension\n    undoable: true,\n    // Whether to have undoable drag feature in undo/redo extension. This options will be passed to undo/redo extension\n    undoableDrag: true\n  };\n\n  var optionUtilities = function optionUtilities() {}; // Extend the defaults options with the user options\n\n\n  optionUtilities.extendOptions = function (options) {\n    var result = {};\n\n    for (var prop in defaults) {\n      result[prop] = defaults[prop];\n    }\n\n    for (var prop in options) {\n      result[prop] = options[prop];\n    }\n\n    optionUtilities.options = result;\n    return options;\n  };\n\n  optionUtilities.getOptions = function () {\n    return optionUtilities.options;\n  };\n\n  return optionUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL29wdGlvbi11dGlsaXRpZXMtZmFjdG9yeS5qcy5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0cyIsImltZ1BhdGgiLCJmaXRMYWJlbHNUb05vZGVzIiwiZml0TGFiZWxzVG9JbmZvYm94ZXMiLCJkeW5hbWljTGFiZWxTaXplIiwiaW5mZXJOZXN0aW5nT25Mb2FkIiwiY29tcG91bmRQYWRkaW5nIiwibmV0d29ya0NvbnRhaW5lclNlbGVjdG9yIiwidW5kb2FibGUiLCJ1bmRvYWJsZURyYWciLCJvcHRpb25VdGlsaXRpZXMiLCJleHRlbmRPcHRpb25zIiwib3B0aW9ucyIsInJlc3VsdCIsInByb3AiLCJnZXRPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGlzZS8uL3NyYy91dGlsaXRpZXMvb3B0aW9uLXV0aWxpdGllcy1mYWN0b3J5LmpzPzllNDciXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICBFeHRlbmQgZGVmYXVsdCBvcHRpb25zIGFuZCBnZXQgY3VycmVudCBvcHRpb25zIGJ5IHVzaW5nIHRoaXMgZmlsZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgLy8gVGhlIHBhdGggb2YgY29yZSBsaWJyYXJ5IGltYWdlcyB3aGVuIHNiZ252aXogaXMgcmVxdWlyZWQgZnJvbSBucG0gYW5kIHRoZSBpbmRleCBodG1sXG4gICAgLy8gZmlsZSBhbmQgbm9kZV9tb2R1bGVzIGFyZSB1bmRlciB0aGUgc2FtZSBmb2xkZXIgdGhlbiB1c2luZyB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBmaW5lXG4gICAgaW1nUGF0aDogJ25vZGVfbW9kdWxlcy9zYmdudml6L3NyYy9pbWcnLFxuICAgIC8vIFdoZXRoZXIgdG8gZml0IGxhYmVscyB0byBub2Rlc1xuICAgIGZpdExhYmVsc1RvTm9kZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIGZpdExhYmVsc1RvSW5mb2JveGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICAvLyBkeW5hbWljIGxhYmVsIHNpemUgaXQgbWF5IGJlICdzbWFsbCcsICdyZWd1bGFyJywgJ2xhcmdlJ1xuICAgIGR5bmFtaWNMYWJlbFNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAncmVndWxhcic7XG4gICAgfSxcbiAgICAvLyBXaGV0aGVyIHRvIGluZmVyIG5lc3Rpbmcgb24gbG9hZCBcbiAgICBpbmZlck5lc3RpbmdPbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIC8vIHBlcmNlbnRhZ2UgdXNlZCB0byBjYWxjdWxhdGUgY29tcG91bmQgcGFkZGluZ3NcbiAgICBjb21wb3VuZFBhZGRpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAxMDtcbiAgICB9LFxuICAgIC8vIFRoZSBzZWxlY3RvciBvZiB0aGUgY29tcG9uZW50IGNvbnRhaW5pbmcgdGhlIHNiZ24gbmV0d29ya1xuICAgIG5ldHdvcmtDb250YWluZXJTZWxlY3RvcjogJyNzYmduLW5ldHdvcmstY29udGFpbmVyJyxcbiAgICAvLyBXaGV0aGVyIHRoZSBhY3Rpb25zIGFyZSB1bmRvYWJsZSwgcmVxdWlyZXMgY3l0b3NjYXBlLXVuZG8tcmVkbyBleHRlbnNpb25cbiAgICB1bmRvYWJsZTogdHJ1ZSxcbiAgICAvLyBXaGV0aGVyIHRvIGhhdmUgdW5kb2FibGUgZHJhZyBmZWF0dXJlIGluIHVuZG8vcmVkbyBleHRlbnNpb24uIFRoaXMgb3B0aW9ucyB3aWxsIGJlIHBhc3NlZCB0byB1bmRvL3JlZG8gZXh0ZW5zaW9uXG4gICAgdW5kb2FibGVEcmFnOiB0cnVlXG4gIH07XG5cbiAgdmFyIG9wdGlvblV0aWxpdGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgfTtcblxuICAvLyBFeHRlbmQgdGhlIGRlZmF1bHRzIG9wdGlvbnMgd2l0aCB0aGUgdXNlciBvcHRpb25zXG4gIG9wdGlvblV0aWxpdGllcy5leHRlbmRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIGRlZmF1bHRzKSB7XG4gICAgICByZXN1bHRbcHJvcF0gPSBkZWZhdWx0c1twcm9wXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgfVxuXG4gICAgb3B0aW9uVXRpbGl0aWVzLm9wdGlvbnMgPSByZXN1bHQ7XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfTtcblxuICBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gb3B0aW9uVXRpbGl0aWVzLm9wdGlvbnM7XG4gIH07XG5cbiAgcmV0dXJuIG9wdGlvblV0aWxpdGllcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBWTtFQUUzQjtFQUNBLElBQUlDLFFBQVEsR0FBRztJQUNiO0lBQ0E7SUFDQUMsT0FBTyxFQUFFLDhCQUhJO0lBSWI7SUFDQUMsZ0JBQWdCLEVBQUUsNEJBQVk7TUFDNUIsT0FBTyxLQUFQO0lBQ0QsQ0FQWTtJQVFiQyxvQkFBb0IsRUFBRSxnQ0FBWTtNQUNoQyxPQUFPLEtBQVA7SUFDRCxDQVZZO0lBV2I7SUFDQUMsZ0JBQWdCLEVBQUUsNEJBQVk7TUFDNUIsT0FBTyxTQUFQO0lBQ0QsQ0FkWTtJQWViO0lBQ0FDLGtCQUFrQixFQUFFLDhCQUFZO01BQzlCLE9BQU8sS0FBUDtJQUNELENBbEJZO0lBbUJiO0lBQ0FDLGVBQWUsRUFBRSwyQkFBWTtNQUMzQixPQUFPLEVBQVA7SUFDRCxDQXRCWTtJQXVCYjtJQUNBQyx3QkFBd0IsRUFBRSx5QkF4QmI7SUF5QmI7SUFDQUMsUUFBUSxFQUFFLElBMUJHO0lBMkJiO0lBQ0FDLFlBQVksRUFBRTtFQTVCRCxDQUFmOztFQStCQSxJQUFJQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLEdBQVksQ0FDakMsQ0FERCxDQWxDMkIsQ0FxQzNCOzs7RUFDQUEsZUFBZSxDQUFDQyxhQUFoQixHQUFnQyxVQUFVQyxPQUFWLEVBQW1CO0lBQ2pELElBQUlDLE1BQU0sR0FBRyxFQUFiOztJQUVBLEtBQUssSUFBSUMsSUFBVCxJQUFpQmQsUUFBakIsRUFBMkI7TUFDekJhLE1BQU0sQ0FBQ0MsSUFBRCxDQUFOLEdBQWVkLFFBQVEsQ0FBQ2MsSUFBRCxDQUF2QjtJQUNEOztJQUVELEtBQUssSUFBSUEsSUFBVCxJQUFpQkYsT0FBakIsRUFBMEI7TUFDeEJDLE1BQU0sQ0FBQ0MsSUFBRCxDQUFOLEdBQWVGLE9BQU8sQ0FBQ0UsSUFBRCxDQUF0QjtJQUNEOztJQUVESixlQUFlLENBQUNFLE9BQWhCLEdBQTBCQyxNQUExQjtJQUVBLE9BQU9ELE9BQVA7RUFDRCxDQWREOztFQWdCQUYsZUFBZSxDQUFDSyxVQUFoQixHQUE2QixZQUFZO0lBQ3ZDLE9BQU9MLGVBQWUsQ0FBQ0UsT0FBdkI7RUFDRCxDQUZEOztFQUlBLE9BQU9GLGVBQVA7QUFDRCxDQTNERCJ9\n//# sourceURL=webpack-internal:///./src/utilities/option-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/register-undo-redo-actions-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/register-undo-redo-actions-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n\nvar $ = libs.jQuery;\n\nmodule.exports = function () {\n  var undoRedoActionFunctions, options, cy;\n\n  var registerUndoRedoActions = function registerUndoRedoActions(param) {\n    undoRedoActionFunctions = param.undoRedoActionFunctions;\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnvizInstanceUtilities.getCy();\n\n    if (!options.undoable) {\n      return;\n    } // create undo-redo instance\n\n\n    var ur = cy.undoRedo({\n      undoableDrag: options.undoableDrag\n    }); // register add remove actions\n\n    ur.action(\"addNode\", undoRedoActionFunctions.addNode, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"deleteElesSimple\", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);\n    ur.action(\"addEdge\", undoRedoActionFunctions.addEdge, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"addProcessWithConvenientEdges\", undoRedoActionFunctions.addProcessWithConvenientEdges, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"deleteElesSmart\", undoRedoActionFunctions.deleteElesSmart, undoRedoActionFunctions.restoreEles);\n    ur.action(\"createCompoundForGivenNodes\", undoRedoActionFunctions.createCompoundForGivenNodes, undoRedoActionFunctions.createCompoundForGivenNodes); // register general actions\n\n    ur.action(\"resizeNodes\", undoRedoActionFunctions.resizeNodes, undoRedoActionFunctions.resizeNodes);\n    ur.action(\"changeNodeLabel\", undoRedoActionFunctions.changeNodeLabel, undoRedoActionFunctions.changeNodeLabel);\n    ur.action(\"changeData\", undoRedoActionFunctions.changeData, undoRedoActionFunctions.changeData);\n    ur.action(\"updateSetField\", undoRedoActionFunctions.updateSetField, undoRedoActionFunctions.updateSetField);\n    ur.action(\"changeCss\", undoRedoActionFunctions.changeCss, undoRedoActionFunctions.changeCss);\n    ur.action(\"changeBendPoints\", undoRedoActionFunctions.changeBendPoints, undoRedoActionFunctions.changeBendPoints);\n    ur.action(\"changeFontProperties\", undoRedoActionFunctions.changeFontProperties, undoRedoActionFunctions.changeFontProperties);\n    ur.action(\"showAndPerformLayout\", undoRedoActionFunctions.showAndPerformLayout, undoRedoActionFunctions.undoShowAndPerformLayout);\n    ur.action(\"hideAndPerformLayout\", undoRedoActionFunctions.hideAndPerformLayout, undoRedoActionFunctions.undoHideAndPerformLayout);\n    ur.action(\"deleteAndPerformLayout\", undoRedoActionFunctions.deleteAndPerformLayout, undoRedoActionFunctions.undoDeleteAndPerformLayout);\n    ur.action(\"applySIFTopologyGrouping\", undoRedoActionFunctions.applySIFTopologyGrouping, undoRedoActionFunctions.applySIFTopologyGrouping); // register SBGN actions\n\n    ur.action(\"addStateOrInfoBox\", undoRedoActionFunctions.addStateOrInfoBox, undoRedoActionFunctions.removeStateOrInfoBox);\n    ur.action(\"changeStateOrInfoBox\", undoRedoActionFunctions.changeStateOrInfoBox, undoRedoActionFunctions.changeStateOrInfoBox);\n    ur.action(\"setMultimerStatus\", undoRedoActionFunctions.setMultimerStatus, undoRedoActionFunctions.setMultimerStatus);\n    ur.action(\"setActiveStatus\", undoRedoActionFunctions.setActiveStatus, undoRedoActionFunctions.setActiveStatus);\n    ur.action(\"setHypotheticalStatus\", undoRedoActionFunctions.setHypotheticalStatus, undoRedoActionFunctions.setHypotheticalStatus);\n    ur.action(\"setCloneMarkerStatus\", undoRedoActionFunctions.setCloneMarkerStatus, undoRedoActionFunctions.setCloneMarkerStatus);\n    ur.action(\"removeStateOrInfoBox\", undoRedoActionFunctions.removeStateOrInfoBox, undoRedoActionFunctions.addStateOrInfoBox);\n    ur.action(\"fitUnits\", undoRedoActionFunctions.fitUnits, undoRedoActionFunctions.restoreUnits);\n    ur.action(\"addBackgroundImage\", undoRedoActionFunctions.addBackgroundImage, undoRedoActionFunctions.removeBackgroundImage);\n    ur.action(\"removeBackgroundImage\", undoRedoActionFunctions.removeBackgroundImage, undoRedoActionFunctions.addBackgroundImage);\n    ur.action(\"updateBackgroundImage\", undoRedoActionFunctions.updateBackgroundImage, undoRedoActionFunctions.updateBackgroundImage);\n    ur.action(\"changeBackgroundImage\", undoRedoActionFunctions.changeBackgroundImage, undoRedoActionFunctions.changeBackgroundImage);\n    ur.action(\"updateInfoboxStyle\", undoRedoActionFunctions.updateInfoboxStyle, undoRedoActionFunctions.updateInfoboxStyle);\n    ur.action(\"updateInfoboxObj\", undoRedoActionFunctions.updateInfoboxObj, undoRedoActionFunctions.updateInfoboxObj); // register easy creation actions\n\n    ur.action(\"createTemplateReaction\", undoRedoActionFunctions.createTemplateReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createActivationReaction\", undoRedoActionFunctions.createActivationReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createMetabolicCatalyticActivity\", undoRedoActionFunctions.createMetabolicCatalyticActivity, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createMetabolicReaction\", undoRedoActionFunctions.createMetabolicReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createConversion\", undoRedoActionFunctions.createConversion, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createMultimerization\", undoRedoActionFunctions.createMultimerization, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createComplexProteinFormation\", undoRedoActionFunctions.createComplexProteinFormation, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createDegradation\", undoRedoActionFunctions.createDegradation, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranscription\", undoRedoActionFunctions.createTranscription, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranslation\", undoRedoActionFunctions.createTranslation, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranscriptionReaction\", undoRedoActionFunctions.createTranscriptionReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranslationReaction\", undoRedoActionFunctions.createTranslationReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"setDefaultProperty\", undoRedoActionFunctions.setDefaultProperty, undoRedoActionFunctions.setDefaultProperty);\n    ur.action(\"convertIntoReversibleReaction\", undoRedoActionFunctions.convertIntoReversibleReaction, undoRedoActionFunctions.convertIntoReversibleReaction);\n    ur.action(\"moveEdge\", undoRedoActionFunctions.moveEdge, undoRedoActionFunctions.moveEdge);\n    ur.action(\"fixError\", undoRedoActionFunctions.fixError, undoRedoActionFunctions.unfixError);\n    ur.action(\"cloneHighDegreeNode\", undoRedoActionFunctions.cloneHighDegreeNode, undoRedoActionFunctions.unCloneHighDegreeNode);\n    ur.action(\"changeMapType\", undoRedoActionFunctions.changeMapType, undoRedoActionFunctions.changeMapType);\n    ur.action(\"setCompoundPadding\", undoRedoActionFunctions.setCompoundPadding, undoRedoActionFunctions.setCompoundPadding);\n  };\n\n  return registerUndoRedoActions;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/register-undo-redo-actions-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnviz-instance-utilities-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/sbgnviz-instance-utilities-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n\nmodule.exports = function () {\n  var instance;\n\n  function sbgnvizInstanceUtilities(options) {\n    instance = libs.sbgnviz(options);\n    return instance;\n  }\n\n  sbgnvizInstanceUtilities.getInstance = function () {\n    return instance;\n  };\n\n  sbgnvizInstanceUtilities.getCy = function () {\n    return this.getInstance().getCy();\n  };\n\n  return sbgnvizInstanceUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ252aXotaW5zdGFuY2UtdXRpbGl0aWVzLWZhY3RvcnkuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSSxHQUFHQyx3RkFBQSxFQUFYOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBWTtFQUUzQixJQUFJQyxRQUFKOztFQUVBLFNBQVNDLHdCQUFULENBQW1DQyxPQUFuQyxFQUE0QztJQUUxQ0YsUUFBUSxHQUFHTCxJQUFJLENBQUNRLE9BQUwsQ0FBYUQsT0FBYixDQUFYO0lBRUEsT0FBT0YsUUFBUDtFQUNEOztFQUVEQyx3QkFBd0IsQ0FBQ0csV0FBekIsR0FBdUMsWUFBWTtJQUNqRCxPQUFPSixRQUFQO0VBQ0QsQ0FGRDs7RUFJQUMsd0JBQXdCLENBQUNJLEtBQXpCLEdBQWlDLFlBQVk7SUFDM0MsT0FBTyxLQUFLRCxXQUFMLEdBQW1CQyxLQUFuQixFQUFQO0VBQ0QsQ0FGRDs7RUFJQSxPQUFPSix3QkFBUDtBQUNELENBcEJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hpc2UvLi9zcmMvdXRpbGl0aWVzL3NiZ252aXotaW5zdGFuY2UtdXRpbGl0aWVzLWZhY3RvcnkuanM/MzNjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbGlicyA9IHJlcXVpcmUoJy4vbGliLXV0aWxpdGllcycpLmdldExpYnMoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIGluc3RhbmNlO1xuXG4gIGZ1bmN0aW9uIHNiZ252aXpJbnN0YW5jZVV0aWxpdGllcyAob3B0aW9ucykge1xuXG4gICAgaW5zdGFuY2UgPSBsaWJzLnNiZ252aXoob3B0aW9ucyk7XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH1cblxuICBzYmdudml6SW5zdGFuY2VVdGlsaXRpZXMuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgc2JnbnZpekluc3RhbmNlVXRpbGl0aWVzLmdldEN5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldEluc3RhbmNlKCkuZ2V0Q3koKTtcbiAgfVxuXG4gIHJldHVybiBzYmdudml6SW5zdGFuY2VVdGlsaXRpZXM7XG59O1xuIl0sIm5hbWVzIjpbImxpYnMiLCJyZXF1aXJlIiwiZ2V0TGlicyIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbnN0YW5jZSIsInNiZ252aXpJbnN0YW5jZVV0aWxpdGllcyIsIm9wdGlvbnMiLCJzYmdudml6IiwiZ2V0SW5zdGFuY2UiLCJnZXRDeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/sbgnviz-instance-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/topology-grouping-factory.js":
/*!****************************************************!*\
  !*** ./src/utilities/topology-grouping-factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isEqual = __webpack_require__(/*! lodash.isequal */ \"./node_modules/lodash.isequal/index.js\");\n\nmodule.exports = function () {\n  var cy, elementUtilities;\n  var groupCompoundType, metaEdgeIdentifier, lockGraphTopology, shouldApply;\n  var DEFAULT_GROUP_COMPOUND_TYPE = 'topology group';\n  var EDGE_STYLE_NAMES = ['line-color', 'width'];\n\n  function topologyGrouping(param, props) {\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    elementUtilities = param.elementUtilities;\n    groupCompoundType = props.groupCompoundType || DEFAULT_GROUP_COMPOUND_TYPE;\n    metaEdgeIdentifier = props.metaEdgeIdentifier;\n    lockGraphTopology = props.lockGraphTopology;\n    shouldApply = props.shouldApply || true;\n    topologyGrouping.applied = false;\n    initMetaStyleMap();\n  }\n\n  topologyGrouping.apply = function () {\n    if (topologyGrouping.applied || !evalOpt(shouldApply)) {\n      return;\n    }\n\n    var list = cy.nodes().map(function (node) {\n      return [node];\n    }); // determine node groups by their topology\n\n    var groups = getNodeGroups(list); // apply grouping in cy level\n\n    var metaEdges = topologyGrouping.getMetaEdges();\n    var compounds = topologyGrouping.getGroupCompounds();\n    applyGrouping(groups, metaEdges, compounds);\n    topologyGrouping.applied = true;\n\n    if (lockGraphTopology) {\n      elementUtilities.lockGraphTopology();\n    }\n\n    return groups;\n  };\n\n  topologyGrouping.unapply = function () {\n    if (!topologyGrouping.applied) {\n      return;\n    }\n\n    var metaEdges = topologyGrouping.getMetaEdges();\n    metaEdges.forEach(function (edge) {\n      var toRestore = edge.data('tg-to-restore');\n      edge.remove();\n      toRestore.restore();\n      EDGE_STYLE_NAMES.forEach(function (name) {\n        var oldVal = topologyGrouping.metaStyleMap[name][edge.id()];\n        var newVal = edge.data(name);\n\n        if (oldVal !== newVal) {\n          toRestore.data(name, newVal);\n        }\n      });\n    });\n    initMetaStyleMap();\n    var parents = topologyGrouping.getGroupCompounds();\n    elementUtilities.changeParent(parents.children(), null);\n    parents.remove();\n    topologyGrouping.applied = false;\n\n    if (lockGraphTopology) {\n      elementUtilities.unlockGraphTopology();\n    }\n  };\n\n  topologyGrouping.getMetaEdges = function () {\n    var metaEdges = cy.edges('[' + metaEdgeIdentifier + ']');\n    return metaEdges;\n  };\n\n  topologyGrouping.getGroupCompounds = function () {\n    var className = groupCompoundType;\n    return cy.nodes('[class=\"' + className + '\"]');\n  };\n\n  topologyGrouping.clearAppliedFlag = function () {\n    topologyGrouping.applied = false;\n  };\n\n  topologyGrouping.setAppliedFlag = function (applied) {\n    topologyGrouping.applied = applied;\n  };\n\n  topologyGrouping.toggleAppliedFlag = function () {\n    topologyGrouping.applied = !topologyGrouping.applied;\n  };\n\n  function initMetaStyleMap() {\n    topologyGrouping.metaStyleMap = {};\n    EDGE_STYLE_NAMES.forEach(function (name) {\n      topologyGrouping.metaStyleMap[name] = {};\n    });\n  }\n\n  function evalOpt(opt) {\n    if (typeof opt === 'function') {\n      return opt();\n    }\n\n    return opt;\n  }\n\n  function getNodeGroups(list) {\n    if (list.length <= 1) {\n      return list;\n    }\n\n    var halves = getHalves(list);\n    var firstPart = getNodeGroups(halves[0]);\n    var secondPart = getNodeGroups(halves[1]); // merge the halves\n\n    var groups = mergeGroups(firstPart, secondPart);\n    return groups;\n  }\n\n  function getParentOrSelf(node) {\n    var parent = node.parent();\n    return parent.size() > 0 ? parent : node;\n  }\n\n  function calcGroupingKey(edge) {\n    var srcId = getParentOrSelf(edge.source()).id();\n    var tgtId = getParentOrSelf(edge.target()).id();\n    var edgeType = getEdgeType(edge);\n    return [edgeType, srcId, tgtId].join('-');\n  }\n\n  function addToMapChain(map, key, val) {\n    if (!map[key]) {\n      map[key] = cy.collection();\n    }\n\n    map[key] = map[key].add(val);\n  }\n\n  function applyGrouping(groups, metaEdges, groupCompounds) {\n    var compounds;\n\n    if (groupCompounds.length > 0) {\n      compounds = groupCompounds;\n    } else {\n      groups.forEach(function (group) {\n        createGroupCompound(group);\n      });\n      compounds = topologyGrouping.getGroupCompounds();\n    }\n\n    var childrenEdges = compounds.children().connectedEdges();\n    var edgesMap = [];\n    childrenEdges.forEach(function (edge) {\n      var key = calcGroupingKey(edge);\n      addToMapChain(edgesMap, key, edge);\n      edge.remove();\n    });\n\n    if (metaEdges.length > 0) {\n      Object.keys(edgesMap).forEach(function (key) {\n        var edges = edgesMap[key];\n        var temp = edges[0];\n        var metaEdge = metaEdges.filter(function (edge) {\n          return edge.source().id() === getParentOrSelf(temp.source()).id() && edge.target().id() === getParentOrSelf(temp.target()).id();\n        })[0];\n        metaEdge.data('tg-to-restore', edges);\n        edges.remove();\n      });\n    } else {\n      Object.keys(edgesMap).forEach(function (key) {\n        createMetaEdgeFor(edgesMap[key]);\n      });\n    }\n  }\n\n  function createGroupCompound(group) {\n    if (group.length < 2) {\n      return;\n    }\n\n    var collection = cy.collection();\n    group.forEach(function (node) {\n      collection = collection.add(node);\n    });\n    elementUtilities.createCompoundForGivenNodes(collection, groupCompoundType);\n  }\n\n  function createMetaEdgeFor(edges) {\n    var srcId = getParentOrSelf(edges.source()).id();\n    var tgtId = getParentOrSelf(edges.target()).id();\n    var type = edges.data('class');\n    cy.remove(edges);\n    var metaEdge = elementUtilities.addEdge(srcId, tgtId, type);\n    metaEdge.data('tg-to-restore', edges);\n    metaEdge.data(metaEdgeIdentifier, true);\n    EDGE_STYLE_NAMES.forEach(function (styleName) {\n      edges.forEach(function (edge) {\n        topologyGrouping.metaStyleMap[styleName][edge.id()] = edge.data(styleName);\n      });\n      var commonVal = elementUtilities.getCommonProperty(edges, styleName, 'data');\n\n      if (commonVal) {\n        metaEdge.data(styleName, commonVal);\n      }\n    });\n    return metaEdge;\n  }\n\n  function mergeGroups(groups1, groups2) {\n    // notMergedGrs will include members of groups1 that are not merged\n    // mergedGrs will include the merged members from 2 groups\n    var notMergedGrs = [],\n        mergedGrs = [];\n    groups1.forEach(function (gr1) {\n      var merged = false;\n      mergedGrs.concat(groups2).forEach(function (gr2, index2) {\n        // if groups should be merged merge them, remove gr2 from where it\n        // comes from and push the merge result to mergedGrs\n        if (shouldMerge(gr1, gr2)) {\n          var mergedGr = gr1.concat(gr2);\n\n          if (index2 >= mergedGrs.length) {\n            removeAt(groups2, index2 - mergedGrs.length);\n          } else {\n            removeAt(mergedGrs, index2);\n          } // mark as merged and break the loop\n\n\n          mergedGrs.push(mergedGr);\n          merged = true;\n          return;\n        }\n      }); // if gr1 is not merged push it to notMergedGrs\n\n      if (!merged) {\n        notMergedGrs.push(gr1);\n      }\n    }); // the groups that comes from groups2 but not merged are still included\n    // in groups2 add them to the result together with mergedGrs and notMergedGrs\n\n    return notMergedGrs.concat(mergedGrs, groups2);\n  }\n\n  function shouldMerge(group1, group2) {\n    // using first elements is enough to decide whether to merge\n    var node1 = group1[0];\n    var node2 = group2[0];\n\n    if (node1.edges().length !== node2.edges().length) {\n      return false;\n    }\n\n    var getUndirectedEdges = function getUndirectedEdges(node) {\n      var edges = node.connectedEdges().filter(isUndirectedEdge);\n      return edges;\n    }; // undirected edges of node1 and node2 respectively\n\n\n    var undir1 = getUndirectedEdges(node1);\n    var undir2 = getUndirectedEdges(node2);\n    var in1 = node1.incomers().edges().not(undir1);\n    var in2 = node2.incomers().edges().not(undir2);\n    var out1 = node1.outgoers().edges().not(undir1);\n    var out2 = node2.outgoers().edges().not(undir2);\n    return compareEdgeGroup(in1, in2, node1, node2) && compareEdgeGroup(out1, out2, node1, node2) && compareEdgeGroup(undir1, undir2, node1, node2);\n  } // decide if 2 edge groups contains set of edges with similar content (type,\n  // source,target) relative to their nodes where gr1 are edges of node1 and gr2 are edges of\n  // node2\n\n\n  function compareEdgeGroup(gr1, gr2, node1, node2) {\n    var id1 = node1.id();\n    var id2 = node2.id();\n    var map1 = fillIdToTypeSetMap(gr1, node1);\n    var map2 = fillIdToTypeSetMap(gr2, node2);\n\n    if (Object.keys(map1).length !== Object.keys(map2).length) {\n      return;\n    }\n\n    var failed = false;\n    Object.keys(map1).forEach(function (key) {\n      // if already failed just return\n      if (failed) {\n        return;\n      } // if key is id2 use id1 instead because comparison is relative to nodes\n\n\n      var otherKey = key == id2 ? id1 : key; // check if the sets have the same content\n      // if check fails return false\n\n      if (!isEqual(map1[key], map2[otherKey])) {\n        failed = true;\n      }\n    }); // if check passes for each key return true\n\n    return !failed;\n  }\n\n  function fillIdToTypeSetMap(edgeGroup, node) {\n    var map = {};\n    var nodeId = node.id();\n    edgeGroup.forEach(function (edge) {\n      var srcId = edge.data('source');\n      var tgtId = edge.data('target');\n      var edgeId = edge.id();\n      var otherEnd = nodeId === tgtId ? srcId : tgtId;\n\n      function addToRelatedSet(sideStr, value) {\n        if (!map[sideStr]) {\n          map[sideStr] = new Set();\n        }\n\n        map[sideStr].add(value);\n      }\n\n      var edgeType = getEdgeType(edge);\n      addToRelatedSet(otherEnd, edgeType);\n    });\n    return map;\n  }\n\n  function getEdgeType(edge) {\n    return edge.data('class');\n  }\n\n  function isUndirectedEdge(edge) {\n    return elementUtilities.isUndirectedEdge(edge);\n  } // get halves of a list. It is assumed that list size is at least 2.\n\n\n  function getHalves(list) {\n    var s = list.length;\n    var halfIndex = Math.floor(s / 2);\n    var firstHalf = list.slice(0, halfIndex);\n    var secondHalf = list.slice(halfIndex, s);\n    return [firstHalf, secondHalf];\n  }\n\n  function removeAt(arr, index) {\n    arr.splice(index, 1);\n  }\n\n  return topologyGrouping;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/topology-grouping-factory.js\n");

/***/ }),

/***/ "./src/utilities/ur-action-functions-extender-factory.js":
/*!***************************************************************!*\
  !*** ./src/utilities/ur-action-functions-extender-factory.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Extends sbgnviz.undoRedoActionFunctions\nvar libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n\nmodule.exports = function () {\n  var sbgnvizInstance, undoRedoActionFunctions, elementUtilities, cy, topologyGrouping;\n\n  function undoRedoActionFunctionsExtender(param) {\n    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    undoRedoActionFunctions = sbgnvizInstance.undoRedoActionFunctions;\n    elementUtilities = param.elementUtilities;\n    topologyGrouping = param.sifTopologyGrouping;\n    extend();\n  } // Extends undoRedoActionFunctions with chise specific features\n\n\n  function extend() {\n    undoRedoActionFunctions.applySIFTopologyGrouping = function (param) {\n      var oldEles, newEles;\n\n      if (param.firstTime) {\n        oldEles = cy.elements();\n\n        if (param.apply) {\n          topologyGrouping.apply();\n        } else {\n          topologyGrouping.unapply();\n        }\n\n        newEles = cy.elements();\n      } else {\n        oldEles = param.oldEles;\n        newEles = param.newEles;\n\n        if (elementUtilities.isGraphTopologyLocked()) {\n          elementUtilities.unlockGraphTopology();\n        } else {\n          elementUtilities.lockGraphTopology();\n        }\n\n        oldEles.remove();\n        newEles.restore();\n        topologyGrouping.toggleAppliedFlag();\n      }\n\n      var result = {\n        oldEles: newEles,\n        newEles: oldEles\n      };\n      return result;\n    }; // Section Start\n    // add/remove action functions\n\n\n    undoRedoActionFunctions.addNode = function (param) {\n      var result;\n\n      if (param.firstTime) {\n        var newNode = param.newNode;\n        result = elementUtilities.addNode(newNode.x, newNode.y, newNode[\"class\"], newNode.id, newNode.parent, newNode.visibility);\n      } else {\n        result = elementUtilities.restoreEles(param);\n      }\n\n      return {\n        eles: result\n      };\n    };\n\n    undoRedoActionFunctions.addEdge = function (param) {\n      var result;\n\n      if (param.firstTime) {\n        var newEdge = param.newEdge;\n        result = elementUtilities.addEdge(newEdge.source, newEdge.target, newEdge[\"class\"], newEdge.id, newEdge.visibility);\n      } else {\n        result = elementUtilities.restoreEles(param);\n      }\n\n      return {\n        eles: result\n      };\n    };\n\n    undoRedoActionFunctions.addProcessWithConvenientEdges = function (param) {\n      var result;\n\n      if (param.firstTime) {\n        result = elementUtilities.addProcessWithConvenientEdges(param.source, param.target, param.processType);\n      } else {\n        result = elementUtilities.restoreEles(param);\n      }\n\n      return {\n        eles: result\n      };\n    };\n\n    undoRedoActionFunctions.createCompoundForGivenNodes = function (param) {\n      var result = {};\n\n      if (param.firstTime) {\n        // Nodes to make compound, their descendants and edges connected to them will be removed during createCompoundForGivenNodes operation\n        // (internally by eles.move() operation), so mark them as removed eles for undo operation.\n        var nodesToMakeCompound = param.nodesToMakeCompound;\n        var removedEles = nodesToMakeCompound.union(nodesToMakeCompound.descendants());\n        removedEles = removedEles.union(removedEles.connectedEdges());\n        result.removedEles = removedEles; // Assume that all nodes to make compound have the same parent\n\n        var oldParentId = nodesToMakeCompound[0].data(\"parent\"); // The parent of new compound will be the old parent of the nodes to make compound\n        // New eles includes new compound and the moved eles and will be used in undo operation.\n\n        result.newEles = elementUtilities.createCompoundForGivenNodes(nodesToMakeCompound, param.compoundType);\n      } else {\n        result.removedEles = param.newEles.remove();\n        result.newEles = param.removedEles.restore();\n        elementUtilities.maintainPointer(result.newEles);\n      }\n\n      return result;\n    }; // Section End\n    // add/remove action functions\n    // Section Start\n    // easy creation action functions\n\n\n    undoRedoActionFunctions.createTemplateReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createTemplateReaction(param.templateType, param.macromoleculeList, param.complexName, param.processPosition, param.tilingPaddingVertical, param.tilingPaddingHorizontal, param.edgeLength, param.layoutParam);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createActivationReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createActivationReaction(param.proteinName, param.processPosition, param.edgeLength, param.reverse);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createTranslation = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createTranslation(param.regulatorLabel, param.outputLabel, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createTranscription = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createTranscription(param.label, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createDegradation = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createDegradation(param.macromolecule, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createComplexProteinFormation = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createComplexProteinFormation(param.proteinLabels, param.complexLabel, param.regulator, param.orientation, param.reverse);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createMultimerization = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createMultimerization(param.macromolecule, param.regulator, param.regulatorMultimer, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createConversion = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createConversion(param.macromolecule, param.regulator, param.regulatorMultimer, param.orientation, param.inputInfoboxLabels, param.outputInfoboxLabels);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createMetabolicReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createMetabolicReaction(param.inputs, param.outputs, param.reversible, param.regulator, param.regulatorMultimer, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createMetabolicCatalyticActivity = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createMetabolicCatalyticActivity(param.inputNodeList, param.outputNodeList, param.catalystName, param.catalystType, param.processPosition, param.tilingPaddingVertical, param.tilingPaddingHorizontal, param.edgeLength);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createTranscriptionReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createTranscriptionReaction(param.geneName, param.mRnaName, param.processPosition, param.edgeLength);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    };\n\n    undoRedoActionFunctions.createTranslationReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n\n      if (firstTime) {\n        eles = elementUtilities.createTranslationReaction(param.mRnaName, param.proteinName, param.processPosition, param.edgeLength);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n\n      return {\n        eles: eles\n      };\n    }; // Section End\n    // easy creation action functions\n    // Section Start\n    // general action functions\n\n\n    undoRedoActionFunctions.getNodePositions = function () {\n      var positions = {};\n      var nodes = cy.nodes();\n      nodes.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n\n        positions[ele.id()] = {\n          x: ele.position(\"x\"),\n          y: ele.position(\"y\")\n        };\n      });\n      return positions;\n    };\n\n    undoRedoActionFunctions.returnToPositions = function (positions) {\n      var currentPositions = {};\n      cy.nodes().positions(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n\n        currentPositions[ele.id()] = {\n          x: ele.position(\"x\"),\n          y: ele.position(\"y\")\n        };\n        var pos = positions[ele.id()];\n        return {\n          x: pos.x,\n          y: pos.y\n        };\n      });\n      return currentPositions;\n    };\n\n    undoRedoActionFunctions.resizeNodes = function (param) {\n      var result = {\n        performOperation: true\n      };\n      var nodes = param.nodes;\n      result.sizeMap = {};\n      result.useAspectRatio = false;\n      result.preserveRelativePos = param.preserveRelativePos;\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n\n        if (node.isParent()) {\n          result.sizeMap[node.id()] = {\n            w: node.data(\"minWidth\") || 0,\n            h: node.data(\"minHeight\") || 0,\n            biasL: node.data(\"minWidthBiasLeft\") || 0,\n            biasR: node.data(\"minWidthBiasRight\") || 0,\n            biasT: node.data(\"minHeightBiasTop\") || 0,\n            biasB: node.data(\"minHeightBiasBottom\") || 0 // w: node.css(\"minWidth\") != 0?  node.data(\"minWidth\") : node.children().boundingBox().w,\n            //h: node.css(\"min-height\") != 0?  node.data(\"minHeight\") : node.children().boundingBox().h\n\n          };\n        } else {\n          result.sizeMap[node.id()] = {\n            w: node.width(),\n            h: node.height()\n          };\n        }\n      }\n\n      result.nodes = nodes;\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n\n        if (param.performOperation) {\n          if (param.sizeMap) {\n            /* if (param.preserveRelativePos === true) {\n              var oldWidth = node.data(\"bbox\").w;\n              var oldHeight = node.data(\"bbox\").h;\n            } */\n            if (node.isParent()) {\n              node.data(\"minHeight\", param.sizeMap[node.id()].h);\n              node.data(\"minWidth\", param.sizeMap[node.id()].w);\n              node.data(\"minWidthBiasLeft\", param.sizeMap[node.id()].biasL);\n              node.data(\"minWidthBiasRight\", param.sizeMap[node.id()].biasR);\n              node.data(\"minHeightBiasTop\", param.sizeMap[node.id()].biasT);\n              node.data(\"minHeightBiasBottom\", param.sizeMap[node.id()].biasB);\n            } else {\n              node.data(\"bbox\").w = param.sizeMap[node.id()].w;\n              node.data(\"bbox\").h = param.sizeMap[node.id()].h;\n            }\n            /* if (param.preserveRelativePos === true) {\n              var statesandinfos = node.data('statesandinfos');\n              var topBottom = statesandinfos.filter(box => (box.anchorSide === \"top\" || box.anchorSide === \"bottom\"));\n              var rightLeft = statesandinfos.filter(box => (box.anchorSide === \"right\" || box.anchorSide === \"left\"));\n               topBottom.forEach(function(box){\n                if (box.bbox.x < 0) {\n                  box.bbox.x = 0;\n                }\n                else if (box.bbox.x > oldWidth) {\n                  box.bbox.x = oldWidth;\n                }\n                box.bbox.x = node.data(\"bbox\").w * box.bbox.x / oldWidth;\n              });\n               rightLeft.forEach(function(box){\n                if (box.bbox.y < 0) {\n                  box.bbox.y = 0;\n                }\n                else if (box.bbox.y > oldHeight) {\n                  box.bbox.y = oldHeight;\n                }\n                box.bbox.y = node.data(\"bbox\").h * box.bbox.y / oldHeight;\n              });\n            } */\n\n          } else {\n            elementUtilities.resizeNodes(param.nodes, param.width, param.height, param.useAspectRatio, param.preserveRelativePos);\n          }\n        }\n      }\n\n      cy.style().update();\n      return result;\n    };\n\n    undoRedoActionFunctions.changeNodeLabel = function (param) {\n      var result = {};\n      var nodes = param.nodes;\n      result.nodes = nodes;\n      result.label = {};\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        result.label[node.id()] = node._private.data.label;\n      }\n\n      if (param.firstTime) {\n        nodes.data('label', param.label);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          node._private.data.label = param.label[node.id()];\n        }\n      }\n\n      return result;\n    };\n\n    undoRedoActionFunctions.updateInfoboxStyle = function (param) {\n      var result = {};\n      var style = param.node.data('statesandinfos')[param.index].style;\n      result.newProps = $.extend({}, style);\n      result.node = param.node;\n      result.index = param.index;\n      elementUtilities.updateInfoboxStyle(param.node, param.index, param.newProps);\n      return result;\n    };\n\n    undoRedoActionFunctions.updateInfoboxObj = function (param) {\n      var result = {};\n      var obj = param.node.data('statesandinfos')[param.index];\n      result.newProps = $.extend({}, obj);\n      result.node = param.node;\n      result.index = param.index;\n      elementUtilities.updateInfoboxObj(param.node, param.index, param.newProps);\n      return result;\n    };\n\n    undoRedoActionFunctions.changeData = function (param) {\n      var result = {};\n      var eles = param.eles;\n      result.name = param.name;\n      result.valueMap = {};\n      result.eles = eles;\n\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        result.valueMap[ele.id()] = ele.data(param.name);\n      }\n\n      elementUtilities.changeData(param.eles, param.name, param.valueMap);\n      return result;\n    };\n\n    undoRedoActionFunctions.updateSetField = function (param) {\n      var updates = elementUtilities.updateSetField(param.ele, param.fieldName, param.toDelete, param.toAdd, param.callback);\n      var result = {\n        ele: param.ele,\n        fieldName: param.fieldName,\n        callback: param.callback,\n        toDelete: updates.added,\n        toAdd: updates.deleted\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.changeCss = function (param) {\n      var result = {};\n      var eles = param.eles;\n      result.name = param.name;\n      result.valueMap = {};\n      result.eles = eles;\n\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        result.valueMap[ele.id()] = ele.css(param.name);\n      }\n\n      elementUtilities.changeCss(param.eles, param.name, param.valueMap);\n      return result;\n    };\n\n    undoRedoActionFunctions.changeFontProperties = function (param) {\n      var result = {};\n      var eles = param.eles;\n      result.data = {};\n      result.eles = eles;\n\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        result.data[ele.id()] = {};\n        var data = param.firstTime ? param.data : param.data[ele.id()];\n\n        for (var prop in data) {\n          result.data[ele.id()][prop] = ele.data(prop);\n        }\n      }\n\n      if (param.firstTime) {\n        elementUtilities.changeFontProperties(eles, data);\n      } else {\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          elementUtilities.changeFontProperties(ele, data);\n        }\n      }\n\n      return result;\n    };\n    /*\n     * Show eles and perform layout.\n     */\n\n\n    undoRedoActionFunctions.showAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n\n      if (param.firstTime) {\n        result.eles = elementUtilities.showAndPerformLayout(param.eles, param.layoutparam);\n      } else {\n        result.eles = cy.viewUtilities().show(eles); // Show given eles\n\n        undoRedoActionFunctions.returnToPositions(param.positions);\n      }\n\n      return result;\n    };\n\n    undoRedoActionFunctions.undoShowAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      result.eles = cy.viewUtilities().hide(eles); // Hide previously unhidden eles;\n\n      undoRedoActionFunctions.returnToPositions(param.positions);\n      return result;\n    };\n    /*\n     * Hide eles and perform layout.\n     */\n\n\n    undoRedoActionFunctions.hideAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n\n      if (param.firstTime) {\n        result.eles = elementUtilities.hideAndPerformLayout(param.eles, param.layoutparam);\n      } else {\n        result.eles = cy.viewUtilities().hide(eles); // Hide given eles\n\n        undoRedoActionFunctions.returnToPositions(param.positions);\n      }\n\n      return result;\n    };\n\n    undoRedoActionFunctions.undoHideAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      result.eles = cy.viewUtilities().show(eles); // Show previously hidden eles\n\n      undoRedoActionFunctions.returnToPositions(param.positions);\n      return result;\n    };\n    /*\n     * Delete eles and perform layout.\n     */\n\n\n    undoRedoActionFunctions.deleteAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n\n      if (param.firstTime) {\n        result.eles = elementUtilities.deleteAndPerformLayout(param.eles, param.layoutparam);\n      } else {\n        result.eles = eles.remove();\n        undoRedoActionFunctions.returnToPositions(param.positions);\n      }\n\n      return result;\n    };\n\n    undoRedoActionFunctions.undoDeleteAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      result.eles = elementUtilities.restoreEles(eles);\n      undoRedoActionFunctions.returnToPositions(param.positions);\n      return result;\n    }; // Section End\n    // general action functions\n    // Section Start\n    // sbgn action functions\n\n\n    undoRedoActionFunctions.changeStateOrInfoBox = function (param) {\n      var result = {};\n      result.type = param.type;\n      result.nodes = param.nodes;\n      result.index = param.index;\n      var data = param.data;\n      var tempData = elementUtilities.saveUnits(param.nodes);\n      result.value = elementUtilities.changeStateOrInfoBox(param.nodes, param.index, param.value, param.type);\n      /* var locations = elementUtilities.checkFit(param.nodes);\n      if (locations !== undefined && locations.length > 0) {\n        elementUtilities.fitUnits(param.nodes, locations);\n      } */\n\n      if (data !== undefined) {\n        elementUtilities.restoreUnits(param.nodes, data);\n      }\n\n      cy.forceRender();\n      result.data = tempData;\n      return result;\n    };\n\n    undoRedoActionFunctions.addStateOrInfoBox = function (param) {\n      var obj = param.obj;\n      var nodes = param.nodes;\n      var data = param.data;\n      var tempData = elementUtilities.saveUnits(nodes);\n      var locationObj = elementUtilities.addStateOrInfoBox(nodes, obj);\n      /*  var locations = elementUtilities.checkFit(nodes);\n       if (locations !== undefined && locations.length > 0) {\n         elementUtilities.fitUnits(nodes, locations);\n       } */\n\n      if (data !== undefined) {\n        elementUtilities.restoreUnits(nodes, data);\n      }\n\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        locationObj: locationObj,\n        obj: obj,\n        data: tempData\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.removeStateOrInfoBox = function (param) {\n      var locationObj = param.locationObj;\n      var nodes = param.nodes;\n      var data = param.data;\n      var tempData = elementUtilities.saveUnits(nodes);\n      var obj = elementUtilities.removeStateOrInfoBox(nodes, locationObj);\n\n      if (data !== undefined) {\n        elementUtilities.restoreUnits(nodes, data);\n      }\n\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        obj: obj,\n        data: tempData\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.fitUnits = function (param) {\n      var node = param.node;\n      var locations = param.locations;\n      var obj = elementUtilities.fitUnits(node, locations);\n      cy.forceRender();\n      var result = {\n        node: node,\n        obj: obj,\n        locations: locations\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.restoreUnits = function (param) {\n      var node = param.node;\n      var locations = param.locations;\n      var obj = param.obj;\n      var index = 0;\n      node.data('statesandinfos').forEach(function (ele) {\n        var box = obj[index++];\n        ele.bbox.x = box.x;\n        ele.bbox.y = box.y;\n        var oldSide = ele.anchorSide;\n        ele.anchorSide = box.anchorSide;\n        elementUtilities.modifyUnits(node, ele, oldSide);\n      });\n      cy.forceRender();\n      var result = {\n        node: node,\n        locations: locations\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.setMultimerStatus = function (param) {\n      var firstTime = param.firstTime;\n      var nodes = param.nodes;\n      var status = param.status;\n      var resultStatus = {};\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var isMultimer = node.data('class').endsWith(' multimer');\n        resultStatus[node.id()] = isMultimer;\n      } // If this is the first time change the status of all nodes at once.\n      // If not change status of each seperately to the values mapped to their id.\n\n\n      if (firstTime) {\n        elementUtilities.setMultimerStatus(nodes, status);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          elementUtilities.setMultimerStatus(node, status[node.id()]);\n        }\n      } //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-multimer').attr(\"checked\", !$('#inspector-is-multimer').attr(\"checked\"));\n      //  }\n\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.setActiveStatus = function (param) {\n      var firstTime = param.firstTime;\n      var nodes = param.nodes;\n      var status = param.status;\n      var resultStatus = {};\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var isActive = node.data('class').startsWith('active ');\n        resultStatus[node.id()] = isActive;\n      } // If this is the first time change the status of all nodes at once.\n      // If not change status of each seperately to the values mapped to their id.\n\n\n      if (firstTime) {\n        elementUtilities.setActiveStatus(nodes, status);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          elementUtilities.setActiveStatus(node, status[node.id()]);\n        }\n      } //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-multimer').attr(\"checked\", !$('#inspector-is-multimer').attr(\"checked\"));\n      //  }\n\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.setHypotheticalStatus = function (param) {\n      var firstTime = param.firstTime;\n      var nodes = param.nodes;\n      var status = param.status;\n      var resultStatus = {};\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var isHypothetical = node.data('class').includes('hypothetical');\n        resultStatus[node.id()] = isHypothetical;\n      } // If this is the first time change the status of all nodes at once.\n      // If not change status of each seperately to the values mapped to their id.\n\n\n      if (firstTime) {\n        elementUtilities.setHypotheticalStatus(nodes, status);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          elementUtilities.setHypotheticalStatus(node, status[node.id()]); //elementUtilities.setHypothteticalStatus\n        }\n      } //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-multimer').attr(\"checked\", !$('#inspector-is-multimer').attr(\"checked\"));\n      //  }\n\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.setCloneMarkerStatus = function (param) {\n      var nodes = param.nodes;\n      var status = param.status;\n      var firstTime = param.firstTime;\n      var resultStatus = {};\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        resultStatus[node.id()] = node.data('clonemarker');\n        var currentStatus = firstTime ? status : status[node.id()];\n        elementUtilities.setCloneMarkerStatus(node, currentStatus);\n      } //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-clone-marker').attr(\"checked\", !$('#inspector-is-clone-marker').attr(\"checked\"));\n      //  }\n\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    }; // param: {class: sbgnclass, name: propertyName, value: value}\n\n\n    undoRedoActionFunctions.setDefaultProperty = function (param) {\n      var sbgnclass = param[\"class\"];\n      var name = param.name;\n      var value = param.value;\n      var classDefaults = elementUtilities.getDefaultProperties(sbgnclass);\n      var result = {\n        \"class\": sbgnclass,\n        name: name,\n        value: classDefaults.hasOwnProperty(name) ? classDefaults[name] : undefined\n      };\n      var propMap = {};\n      propMap[name] = value;\n      elementUtilities.setDefaultProperties(sbgnclass, propMap);\n      return result;\n    };\n\n    undoRedoActionFunctions.addBackgroundImage = function (param) {\n      var bgObj = param.bgObj;\n      var nodes = param.nodes;\n      var updateInfo = param.updateInfo;\n      var promptInvalidImage = param.promptInvalidImage;\n      var validateURL = param.validateURL;\n      elementUtilities.addBackgroundImage(nodes, bgObj, updateInfo, promptInvalidImage, validateURL);\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        bgObj: bgObj,\n        updateInfo: updateInfo,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.removeBackgroundImage = function (param) {\n      var bgObj = param.bgObj;\n      var nodes = param.nodes;\n      elementUtilities.removeBackgroundImage(nodes, bgObj);\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        bgObj: bgObj\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.updateBackgroundImage = function (param) {\n      var bgObj = param.bgObj;\n      var nodes = param.nodes;\n      var oldBgObj = elementUtilities.updateBackgroundImage(nodes, bgObj);\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        bgObj: oldBgObj\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.changeBackgroundImage = function (param) {\n      var oldImg = param.oldImg;\n      var newImg = param.newImg;\n      var nodes = param.nodes;\n      var firstTime = param.firstTime;\n      var updateInfo = param.updateInfo;\n      var promptInvalidImage = param.promptInvalidImage;\n      var validateURL = param.validateURL;\n      var result = elementUtilities.changeBackgroundImage(nodes, oldImg, newImg, firstTime, updateInfo, promptInvalidImage, validateURL);\n      cy.forceRender();\n      return result;\n    }; // Section End\n    // sbgn action functions\n\n\n    undoRedoActionFunctions.convertIntoReversibleReaction = function (param) {\n      var collection = cy.collection();\n      var mapType = elementUtilities.getMapType();\n      elementUtilities.setMapType(param.mapType);\n      $('#map-type').val(param.mapType);\n      param.collection.forEach(function (edge) {\n        var sourceNode = edge._private.data.source;\n        var targetNode = edge._private.data.target;\n        edge.move({\n          source: targetNode,\n          target: sourceNode\n        });\n        var convertedEdge = cy.getElementById(edge.id());\n\n        if (convertedEdge.data(\"cyedgebendeditingDistances\")) {\n          var distance = convertedEdge.data(\"cyedgebendeditingDistances\");\n          distance = distance.map(function (element) {\n            return -1 * element;\n          });\n          convertedEdge.data(\"cyedgebendeditingDistances\", distance.reverse());\n          var weight = convertedEdge.data(\"cyedgebendeditingWeights\");\n          weight = weight.map(function (element) {\n            return 1 - element;\n          });\n          convertedEdge.data(\"cyedgebendeditingWeights\", weight.reverse());\n        }\n\n        if (convertedEdge.data(\"cyedgecontroleditingDistances\")) {\n          var _distance = convertedEdge.data(\"cyedgecontroleditingDistances\");\n\n          _distance = _distance.map(function (element) {\n            return -1 * element;\n          });\n          convertedEdge.data(\"cyedgecontroleditingDistances\", _distance.reverse());\n\n          var _weight = convertedEdge.data(\"cyedgecontroleditingWeigths\");\n\n          _weight = _weight.map(function (element) {\n            return 1 - element;\n          });\n          convertedEdge.data(\"cyedgecontroleditingWeigths\", _weight.reverse());\n        }\n\n        if (convertedEdge._private.data[\"class\"] === \"consumption\") {\n          convertedEdge._private.data[\"class\"] = \"production\";\n          convertedEdge._private.data.portsource = targetNode + \".1\";\n          convertedEdge._private.data.porttarget = sourceNode;\n        } else if (convertedEdge._private.data[\"class\"] === \"production\") {\n          convertedEdge._private.data[\"class\"] = \"consumption\";\n          convertedEdge._private.data.portsource = targetNode;\n          convertedEdge._private.data.porttarget = sourceNode + \".1\";\n        }\n\n        collection = collection.add(convertedEdge);\n        cy.style().update();\n      });\n      var result = {\n        collection: collection,\n        mapType: mapType,\n        processId: param.processId\n      };\n      return result;\n    };\n\n    undoRedoActionFunctions.moveEdge = function (param) {\n      var result = {};\n      var edge = param.edge;\n      result.name = param.name;\n      result.source = edge.source().id();\n      result.target = edge.target().id();\n      result.portsource = edge.data(\"portsource\");\n      result.porttarget = edge.data(\"porttarget\");\n      elementUtilities.changeData(edge, 'source', param.source);\n      elementUtilities.changeData(edge, 'target', param.target);\n      elementUtilities.changeData(edge, 'portsource', param.portsource);\n      elementUtilities.changeData(edge, 'porttarget', param.porttarget);\n      edge = edge.move({\n        target: param.target,\n        source: param.source\n      });\n      result.edge = edge;\n      return result;\n    };\n\n    undoRedoActionFunctions.fixError = function (param) {\n      var errorCode = param.errorCode;\n      var result = {};\n      result.errorCode = errorCode;\n\n      if (errorCode == \"pd10101\" || errorCode == 'pd10102') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10103\" || errorCode == 'pd10107') {\n        param.newNodes.forEach(function (newNode) {\n          elementUtilities.addNode(newNode.x, newNode.y, newNode[\"class\"], newNode.id, undefined);\n        });\n        param.newEdges.forEach(function (newEdge) {\n          elementUtilities.addEdge(newEdge.source, newEdge.target, newEdge[\"class\"]);\n        });\n        param.oldEdges.forEach(function (oldEdge) {\n          cy.elements().unselect(); //return \n\n          oldEdge.remove();\n        });\n        param.node.remove();\n        return param;\n      } else if (errorCode == \"pd10105\" || errorCode == 'pd10106') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10140\") {\n        param.node.remove();\n        return param;\n      } else if (errorCode == \"pd10104\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        param.nodes.forEach(function (node) {\n          node.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10108\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        param.nodes.forEach(function (node) {\n          node.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10111\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10126\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        param.nodes.forEach(function (node) {\n          node.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10109\" || errorCode == \"pd10124\") {\n        result.newSource = param.edge.data().source;\n        result.newTarget = param.edge.data().target;\n        result.portsource = param.edge.data().portsource;\n        var clonedEdge = param.edge.clone();\n        var edgeParams = {\n          \"class\": clonedEdge.data()[\"class\"],\n          language: clonedEdge.data().language\n        };\n        clonedEdge.data().source = param.newSource;\n        clonedEdge.data().target = param.newTarget;\n        cy.remove(param.edge);\n        result.edge = elementUtilities.addEdge(param.newSource, param.newTarget, edgeParams, clonedEdge.data().id);\n        return result;\n      } else if (errorCode == \"pd10112\") {\n        param.callback = elementUtilities.maintainPointer; // If this is first time we should move the node to its new parent and relocate it by given posDiff params\n        // else we should remove the moved eles and restore the eles to restore\n\n        if (param.firstTime) {\n          var newParentId = param.parentData == undefined ? null : param.parentData; // These eles includes the nodes and their connected edges and will be removed in nodes.move().\n          // They should be restored in undo\n\n          var withDescendant = param.nodes.union(param.nodes.descendants());\n          result.elesToRestore = withDescendant.union(withDescendant.connectedEdges()); // These are the eles created by nodes.move(), they should be removed in undo.\n\n          result.movedEles = param.nodes.move({\n            \"parent\": newParentId\n          });\n          var posDiff = {\n            x: param.posDiffX,\n            y: param.posDiffY\n          };\n          elementUtilities.moveNodes(posDiff, result.movedEles);\n        } else {\n          result.elesToRestore = param.movedEles.remove();\n          result.movedEles = param.elesToRestore.restore();\n        }\n\n        if (param.callback) {\n          result.callback = param.callback; // keep the provided callback so it can be reused after undo/redo\n\n          param.callback(result.movedEles); // apply the callback on newly created elements\n        }\n\n        return result;\n      } else if (errorCode == \"pd10125\") {\n        result.edge = param.edge.remove();\n        result.newEdge = {};\n        var edgeclass = param.newEdge.edgeParams[\"class\"] ? param.newEdge.edgeParams[\"class\"] : param.newEdge.edgeParams;\n        var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(param.newEdge.source), cy.getElementById(param.newEdge.target));\n\n        if (validation === 'reverse') {\n          var temp = param.newEdge.source;\n          param.newEdge.source = param.newEdge.target;\n          param.newEdge.target = temp;\n        }\n\n        result.newEdge.id = elementUtilities.addEdge(param.newEdge.source, param.newEdge.target, param.newEdge.edgeParams).id();\n        result.newEdge.source = param.newEdge.source;\n        result.newEdge.target = param.newEdge.target;\n        result.newEdge.edgeParams = param.newEdge.edgeParams;\n        return result;\n      } else if (errorCode == \"pd10142\") {\n        result.edge = param.edge.remove();\n        result.newEdge = {};\n        var edgeclass = param.newEdge.edgeParams[\"class\"] ? param.newEdge.edgeParams[\"class\"] : param.newEdge.edgeParams;\n        var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(param.newEdge.source), cy.getElementById(param.newEdge.target));\n\n        if (validation === 'reverse') {\n          var temp = param.newEdge.source;\n          param.newEdge.source = param.newEdge.target;\n          param.newEdge.target = temp;\n        }\n\n        result.newEdge.id = elementUtilities.addEdge(param.newEdge.source, param.newEdge.target, param.newEdge.edgeParams).id();\n        result.newEdge.source = param.newEdge.source;\n        result.newEdge.target = param.newEdge.target;\n        result.newEdge.edgeParams = param.newEdge.edgeParams;\n        return result;\n      } else {\n        result.newSource = param.edge.source().id();\n        result.newTarget = param.edge.target().id();\n        result.porttarget = param.edge.data(\"porttarget\");\n        result.edge = param.edge.move({\n          target: param.newTarget,\n          source: param.newSource\n        });\n        elementUtilities.changeData(result.edge, 'porttarget', param.porttarget);\n        return result;\n      }\n    };\n\n    undoRedoActionFunctions.unfixError = function (param) {\n      var errorCode = param.errorCode;\n      var result = {};\n      result.errorCode = errorCode;\n\n      if (errorCode == \"pd10101\" || errorCode == 'pd10102') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10103\" || errorCode == 'pd10107') {\n        param.newNodes.forEach(function (newNode) {\n          cy.remove(cy.$('#' + newNode.id));\n        });\n        param.node.restore();\n        param.oldEdges.forEach(function (oldEdge) {\n          oldEdge.restore();\n        });\n        cy.animate({\n          duration: 100,\n          easing: 'ease',\n          fit: {\n            eles: {},\n            padding: 20\n          },\n          complete: function complete() {}\n        });\n        return param;\n      } else if (errorCode == \"pd10105\" || errorCode == 'pd10106') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10140\") {\n        param.node.restore();\n        cy.animate({\n          duration: 100,\n          easing: 'ease',\n          fit: {\n            eles: {},\n            padding: 20\n          },\n          complete: function complete() {}\n        });\n        return param;\n      } else if (errorCode == \"pd10104\") {\n        param.nodes.forEach(function (node) {\n          node.restore();\n        });\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10108\") {\n        param.nodes.forEach(function (node) {\n          node.restore();\n        });\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10111\") {\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10126\") {\n        param.nodes.forEach(function (node) {\n          node.restore();\n        });\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10109\" || errorCode == \"pd10124\") {\n        result.newSource = param.edge.source().id();\n        result.newTarget = param.edge.target().id();\n        result.portsource = param.portsource;\n        result.edge = param.edge.move({\n          target: param.newTarget,\n          source: param.newSource\n        });\n        elementUtilities.changeData(result.edge, 'portsource', param.portsource);\n        return result;\n      } else if (errorCode == \"pd10112\") {\n        // If this is first time we should move the node to its new parent and relocate it by given posDiff params\n        // else we should remove the moved eles and restore the eles to restore\n        if (param.firstTime) {\n          var newParentId = param.parentData == undefined ? null : param.parentData; // These eles includes the nodes and their connected edges and will be removed in nodes.move().\n          // They should be restored in undo\n\n          var withDescendant = param.nodes.union(param.nodes.descendants());\n          result.elesToRestore = withDescendant.union(withDescendant.connectedEdges()); // These are the eles created by nodes.move(), they should be removed in undo.\n\n          result.movedEles = param.nodes.move({\n            \"parent\": newParentId\n          });\n          var posDiff = {\n            x: param.posDiffX,\n            y: param.posDiffY\n          };\n          elementUtilities.moveNodes(posDiff, result.movedEles);\n        } else {\n          result.elesToRestore = param.movedEles.remove();\n          result.movedEles = param.elesToRestore.restore();\n        }\n\n        if (param.callback) {\n          result.callback = param.callback; // keep the provided callback so it can be reused after undo/redo\n\n          param.callback(result.movedEles); // apply the callback on newly created elements\n        }\n\n        return result;\n      } else if (errorCode == \"pd10125\") {\n        cy.$('#' + param.newEdge.id).remove();\n        param.edge = param.edge.restore();\n        return param;\n      } else if (errorCode == \"pd10142\") {\n        cy.$('#' + param.newEdge.id).remove();\n        param.edge = param.edge.restore();\n        return param;\n      } else {\n        result.newSource = param.edge.source().id();\n        result.newTarget = param.edge.target().id();\n        result.porttarget = param.edge.data(\"porttarget\");\n        result.edge = param.edge.move({\n          target: param.newTarget,\n          source: param.newSource\n        });\n        elementUtilities.changeData(result.edge, 'porttarget', param.porttarget);\n        return result;\n      }\n    };\n\n    undoRedoActionFunctions.cloneHighDegreeNode = function (node) {\n      var result = {};\n      var oldX = node.position().x;\n      var oldY = node.position().y;\n\n      var claculateNewClonePosition = function claculateNewClonePosition(sourceEndPointX, sourceEndPointY, targetEndPointX, targetEndPointY, desiredDistance, direction) {\n        var distance = Math.sqrt(Math.pow(targetEndPointY - sourceEndPointY, 2) + Math.pow(targetEndPointX - sourceEndPointX, 2));\n        var ratio = desiredDistance / distance;\n        var result = {};\n\n        if (direction == \"source\") {\n          result.cx = (1 - ratio) * sourceEndPointX + ratio * targetEndPointX;\n          result.cy = (1 - ratio) * sourceEndPointY + ratio * targetEndPointY;\n        } else {\n          result.cx = (1 - ratio) * targetEndPointX + ratio * sourceEndPointX;\n          result.cy = (1 - ratio) * targetEndPointY + ratio * sourceEndPointY;\n        }\n\n        return result;\n      };\n\n      var edges = node.connectedEdges();\n      var desiredDistance = (node.height() > node.width() ? node.height() : node.width()) * 0.1;\n\n      for (var i = 1; i < edges.length; i++) {\n        var edge = edges[i];\n        var index = i;\n        var edgeClone = edge.clone();\n        var startPosition = edge.source().id() == node.id() ? \"source\" : \"target\";\n        var newPosition = claculateNewClonePosition(edge.sourceEndpoint().x, edge.sourceEndpoint().y, edge.targetEndpoint().x, edge.targetEndpoint().y, desiredDistance, startPosition);\n        var newNodeId = node.id() + 'clone-' + index; //edgeClone.data().id = edgeClone.data().id+ \"-\"+newNodeId;\n\n        if (edge.source().id() == node.id()) {\n          edgeClone.data().source = newNodeId;\n          edgeClone.data().portsource = newNodeId;\n        } else {\n          edgeClone.data().target = newNodeId;\n          edgeClone.data().porttarget = newNodeId;\n        }\n\n        var newNode = node.clone();\n        newNode.data().id = newNodeId;\n        cy.add(newNode);\n        edge.remove();\n        cy.add(edgeClone);\n        newNode.position({\n          x: newPosition.cx,\n          y: newPosition.cy\n        });\n        elementUtilities.setCloneMarkerStatus(newNode, true);\n      }\n\n      var newPosition = claculateNewClonePosition(edges[0].sourceEndpoint().x, edges[0].sourceEndpoint().y, edges[0].targetEndpoint().x, edges[0].targetEndpoint().y, desiredDistance, edges[0].source().id() == node.id() ? \"source\" : \"target\");\n      var cloneEdge = edges[0].clone(); //cloneEdge.data().id = cloneEdge.data().id+ \"-\"+node.id()+'clone-0';\n\n      edges[0].remove();\n      cy.add(cloneEdge);\n      elementUtilities.setCloneMarkerStatus(node, true);\n      node.position({\n        x: newPosition.cx,\n        y: newPosition.cy\n      });\n      result.oldX = oldX;\n      result.oldY = oldY;\n      result.node = node;\n      result.numberOfEdges = edges.length;\n      return result;\n    };\n\n    undoRedoActionFunctions.unCloneHighDegreeNode = function (param) {\n      var node = param.node;\n      elementUtilities.setCloneMarkerStatus(node, false);\n      node.position({\n        x: param.oldX,\n        y: param.oldY\n      });\n\n      for (var i = 1; i < param.numberOfEdges; i++) {\n        var cloneId = node.id() + 'clone-' + i;\n        var clone = cy.$(\"#\" + cloneId);\n        var cloneEdge = clone.connectedEdges()[0];\n        var edge = cloneEdge.clone();\n\n        if (edge.data().source == cloneId) {\n          edge.data().source = node.id();\n          edge.data().portsource = node.id();\n        } else {\n          edge.data().target = node.id();\n          edge.data().porttarget = node.id();\n        }\n\n        cloneEdge.remove();\n        clone.remove();\n        cy.add(edge);\n      }\n\n      return node;\n    };\n\n    undoRedoActionFunctions.changeMapType = function (param) {\n      var result = {};\n      var currentMapType = elementUtilities.getMapType();\n      elementUtilities.setMapType(param.mapType);\n      result.mapType = currentMapType;\n      result.callback = param.callback;\n      param.callback();\n      return result;\n    };\n  }\n\n  return undoRedoActionFunctionsExtender;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3VyLWFjdGlvbi1mdW5jdGlvbnMtZXh0ZW5kZXItZmFjdG9yeS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLElBQUlBLElBQUksR0FBR0Msd0ZBQUEsRUFBWDs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVk7RUFFM0IsSUFBSUMsZUFBSixFQUFxQkMsdUJBQXJCLEVBQThDQyxnQkFBOUMsRUFBZ0VDLEVBQWhFLEVBQW9FQyxnQkFBcEU7O0VBRUEsU0FBU0MsK0JBQVQsQ0FBMENDLEtBQTFDLEVBQWlEO0lBRS9DTixlQUFlLEdBQUdNLEtBQUssQ0FBQ0Msd0JBQU4sQ0FBK0JDLFdBQS9CLEVBQWxCO0lBQ0FMLEVBQUUsR0FBR0csS0FBSyxDQUFDQyx3QkFBTixDQUErQkUsS0FBL0IsRUFBTDtJQUNBUix1QkFBdUIsR0FBR0QsZUFBZSxDQUFDQyx1QkFBMUM7SUFDQUMsZ0JBQWdCLEdBQUdJLEtBQUssQ0FBQ0osZ0JBQXpCO0lBQ0FFLGdCQUFnQixHQUFHRSxLQUFLLENBQUNJLG1CQUF6QjtJQUVBQyxNQUFNO0VBQ1AsQ0FiMEIsQ0FlM0I7OztFQUNBLFNBQVNBLE1BQVQsR0FBbUI7SUFFakJWLHVCQUF1QixDQUFDVyx3QkFBeEIsR0FBbUQsVUFBU04sS0FBVCxFQUFnQjtNQUNqRSxJQUFJTyxPQUFKLEVBQWFDLE9BQWI7O01BQ0EsSUFBS1IsS0FBSyxDQUFDUyxTQUFYLEVBQXVCO1FBQ3JCRixPQUFPLEdBQUdWLEVBQUUsQ0FBQ2EsUUFBSCxFQUFWOztRQUVBLElBQUlWLEtBQUssQ0FBQ1csS0FBVixFQUFpQjtVQUNmYixnQkFBZ0IsQ0FBQ2EsS0FBakI7UUFDRCxDQUZELE1BR0s7VUFDSGIsZ0JBQWdCLENBQUNjLE9BQWpCO1FBQ0Q7O1FBRURKLE9BQU8sR0FBR1gsRUFBRSxDQUFDYSxRQUFILEVBQVY7TUFDRCxDQVhELE1BWUs7UUFDSEgsT0FBTyxHQUFHUCxLQUFLLENBQUNPLE9BQWhCO1FBQ0FDLE9BQU8sR0FB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QUksQ0FBQ3JLLElBQUwsR0FBWVYsTUFBWixHQUFzQjBFLElBQUksQ0FBQ2xGLEVBQUwsRUFBdEI7VUFDQXVMLElBQUksQ0FBQ3JLLElBQUwsR0FBWWdMLFVBQVosR0FBMEJoSCxJQUFJLENBQUNsRixFQUFMLEVBQTFCO1FBQ0Q7O1FBRUQ0UCxTQUFTLENBQUNwUSxNQUFWO1FBQ0F3TixLQUFLLENBQUN4TixNQUFOO1FBRUFuQixFQUFFLENBQUN5RCxHQUFILENBQU95SixJQUFQO01BQ0Q7O01BRUQsT0FBT3JHLElBQVA7SUFDRCxDQS9CRDs7SUFpQ0EvRyx1QkFBdUIsQ0FBQzZSLGFBQXhCLEdBQXdDLFVBQVN4UixLQUFULEVBQWU7TUFDckQsSUFBSW1CLE1BQU0sR0FBRSxFQUFaO01BQ0EsSUFBSXNRLGNBQWMsR0FBRzdSLGdCQUFnQixDQUFDZ04sVUFBakIsRUFBckI7TUFDQWhOLGdCQUFnQixDQUFDaU4sVUFBakIsQ0FBNEI3TSxLQUFLLENBQUMyTSxPQUFsQztNQUNBeEwsTUFBTSxDQUFDd0wsT0FBUCxHQUFpQjhFLGNBQWpCO01BQ0F0USxNQUFNLENBQUNtSCxRQUFQLEdBQWtCdEksS0FBSyxDQUFDc0ksUUFBeEI7TUFDQXRJLEtBQUssQ0FBQ3NJLFFBQU47TUFDQSxPQUFPbkgsTUFBUDtJQUNELENBUkQ7RUFVQzs7RUFFRCxPQUFPcEIsK0JBQVA7QUFDRCxDQTVsREQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGlzZS8uL3NyYy91dGlsaXRpZXMvdXItYWN0aW9uLWZ1bmN0aW9ucy1leHRlbmRlci1mYWN0b3J5LmpzPzNiNTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXh0ZW5kcyBzYmdudml6LnVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zXG52YXIgbGlicyA9IHJlcXVpcmUoJy4vbGliLXV0aWxpdGllcycpLmdldExpYnMoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIHNiZ252aXpJbnN0YW5jZSwgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMsIGVsZW1lbnRVdGlsaXRpZXMsIGN5LCB0b3BvbG9neUdyb3VwaW5nO1xuXG4gIGZ1bmN0aW9uIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zRXh0ZW5kZXIgKHBhcmFtKSB7XG5cbiAgICBzYmdudml6SW5zdGFuY2UgPSBwYXJhbS5zYmdudml6SW5zdGFuY2VVdGlsaXRpZXMuZ2V0SW5zdGFuY2UoKTtcbiAgICBjeSA9IHBhcmFtLnNiZ252aXpJbnN0YW5jZVV0aWxpdGllcy5nZXRDeSgpO1xuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zID0gc2JnbnZpekluc3RhbmNlLnVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zO1xuICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xuICAgIHRvcG9sb2d5R3JvdXBpbmcgPSBwYXJhbS5zaWZUb3BvbG9neUdyb3VwaW5nO1xuXG4gICAgZXh0ZW5kKCk7XG4gIH1cblxuICAvLyBFeHRlbmRzIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zIHdpdGggY2hpc2Ugc3BlY2lmaWMgZmVhdHVyZXNcbiAgZnVuY3Rpb24gZXh0ZW5kICgpIHtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmFwcGx5U0lGVG9wb2xvZ3lHcm91cGluZyA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICB2YXIgb2xkRWxlcywgbmV3RWxlcztcbiAgICAgIGlmICggcGFyYW0uZmlyc3RUaW1lICkge1xuICAgICAgICBvbGRFbGVzID0gY3kuZWxlbWVudHMoKTtcblxuICAgICAgICBpZiAocGFyYW0uYXBwbHkpIHtcbiAgICAgICAgICB0b3BvbG9neUdyb3VwaW5nLmFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdG9wb2xvZ3lHcm91cGluZy51bmFwcGx5KCk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdFbGVzID0gY3kuZWxlbWVudHMoKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBvbGRFbGVzID0gcGFyYW0ub2xkRWxlcztcbiAgICAgICAgbmV3RWxlcyA9IHBhcmFtLm5ld0VsZXM7XG5cbiAgICAgICAgaWYgKCBlbGVtZW50VXRpbGl0aWVzLmlzR3JhcGhUb3BvbG9neUxvY2tlZCgpICkge1xuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMudW5sb2NrR3JhcGhUb3BvbG9neSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMubG9ja0dyYXBoVG9wb2xvZ3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9sZEVsZXMucmVtb3ZlKCk7XG4gICAgICAgIG5ld0VsZXMucmVzdG9yZSgpO1xuXG4gICAgICAgIHRvcG9sb2d5R3JvdXBpbmcudG9nZ2xlQXBwbGllZEZsYWcoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IHsgb2xkRWxlczogbmV3RWxlcywgbmV3RWxlczogb2xkRWxlcyB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLy8gU2VjdGlvbiBTdGFydFxuICAgIC8vIGFkZC9yZW1vdmUgYWN0aW9uIGZ1bmN0aW9uc1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuYWRkTm9kZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmIChwYXJhbS5maXJzdFRpbWUpIHtcbiAgICAgICAgdmFyIG5ld05vZGUgPSBwYXJhbS5uZXdOb2RlO1xuICAgICAgICByZXN1bHQgPSBlbGVtZW50VXRpbGl0aWVzLmFkZE5vZGUobmV3Tm9kZS54LCBuZXdOb2RlLnksIG5ld05vZGUuY2xhc3MsIG5ld05vZGUuaWQsIG5ld05vZGUucGFyZW50LCBuZXdOb2RlLnZpc2liaWxpdHkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGVsZW1lbnRVdGlsaXRpZXMucmVzdG9yZUVsZXMocGFyYW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiByZXN1bHRcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmFkZEVkZ2UgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAocGFyYW0uZmlyc3RUaW1lKSB7XG4gICAgICAgIHZhciBuZXdFZGdlID0gcGFyYW0ubmV3RWRnZTtcbiAgICAgICAgcmVzdWx0ID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKG5ld0VkZ2Uuc291cmNlLCBuZXdFZGdlLnRhcmdldCwgbmV3RWRnZS5jbGFzcywgbmV3RWRnZS5pZCwgbmV3RWRnZS52aXNpYmlsaXR5KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBlbGVtZW50VXRpbGl0aWVzLnJlc3RvcmVFbGVzKHBhcmFtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlczogcmVzdWx0XG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5hZGRQcm9jZXNzV2l0aENvbnZlbmllbnRFZGdlcyA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKHBhcmFtLmZpcnN0VGltZSkge1xuICAgICAgICByZXN1bHQgPSBlbGVtZW50VXRpbGl0aWVzLmFkZFByb2Nlc3NXaXRoQ29udmVuaWVudEVkZ2VzKHBhcmFtLnNvdXJjZSwgcGFyYW0udGFyZ2V0LCBwYXJhbS5wcm9jZXNzVHlwZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gZWxlbWVudFV0aWxpdGllcy5yZXN0b3JlRWxlcyhwYXJhbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZXM6IHJlc3VsdFxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY3JlYXRlQ29tcG91bmRGb3JHaXZlbk5vZGVzID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICAgIGlmIChwYXJhbS5maXJzdFRpbWUpIHtcbiAgICAgICAgLy8gTm9kZXMgdG8gbWFrZSBjb21wb3VuZCwgdGhlaXIgZGVzY2VuZGFudHMgYW5kIGVkZ2VzIGNvbm5lY3RlZCB0byB0aGVtIHdpbGwgYmUgcmVtb3ZlZCBkdXJpbmcgY3JlYXRlQ29tcG91bmRGb3JHaXZlbk5vZGVzIG9wZXJhdGlvblxuICAgICAgICAvLyAoaW50ZXJuYWxseSBieSBlbGVzLm1vdmUoKSBvcGVyYXRpb24pLCBzbyBtYXJrIHRoZW0gYXMgcmVtb3ZlZCBlbGVzIGZvciB1bmRvIG9wZXJhdGlvbi5cbiAgICAgICAgdmFyIG5vZGVzVG9NYWtlQ29tcG91bmQgPSBwYXJhbS5ub2Rlc1RvTWFrZUNvbXBvdW5kO1xuICAgICAgICB2YXIgcmVtb3ZlZEVsZXMgPSBub2Rlc1RvTWFrZUNvbXBvdW5kLnVuaW9uKG5vZGVzVG9NYWtlQ29tcG91bmQuZGVzY2VuZGFudHMoKSk7XG4gICAgICAgIHJlbW92ZWRFbGVzID0gcmVtb3ZlZEVsZXMudW5pb24ocmVtb3ZlZEVsZXMuY29ubmVjdGVkRWRnZXMoKSk7XG4gICAgICAgIHJlc3VsdC5yZW1vdmVkRWxlcyA9IHJlbW92ZWRFbGVzO1xuICAgICAgICAvLyBBc3N1bWUgdGhhdCBhbGwgbm9kZXMgdG8gbWFrZSBjb21wb3VuZCBoYXZlIHRoZSBzYW1lIHBhcmVudFxuICAgICAgICB2YXIgb2xkUGFyZW50SWQgPSBub2Rlc1RvTWFrZUNvbXBvdW5kWzBdLmRhdGEoXCJwYXJlbnRcIik7XG4gICAgICAgIC8vIFRoZSBwYXJlbnQgb2YgbmV3IGNvbXBvdW5kIHdpbGwgYmUgdGhlIG9sZCBwYXJlbnQgb2YgdGhlIG5vZGVzIHRvIG1ha2UgY29tcG91bmRcbiAgICAgICAgLy8gTmV3IGVsZXMgaW5jbHVkZXMgbmV3IGNvbXBvdW5kIGFuZCB0aGUgbW92ZWQgZWxlcyBhbmQgd2lsbCBiZSB1c2VkIGluIHVuZG8gb3BlcmF0aW9uLlxuICAgICAgICByZXN1bHQubmV3RWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlQ29tcG91bmRGb3JHaXZlbk5vZGVzKG5vZGVzVG9NYWtlQ29tcG91bmQsIHBhcmFtLmNvbXBvdW5kVHlwZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0LnJlbW92ZWRFbGVzID0gcGFyYW0ubmV3RWxlcy5yZW1vdmUoKTtcbiAgICAgICAgcmVzdWx0Lm5ld0VsZXMgPSBwYXJhbS5yZW1vdmVkRWxlcy5yZXN0b3JlKCk7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMubWFpbnRhaW5Qb2ludGVyKHJlc3VsdC5uZXdFbGVzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLy8gU2VjdGlvbiBFbmRcbiAgICAvLyBhZGQvcmVtb3ZlIGFjdGlvbiBmdW5jdGlvbnNcblxuICAgIC8vIFNlY3Rpb24gU3RhcnRcbiAgICAvLyBlYXN5IGNyZWF0aW9uIGFjdGlvbiBmdW5jdGlvbnNcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNyZWF0ZVRlbXBsYXRlUmVhY3Rpb24gPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICB2YXIgZWxlcztcblxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVzID0gZWxlbWVudFV0aWxpdGllcy5jcmVhdGVUZW1wbGF0ZVJlYWN0aW9uKHBhcmFtLnRlbXBsYXRlVHlwZSwgcGFyYW0ubWFjcm9tb2xlY3VsZUxpc3QsIHBhcmFtLmNvbXBsZXhOYW1lLCBwYXJhbS5wcm9jZXNzUG9zaXRpb24sIHBhcmFtLnRpbGluZ1BhZGRpbmdWZXJ0aWNhbCwgcGFyYW0udGlsaW5nUGFkZGluZ0hvcml6b250YWwsIHBhcmFtLmVkZ2VMZW5ndGgsIHBhcmFtLmxheW91dFBhcmFtKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsZXMgPSBwYXJhbTtcbiAgICAgICAgY3kuYWRkKGVsZXMpO1xuXG4gICAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgICAgZWxlcy5zZWxlY3QoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlczogZWxlc1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY3JlYXRlQWN0aXZhdGlvblJlYWN0aW9uID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIHZhciBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICB2YXIgZWxlcztcblxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVzID0gZWxlbWVudFV0aWxpdGllcy5jcmVhdGVBY3RpdmF0aW9uUmVhY3Rpb24ocGFyYW0ucHJvdGVpbk5hbWUsIHBhcmFtLnByb2Nlc3NQb3NpdGlvbiwgcGFyYW0uZWRnZUxlbmd0aCwgcGFyYW0ucmV2ZXJzZSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbGVzID0gcGFyYW07XG4gICAgICAgIGN5LmFkZChlbGVzKTtcblxuICAgICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICAgIGVsZXMuc2VsZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZXM6IGVsZXNcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNyZWF0ZVRyYW5zbGF0aW9uID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIGxldCBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICBsZXQgZWxlcztcblxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVzID0gZWxlbWVudFV0aWxpdGllcy5jcmVhdGVUcmFuc2xhdGlvbihwYXJhbS5yZWd1bGF0b3JMYWJlbCwgcGFyYW0ub3V0cHV0TGFiZWwsIHBhcmFtLm9yaWVudGF0aW9uKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbGVzID0gcGFyYW07XG4gICAgICAgIGN5LmFkZChlbGVzKTtcblxuICAgICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICAgIGVsZXMuc2VsZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZXM6IGVsZXNcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNyZWF0ZVRyYW5zY3JpcHRpb24gPSBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgbGV0IGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIGxldCBlbGVzO1xuXG4gICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgIGVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZVRyYW5zY3JpcHRpb24ocGFyYW0ubGFiZWwsIHBhcmFtLm9yaWVudGF0aW9uKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbGVzID0gcGFyYW07XG4gICAgICAgIGN5LmFkZChlbGVzKTtcblxuICAgICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICAgIGVsZXMuc2VsZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZXM6IGVsZXNcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNyZWF0ZURlZ3JhZGF0aW9uID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIGxldCBmaXJzdFRpbWUgPSBwYXJhbS5maXJzdFRpbWU7XG4gICAgICBsZXQgZWxlcztcblxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVzID0gZWxlbWVudFV0aWxpdGllcy5jcmVhdGVEZWdyYWRhdGlvbihwYXJhbS5tYWNyb21vbGVjdWxlLCBwYXJhbS5vcmllbnRhdGlvbik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVDb21wbGV4UHJvdGVpbkZvcm1hdGlvbiA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICBsZXQgZmlyc3RUaW1lID0gcGFyYW0uZmlyc3RUaW1lO1xuICAgICAgbGV0IGVsZXM7XG5cbiAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlQ29tcGxleFByb3RlaW5Gb3JtYXRpb24ocGFyYW0ucHJvdGVpbkxhYmVscywgcGFyYW0uY29tcGxleExhYmVsLCBwYXJhbS5yZWd1bGF0b3IsIHBhcmFtLm9yaWVudGF0aW9uLCBwYXJhbS5yZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbGVzID0gcGFyYW07XG4gICAgICAgIGN5LmFkZChlbGVzKTtcblxuICAgICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICAgIGVsZXMuc2VsZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZXM6IGVsZXNcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNyZWF0ZU11bHRpbWVyaXphdGlvbiA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICBsZXQgZmlyc3RUaW1lID0gcGFyYW0uZmlyc3RUaW1lO1xuICAgICAgbGV0IGVsZXM7XG5cbiAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlTXVsdGltZXJpemF0aW9uKHBhcmFtLm1hY3JvbW9sZWN1bGUsIHBhcmFtLnJlZ3VsYXRvciwgcGFyYW0ucmVndWxhdG9yTXVsdGltZXIsIHBhcmFtLm9yaWVudGF0aW9uKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbGVzID0gcGFyYW07XG4gICAgICAgIGN5LmFkZChlbGVzKTtcblxuICAgICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICAgIGVsZXMuc2VsZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZXM6IGVsZXNcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNyZWF0ZUNvbnZlcnNpb24gPSBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgbGV0IGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIGxldCBlbGVzO1xuXG4gICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgIGVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZUNvbnZlcnNpb24ocGFyYW0ubWFjcm9tb2xlY3VsZSwgcGFyYW0ucmVndWxhdG9yLCBwYXJhbS5yZWd1bGF0b3JNdWx0aW1lciwgcGFyYW0ub3JpZW50YXRpb24sIHBhcmFtLmlucHV0SW5mb2JveExhYmVscywgcGFyYW0ub3V0cHV0SW5mb2JveExhYmVscyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVNZXRhYm9saWNSZWFjdGlvbiA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICBsZXQgZmlyc3RUaW1lID0gcGFyYW0uZmlyc3RUaW1lO1xuICAgICAgbGV0IGVsZXM7XG5cbiAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlTWV0YWJvbGljUmVhY3Rpb24ocGFyYW0uaW5wdXRzLCBwYXJhbS5vdXRwdXRzLCBwYXJhbS5yZXZlcnNpYmxlLCBwYXJhbS5yZWd1bGF0b3IsIHBhcmFtLnJlZ3VsYXRvck11bHRpbWVyLCBwYXJhbS5vcmllbnRhdGlvbik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVNZXRhYm9saWNDYXRhbHl0aWNBY3Rpdml0eSA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICB2YXIgZmlyc3RUaW1lID0gcGFyYW0uZmlyc3RUaW1lO1xuICAgICAgdmFyIGVsZXM7XG5cbiAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuY3JlYXRlTWV0YWJvbGljQ2F0YWx5dGljQWN0aXZpdHkocGFyYW0uaW5wdXROb2RlTGlzdCwgcGFyYW0ub3V0cHV0Tm9kZUxpc3QsIHBhcmFtLmNhdGFseXN0TmFtZSwgcGFyYW0uY2F0YWx5c3RUeXBlLCBwYXJhbS5wcm9jZXNzUG9zaXRpb24sIHBhcmFtLnRpbGluZ1BhZGRpbmdWZXJ0aWNhbCwgcGFyYW0udGlsaW5nUGFkZGluZ0hvcml6b250YWwsIHBhcmFtLmVkZ2VMZW5ndGgpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jcmVhdGVUcmFuc2NyaXB0aW9uUmVhY3Rpb24gPSBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgdmFyIGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIHZhciBlbGVzO1xuXG4gICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgIGVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZVRyYW5zY3JpcHRpb25SZWFjdGlvbihwYXJhbS5nZW5lTmFtZSwgcGFyYW0ubVJuYU5hbWUsIHBhcmFtLnByb2Nlc3NQb3NpdGlvbiwgcGFyYW0uZWRnZUxlbmd0aClcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbGVzID0gcGFyYW07XG4gICAgICAgIGN5LmFkZChlbGVzKTtcblxuICAgICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICAgIGVsZXMuc2VsZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZXM6IGVsZXNcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNyZWF0ZVRyYW5zbGF0aW9uUmVhY3Rpb24gPSBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgdmFyIGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIHZhciBlbGVzO1xuXG4gICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgIGVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLmNyZWF0ZVRyYW5zbGF0aW9uUmVhY3Rpb24ocGFyYW0ubVJuYU5hbWUsIHBhcmFtLnByb3RlaW5OYW1lLCBwYXJhbS5wcm9jZXNzUG9zaXRpb24sIHBhcmFtLmVkZ2VMZW5ndGgpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlcyA9IHBhcmFtO1xuICAgICAgICBjeS5hZGQoZWxlcyk7XG5cbiAgICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgICBlbGVzLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVzOiBlbGVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICAvLyBTZWN0aW9uIEVuZFxuICAgIC8vIGVhc3kgY3JlYXRpb24gYWN0aW9uIGZ1bmN0aW9uc1xuXG4gICAgLy8gU2VjdGlvbiBTdGFydFxuICAgIC8vIGdlbmVyYWwgYWN0aW9uIGZ1bmN0aW9uc1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZ2V0Tm9kZVBvc2l0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwb3NpdGlvbnMgPSB7fTtcbiAgICAgIHZhciBub2RlcyA9IGN5Lm5vZGVzKCk7XG5cbiAgICAgIG5vZGVzLmVhY2goZnVuY3Rpb24oZWxlLCBpKSB7XG4gICAgICAgIGlmKHR5cGVvZiBlbGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBlbGUgPSBpO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9zaXRpb25zW2VsZS5pZCgpXSA9IHtcbiAgICAgICAgICB4OiBlbGUucG9zaXRpb24oXCJ4XCIpLFxuICAgICAgICAgIHk6IGVsZS5wb3NpdGlvbihcInlcIilcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcG9zaXRpb25zO1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5yZXR1cm5Ub1Bvc2l0aW9ucyA9IGZ1bmN0aW9uIChwb3NpdGlvbnMpIHtcbiAgICAgIHZhciBjdXJyZW50UG9zaXRpb25zID0ge307XG4gICAgICBjeS5ub2RlcygpLnBvc2l0aW9ucyhmdW5jdGlvbiAoZWxlLCBpKSB7XG4gICAgICAgIGlmKHR5cGVvZiBlbGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBlbGUgPSBpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFBvc2l0aW9uc1tlbGUuaWQoKV0gPSB7XG4gICAgICAgICAgeDogZWxlLnBvc2l0aW9uKFwieFwiKSxcbiAgICAgICAgICB5OiBlbGUucG9zaXRpb24oXCJ5XCIpXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHBvcyA9IHBvc2l0aW9uc1tlbGUuaWQoKV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogcG9zLngsXG4gICAgICAgICAgeTogcG9zLnlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gY3VycmVudFBvc2l0aW9ucztcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMucmVzaXplTm9kZXMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHBlcmZvcm1PcGVyYXRpb246IHRydWVcbiAgICAgIH07XG5cbiAgICAgIHZhciBub2RlcyA9IHBhcmFtLm5vZGVzO1xuXG4gICAgICByZXN1bHQuc2l6ZU1hcCA9IHt9O1xuICAgICAgcmVzdWx0LnVzZUFzcGVjdFJhdGlvID0gZmFsc2U7XG4gICAgICByZXN1bHQucHJlc2VydmVSZWxhdGl2ZVBvcyA9IHBhcmFtLnByZXNlcnZlUmVsYXRpdmVQb3M7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYobm9kZS5pc1BhcmVudCgpKXtcbiAgICAgICAgICByZXN1bHQuc2l6ZU1hcFtub2RlLmlkKCldID0ge1xuICAgICAgICAgICAgdzogbm9kZS5kYXRhKFwibWluV2lkdGhcIikgfHwgMCxcbiAgICAgICAgICAgIGg6IG5vZGUuZGF0YShcIm1pbkhlaWdodFwiKSB8fCAwLFxuICAgICAgICAgICAgYmlhc0wgOiBub2RlLmRhdGEoXCJtaW5XaWR0aEJpYXNMZWZ0XCIpIHx8IDAsXG4gICAgICAgICAgICBiaWFzUiA6IG5vZGUuZGF0YShcIm1pbldpZHRoQmlhc1JpZ2h0XCIpIHx8IDAsXG4gICAgICAgICAgICBiaWFzVCA6IG5vZGUuZGF0YShcIm1pbkhlaWdodEJpYXNUb3BcIikgfHwgMCxcbiAgICAgICAgICAgIGJpYXNCIDogbm9kZS5kYXRhKFwibWluSGVpZ2h0Qmlhc0JvdHRvbVwiKSB8fCAwXG4gICAgICAgICAgIC8vIHc6IG5vZGUuY3NzKFwibWluV2lkdGhcIikgIT0gMD8gIG5vZGUuZGF0YShcIm1pbldpZHRoXCIpIDogbm9kZS5jaGlsZHJlbigpLmJvdW5kaW5nQm94KCkudyxcbiAgICAgICAgICAgIC8vaDogbm9kZS5jc3MoXCJtaW4taGVpZ2h0XCIpICE9IDA/ICBub2RlLmRhdGEoXCJtaW5IZWlnaHRcIikgOiBub2RlLmNoaWxkcmVuKCkuYm91bmRpbmdCb3goKS5oXG4gICAgICAgICAgfTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgcmVzdWx0LnNpemVNYXBbbm9kZS5pZCgpXSA9IHtcbiAgICAgICAgICAgIHc6IG5vZGUud2lkdGgoKSxcbiAgICAgICAgICAgIGg6IG5vZGUuaGVpZ2h0KClcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgfVxuXG4gICAgICByZXN1bHQubm9kZXMgPSBub2RlcztcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuXG4gICAgICAgIGlmIChwYXJhbS5wZXJmb3JtT3BlcmF0aW9uKSB7XG4gICAgICAgICAgaWYgKHBhcmFtLnNpemVNYXApIHtcbiAgICAgICAgICAgIC8qIGlmIChwYXJhbS5wcmVzZXJ2ZVJlbGF0aXZlUG9zID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRXaWR0aCA9IG5vZGUuZGF0YShcImJib3hcIikudztcbiAgICAgICAgICAgICAgdmFyIG9sZEhlaWdodCA9IG5vZGUuZGF0YShcImJib3hcIikuaDtcbiAgICAgICAgICAgIH0gKi9cblxuICAgICAgICAgICAgaWYobm9kZS5pc1BhcmVudCgpKXtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIG5vZGUuZGF0YShcIm1pbkhlaWdodFwiICwgcGFyYW0uc2l6ZU1hcFtub2RlLmlkKCldLmgpO1xuICAgICAgICAgICAgICBub2RlLmRhdGEoXCJtaW5XaWR0aFwiICwgcGFyYW0uc2l6ZU1hcFtub2RlLmlkKCldLncpO1xuICAgICAgICAgICAgICBub2RlLmRhdGEoXCJtaW5XaWR0aEJpYXNMZWZ0XCIsIHBhcmFtLnNpemVNYXBbbm9kZS5pZCgpXS5iaWFzTCk7XG4gICAgICAgICAgICAgIG5vZGUuZGF0YShcIm1pbldpZHRoQmlhc1JpZ2h0XCIsIHBhcmFtLnNpemVNYXBbbm9kZS5pZCgpXS5iaWFzUik7XG4gICAgICAgICAgICAgIG5vZGUuZGF0YShcIm1pbkhlaWdodEJpYXNUb3BcIiwgcGFyYW0uc2l6ZU1hcFtub2RlLmlkKCldLmJpYXNUKTtcbiAgICAgICAgICAgICAgbm9kZS5kYXRhKFwibWluSGVpZ2h0Qmlhc0JvdHRvbVwiLCBwYXJhbS5zaXplTWFwW25vZGUuaWQoKV0uYmlhc0IpO1xuXG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgbm9kZS5kYXRhKFwiYmJveFwiKS53ID0gcGFyYW0uc2l6ZU1hcFtub2RlLmlkKCldLnc7XG4gICAgICAgICAgICAgIG5vZGUuZGF0YShcImJib3hcIikuaCA9IHBhcmFtLnNpemVNYXBbbm9kZS5pZCgpXS5oO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICBcblxuICAgICAgICAgICAgLyogaWYgKHBhcmFtLnByZXNlcnZlUmVsYXRpdmVQb3MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgdmFyIHN0YXRlc2FuZGluZm9zID0gbm9kZS5kYXRhKCdzdGF0ZXNhbmRpbmZvcycpO1xuICAgICAgICAgICAgICB2YXIgdG9wQm90dG9tID0gc3RhdGVzYW5kaW5mb3MuZmlsdGVyKGJveCA9PiAoYm94LmFuY2hvclNpZGUgPT09IFwidG9wXCIgfHwgYm94LmFuY2hvclNpZGUgPT09IFwiYm90dG9tXCIpKTtcbiAgICAgICAgICAgICAgdmFyIHJpZ2h0TGVmdCA9IHN0YXRlc2FuZGluZm9zLmZpbHRlcihib3ggPT4gKGJveC5hbmNob3JTaWRlID09PSBcInJpZ2h0XCIgfHwgYm94LmFuY2hvclNpZGUgPT09IFwibGVmdFwiKSk7XG5cbiAgICAgICAgICAgICAgdG9wQm90dG9tLmZvckVhY2goZnVuY3Rpb24oYm94KXtcbiAgICAgICAgICAgICAgICBpZiAoYm94LmJib3gueCA8IDApIHtcbiAgICAgICAgICAgICAgICAgIGJveC5iYm94LnggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChib3guYmJveC54ID4gb2xkV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgIGJveC5iYm94LnggPSBvbGRXaWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYm94LmJib3gueCA9IG5vZGUuZGF0YShcImJib3hcIikudyAqIGJveC5iYm94LnggLyBvbGRXaWR0aDtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcmlnaHRMZWZ0LmZvckVhY2goZnVuY3Rpb24oYm94KXtcbiAgICAgICAgICAgICAgICBpZiAoYm94LmJib3gueSA8IDApIHtcbiAgICAgICAgICAgICAgICAgIGJveC5iYm94LnkgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChib3guYmJveC55ID4gb2xkSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICBib3guYmJveC55ID0gb2xkSGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBib3guYmJveC55ID0gbm9kZS5kYXRhKFwiYmJveFwiKS5oICogYm94LmJib3gueSAvIG9sZEhlaWdodDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9ICovXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudFV0aWxpdGllcy5yZXNpemVOb2RlcyhwYXJhbS5ub2RlcywgcGFyYW0ud2lkdGgsIHBhcmFtLmhlaWdodCwgcGFyYW0udXNlQXNwZWN0UmF0aW8sIHBhcmFtLnByZXNlcnZlUmVsYXRpdmVQb3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3kuc3R5bGUoKS51cGRhdGUoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNoYW5nZU5vZGVMYWJlbCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIH07XG4gICAgICB2YXIgbm9kZXMgPSBwYXJhbS5ub2RlcztcbiAgICAgIHJlc3VsdC5ub2RlcyA9IG5vZGVzO1xuICAgICAgcmVzdWx0LmxhYmVsID0ge307XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgcmVzdWx0LmxhYmVsW25vZGUuaWQoKV0gPSBub2RlLl9wcml2YXRlLmRhdGEubGFiZWw7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbS5maXJzdFRpbWUpIHtcbiAgICAgICAgbm9kZXMuZGF0YSgnbGFiZWwnLCBwYXJhbS5sYWJlbCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgbm9kZS5fcHJpdmF0ZS5kYXRhLmxhYmVsID0gcGFyYW0ubGFiZWxbbm9kZS5pZCgpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51cGRhdGVJbmZvYm94U3R5bGUgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICB9O1xuICAgICAgdmFyIHN0eWxlID0gcGFyYW0ubm9kZS5kYXRhKCdzdGF0ZXNhbmRpbmZvcycpW3BhcmFtLmluZGV4XS5zdHlsZTtcbiAgICAgIHJlc3VsdC5uZXdQcm9wcyA9ICQuZXh0ZW5kKCB7fSwgc3R5bGUgKTtcbiAgICAgIHJlc3VsdC5ub2RlID0gcGFyYW0ubm9kZTtcbiAgICAgIHJlc3VsdC5pbmRleCA9IHBhcmFtLmluZGV4O1xuXG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnVwZGF0ZUluZm9ib3hTdHlsZSggcGFyYW0ubm9kZSwgcGFyYW0uaW5kZXgsIHBhcmFtLm5ld1Byb3BzICk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnVwZGF0ZUluZm9ib3hPYmogPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICB9O1xuICAgICAgdmFyIG9iaiA9IHBhcmFtLm5vZGUuZGF0YSgnc3RhdGVzYW5kaW5mb3MnKVtwYXJhbS5pbmRleF07XG4gICAgICByZXN1bHQubmV3UHJvcHMgPSAkLmV4dGVuZCgge30sIG9iaiApO1xuICAgICAgcmVzdWx0Lm5vZGUgPSBwYXJhbS5ub2RlO1xuICAgICAgcmVzdWx0LmluZGV4ID0gcGFyYW0uaW5kZXg7XG5cbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMudXBkYXRlSW5mb2JveE9iaiggcGFyYW0ubm9kZSwgcGFyYW0uaW5kZXgsIHBhcmFtLm5ld1Byb3BzICk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmNoYW5nZURhdGEgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICB9O1xuICAgICAgdmFyIGVsZXMgPSBwYXJhbS5lbGVzO1xuICAgICAgcmVzdWx0Lm5hbWUgPSBwYXJhbS5uYW1lO1xuICAgICAgcmVzdWx0LnZhbHVlTWFwID0ge307XG4gICAgICByZXN1bHQuZWxlcyA9IGVsZXM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWxlID0gZWxlc1tpXTtcbiAgICAgICAgcmVzdWx0LnZhbHVlTWFwW2VsZS5pZCgpXSA9IGVsZS5kYXRhKHBhcmFtLm5hbWUpO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50VXRpbGl0aWVzLmNoYW5nZURhdGEocGFyYW0uZWxlcywgcGFyYW0ubmFtZSwgcGFyYW0udmFsdWVNYXApO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51cGRhdGVTZXRGaWVsZCA9IGZ1bmN0aW9uKCBwYXJhbSApIHtcbiAgICAgIHZhciB1cGRhdGVzID0gZWxlbWVudFV0aWxpdGllcy51cGRhdGVTZXRGaWVsZCggcGFyYW0uZWxlLCBwYXJhbS5maWVsZE5hbWUsIHBhcmFtLnRvRGVsZXRlLCBwYXJhbS50b0FkZCwgcGFyYW0uY2FsbGJhY2sgKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgZWxlOiBwYXJhbS5lbGUsXG4gICAgICAgIGZpZWxkTmFtZTogcGFyYW0uZmllbGROYW1lLFxuICAgICAgICBjYWxsYmFjazogcGFyYW0uY2FsbGJhY2ssXG4gICAgICAgIHRvRGVsZXRlOiB1cGRhdGVzLmFkZGVkLFxuICAgICAgICB0b0FkZDogdXBkYXRlcy5kZWxldGVkXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jaGFuZ2VDc3MgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICB9O1xuICAgICAgdmFyIGVsZXMgPSBwYXJhbS5lbGVzO1xuICAgICAgcmVzdWx0Lm5hbWUgPSBwYXJhbS5uYW1lO1xuICAgICAgcmVzdWx0LnZhbHVlTWFwID0ge307XG4gICAgICByZXN1bHQuZWxlcyA9IGVsZXM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWxlID0gZWxlc1tpXTtcbiAgICAgICAgcmVzdWx0LnZhbHVlTWFwW2VsZS5pZCgpXSA9IGVsZS5jc3MocGFyYW0ubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuY2hhbmdlQ3NzKHBhcmFtLmVsZXMsIHBhcmFtLm5hbWUsIHBhcmFtLnZhbHVlTWFwKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY2hhbmdlRm9udFByb3BlcnRpZXMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZWxlcyA9IHBhcmFtLmVsZXM7XG4gICAgICByZXN1bHQuZGF0YSA9IHt9O1xuICAgICAgcmVzdWx0LmVsZXMgPSBlbGVzO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZSA9IGVsZXNbaV07XG5cbiAgICAgICAgcmVzdWx0LmRhdGFbZWxlLmlkKCldID0ge307XG5cbiAgICAgICAgdmFyIGRhdGEgPSBwYXJhbS5maXJzdFRpbWUgPyBwYXJhbS5kYXRhIDogcGFyYW0uZGF0YVtlbGUuaWQoKV07XG5cbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBkYXRhKSB7XG4gICAgICAgICAgcmVzdWx0LmRhdGFbZWxlLmlkKCldW3Byb3BdID0gZWxlLmRhdGEocHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtLmZpcnN0VGltZSkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLmNoYW5nZUZvbnRQcm9wZXJ0aWVzKGVsZXMsIGRhdGEpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBlbGUgPSBlbGVzW2ldO1xuXG4gICAgICAgICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VGb250UHJvcGVydGllcyhlbGUsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogU2hvdyBlbGVzIGFuZCBwZXJmb3JtIGxheW91dC5cbiAgICAgKi9cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5zaG93QW5kUGVyZm9ybUxheW91dCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGVsZXMgPSBwYXJhbS5lbGVzO1xuXG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICByZXN1bHQucG9zaXRpb25zID0gdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZ2V0Tm9kZVBvc2l0aW9ucygpO1xuXG4gICAgICBpZiAocGFyYW0uZmlyc3RUaW1lKSB7XG4gICAgICAgIHJlc3VsdC5lbGVzID0gZWxlbWVudFV0aWxpdGllcy5zaG93QW5kUGVyZm9ybUxheW91dChwYXJhbS5lbGVzLCBwYXJhbS5sYXlvdXRwYXJhbSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmVsZXMgPSBjeS52aWV3VXRpbGl0aWVzKCkuc2hvdyhlbGVzKTsgLy8gU2hvdyBnaXZlbiBlbGVzXG4gICAgICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJldHVyblRvUG9zaXRpb25zKHBhcmFtLnBvc2l0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnVuZG9TaG93QW5kUGVyZm9ybUxheW91dCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGVsZXMgPSBwYXJhbS5lbGVzO1xuXG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICByZXN1bHQucG9zaXRpb25zID0gdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZ2V0Tm9kZVBvc2l0aW9ucygpO1xuICAgICAgcmVzdWx0LmVsZXMgPSBjeS52aWV3VXRpbGl0aWVzKCkuaGlkZShlbGVzKTsgLy8gSGlkZSBwcmV2aW91c2x5IHVuaGlkZGVuIGVsZXM7XG5cbiAgICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJldHVyblRvUG9zaXRpb25zKHBhcmFtLnBvc2l0aW9ucyk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogSGlkZSBlbGVzIGFuZCBwZXJmb3JtIGxheW91dC5cbiAgICAgKi9cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5oaWRlQW5kUGVyZm9ybUxheW91dCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICB2YXIgZWxlcyA9IHBhcmFtLmVsZXM7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICByZXN1bHQucG9zaXRpb25zID0gdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZ2V0Tm9kZVBvc2l0aW9ucygpO1xuXG4gICAgICAgIGlmIChwYXJhbS5maXJzdFRpbWUpIHtcbiAgICAgICAgICAgIHJlc3VsdC5lbGVzID0gZWxlbWVudFV0aWxpdGllcy5oaWRlQW5kUGVyZm9ybUxheW91dChwYXJhbS5lbGVzLCBwYXJhbS5sYXlvdXRwYXJhbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQuZWxlcyA9IGN5LnZpZXdVdGlsaXRpZXMoKS5oaWRlKGVsZXMpOyAvLyBIaWRlIGdpdmVuIGVsZXNcbiAgICAgICAgICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJldHVyblRvUG9zaXRpb25zKHBhcmFtLnBvc2l0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51bmRvSGlkZUFuZFBlcmZvcm1MYXlvdXQgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgdmFyIGVsZXMgPSBwYXJhbS5lbGVzO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgcmVzdWx0LnBvc2l0aW9ucyA9IHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmdldE5vZGVQb3NpdGlvbnMoKTtcbiAgICAgICAgcmVzdWx0LmVsZXMgPSBjeS52aWV3VXRpbGl0aWVzKCkuc2hvdyhlbGVzKTsgLy8gU2hvdyBwcmV2aW91c2x5IGhpZGRlbiBlbGVzXG5cbiAgICAgICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMucmV0dXJuVG9Qb3NpdGlvbnMocGFyYW0ucG9zaXRpb25zKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKlxuICAgICAqIERlbGV0ZSBlbGVzIGFuZCBwZXJmb3JtIGxheW91dC5cbiAgICAgKi9cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5kZWxldGVBbmRQZXJmb3JtTGF5b3V0ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgZWxlcyA9IHBhcmFtLmVsZXM7XG5cbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHJlc3VsdC5wb3NpdGlvbnMgPSB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5nZXROb2RlUG9zaXRpb25zKCk7XG5cbiAgICAgIGlmIChwYXJhbS5maXJzdFRpbWUpIHtcbiAgICAgICAgICByZXN1bHQuZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMuZGVsZXRlQW5kUGVyZm9ybUxheW91dChwYXJhbS5lbGVzLCBwYXJhbS5sYXlvdXRwYXJhbSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuZWxlcyA9IGVsZXMucmVtb3ZlKCk7XG4gICAgICAgICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMucmV0dXJuVG9Qb3NpdGlvbnMocGFyYW0ucG9zaXRpb25zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51bmRvRGVsZXRlQW5kUGVyZm9ybUxheW91dCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGVsZXMgPSBwYXJhbS5lbGVzO1xuXG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICByZXN1bHQucG9zaXRpb25zID0gdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZ2V0Tm9kZVBvc2l0aW9ucygpO1xuICAgICAgcmVzdWx0LmVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLnJlc3RvcmVFbGVzKGVsZXMpOyBcblxuICAgICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMucmV0dXJuVG9Qb3NpdGlvbnMocGFyYW0ucG9zaXRpb25zKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAgIC8vIFNlY3Rpb24gRW5kXG4gICAgLy8gZ2VuZXJhbCBhY3Rpb24gZnVuY3Rpb25zXG5cbiAgICAvLyBTZWN0aW9uIFN0YXJ0XG4gICAgLy8gc2JnbiBhY3Rpb24gZnVuY3Rpb25zXG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jaGFuZ2VTdGF0ZU9ySW5mb0JveCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIH07XG4gICAgICByZXN1bHQudHlwZSA9IHBhcmFtLnR5cGU7XG4gICAgICByZXN1bHQubm9kZXMgPSBwYXJhbS5ub2RlcztcbiAgICAgIHJlc3VsdC5pbmRleCA9IHBhcmFtLmluZGV4O1xuICAgICAgdmFyIGRhdGEgPSBwYXJhbS5kYXRhO1xuXG4gICAgICB2YXIgdGVtcERhdGEgPSBlbGVtZW50VXRpbGl0aWVzLnNhdmVVbml0cyhwYXJhbS5ub2Rlcyk7XG4gICAgICByZXN1bHQudmFsdWUgPSBlbGVtZW50VXRpbGl0aWVzLmNoYW5nZVN0YXRlT3JJbmZvQm94KHBhcmFtLm5vZGVzLCBwYXJhbS5pbmRleCwgcGFyYW0udmFsdWUsIHBhcmFtLnR5cGUpO1xuICAgICAgLyogdmFyIGxvY2F0aW9ucyA9IGVsZW1lbnRVdGlsaXRpZXMuY2hlY2tGaXQocGFyYW0ubm9kZXMpO1xuICAgICAgaWYgKGxvY2F0aW9ucyAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZml0VW5pdHMocGFyYW0ubm9kZXMsIGxvY2F0aW9ucyk7XG4gICAgICB9ICovXG4gICAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMucmVzdG9yZVVuaXRzKHBhcmFtLm5vZGVzLCBkYXRhKTtcbiAgICAgIH1cblxuICAgICAgY3kuZm9yY2VSZW5kZXIoKTtcbiAgICAgIHJlc3VsdC5kYXRhID0gdGVtcERhdGE7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5hZGRTdGF0ZU9ySW5mb0JveCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIG9iaiA9IHBhcmFtLm9iajtcbiAgICAgIHZhciBub2RlcyA9IHBhcmFtLm5vZGVzO1xuICAgICAgdmFyIGRhdGEgPSBwYXJhbS5kYXRhO1xuXG4gICAgICB2YXIgdGVtcERhdGEgPSBlbGVtZW50VXRpbGl0aWVzLnNhdmVVbml0cyhub2Rlcyk7XG4gICAgICB2YXIgbG9jYXRpb25PYmogPSBlbGVtZW50VXRpbGl0aWVzLmFkZFN0YXRlT3JJbmZvQm94KG5vZGVzLCBvYmopO1xuICAgICAvKiAgdmFyIGxvY2F0aW9ucyA9IGVsZW1lbnRVdGlsaXRpZXMuY2hlY2tGaXQobm9kZXMpO1xuICAgICAgaWYgKGxvY2F0aW9ucyAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZml0VW5pdHMobm9kZXMsIGxvY2F0aW9ucyk7XG4gICAgICB9ICovXG4gICAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMucmVzdG9yZVVuaXRzKG5vZGVzLCBkYXRhKTtcbiAgICAgIH1cblxuICAgICAgY3kuZm9yY2VSZW5kZXIoKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgbm9kZXM6IG5vZGVzLFxuICAgICAgICBsb2NhdGlvbk9iajogbG9jYXRpb25PYmosXG4gICAgICAgIG9iajogb2JqLFxuICAgICAgICBkYXRhOiB0ZW1wRGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJlbW92ZVN0YXRlT3JJbmZvQm94ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgbG9jYXRpb25PYmogPSBwYXJhbS5sb2NhdGlvbk9iajtcbiAgICAgIHZhciBub2RlcyA9IHBhcmFtLm5vZGVzO1xuICAgICAgdmFyIGRhdGEgPSBwYXJhbS5kYXRhO1xuXG4gICAgICB2YXIgdGVtcERhdGEgPSBlbGVtZW50VXRpbGl0aWVzLnNhdmVVbml0cyhub2Rlcyk7XG4gICAgICB2YXIgb2JqID0gZWxlbWVudFV0aWxpdGllcy5yZW1vdmVTdGF0ZU9ySW5mb0JveChub2RlcywgbG9jYXRpb25PYmopO1xuICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnJlc3RvcmVVbml0cyhub2RlcywgZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGN5LmZvcmNlUmVuZGVyKCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIG5vZGVzOiBub2RlcyxcbiAgICAgICAgb2JqOiBvYmosXG4gICAgICAgIGRhdGE6IHRlbXBEYXRhXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZml0VW5pdHMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBub2RlID0gcGFyYW0ubm9kZTtcbiAgICAgIHZhciBsb2NhdGlvbnMgPSBwYXJhbS5sb2NhdGlvbnM7XG4gICAgICB2YXIgb2JqID0gZWxlbWVudFV0aWxpdGllcy5maXRVbml0cyhub2RlLCBsb2NhdGlvbnMpO1xuXG4gICAgICBjeS5mb3JjZVJlbmRlcigpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICBvYmo6IG9iaixcbiAgICAgICAgbG9jYXRpb25zOiBsb2NhdGlvbnNcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5yZXN0b3JlVW5pdHMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBub2RlID0gcGFyYW0ubm9kZTtcbiAgICAgIHZhciBsb2NhdGlvbnMgPSBwYXJhbS5sb2NhdGlvbnM7XG4gICAgICB2YXIgb2JqID0gcGFyYW0ub2JqO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIG5vZGUuZGF0YSgnc3RhdGVzYW5kaW5mb3MnKS5mb3JFYWNoKCBmdW5jdGlvbiAoZWxlKSB7XG4gICAgICAgIHZhciBib3ggPSBvYmpbaW5kZXgrK107XG4gICAgICAgIGVsZS5iYm94LnggPSBib3gueDtcbiAgICAgICAgZWxlLmJib3gueSA9IGJveC55O1xuICAgICAgICB2YXIgb2xkU2lkZSA9IGVsZS5hbmNob3JTaWRlO1xuICAgICAgICBlbGUuYW5jaG9yU2lkZSA9IGJveC5hbmNob3JTaWRlO1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLm1vZGlmeVVuaXRzKG5vZGUsIGVsZSwgb2xkU2lkZSk7XG4gICAgICB9KTtcblxuICAgICAgY3kuZm9yY2VSZW5kZXIoKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgbG9jYXRpb25zOiBsb2NhdGlvbnNcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5zZXRNdWx0aW1lclN0YXR1cyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIHZhciBub2RlcyA9IHBhcmFtLm5vZGVzO1xuICAgICAgdmFyIHN0YXR1cyA9IHBhcmFtLnN0YXR1cztcbiAgICAgIHZhciByZXN1bHRTdGF0dXMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICB2YXIgaXNNdWx0aW1lciA9IG5vZGUuZGF0YSgnY2xhc3MnKS5lbmRzV2l0aCgnIG11bHRpbWVyJyk7XG5cbiAgICAgICAgcmVzdWx0U3RhdHVzW25vZGUuaWQoKV0gPSBpc011bHRpbWVyO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIGNoYW5nZSB0aGUgc3RhdHVzIG9mIGFsbCBub2RlcyBhdCBvbmNlLlxuICAgICAgLy8gSWYgbm90IGNoYW5nZSBzdGF0dXMgb2YgZWFjaCBzZXBlcmF0ZWx5IHRvIHRoZSB2YWx1ZXMgbWFwcGVkIHRvIHRoZWlyIGlkLlxuICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldE11bHRpbWVyU3RhdHVzKG5vZGVzLCBzdGF0dXMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0TXVsdGltZXJTdGF0dXMobm9kZSwgc3RhdHVzW25vZGUuaWQoKV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAvLyAgaWYgKCFmaXJzdFRpbWUgJiYgXy5pc0VxdWFsKG5vZGVzLCBjeS5ub2RlcygnOnNlbGVjdGVkJykpKSB7XG4gICAgLy8gICAgJCgnI2luc3BlY3Rvci1pcy1tdWx0aW1lcicpLmF0dHIoXCJjaGVja2VkXCIsICEkKCcjaW5zcGVjdG9yLWlzLW11bHRpbWVyJykuYXR0cihcImNoZWNrZWRcIikpO1xuICAgIC8vICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHN0YXR1czogcmVzdWx0U3RhdHVzLFxuICAgICAgICBub2Rlczogbm9kZXNcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnNldEFjdGl2ZVN0YXR1cyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIHZhciBub2RlcyA9IHBhcmFtLm5vZGVzO1xuICAgICAgdmFyIHN0YXR1cyA9IHBhcmFtLnN0YXR1cztcbiAgICAgIHZhciByZXN1bHRTdGF0dXMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICB2YXIgaXNBY3RpdmUgPSBub2RlLmRhdGEoJ2NsYXNzJykuc3RhcnRzV2l0aCgnYWN0aXZlICcpO1xuXG4gICAgICAgIHJlc3VsdFN0YXR1c1tub2RlLmlkKCldID0gaXNBY3RpdmU7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgY2hhbmdlIHRoZSBzdGF0dXMgb2YgYWxsIG5vZGVzIGF0IG9uY2UuXG4gICAgICAvLyBJZiBub3QgY2hhbmdlIHN0YXR1cyBvZiBlYWNoIHNlcGVyYXRlbHkgdG8gdGhlIHZhbHVlcyBtYXBwZWQgdG8gdGhlaXIgaWQuXG4gICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0QWN0aXZlU3RhdHVzKG5vZGVzLCBzdGF0dXMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0QWN0aXZlU3RhdHVzKG5vZGUsIHN0YXR1c1tub2RlLmlkKCldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLy8gIGlmICghZmlyc3RUaW1lICYmIF8uaXNFcXVhbChub2RlcywgY3kubm9kZXMoJzpzZWxlY3RlZCcpKSkge1xuICAgIC8vICAgICQoJyNpbnNwZWN0b3ItaXMtbXVsdGltZXInKS5hdHRyKFwiY2hlY2tlZFwiLCAhJCgnI2luc3BlY3Rvci1pcy1tdWx0aW1lcicpLmF0dHIoXCJjaGVja2VkXCIpKTtcbiAgICAvLyAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBzdGF0dXM6IHJlc3VsdFN0YXR1cyxcbiAgICAgICAgbm9kZXM6IG5vZGVzXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnNldEh5cG90aGV0aWNhbFN0YXR1cyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGZpcnN0VGltZSA9IHBhcmFtLmZpcnN0VGltZTtcbiAgICAgIHZhciBub2RlcyA9IHBhcmFtLm5vZGVzO1xuICAgICAgdmFyIHN0YXR1cyA9IHBhcmFtLnN0YXR1cztcbiAgICAgIHZhciByZXN1bHRTdGF0dXMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICB2YXIgaXNIeXBvdGhldGljYWwgPSBub2RlLmRhdGEoJ2NsYXNzJykuaW5jbHVkZXMoJ2h5cG90aGV0aWNhbCcpO1xuXG4gICAgICAgIHJlc3VsdFN0YXR1c1tub2RlLmlkKCldID0gaXNIeXBvdGhldGljYWw7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgY2hhbmdlIHRoZSBzdGF0dXMgb2YgYWxsIG5vZGVzIGF0IG9uY2UuXG4gICAgICAvLyBJZiBub3QgY2hhbmdlIHN0YXR1cyBvZiBlYWNoIHNlcGVyYXRlbHkgdG8gdGhlIHZhbHVlcyBtYXBwZWQgdG8gdGhlaXIgaWQuXG4gICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0SHlwb3RoZXRpY2FsU3RhdHVzKG5vZGVzLCBzdGF0dXMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0SHlwb3RoZXRpY2FsU3RhdHVzKG5vZGUsIHN0YXR1c1tub2RlLmlkKCldKTtcbiAgICAgICAgICAvL2VsZW1lbnRVdGlsaXRpZXMuc2V0SHlwb3RodGV0aWNhbFN0YXR1c1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAvLyAgaWYgKCFmaXJzdFRpbWUgJiYgXy5pc0VxdWFsKG5vZGVzLCBjeS5ub2RlcygnOnNlbGVjdGVkJykpKSB7XG4gICAgLy8gICAgJCgnI2luc3BlY3Rvci1pcy1tdWx0aW1lcicpLmF0dHIoXCJjaGVja2VkXCIsICEkKCcjaW5zcGVjdG9yLWlzLW11bHRpbWVyJykuYXR0cihcImNoZWNrZWRcIikpO1xuICAgIC8vICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHN0YXR1czogcmVzdWx0U3RhdHVzLFxuICAgICAgICBub2Rlczogbm9kZXNcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnNldENsb25lTWFya2VyU3RhdHVzID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgbm9kZXMgPSBwYXJhbS5ub2RlcztcbiAgICAgIHZhciBzdGF0dXMgPSBwYXJhbS5zdGF0dXM7XG4gICAgICB2YXIgZmlyc3RUaW1lID0gcGFyYW0uZmlyc3RUaW1lO1xuICAgICAgdmFyIHJlc3VsdFN0YXR1cyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHJlc3VsdFN0YXR1c1tub2RlLmlkKCldID0gbm9kZS5kYXRhKCdjbG9uZW1hcmtlcicpO1xuICAgICAgICB2YXIgY3VycmVudFN0YXR1cyA9IGZpcnN0VGltZSA/IHN0YXR1cyA6IHN0YXR1c1tub2RlLmlkKCldO1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzLnNldENsb25lTWFya2VyU3RhdHVzKG5vZGUsIGN1cnJlbnRTdGF0dXMpO1xuICAgICAgfVxuXG4gICAgLy8gIGlmICghZmlyc3RUaW1lICYmIF8uaXNFcXVhbChub2RlcywgY3kubm9kZXMoJzpzZWxlY3RlZCcpKSkge1xuICAgIC8vICAgICQoJyNpbnNwZWN0b3ItaXMtY2xvbmUtbWFya2VyJykuYXR0cihcImNoZWNrZWRcIiwgISQoJyNpbnNwZWN0b3ItaXMtY2xvbmUtbWFya2VyJykuYXR0cihcImNoZWNrZWRcIikpO1xuICAgIC8vICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHN0YXR1czogcmVzdWx0U3RhdHVzLFxuICAgICAgICBub2Rlczogbm9kZXNcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8vIHBhcmFtOiB7Y2xhc3M6IHNiZ25jbGFzcywgbmFtZTogcHJvcGVydHlOYW1lLCB2YWx1ZTogdmFsdWV9XG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuc2V0RGVmYXVsdFByb3BlcnR5ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgc2JnbmNsYXNzID0gcGFyYW0uY2xhc3M7XG4gICAgICB2YXIgbmFtZSA9IHBhcmFtLm5hbWU7XG4gICAgICB2YXIgdmFsdWUgPSBwYXJhbS52YWx1ZTtcbiAgICAgIHZhciBjbGFzc0RlZmF1bHRzID0gZWxlbWVudFV0aWxpdGllcy5nZXREZWZhdWx0UHJvcGVydGllcyhzYmduY2xhc3MpO1xuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgY2xhc3M6IHNiZ25jbGFzcyxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgdmFsdWU6IGNsYXNzRGVmYXVsdHMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBjbGFzc0RlZmF1bHRzW25hbWVdIDogdW5kZWZpbmVkXG4gICAgICB9O1xuXG4gICAgICB2YXIgcHJvcE1hcCA9IHt9O1xuICAgICAgcHJvcE1hcFsgbmFtZSBdID0gdmFsdWU7XG5cbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0RGVmYXVsdFByb3BlcnRpZXMoIHNiZ25jbGFzcywgcHJvcE1hcCApO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5hZGRCYWNrZ3JvdW5kSW1hZ2UgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBiZ09iaiA9IHBhcmFtLmJnT2JqO1xuICAgICAgdmFyIG5vZGVzID0gcGFyYW0ubm9kZXM7XG4gICAgICB2YXIgdXBkYXRlSW5mbyA9IHBhcmFtLnVwZGF0ZUluZm87XG4gICAgICB2YXIgcHJvbXB0SW52YWxpZEltYWdlID0gcGFyYW0ucHJvbXB0SW52YWxpZEltYWdlO1xuICAgICAgdmFyIHZhbGlkYXRlVVJMID0gcGFyYW0udmFsaWRhdGVVUkw7XG5cbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuYWRkQmFja2dyb3VuZEltYWdlKG5vZGVzLCBiZ09iaiwgdXBkYXRlSW5mbywgcHJvbXB0SW52YWxpZEltYWdlLCB2YWxpZGF0ZVVSTCk7XG5cbiAgICAgIGN5LmZvcmNlUmVuZGVyKCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIG5vZGVzOiBub2RlcyxcbiAgICAgICAgYmdPYmo6IGJnT2JqLFxuICAgICAgICB1cGRhdGVJbmZvOiB1cGRhdGVJbmZvLFxuICAgICAgICBwcm9tcHRJbnZhbGlkSW1hZ2U6IHByb21wdEludmFsaWRJbWFnZSxcbiAgICAgICAgdmFsaWRhdGVVUkw6IHZhbGlkYXRlVVJMXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMucmVtb3ZlQmFja2dyb3VuZEltYWdlID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgYmdPYmogPSBwYXJhbS5iZ09iajtcbiAgICAgIHZhciBub2RlcyA9IHBhcmFtLm5vZGVzO1xuXG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnJlbW92ZUJhY2tncm91bmRJbWFnZShub2RlcywgYmdPYmopO1xuXG4gICAgICBjeS5mb3JjZVJlbmRlcigpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBub2Rlczogbm9kZXMsXG4gICAgICAgIGJnT2JqOiBiZ09ialxuICAgICAgfTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnVwZGF0ZUJhY2tncm91bmRJbWFnZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGJnT2JqID0gcGFyYW0uYmdPYmo7XG4gICAgICB2YXIgbm9kZXMgPSBwYXJhbS5ub2RlcztcblxuICAgICAgdmFyIG9sZEJnT2JqID0gZWxlbWVudFV0aWxpdGllcy51cGRhdGVCYWNrZ3JvdW5kSW1hZ2Uobm9kZXMsIGJnT2JqKTtcblxuICAgICAgY3kuZm9yY2VSZW5kZXIoKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgbm9kZXM6IG5vZGVzLFxuICAgICAgICBiZ09iajogb2xkQmdPYmpcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jaGFuZ2VCYWNrZ3JvdW5kSW1hZ2UgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBvbGRJbWcgPSBwYXJhbS5vbGRJbWc7XG4gICAgICB2YXIgbmV3SW1nID0gcGFyYW0ubmV3SW1nO1xuICAgICAgdmFyIG5vZGVzID0gcGFyYW0ubm9kZXM7XG4gICAgICB2YXIgZmlyc3RUaW1lID0gcGFyYW0uZmlyc3RUaW1lO1xuICAgICAgdmFyIHVwZGF0ZUluZm8gPSBwYXJhbS51cGRhdGVJbmZvO1xuICAgICAgdmFyIHByb21wdEludmFsaWRJbWFnZSA9IHBhcmFtLnByb21wdEludmFsaWRJbWFnZTtcbiAgICAgIHZhciB2YWxpZGF0ZVVSTD0gcGFyYW0udmFsaWRhdGVVUkw7XG5cbiAgICAgIHZhciByZXN1bHQgPSBlbGVtZW50VXRpbGl0aWVzLmNoYW5nZUJhY2tncm91bmRJbWFnZShub2Rlcywgb2xkSW1nLCBuZXdJbWcsIGZpcnN0VGltZSwgdXBkYXRlSW5mbywgcHJvbXB0SW52YWxpZEltYWdlLCB2YWxpZGF0ZVVSTCk7XG5cbiAgICAgIGN5LmZvcmNlUmVuZGVyKCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8vIFNlY3Rpb24gRW5kXG4gICAgLy8gc2JnbiBhY3Rpb24gZnVuY3Rpb25zXG4gICAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY29udmVydEludG9SZXZlcnNpYmxlUmVhY3Rpb24gPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIGxldCBjb2xsZWN0aW9uID0gY3kuY29sbGVjdGlvbigpO1xuICAgICAgbGV0IG1hcFR5cGUgPSBlbGVtZW50VXRpbGl0aWVzLmdldE1hcFR5cGUoKTtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0TWFwVHlwZShwYXJhbS5tYXBUeXBlKTtcbiAgICAgICQoJyNtYXAtdHlwZScpLnZhbChwYXJhbS5tYXBUeXBlKTtcblxuICAgICAgcGFyYW0uY29sbGVjdGlvbi5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgICAgdmFyIHNvdXJjZU5vZGUgPSBlZGdlLl9wcml2YXRlLmRhdGEuc291cmNlO1xuICAgICAgICB2YXIgdGFyZ2V0Tm9kZSA9IGVkZ2UuX3ByaXZhdGUuZGF0YS50YXJnZXQ7XG5cbiAgICAgICAgZWRnZS5tb3ZlKHtzb3VyY2U6IHRhcmdldE5vZGUsIHRhcmdldDogc291cmNlTm9kZX0pO1xuXG4gICAgICAgIGxldCBjb252ZXJ0ZWRFZGdlID0gY3kuZ2V0RWxlbWVudEJ5SWQoZWRnZS5pZCgpKTtcblxuICAgICAgICBpZihjb252ZXJ0ZWRFZGdlLmRhdGEoXCJjeWVkZ2ViZW5kZWRpdGluZ0Rpc3RhbmNlc1wiKSl7XG4gICAgICAgICAgbGV0IGRpc3RhbmNlID0gY29udmVydGVkRWRnZS5kYXRhKFwiY3llZGdlYmVuZGVkaXRpbmdEaXN0YW5jZXNcIik7XG4gICAgICAgICAgZGlzdGFuY2UgPSBkaXN0YW5jZS5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xKmVsZW1lbnQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29udmVydGVkRWRnZS5kYXRhKFwiY3llZGdlYmVuZGVkaXRpbmdEaXN0YW5jZXNcIiwgZGlzdGFuY2UucmV2ZXJzZSgpKTtcblxuICAgICAgICAgIGxldCB3ZWlnaHQgPSBjb252ZXJ0ZWRFZGdlLmRhdGEoXCJjeWVkZ2ViZW5kZWRpdGluZ1dlaWdodHNcIik7XG4gICAgICAgICAgd2VpZ2h0ID0gd2VpZ2h0Lm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gMS1lbGVtZW50O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnZlcnRlZEVkZ2UuZGF0YShcImN5ZWRnZWJlbmRlZGl0aW5nV2VpZ2h0c1wiLCB3ZWlnaHQucmV2ZXJzZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGNvbnZlcnRlZEVkZ2UuZGF0YShcImN5ZWRnZWNvbnRyb2xlZGl0aW5nRGlzdGFuY2VzXCIpKXtcbiAgICAgICAgICBsZXQgZGlzdGFuY2UgPSBjb252ZXJ0ZWRFZGdlLmRhdGEoXCJjeWVkZ2Vjb250cm9sZWRpdGluZ0Rpc3RhbmNlc1wiKTtcbiAgICAgICAgICBkaXN0YW5jZSA9IGRpc3RhbmNlLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gLTEqZWxlbWVudDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb252ZXJ0ZWRFZGdlLmRhdGEoXCJjeWVkZ2Vjb250cm9sZWRpdGluZ0Rpc3RhbmNlc1wiLCBkaXN0YW5jZS5yZXZlcnNlKCkpO1xuXG4gICAgICAgICAgbGV0IHdlaWdodCA9IGNvbnZlcnRlZEVkZ2UuZGF0YShcImN5ZWRnZWNvbnRyb2xlZGl0aW5nV2VpZ3Roc1wiKTtcbiAgICAgICAgICB3ZWlnaHQgPSB3ZWlnaHQubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAxLWVsZW1lbnQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29udmVydGVkRWRnZS5kYXRhKFwiY3llZGdlY29udHJvbGVkaXRpbmdXZWlndGhzXCIsIHdlaWdodC5yZXZlcnNlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnZlcnRlZEVkZ2UuX3ByaXZhdGUuZGF0YS5jbGFzcyA9PT0gXCJjb25zdW1wdGlvblwiKSB7XG4gICAgICAgICAgY29udmVydGVkRWRnZS5fcHJpdmF0ZS5kYXRhLmNsYXNzID0gXCJwcm9kdWN0aW9uXCI7XG4gICAgICAgICAgY29udmVydGVkRWRnZS5fcHJpdmF0ZS5kYXRhLnBvcnRzb3VyY2UgPSB0YXJnZXROb2RlICsgXCIuMVwiO1xuICAgICAgICAgIGNvbnZlcnRlZEVkZ2UuX3ByaXZhdGUuZGF0YS5wb3J0dGFyZ2V0ID0gc291cmNlTm9kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb252ZXJ0ZWRFZGdlLl9wcml2YXRlLmRhdGEuY2xhc3MgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgY29udmVydGVkRWRnZS5fcHJpdmF0ZS5kYXRhLmNsYXNzID0gXCJjb25zdW1wdGlvblwiO1xuICAgICAgICAgIGNvbnZlcnRlZEVkZ2UuX3ByaXZhdGUuZGF0YS5wb3J0c291cmNlID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgICBjb252ZXJ0ZWRFZGdlLl9wcml2YXRlLmRhdGEucG9ydHRhcmdldCA9IHNvdXJjZU5vZGUgKyBcIi4xXCI7XG4gICAgICAgIH1cblxuICAgICAgICBjb2xsZWN0aW9uID0gY29sbGVjdGlvbi5hZGQoY29udmVydGVkRWRnZSk7XG4gICAgICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbixcbiAgICAgICAgbWFwVHlwZTogbWFwVHlwZSxcbiAgICAgICAgcHJvY2Vzc0lkOiBwYXJhbS5wcm9jZXNzSWRcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLm1vdmVFZGdlID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgfTtcbiAgICAgIHZhciBlZGdlID0gcGFyYW0uZWRnZTtcbiAgICAgIHJlc3VsdC5uYW1lID0gcGFyYW0ubmFtZTsgICAgICBcbiAgICAgXG5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBlZGdlLnNvdXJjZSgpLmlkKCk7XG4gICAgICByZXN1bHQudGFyZ2V0ID0gZWRnZS50YXJnZXQoKS5pZCgpOyAgICAgIFxuICAgICAgcmVzdWx0LnBvcnRzb3VyY2UgID1lZGdlLmRhdGEoXCJwb3J0c291cmNlXCIpO1xuICAgICAgcmVzdWx0LnBvcnR0YXJnZXQgPSBlZGdlLmRhdGEoXCJwb3J0dGFyZ2V0XCIpO1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VEYXRhKGVkZ2UsICdzb3VyY2UnLCBwYXJhbS5zb3VyY2UpO1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VEYXRhKGVkZ2UsICd0YXJnZXQnLCBwYXJhbS50YXJnZXQpO1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VEYXRhKGVkZ2UsICdwb3J0c291cmNlJywgcGFyYW0ucG9ydHNvdXJjZSk7XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLmNoYW5nZURhdGEoZWRnZSwgJ3BvcnR0YXJnZXQnLCBwYXJhbS5wb3J0dGFyZ2V0KTsgXG4gICAgICBlZGdlID0gZWRnZS5tb3ZlKHtcbiAgICAgICAgdGFyZ2V0OiBwYXJhbS50YXJnZXQsXG4gICAgICAgIHNvdXJjZSA6IHBhcmFtLnNvdXJjZVxuICAgIFxuICAgICB9KTtcblxuICAgICByZXN1bHQuZWRnZSA9IGVkZ2U7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5maXhFcnJvciA9IGZ1bmN0aW9uKHBhcmFtKXtcbiAgICAgIFxuICAgICAgdmFyIGVycm9yQ29kZSA9IHBhcmFtLmVycm9yQ29kZTtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHJlc3VsdC5lcnJvckNvZGUgPSBlcnJvckNvZGU7XG4gICAgICBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTAxXCIgfHwgZXJyb3JDb2RlID09ICdwZDEwMTAyJyl7XG5cbiAgICAgICAgcmVzdWx0LmVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLnJldmVyc2VFZGdlKHBhcmFtLmVkZ2UpO1xuXG4gICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDEwM1wiIHx8IGVycm9yQ29kZSA9PSAncGQxMDEwNycpe1xuXG4gICAgICAgXG4gICAgICAgIFxuICAgICAgICBwYXJhbS5uZXdOb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5ld05vZGUpe1xuICAgICAgICAgZWxlbWVudFV0aWxpdGllcy5hZGROb2RlKG5ld05vZGUueCwgbmV3Tm9kZS55LCBuZXdOb2RlLmNsYXNzLCBuZXdOb2RlLmlkLCB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBhcmFtLm5ld0VkZ2VzLmZvckVhY2goZnVuY3Rpb24obmV3RWRnZSl7ICAgICAgICAgIFxuICAgICAgICAgIGVsZW1lbnRVdGlsaXRpZXMuYWRkRWRnZShuZXdFZGdlLnNvdXJjZSxuZXdFZGdlLnRhcmdldCxuZXdFZGdlLmNsYXNzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGFyYW0ub2xkRWRnZXMuZm9yRWFjaChmdW5jdGlvbihvbGRFZGdlKXtcbiAgICAgICAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gICAgICAgICAgLy9yZXR1cm4gXG4gICAgICAgICAgb2xkRWRnZS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGFyYW0ubm9kZS5yZW1vdmUoKTtcblxuICAgICAgICByZXR1cm4gcGFyYW07XG5cbiAgICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMDVcIiB8fCBlcnJvckNvZGUgPT0gJ3BkMTAxMDYnKXtcbiAgIFxuICAgICAgICByZXN1bHQuZWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMucmV2ZXJzZUVkZ2UocGFyYW0uZWRnZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTQwXCIpe1xuICAgICAgICBwYXJhbS5ub2RlLnJlbW92ZSgpO1xuICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTA0XCIpIHtcbiAgICAgICAgXG4gICAgICAgIHBhcmFtLmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZWRnZSl7XG4gICAgICAgICAgZWRnZS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmFtLm5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSl7XG4gICAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJhbTtcbiAgICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMDhcIil7XG4gICAgICAgIHBhcmFtLmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZWRnZSl7XG4gICAgICAgICAgZWRnZS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmFtLm5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSl7XG4gICAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJhbTtcbiAgICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMTFcIil7XG4gICAgICAgIHBhcmFtLmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZWRnZSl7XG4gICAgICAgICAgZWRnZS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJhbTtcbiAgICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMjZcIil7XG4gICAgICAgIHBhcmFtLmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZWRnZSl7XG4gICAgICAgICAgZWRnZS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmFtLm5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSl7XG4gICAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJhbTtcbiAgICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMDlcIiB8fCBlcnJvckNvZGUgPT0gXCJwZDEwMTI0XCIpIHtcbiAgICAgICAgXG4gICAgICAgIHJlc3VsdC5uZXdTb3VyY2UgPSBwYXJhbS5lZGdlLmRhdGEoKS5zb3VyY2U7XG4gICAgICAgIHJlc3VsdC5uZXdUYXJnZXQgPSBwYXJhbS5lZGdlLmRhdGEoKS50YXJnZXQ7XG4gICAgICAgIHJlc3VsdC5wb3J0c291cmNlID0gcGFyYW0uZWRnZS5kYXRhKCkucG9ydHNvdXJjZTtcbiAgICAgICAgdmFyIGNsb25lZEVkZ2UgPSBwYXJhbS5lZGdlLmNsb25lKCk7XG4gICAgICAgXG4gICAgICAgIHZhciBlZGdlUGFyYW1zID0ge2NsYXNzIDogY2xvbmVkRWRnZS5kYXRhKCkuY2xhc3MsIGxhbmd1YWdlIDpjbG9uZWRFZGdlLmRhdGEoKS5sYW5ndWFnZX07XG4gICAgICAgIGNsb25lZEVkZ2UuZGF0YSgpLnNvdXJjZSA9IHBhcmFtLm5ld1NvdXJjZTtcbiAgICAgICAgY2xvbmVkRWRnZS5kYXRhKCkudGFyZ2V0ID0gcGFyYW0ubmV3VGFyZ2V0O1xuICAgICAgICBjeS5yZW1vdmUocGFyYW0uZWRnZSk7XG4gICAgICAgIHJlc3VsdC5lZGdlID0gZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKHBhcmFtLm5ld1NvdXJjZSxwYXJhbS5uZXdUYXJnZXQsZWRnZVBhcmFtcywgY2xvbmVkRWRnZS5kYXRhKCkuaWQpOyAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTEyXCIpIHsgICAgXG4gICAgICAgIFxuICAgICAgICBwYXJhbS5jYWxsYmFjayA9IGVsZW1lbnRVdGlsaXRpZXMubWFpbnRhaW5Qb2ludGVyOyAgXG4gICAgICAgIC8vIElmIHRoaXMgaXMgZmlyc3QgdGltZSB3ZSBzaG91bGQgbW92ZSB0aGUgbm9kZSB0byBpdHMgbmV3IHBhcmVudCBhbmQgcmVsb2NhdGUgaXQgYnkgZ2l2ZW4gcG9zRGlmZiBwYXJhbXNcbiAgICAgICAgLy8gZWxzZSB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBtb3ZlZCBlbGVzIGFuZCByZXN0b3JlIHRoZSBlbGVzIHRvIHJlc3RvcmVcbiAgICAgICAgaWYgKHBhcmFtLmZpcnN0VGltZSkge1xuICAgICAgICAgIHZhciBuZXdQYXJlbnRJZCA9IHBhcmFtLnBhcmVudERhdGEgPT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtLnBhcmVudERhdGE7XG4gICAgICAgICAgLy8gVGhlc2UgZWxlcyBpbmNsdWRlcyB0aGUgbm9kZXMgYW5kIHRoZWlyIGNvbm5lY3RlZCBlZGdlcyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIG5vZGVzLm1vdmUoKS5cbiAgICAgICAgICAvLyBUaGV5IHNob3VsZCBiZSByZXN0b3JlZCBpbiB1bmRvXG4gICAgICAgICAgdmFyIHdpdGhEZXNjZW5kYW50ID0gcGFyYW0ubm9kZXMudW5pb24ocGFyYW0ubm9kZXMuZGVzY2VuZGFudHMoKSk7XG4gICAgICAgICAgcmVzdWx0LmVsZXNUb1Jlc3RvcmUgPSB3aXRoRGVzY2VuZGFudC51bmlvbih3aXRoRGVzY2VuZGFudC5jb25uZWN0ZWRFZGdlcygpKTtcbiAgICAgICAgICAvLyBUaGVzZSBhcmUgdGhlIGVsZXMgY3JlYXRlZCBieSBub2Rlcy5tb3ZlKCksIHRoZXkgc2hvdWxkIGJlIHJlbW92ZWQgaW4gdW5kby5cbiAgICAgICAgICByZXN1bHQubW92ZWRFbGVzID0gcGFyYW0ubm9kZXMubW92ZSh7XCJwYXJlbnRcIjogbmV3UGFyZW50SWR9KTtcblxuICAgICAgICAgIHZhciBwb3NEaWZmID0ge1xuICAgICAgICAgICAgeDogcGFyYW0ucG9zRGlmZlgsXG4gICAgICAgICAgICB5OiBwYXJhbS5wb3NEaWZmWVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBlbGVtZW50VXRpbGl0aWVzLm1vdmVOb2Rlcyhwb3NEaWZmLCByZXN1bHQubW92ZWRFbGVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuZWxlc1RvUmVzdG9yZSA9IHBhcmFtLm1vdmVkRWxlcy5yZW1vdmUoKTtcbiAgICAgICAgICByZXN1bHQubW92ZWRFbGVzID0gcGFyYW0uZWxlc1RvUmVzdG9yZS5yZXN0b3JlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW0uY2FsbGJhY2spIHtcbiAgICAgICAgICByZXN1bHQuY2FsbGJhY2sgPSBwYXJhbS5jYWxsYmFjazsgLy8ga2VlcCB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgc28gaXQgY2FuIGJlIHJldXNlZCBhZnRlciB1bmRvL3JlZG9cbiAgICAgICAgICBwYXJhbS5jYWxsYmFjayhyZXN1bHQubW92ZWRFbGVzKTsgLy8gYXBwbHkgdGhlIGNhbGxiYWNrIG9uIG5ld2x5IGNyZWF0ZWQgZWxlbWVudHNcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICBcbiAgICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMjVcIikge1xuXG4gICAgICAgcmVzdWx0LmVkZ2UgPSBwYXJhbS5lZGdlLnJlbW92ZSgpOyAgICAgICBcbiAgICAgICByZXN1bHQubmV3RWRnZSA9e307XG4gICAgICAgdmFyIGVkZ2VjbGFzcyA9IHBhcmFtLm5ld0VkZ2UuZWRnZVBhcmFtcy5jbGFzcyA/IHBhcmFtLm5ld0VkZ2UuZWRnZVBhcmFtcy5jbGFzcyA6IHBhcmFtLm5ld0VkZ2UuZWRnZVBhcmFtcztcbiAgICAgICB2YXIgdmFsaWRhdGlvbiA9IGVsZW1lbnRVdGlsaXRpZXMudmFsaWRhdGVBcnJvd0VuZHMoZWRnZWNsYXNzLCBjeS5nZXRFbGVtZW50QnlJZChwYXJhbS5uZXdFZGdlLnNvdXJjZSksIGN5LmdldEVsZW1lbnRCeUlkKHBhcmFtLm5ld0VkZ2UudGFyZ2V0KSk7XG5cbiAgICAgICBpZiAodmFsaWRhdGlvbiA9PT0gJ3JldmVyc2UnKSB7XG4gICAgICAgIHZhciB0ZW1wID0gcGFyYW0ubmV3RWRnZS5zb3VyY2U7XG4gICAgICAgIHBhcmFtLm5ld0VkZ2Uuc291cmNlID0gcGFyYW0ubmV3RWRnZS50YXJnZXQ7XG4gICAgICAgIHBhcmFtLm5ld0VkZ2UudGFyZ2V0ID0gdGVtcDtcbiAgICAgIH1cbiAgICAgICByZXN1bHQubmV3RWRnZS5pZCA9ZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKHBhcmFtLm5ld0VkZ2Uuc291cmNlLHBhcmFtLm5ld0VkZ2UudGFyZ2V0LHBhcmFtLm5ld0VkZ2UuZWRnZVBhcmFtcykuaWQoKTtcbiAgICAgICByZXN1bHQubmV3RWRnZS5zb3VyY2UgPSBwYXJhbS5uZXdFZGdlLnNvdXJjZTtcbiAgICAgICByZXN1bHQubmV3RWRnZS50YXJnZXQgPSBwYXJhbS5uZXdFZGdlLnRhcmdldDtcbiAgICAgICByZXN1bHQubmV3RWRnZS5lZGdlUGFyYW1zID0gcGFyYW0ubmV3RWRnZS5lZGdlUGFyYW1zO1xuICAgICAgIFxuICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgXG4gICAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTQyXCIpIHtcbiAgICAgICAgcmVzdWx0LmVkZ2UgPSBwYXJhbS5lZGdlLnJlbW92ZSgpOyAgICAgICBcbiAgICAgICAgcmVzdWx0Lm5ld0VkZ2UgPXt9O1xuICAgICAgICB2YXIgZWRnZWNsYXNzID0gcGFyYW0ubmV3RWRnZS5lZGdlUGFyYW1zLmNsYXNzID8gcGFyYW0ubmV3RWRnZS5lZGdlUGFyYW1zLmNsYXNzIDogcGFyYW0ubmV3RWRnZS5lZGdlUGFyYW1zO1xuICAgICAgICB2YXIgdmFsaWRhdGlvbiA9IGVsZW1lbnRVdGlsaXRpZXMudmFsaWRhdGVBcnJvd0VuZHMoZWRnZWNsYXNzLCBjeS5nZXRFbGVtZW50QnlJZChwYXJhbS5uZXdFZGdlLnNvdXJjZSksIGN5LmdldEVsZW1lbnRCeUlkKHBhcmFtLm5ld0VkZ2UudGFyZ2V0KSk7XG5cbiAgICAgICAgaWYgKHZhbGlkYXRpb24gPT09ICdyZXZlcnNlJykge1xuICAgICAgICAgdmFyIHRlbXAgPSBwYXJhbS5uZXdFZGdlLnNvdXJjZTtcbiAgICAgICAgIHBhcmFtLm5ld0VkZ2Uuc291cmNlID0gcGFyYW0ubmV3RWRnZS50YXJnZXQ7XG4gICAgICAgICBwYXJhbS5uZXdFZGdlLnRhcmdldCA9IHRlbXA7XG4gICAgICAgfVxuICAgICAgICByZXN1bHQubmV3RWRnZS5pZCA9ZWxlbWVudFV0aWxpdGllcy5hZGRFZGdlKHBhcmFtLm5ld0VkZ2Uuc291cmNlLHBhcmFtLm5ld0VkZ2UudGFyZ2V0LHBhcmFtLm5ld0VkZ2UuZWRnZVBhcmFtcykuaWQoKTtcbiAgICAgICAgcmVzdWx0Lm5ld0VkZ2Uuc291cmNlID0gcGFyYW0ubmV3RWRnZS5zb3VyY2U7XG4gICAgICAgIHJlc3VsdC5uZXdFZGdlLnRhcmdldCA9IHBhcmFtLm5ld0VkZ2UudGFyZ2V0O1xuICAgICAgICByZXN1bHQubmV3RWRnZS5lZGdlUGFyYW1zID0gcGFyYW0ubmV3RWRnZS5lZGdlUGFyYW1zO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1lbHNlIHtcblxuICAgICAgICByZXN1bHQubmV3U291cmNlID0gcGFyYW0uZWRnZS5zb3VyY2UoKS5pZCgpO1xuICAgICAgICByZXN1bHQubmV3VGFyZ2V0ID0gcGFyYW0uZWRnZS50YXJnZXQoKS5pZCgpO1xuICAgICAgICByZXN1bHQucG9ydHRhcmdldCA9IHBhcmFtLmVkZ2UuZGF0YShcInBvcnR0YXJnZXRcIik7XG4gICAgICAgIHJlc3VsdC5lZGdlID0gcGFyYW0uZWRnZS5tb3ZlKHtcbiAgICAgICAgICB0YXJnZXQ6IHBhcmFtLm5ld1RhcmdldCxcbiAgICAgICAgICBzb3VyY2UgOiBwYXJhbS5uZXdTb3VyY2UgICAgICBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VEYXRhKHJlc3VsdC5lZGdlLCAncG9ydHRhcmdldCcsIHBhcmFtLnBvcnR0YXJnZXQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBcbiAgICAgIH1cbiAgICAgIFxuICB9XG4gIFxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51bmZpeEVycm9yID0gZnVuY3Rpb24ocGFyYW0pe1xuICAgIHZhciBlcnJvckNvZGUgPSBwYXJhbS5lcnJvckNvZGU7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHJlc3VsdC5lcnJvckNvZGUgPSBlcnJvckNvZGU7XG4gICAgaWYoZXJyb3JDb2RlID09IFwicGQxMDEwMVwiIHx8IGVycm9yQ29kZSA9PSAncGQxMDEwMicpe1xuICAgICBcbiAgICAgICAgcmVzdWx0LmVkZ2UgPSBlbGVtZW50VXRpbGl0aWVzLnJldmVyc2VFZGdlKHBhcmFtLmVkZ2UpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTAzXCIgfHwgZXJyb3JDb2RlID09ICdwZDEwMTA3Jyl7XG5cbiAgICAgIHBhcmFtLm5ld05vZGVzLmZvckVhY2goZnVuY3Rpb24obmV3Tm9kZSl7ICAgIFxuICAgICAgICBjeS5yZW1vdmUoY3kuJCgnIycrbmV3Tm9kZS5pZCkpICAgICAgXG4gICAgICAgIFxuICAgICAgfSk7XG5cbiAgICAgIHBhcmFtLm5vZGUucmVzdG9yZSgpO1xuXG4gICAgICBwYXJhbS5vbGRFZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKG9sZEVkZ2UpeyAgXG4gICAgICAgIG9sZEVkZ2UucmVzdG9yZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGN5LmFuaW1hdGUoe1xuICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICBlYXNpbmc6ICdlYXNlJyxcbiAgICAgICAgZml0IDp7ZWxlczp7fSxwYWRkaW5nOjIwfSwgXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBwYXJhbTtcblxuICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxMDVcIiB8fCBlcnJvckNvZGUgPT0gJ3BkMTAxMDYnKXsgIFxuXG4gICAgICByZXN1bHQuZWRnZSA9IGVsZW1lbnRVdGlsaXRpZXMucmV2ZXJzZUVkZ2UocGFyYW0uZWRnZSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDE0MFwiKXtcbiAgICAgIHBhcmFtLm5vZGUucmVzdG9yZSgpO1xuICAgICAgY3kuYW5pbWF0ZSh7XG4gICAgICAgIGR1cmF0aW9uOiAxMDAsXG4gICAgICAgIGVhc2luZzogJ2Vhc2UnLFxuICAgICAgICBmaXQgOntlbGVzOnt9LHBhZGRpbmc6MjB9LCBcbiAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwYXJhbTtcbiAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTA0XCIpIHtcbiAgICAgIFxuICAgICAgcGFyYW0ubm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKXtcbiAgICAgICAgbm9kZS5yZXN0b3JlKCk7XG4gICAgICB9KTtcbiAgICAgIHBhcmFtLmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZWRnZSl7XG4gICAgICAgIGVkZ2UucmVzdG9yZSgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDEwOFwiKXtcbiAgICAgIFxuICAgICAgcGFyYW0ubm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKXtcbiAgICAgICAgbm9kZS5yZXN0b3JlKCk7XG4gICAgICB9KTtcbiAgICAgIHBhcmFtLmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZWRnZSl7XG4gICAgICAgIGVkZ2UucmVzdG9yZSgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDExMVwiKXtcbiAgICAgIHBhcmFtLmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZWRnZSl7XG4gICAgICAgIGVkZ2UucmVzdG9yZSgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDEyNlwiKXtcbiAgICAgIHBhcmFtLm5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSl7XG4gICAgICAgIG5vZGUucmVzdG9yZSgpO1xuICAgICAgfSk7XG4gICAgICBwYXJhbS5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2Upe1xuICAgICAgICBlZGdlLnJlc3RvcmUoKTtcbiAgICAgIH0pOyAgICAgICBcbiAgICAgIHJldHVybiBwYXJhbTtcbiAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTA5XCIgfHwgZXJyb3JDb2RlID09IFwicGQxMDEyNFwiKSB7XG5cbiAgICAgIHJlc3VsdC5uZXdTb3VyY2UgPSBwYXJhbS5lZGdlLnNvdXJjZSgpLmlkKCk7XG4gICAgICByZXN1bHQubmV3VGFyZ2V0ID0gcGFyYW0uZWRnZS50YXJnZXQoKS5pZCgpO1xuICAgICAgcmVzdWx0LnBvcnRzb3VyY2UgPSBwYXJhbS5wb3J0c291cmNlO1xuICAgICAgcmVzdWx0LmVkZ2UgPSBwYXJhbS5lZGdlLm1vdmUoe1xuICAgICAgICB0YXJnZXQ6IHBhcmFtLm5ld1RhcmdldCxcbiAgICAgICAgc291cmNlIDogcGFyYW0ubmV3U291cmNlICAgICAgXG4gICAgICB9KTtcblxuICAgICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VEYXRhKHJlc3VsdC5lZGdlLCAncG9ydHNvdXJjZScsIHBhcmFtLnBvcnRzb3VyY2UpOyBcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfWVsc2UgaWYoZXJyb3JDb2RlID09IFwicGQxMDExMlwiKSB7XG4gICAgIFxuICAgICAgLy8gSWYgdGhpcyBpcyBmaXJzdCB0aW1lIHdlIHNob3VsZCBtb3ZlIHRoZSBub2RlIHRvIGl0cyBuZXcgcGFyZW50IGFuZCByZWxvY2F0ZSBpdCBieSBnaXZlbiBwb3NEaWZmIHBhcmFtc1xuICAgICAgLy8gZWxzZSB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBtb3ZlZCBlbGVzIGFuZCByZXN0b3JlIHRoZSBlbGVzIHRvIHJlc3RvcmVcbiAgICAgIGlmIChwYXJhbS5maXJzdFRpbWUpIHtcbiAgICAgICAgdmFyIG5ld1BhcmVudElkID0gcGFyYW0ucGFyZW50RGF0YSA9PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW0ucGFyZW50RGF0YTtcbiAgICAgICAgLy8gVGhlc2UgZWxlcyBpbmNsdWRlcyB0aGUgbm9kZXMgYW5kIHRoZWlyIGNvbm5lY3RlZCBlZGdlcyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIG5vZGVzLm1vdmUoKS5cbiAgICAgICAgLy8gVGhleSBzaG91bGQgYmUgcmVzdG9yZWQgaW4gdW5kb1xuICAgICAgICB2YXIgd2l0aERlc2NlbmRhbnQgPSBwYXJhbS5ub2Rlcy51bmlvbihwYXJhbS5ub2Rlcy5kZXNjZW5kYW50cygpKTtcbiAgICAgICAgcmVzdWx0LmVsZXNUb1Jlc3RvcmUgPSB3aXRoRGVzY2VuZGFudC51bmlvbih3aXRoRGVzY2VuZGFudC5jb25uZWN0ZWRFZGdlcygpKTtcbiAgICAgICAgLy8gVGhlc2UgYXJlIHRoZSBlbGVzIGNyZWF0ZWQgYnkgbm9kZXMubW92ZSgpLCB0aGV5IHNob3VsZCBiZSByZW1vdmVkIGluIHVuZG8uXG4gICAgICAgIHJlc3VsdC5tb3ZlZEVsZXMgPSBwYXJhbS5ub2Rlcy5tb3ZlKHtcInBhcmVudFwiOiBuZXdQYXJlbnRJZH0pO1xuXG4gICAgICAgIHZhciBwb3NEaWZmID0ge1xuICAgICAgICAgIHg6IHBhcmFtLnBvc0RpZmZYLFxuICAgICAgICAgIHk6IHBhcmFtLnBvc0RpZmZZXG4gICAgICAgIH07XG5cbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5tb3ZlTm9kZXMocG9zRGlmZiwgcmVzdWx0Lm1vdmVkRWxlcyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmVsZXNUb1Jlc3RvcmUgPSBwYXJhbS5tb3ZlZEVsZXMucmVtb3ZlKCk7XG4gICAgICAgIHJlc3VsdC5tb3ZlZEVsZXMgPSBwYXJhbS5lbGVzVG9SZXN0b3JlLnJlc3RvcmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtLmNhbGxiYWNrKSB7XG4gICAgICAgIHJlc3VsdC5jYWxsYmFjayA9IHBhcmFtLmNhbGxiYWNrOyAvLyBrZWVwIHRoZSBwcm92aWRlZCBjYWxsYmFjayBzbyBpdCBjYW4gYmUgcmV1c2VkIGFmdGVyIHVuZG8vcmVkb1xuICAgICAgICBwYXJhbS5jYWxsYmFjayhyZXN1bHQubW92ZWRFbGVzKTsgLy8gYXBwbHkgdGhlIGNhbGxiYWNrIG9uIG5ld2x5IGNyZWF0ZWQgZWxlbWVudHNcbiAgICAgIH1cblxuICAgICBcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICBcbiAgICB9ZWxzZSBpZihlcnJvckNvZGUgPT0gXCJwZDEwMTI1XCIpIHtcblxuICAgICAgY3kuJCgnIycrcGFyYW0ubmV3RWRnZS5pZCkucmVtb3ZlKCk7XG4gICAgICBwYXJhbS5lZGdlID0gcGFyYW0uZWRnZS5yZXN0b3JlKCk7XG5cbiAgICBcbiAgICAgIHJldHVybiBwYXJhbTtcbiAgICAgIFxuICAgIH1lbHNlIGlmKGVycm9yQ29kZSA9PSBcInBkMTAxNDJcIikge1xuICAgICAgY3kuJCgnIycrcGFyYW0ubmV3RWRnZS5pZCkucmVtb3ZlKCk7XG4gICAgICBwYXJhbS5lZGdlID0gcGFyYW0uZWRnZS5yZXN0b3JlKCk7XG5cbiAgICBcbiAgICAgIHJldHVybiBwYXJhbTtcbiAgICB9ZWxzZSB7XG5cbiAgICAgIHJlc3VsdC5uZXdTb3VyY2UgPSBwYXJhbS5lZGdlLnNvdXJjZSgpLmlkKCk7XG4gICAgICByZXN1bHQubmV3VGFyZ2V0ID0gcGFyYW0uZWRnZS50YXJnZXQoKS5pZCgpO1xuICAgICAgcmVzdWx0LnBvcnR0YXJnZXQgPSBwYXJhbS5lZGdlLmRhdGEoXCJwb3J0dGFyZ2V0XCIpO1xuICAgICAgcmVzdWx0LmVkZ2UgPSBwYXJhbS5lZGdlLm1vdmUoe1xuICAgICAgICB0YXJnZXQ6IHBhcmFtLm5ld1RhcmdldCxcbiAgICAgICAgc291cmNlIDogcGFyYW0ubmV3U291cmNlICAgICAgXG4gICAgICB9KTtcblxuICAgICAgZWxlbWVudFV0aWxpdGllcy5jaGFuZ2VEYXRhKHJlc3VsdC5lZGdlLCAncG9ydHRhcmdldCcsIHBhcmFtLnBvcnR0YXJnZXQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgXG4gICAgfVxuICAgIFxuICB9XG5cbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuY2xvbmVIaWdoRGVncmVlTm9kZSA9IGZ1bmN0aW9uKG5vZGUpe1xuXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBvbGRYID0gbm9kZS5wb3NpdGlvbigpLng7XG4gICAgdmFyIG9sZFkgPSBub2RlLnBvc2l0aW9uKCkueTtcbiAgICBcbiAgICBcbiAgICB2YXIgY2xhY3VsYXRlTmV3Q2xvbmVQb3NpdGlvbiA9IGZ1bmN0aW9uKHNvdXJjZUVuZFBvaW50WCxzb3VyY2VFbmRQb2ludFksdGFyZ2V0RW5kUG9pbnRYLHRhcmdldEVuZFBvaW50WSxkZXNpcmVkRGlzdGFuY2UsZGlyZWN0aW9uKXtcbiAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyh0YXJnZXRFbmRQb2ludFktc291cmNlRW5kUG9pbnRZLDIpKyBNYXRoLnBvdyh0YXJnZXRFbmRQb2ludFgtc291cmNlRW5kUG9pbnRYLDIpKTtcbiAgICAgIHZhciByYXRpbyA9IGRlc2lyZWREaXN0YW5jZS9kaXN0YW5jZTtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmKGRpcmVjdGlvbiA9PSBcInNvdXJjZVwiKXsgXG4gICAgICAgIHJlc3VsdC5jeCA9ICgoMS1yYXRpbykgKiBzb3VyY2VFbmRQb2ludFgpICArIChyYXRpbyAqIHRhcmdldEVuZFBvaW50WCk7XG4gICAgICAgIHJlc3VsdC5jeSA9ICgoMS1yYXRpbykgKiBzb3VyY2VFbmRQb2ludFkpICArIChyYXRpbyAqIHRhcmdldEVuZFBvaW50WSk7XG4gICAgICB9ZWxzZXsgICAgICBcbiAgICAgICAgcmVzdWx0LmN4ID0gKCgxLXJhdGlvKSAqIHRhcmdldEVuZFBvaW50WCkgICsgKHJhdGlvICogc291cmNlRW5kUG9pbnRYKTtcbiAgICAgICAgcmVzdWx0LmN5ID0gKCgxLXJhdGlvKSAqIHRhcmdldEVuZFBvaW50WSkgICsgKHJhdGlvICogc291cmNlRW5kUG9pbnRZKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9OyAgIFxuICAgIHZhciBlZGdlcyA9IG5vZGUuY29ubmVjdGVkRWRnZXMoKTtcbiAgICB2YXIgZGVzaXJlZERpc3RhbmNlID0gKG5vZGUuaGVpZ2h0KCkgPiBub2RlLndpZHRoKCk/IG5vZGUuaGVpZ2h0KCk6IG5vZGUud2lkdGgoKSkqIDAuMTtcbiAgICBmb3IodmFyIGkgPSAxIDsgaSA8IGVkZ2VzLmxlbmd0aCA7IGkrKyl7XG4gICAgICB2YXIgZWRnZSA9IGVkZ2VzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gaTtcbiAgICAgIHZhciBlZGdlQ2xvbmUgPSBlZGdlLmNsb25lKCk7XG4gICAgICB2YXIgc3RhcnRQb3NpdGlvbiA9IGVkZ2Uuc291cmNlKCkuaWQoKSA9PSBub2RlLmlkKCkgPyBcInNvdXJjZVwiIDogXCJ0YXJnZXRcIjsgICAgXG4gICAgICB2YXIgbmV3UG9zaXRpb24gPSBjbGFjdWxhdGVOZXdDbG9uZVBvc2l0aW9uKGVkZ2Uuc291cmNlRW5kcG9pbnQoKS54LGVkZ2Uuc291cmNlRW5kcG9pbnQoKS55LGVkZ2UudGFyZ2V0RW5kcG9pbnQoKS54LGVkZ2UudGFyZ2V0RW5kcG9pbnQoKS55LGRlc2lyZWREaXN0YW5jZSxzdGFydFBvc2l0aW9uKTsgXG4gICAgICB2YXIgbmV3Tm9kZUlkID0gbm9kZS5pZCgpKydjbG9uZS0nK2luZGV4O1xuICAgICAgLy9lZGdlQ2xvbmUuZGF0YSgpLmlkID0gZWRnZUNsb25lLmRhdGEoKS5pZCsgXCItXCIrbmV3Tm9kZUlkO1xuICAgICAgaWYoZWRnZS5zb3VyY2UoKS5pZCgpID09IG5vZGUuaWQoKSl7ICAgICAgICBcbiAgICAgICAgZWRnZUNsb25lLmRhdGEoKS5zb3VyY2UgPSBuZXdOb2RlSWQ7XG4gICAgICAgIGVkZ2VDbG9uZS5kYXRhKCkucG9ydHNvdXJjZSA9IG5ld05vZGVJZDsgICAgXG4gICAgICB9ZWxzZXtcbiAgICAgICAgICBcbiAgICAgICAgZWRnZUNsb25lLmRhdGEoKS50YXJnZXQgPSBuZXdOb2RlSWQ7XG4gICAgICAgIGVkZ2VDbG9uZS5kYXRhKCkucG9ydHRhcmdldCA9IG5ld05vZGVJZDsgICAgXG4gICAgICB9XG4gICAgICB2YXIgbmV3Tm9kZSA9IG5vZGUuY2xvbmUoKTtcbiAgICAgIG5ld05vZGUuZGF0YSgpLmlkID0gbmV3Tm9kZUlkO1xuICAgICAgY3kuYWRkKG5ld05vZGUpO1xuICAgICBcbiAgICAgIGVkZ2UucmVtb3ZlKCk7XG4gICAgICBjeS5hZGQoZWRnZUNsb25lKTtcbiAgICAgIG5ld05vZGUucG9zaXRpb24oe1xuICAgICAgICB4OiBuZXdQb3NpdGlvbi5jeCxcbiAgICAgICAgeTogbmV3UG9zaXRpb24uY3lcbiAgICAgIH0pO1xuICAgICAgZWxlbWVudFV0aWxpdGllcy5zZXRDbG9uZU1hcmtlclN0YXR1cyhuZXdOb2RlLCB0cnVlKTtcbiAgICAgIFxuICAgIH0gIFxuICAgIFxuICAgIHZhciBuZXdQb3NpdGlvbiA9IGNsYWN1bGF0ZU5ld0Nsb25lUG9zaXRpb24oXG4gICAgICBlZGdlc1swXS5zb3VyY2VFbmRwb2ludCgpLngsXG4gICAgICBlZGdlc1swXS5zb3VyY2VFbmRwb2ludCgpLnksXG4gICAgICBlZGdlc1swXS50YXJnZXRFbmRwb2ludCgpLngsXG4gICAgICBlZGdlc1swXS50YXJnZXRFbmRwb2ludCgpLnksXG4gICAgICBkZXNpcmVkRGlzdGFuY2UsZWRnZXNbMF0uc291cmNlKCkuaWQoKSA9PSBub2RlLmlkKCkgPyBcInNvdXJjZVwiIDogXCJ0YXJnZXRcIlxuICAgICAgKTtcbiAgXG4gICAgdmFyIGNsb25lRWRnZSA9IGVkZ2VzWzBdLmNsb25lKCk7XG4gICAgLy9jbG9uZUVkZ2UuZGF0YSgpLmlkID0gY2xvbmVFZGdlLmRhdGEoKS5pZCsgXCItXCIrbm9kZS5pZCgpKydjbG9uZS0wJztcbiAgICBcbiAgICBlZGdlc1swXS5yZW1vdmUoKTtcbiAgICBjeS5hZGQoY2xvbmVFZGdlKTtcbiAgICBlbGVtZW50VXRpbGl0aWVzLnNldENsb25lTWFya2VyU3RhdHVzKG5vZGUsdHJ1ZSk7XG4gICAgbm9kZS5wb3NpdGlvbih7XG4gICAgICB4OiBuZXdQb3NpdGlvbi5jeCxcbiAgICAgIHk6IG5ld1Bvc2l0aW9uLmN5XG4gICAgfSk7XG4gIFxuICAgIHJlc3VsdC5vbGRYID0gb2xkWDsgICAgXG4gICAgcmVzdWx0Lm9sZFkgPSBvbGRZO1xuICAgIHJlc3VsdC5ub2RlID0gbm9kZTtcbiAgICByZXN1bHQubnVtYmVyT2ZFZGdlcyA9IGVkZ2VzLmxlbmd0aDtcbiAgICByZXR1cm4gcmVzdWx0O1xuXG4gIH1cblxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51bkNsb25lSGlnaERlZ3JlZU5vZGUgPSBmdW5jdGlvbihwYXJhbSl7XG5cbiAgICB2YXIgbm9kZSA9IHBhcmFtLm5vZGU7XG4gICAgZWxlbWVudFV0aWxpdGllcy5zZXRDbG9uZU1hcmtlclN0YXR1cyhub2RlLGZhbHNlKTtcbiAgICBub2RlLnBvc2l0aW9uKHtcbiAgICAgIHg6IHBhcmFtLm9sZFgsXG4gICAgICB5OiBwYXJhbS5vbGRZXG4gICAgfSk7XG4gIFxuICAgIGZvcih2YXIgaSA9IDEgOyBpIDwgcGFyYW0ubnVtYmVyT2ZFZGdlcyA7IGkrKyl7XG4gICAgICB2YXIgY2xvbmVJZCA9IG5vZGUuaWQoKSsnY2xvbmUtJytpO1xuICAgICAgdmFyIGNsb25lID0gY3kuJChcIiNcIitjbG9uZUlkKTtcbiAgICAgIHZhciBjbG9uZUVkZ2UgPSBjbG9uZS5jb25uZWN0ZWRFZGdlcygpWzBdO1xuICAgICAgdmFyIGVkZ2UgPSBjbG9uZUVkZ2UuY2xvbmUoKTtcbiAgICAgIFxuICAgIFxuICAgICAgaWYoZWRnZS5kYXRhKCkuc291cmNlID09IGNsb25lSWQpeyAgICAgICAgXG4gICAgICAgIGVkZ2UuZGF0YSgpLnNvdXJjZSA9IG5vZGUuaWQoKTtcbiAgICAgICAgZWRnZS5kYXRhKCkucG9ydHNvdXJjZSA9ICBub2RlLmlkKCk7ICAgIFxuICAgICAgfWVsc2V7ICAgICAgICAgIFxuICAgICAgICBlZGdlLmRhdGEoKS50YXJnZXQgPSAgbm9kZS5pZCgpO1xuICAgICAgICBlZGdlLmRhdGEoKS5wb3J0dGFyZ2V0ID0gIG5vZGUuaWQoKTsgICAgXG4gICAgICB9XG5cbiAgICAgIGNsb25lRWRnZS5yZW1vdmUoKTtcbiAgICAgIGNsb25lLnJlbW92ZSgpO1xuICAgICAgXG4gICAgICBjeS5hZGQoZWRnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5jaGFuZ2VNYXBUeXBlID0gZnVuY3Rpb24ocGFyYW0pe1xuICAgIHZhciByZXN1bHQgPXt9O1xuICAgIHZhciBjdXJyZW50TWFwVHlwZSA9IGVsZW1lbnRVdGlsaXRpZXMuZ2V0TWFwVHlwZSgpO1xuICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0TWFwVHlwZShwYXJhbS5tYXBUeXBlKTtcbiAgICByZXN1bHQubWFwVHlwZSA9IGN1cnJlbnRNYXBUeXBlO1xuICAgIHJlc3VsdC5jYWxsYmFjayA9IHBhcmFtLmNhbGxiYWNrO1xuICAgIHBhcmFtLmNhbGxiYWNrKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIH1cblxuICByZXR1cm4gdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnNFeHRlbmRlcjtcbn07XG4iXSwibmFtZXMiOlsibGlicyIsInJlcXVpcmUiLCJnZXRMaWJzIiwibW9kdWxlIiwiZXhwb3J0cyIsInNiZ252aXpJbnN0YW5jZSIsInVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zIiwiZWxlbWVudFV0aWxpdGllcyIsImN5IiwidG9wb2xvZ3lHcm91cGluZyIsInVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zRXh0ZW5kZXIiLCJwYXJhbSIsInNiZ252aXpJbnN0YW5jZVV0aWxpdGllcyIsImdldEluc3RhbmNlIiwiZ2V0Q3kiLCJzaWZUb3BvbG9neUdyb3VwaW5nIiwiZXh0ZW5kIiwiYXBwbHlTSUZUb3BvbG9neUdyb3VwaW5nIiwib2xkRWxlcyIsIm5ld0VsZXMiLCJmaXJzdFRpbWUiLCJlbGVtZW50cyIsImFwcGx5IiwidW5hcHBseSIsImlzR3JhcGhUb3BvbG9neUxvY2tlZCIsInVubG9ja0dyYXBoVG9wb2xvZ3kiLCJsb2NrR3JhcGhUb3BvbG9neSIsInJlbW92ZSIsInJlc3RvcmUiLCJ0b2dnbGVBcHBsaWVkRmxhZyIsInJlc3VsdCIsImFkZE5vZGUiLCJuZXdOb2RlIiwieCIsInkiLCJpZCIsInBhcmVudCIsInZpc2liaWxpdHkiLCJyZXN0b3JlRWxlcyIsImVsZXMiLCJhZGRFZGdlIiwibmV3RWRnZSIsInNvdXJjZSIsInRhcmdldCIsImFkZFByb2Nlc3NXaXRoQ29udmVuaWVudEVkZ2VzIiwicHJvY2Vzc1R5cGUiLCJjcmVhdGVDb21wb3VuZEZvckdpdmVuTm9kZXMiLCJub2Rlc1RvTWFrZUNvbXBvdW5kIiwicmVtb3ZlZEVsZXMiLCJ1bmlvbiIsImRlc2NlbmRhbnRzIiwiY29ubmVjdGVkRWRnZXMiLCJvbGRQYXJlbnRJZCIsImRhdGEiLCJjb21wb3VuZFR5cGUiLCJtYWludGFpblBvaW50ZXIiLCJjcmVhdGVUZW1wbGF0ZVJlYWN0aW9uIiwidGVtcGxhdGVUeXBlIiwibWFjcm9tb2xlY3VsZUxpc3QiLCJjb21wbGV4TmFtZSIsInByb2Nlc3NQb3NpdGlvbiIsInRpbGluZ1BhZGRpbmdWZXJ0aWNhbCIsInRpbGluZ1BhZGRpbmdIb3Jpem9udGFsIiwiZWRnZUxlbmd0aCIsImxheW91dFBhcmFtIiwiYWRkIiwidW5zZWxlY3QiLCJzZWxlY3QiLCJjcmVhdGVBY3RpdmF0aW9uUmVhY3Rpb24iLCJwcm90ZWluTmFtZSIsInJldmVyc2UiLCJjcmVhdGVUcmFuc2xhdGlvbiIsInJlZ3VsYXRvckxhYmVsIiwib3V0cHV0TGFiZWwiLCJvcmllbnRhdGlvbiIsImNyZWF0ZVRyYW5zY3JpcHRpb24iLCJsYWJlbCIsImNyZWF0ZURlZ3JhZGF0aW9uIiwibWFjcm9tb2xlY3VsZSIsImNyZWF0ZUNvbXBsZXhQcm90ZWluRm9ybWF0aW9uIiwicHJvdGVpbkxhYmVscyIsImNvbXBsZXhMYWJlbCIsInJlZ3VsYXRvciIsImNyZWF0ZU11bHRpbWVyaXphdGlvbiIsInJlZ3VsYXRvck11bHRpbWVyIiwiY3JlYXRlQ29udmVyc2lvbiIsImlucHV0SW5mb2JveExhYmVscyIsIm91dHB1dEluZm9ib3hMYWJlbHMiLCJjcmVhdGVNZXRhYm9saWNSZWFjdGlvbiIsImlucHV0cyIsIm91dHB1dHMiLCJyZXZlcnNpYmxlIiwiY3JlYXRlTWV0YWJvbGljQ2F0YWx5dGljQWN0aXZpdHkiLCJpbnB1dE5vZGVMaXN0Iiwib3V0cHV0Tm9kZUxpc3QiLCJjYXRhbHlzdE5hbWUiLCJjYXRhbHlzdFR5cGUiLCJjcmVhdGVUcmFuc2NyaXB0aW9uUmVhY3Rpb24iLCJnZW5lTmFtZSIsIm1SbmFOYW1lIiwiY3JlYXRlVHJhbnNsYXRpb25SZWFjdGlvbiIsImdldE5vZGVQb3NpdGlvbnMiLCJwb3NpdGlvbnMiLCJub2RlcyIsImVhY2giLCJlbGUiLCJpIiwicG9zaXRpb24iLCJyZXR1cm5Ub1Bvc2l0aW9ucyIsImN1cnJlbnRQb3NpdGlvbnMiLCJwb3MiLCJyZXNpemVOb2RlcyIsInBlcmZvcm1PcGVyYXRpb24iLCJzaXplTWFwIiwidXNlQXNwZWN0UmF0aW8iLCJwcmVzZXJ2ZVJlbGF0aXZlUG9zIiwibGVuZ3RoIiwibm9kZSIsImlzUGFyZW50IiwidyIsImgiLCJiaWFzTCIsImJpYXNSIiwiYmlhc1QiLCJiaWFzQiIsIndpZHRoIiwiaGVpZ2h0Iiwic3R5bGUiLCJ1cGRhdGUiLCJjaGFuZ2VOb2RlTGFiZWwiLCJfcHJpdmF0ZSIsInVwZGF0ZUluZm9ib3hTdHlsZSIsImluZGV4IiwibmV3UHJvcHMiLCIkIiwidXBkYXRlSW5mb2JveE9iaiIsIm9iaiIsImNoYW5nZURhdGEiLCJuYW1lIiwidmFsdWVNYXAiLCJ1cGRhdGVTZXRGaWVsZCIsInVwZGF0ZXMiLCJmaWVsZE5hbWUiLCJ0b0RlbGV0ZSIsInRvQWRkIiwiY2FsbGJhY2siLCJhZGRlZCIsImRlbGV0ZWQiLCJjaGFuZ2VDc3MiLCJjc3MiLCJjaGFuZ2VGb250UHJvcGVydGllcyIsInByb3AiLCJzaG93QW5kUGVyZm9ybUxheW91dCIsImxheW91dHBhcmFtIiwidmlld1V0aWxpdGllcyIsInNob3ciLCJ1bmRvU2hvd0FuZFBlcmZvcm1MYXlvdXQiLCJoaWRlIiwiaGlkZUFuZFBlcmZvcm1MYXlvdXQiLCJ1bmRvSGlkZUFuZFBlcmZvcm1MYXlvdXQiLCJkZWxldGVBbmRQZXJmb3JtTGF5b3V0IiwidW5kb0RlbGV0ZUFuZFBlcmZvcm1MYXlvdXQiLCJjaGFuZ2VTdGF0ZU9ySW5mb0JveCIsInR5cGUiLCJ0ZW1wRGF0YSIsInNhdmVVbml0cyIsInZhbHVlIiwidW5kZWZpbmVkIiwicmVzdG9yZVVuaXRzIiwiZm9yY2VSZW5kZXIiLCJhZGRTdGF0ZU9ySW5mb0JveCIsImxvY2F0aW9uT2JqIiwicmVtb3ZlU3RhdGVPckluZm9Cb3giLCJmaXRVbml0cyIsImxvY2F0aW9ucyIsImZvckVhY2giLCJib3giLCJiYm94Iiwib2xkU2lkZSIsImFuY2hvclNpZGUiLCJtb2RpZnlVbml0cyIsInNldE11bHRpbWVyU3RhdHVzIiwic3RhdHVzIiwicmVzdWx0U3RhdHVzIiwiaXNNdWx0aW1lciIsImVuZHNXaXRoIiwic2V0QWN0aXZlU3RhdHVzIiwiaXNBY3RpdmUiLCJzdGFydHNXaXRoIiwic2V0SHlwb3RoZXRpY2FsU3RhdHVzIiwiaXNIeXBvdGhldGljYWwiLCJpbmNsdWRlcyIsInNldENsb25lTWFya2VyU3RhdHVzIiwiY3VycmVudFN0YXR1cyIsInNldERlZmF1bHRQcm9wZXJ0eSIsInNiZ25jbGFzcyIsImNsYXNzRGVmYXVsdHMiLCJnZXREZWZhdWx0UHJvcGVydGllcyIsImhhc093blByb3BlcnR5IiwicHJvcE1hcCIsInNldERlZmF1bHRQcm9wZXJ0aWVzIiwiYWRkQmFja2dyb3VuZEltYWdlIiwiYmdPYmoiLCJ1cGRhdGVJbmZvIiwicHJvbXB0SW52YWxpZEltYWdlIiwidmFsaWRhdGVVUkwiLCJyZW1vdmVCYWNrZ3JvdW5kSW1hZ2UiLCJ1cGRhdGVCYWNrZ3JvdW5kSW1hZ2UiLCJvbGRCZ09iaiIsImNoYW5nZUJhY2tncm91bmRJbWFnZSIsIm9sZEltZyIsIm5ld0ltZyIsImNvbnZlcnRJbnRvUmV2ZXJzaWJsZVJlYWN0aW9uIiwiY29sbGVjdGlvbiIsIm1hcFR5cGUiLCJnZXRNYXBUeXBlIiwic2V0TWFwVHlwZSIsInZhbCIsImVkZ2UiLCJzb3VyY2VOb2RlIiwidGFyZ2V0Tm9kZSIsIm1vdmUiLCJjb252ZXJ0ZWRFZGdlIiwiZ2V0RWxlbWVudEJ5SWQiLCJkaXN0YW5jZSIsIm1hcCIsImVsZW1lbnQiLCJ3ZWlnaHQiLCJwb3J0c291cmNlIiwicG9ydHRhcmdldCIsInByb2Nlc3NJZCIsIm1vdmVFZGdlIiwiZml4RXJyb3IiLCJlcnJvckNvZGUiLCJyZXZlcnNlRWRnZSIsIm5ld05vZGVzIiwibmV3RWRnZXMiLCJvbGRFZGdlcyIsIm9sZEVkZ2UiLCJlZGdlcyIsIm5ld1NvdXJjZSIsIm5ld1RhcmdldCIsImNsb25lZEVkZ2UiLCJjbG9uZSIsImVkZ2VQYXJhbXMiLCJsYW5ndWFnZSIsIm5ld1BhcmVudElkIiwicGFyZW50RGF0YSIsIndpdGhEZXNjZW5kYW50IiwiZWxlc1RvUmVzdG9yZSIsIm1vdmVkRWxlcyIsInBvc0RpZmYiLCJwb3NEaWZmWCIsInBvc0RpZmZZIiwibW92ZU5vZGVzIiwiZWRnZWNsYXNzIiwidmFsaWRhdGlvbiIsInZhbGlkYXRlQXJyb3dFbmRzIiwidGVtcCIsInVuZml4RXJyb3IiLCJhbmltYXRlIiwiZHVyYXRpb24iLCJlYXNpbmciLCJmaXQiLCJwYWRkaW5nIiwiY29tcGxldGUiLCJjbG9uZUhpZ2hEZWdyZWVOb2RlIiwib2xkWCIsIm9sZFkiLCJjbGFjdWxhdGVOZXdDbG9uZVBvc2l0aW9uIiwic291cmNlRW5kUG9pbnRYIiwic291cmNlRW5kUG9pbnRZIiwidGFyZ2V0RW5kUG9pbnRYIiwidGFyZ2V0RW5kUG9pbnRZIiwiZGVzaXJlZERpc3RhbmNlIiwiZGlyZWN0aW9uIiwiTWF0aCIsInNxcnQiLCJwb3ciLCJyYXRpbyIsImN4IiwiZWRnZUNsb25lIiwic3RhcnRQb3NpdGlvbiIsIm5ld1Bvc2l0aW9uIiwic291cmNlRW5kcG9pbnQiLCJ0YXJnZXRFbmRwb2ludCIsIm5ld05vZGVJZCIsImNsb25lRWRnZSIsIm51bWJlck9mRWRnZXMiLCJ1bkNsb25lSGlnaERlZ3JlZU5vZGUiLCJjbG9uZUlkIiwiY2hhbmdlTWFwVHlwZSIsImN1cnJlbnRNYXBUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/ur-action-functions-extender-factory.js\n");

/***/ }),

/***/ "./node_modules/lodash.isequal/index.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash.isequal/index.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.isequal/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});