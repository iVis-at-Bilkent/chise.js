(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["chise"] = factory();
	else
		root["chise"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function () {
  var chise = function chise(_options) {
    var param = {}; // Access the libs

    var libs = __webpack_require__(/*! ./utilities/lib-utilities */ "./src/utilities/lib-utilities.js").getLibs();

    var optionUtilities = __webpack_require__(/*! ./utilities/option-utilities-factory */ "./src/utilities/option-utilities-factory.js")();

    var options = optionUtilities.extendOptions(_options); // Extends the default options with the given options
    // Create an sbgnviz instance

    var sbgnvizInstanceUtilities = __webpack_require__(/*! ./utilities/sbgnviz-instance-utilities-factory */ "./src/utilities/sbgnviz-instance-utilities-factory.js")();

    var sbgnvizInstance = sbgnvizInstanceUtilities(options); // Register undo/redo actions

    var registerUndoRedoActions = __webpack_require__(/*! ./utilities/register-undo-redo-actions-factory */ "./src/utilities/register-undo-redo-actions-factory.js")();

    var mainUtilities = __webpack_require__(/*! ./utilities/main-utilities-factory */ "./src/utilities/main-utilities-factory.js")();

    var elementUtilitiesExtender = __webpack_require__(/*! ./utilities/element-utilities-extender-factory */ "./src/utilities/element-utilities-extender-factory.js")();

    var undoRedoActionFunctionsExtender = __webpack_require__(/*! ./utilities/ur-action-functions-extender-factory */ "./src/utilities/ur-action-functions-extender-factory.js")();

    var sifTopologyGrouping = __webpack_require__(/*! ./utilities/topology-grouping-factory */ "./src/utilities/topology-grouping-factory.js")();

    var elementUtilities = sbgnvizInstance.elementUtilities;
    var undoRedoActionFunctions = sbgnvizInstance.undoRedoActionFunctions;
    param.sbgnvizInstanceUtilities = sbgnvizInstanceUtilities;
    param.optionUtilities = optionUtilities;
    param.elementUtilities = elementUtilities;
    param.undoRedoActionFunctions = undoRedoActionFunctions;
    param.sifTopologyGrouping = sifTopologyGrouping;

    var shouldApply = function shouldApply() {
      return param.elementUtilities.mapType === 'SIF';
    };

    undoRedoActionFunctionsExtender(param);
    elementUtilitiesExtender(param);
    registerUndoRedoActions(param);
    mainUtilities(param);
    sifTopologyGrouping(param, {
      metaEdgeIdentifier: 'sif-meta',
      lockGraphTopology: true,
      shouldApply: shouldApply
    }); // Expose the api

    var api = {}; // Expose the properties inherited from sbgnviz
    // then override some of these properties and expose some new properties

    for (var prop in sbgnvizInstance) {
      api[prop] = sbgnvizInstance[prop];
    } // Expose each main utility seperately


    for (var prop in mainUtilities) {
      api[prop] = mainUtilities[prop];
    } // Expose getSbgnvizInstance()


    api.getSbgnvizInstance = sbgnvizInstanceUtilities.getInstance; // Expose elementUtilities and undoRedoActionFunctions as is

    api.elementUtilities = elementUtilities;
    api.undoRedoActionFunctions = undoRedoActionFunctions;
    api.sifTopologyGrouping = sifTopologyGrouping;
    return api;
  }; // Register chise with given libraries


  chise.register = function (_libs) {
    var libs = {};
    libs.jQuery = _libs.jQuery || jQuery;
    libs.cytoscape = _libs.cytoscape || cytoscape;
    libs.sbgnviz = _libs.sbgnviz || sbgnviz;
    libs.saveAs = _libs.filesaver ? _libs.filesaver.saveAs : saveAs;
    libs.sbgnviz.register(_libs); // Register sbgnviz with the given libs
    // inherit exposed static properties of sbgnviz other than register

    for (var prop in libs.sbgnviz) {
      if (prop !== 'register') {
        chise[prop] = libs.sbgnviz[prop];
      }
    } // Set the libraries to access them from any file


    var libUtilities = __webpack_require__(/*! ./utilities/lib-utilities */ "./src/utilities/lib-utilities.js");

    libUtilities.setLibs(libs);
  };

  if ( true && module.exports) {
    module.exports = chise;
  }
})();

/***/ }),

/***/ "./src/utilities/element-utilities-extender-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/element-utilities-extender-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Extends sbgnviz.elementUtilities
var libs = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js").getLibs();

var jQuery = $ = libs.jQuery;

module.exports = function () {
  var options, sbgnvizInstance, elementUtilities, cy;

  function elementUtilitiesExtender(param) {
    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();
    options = param.optionUtilities.getOptions();
    elementUtilities = sbgnvizInstance.elementUtilities;
    cy = param.sbgnvizInstanceUtilities.getCy();
    extend(); // Return the extended elementUtilities

    return elementUtilities;
  } // Extends elementUtilities with chise specific facilities


  function extend() {
    // Section Start
    // Add remove utilities
    elementUtilities.addNode = function (x, y, nodeParams, id, parent, visibility) {
      if (_typeof(nodeParams) != 'object') {
        var sbgnclass = nodeParams;
      } else {
        var sbgnclass = nodeParams["class"];
        var language = nodeParams.language;
      }

      var css = {}; // if there is no specific default width or height for
      // sbgnclass these sizes are used

      var defaultWidth = 50;
      var defaultHeight = 50;

      if (visibility) {
        css.visibility = visibility;
      }

      var data = {
        "class": sbgnclass,
        language: language,
        bbox: {
          w: defaultWidth,
          h: defaultHeight,
          x: x,
          y: y
        },
        statesandinfos: [],
        ports: []
      };

      if (id) {
        data.id = id;
      } else {
        data.id = elementUtilities.generateNodeId();
      }

      if (parent) {
        data.parent = parent;
      }

      this.extendNodeDataWithClassDefaults(data, sbgnclass); // some defaults are not set by extendNodeDataWithClassDefaults()

      var defaults = this.getDefaultProperties(sbgnclass);

      if (defaults['multimer']) {
        data["class"] += ' multimer';
      }

      if (defaults['clonemarker']) {
        data['clonemarker'] = true;
      }

      data.bbox['w'] = defaults['width'];
      data.bbox['h'] = defaults['height'];
      var eles = cy.add({
        group: "nodes",
        data: data,
        css: css,
        position: {
          x: x,
          y: y
        }
      });
      var newNode = eles[eles.length - 1]; // Get the default ports ordering for the nodes with given sbgnclass

      var ordering = defaults['ports-ordering']; // If there is a default ports ordering for the nodes with given sbgnclass and it is different than 'none' set the ports ordering to that ordering

      if (ordering && ordering !== 'none') {
        this.setPortsOrdering(newNode, ordering);
      }

      if (language == "AF" && !elementUtilities.canHaveMultipleUnitOfInformation(newNode)) {
        if (sbgnclass != "BA plain") {
          // if AF node can have label i.e: not plain biological activity
          var uoi_obj = {
            clazz: "unit of information"
          };
          uoi_obj.label = {
            text: ""
          };
          uoi_obj.bbox = {
            w: 12,
            h: 12
          };
          elementUtilities.addStateOrInfoBox(newNode, uoi_obj);
        }
      } // node bg image was unexpectedly not rendered until it is clicked
      // use this dirty hack until finding a solution to the problem


      var bgImage = newNode.data('background-image');

      if (bgImage) {
        newNode.data('background-image', bgImage);
      }

      return newNode;
    }; //Saves old aux units of given node


    elementUtilities.saveUnits = function (node) {
      var tempData = [];
      var index = 0;
      node.data('statesandinfos').forEach(function (ele) {
        tempData.push({
          x: ele.bbox.x,
          y: ele.bbox.y,
          anchorSide: ele.anchorSide
        });
        index++;
      });
      return tempData;
    }; //Restores from given data


    elementUtilities.restoreUnits = function (node, data) {
      var index = 0;
      node.data('statesandinfos').forEach(function (ele) {
        if (data !== undefined) {
          ele.bbox.x = data[index].x;
          ele.bbox.y = data[index].y;
          var anchorSide = ele.anchorSide;
          ele.anchorSide = data[index].anchorSide;
          elementUtilities.modifyUnits(node, ele, anchorSide);
          index++;
        }
      });
    }; //Modify aux unit layouts


    elementUtilities.modifyUnits = function (node, ele, anchorSide) {
      instance.classes.AuxUnitLayout.modifyUnits(node, ele, anchorSide, cy);
    }; //For reversible reactions both side of the process can be input/output
    //Group ID identifies to which group of nodes the edge is going to be connected for reversible reactions(0: group 1 ID and 1:group 2 ID)


    elementUtilities.addEdge = function (source, target, edgeParams, id, visibility, groupID) {
      if (_typeof(edgeParams) != 'object') {
        var sbgnclass = edgeParams;
      } else {
        var sbgnclass = edgeParams["class"];
        var language = edgeParams.language;
      }

      var css = {};

      if (visibility) {
        css.visibility = visibility;
      }

      var data = {
        source: source,
        target: target,
        "class": sbgnclass,
        language: language
      };
      var defaults = elementUtilities.getDefaultProperties(sbgnclass); // extend the data with default properties of edge style

      Object.keys(defaults).forEach(function (prop) {
        data[prop] = defaults[prop];
      });

      if (id) {
        data.id = id;
      } else {
        data.id = elementUtilities.generateEdgeId();
      }

      if (elementUtilities.canHaveSBGNCardinality(sbgnclass)) {
        data.cardinality = 0;
      }

      var sourceNode = cy.getElementById(source); // The original source node

      var targetNode = cy.getElementById(target); // The original target node

      var sourceHasPorts = sourceNode.data('ports').length === 2;
      var targetHasPorts = targetNode.data('ports').length === 2; // The portsource and porttarget variables

      var portsource;
      var porttarget;
      /*
       * Get input/output port id's of a node with the assumption that the node has valid ports.
       */

      var getIOPortIds = function getIOPortIds(node) {
        var nodeInputPortId, nodeOutputPortId;
        var nodePortsOrdering = sbgnvizInstance.elementUtilities.getPortsOrdering(node);
        var nodePorts = node.data('ports');

        if (nodePortsOrdering === 'L-to-R' || nodePortsOrdering === 'R-to-L') {
          var leftPortId = nodePorts[0].x < 0 ? nodePorts[0].id : nodePorts[1].id; // The x value of left port is supposed to be negative

          var rightPortId = nodePorts[0].x > 0 ? nodePorts[0].id : nodePorts[1].id; // The x value of right port is supposed to be positive

          /*
           * If the port ordering is left to right then the input port is the left port and the output port is the right port.
           * Else if it is right to left it is vice versa
           */

          nodeInputPortId = nodePortsOrdering === 'L-to-R' ? leftPortId : rightPortId;
          nodeOutputPortId = nodePortsOrdering === 'R-to-L' ? leftPortId : rightPortId;
        } else if (nodePortsOrdering === 'T-to-B' || nodePortsOrdering === 'B-to-T') {
          var topPortId = nodePorts[0].y < 0 ? nodePorts[0].id : nodePorts[1].id; // The y value of top port is supposed to be negative

          var bottomPortId = nodePorts[0].y > 0 ? nodePorts[0].id : nodePorts[1].id; // The y value of bottom port is supposed to be positive

          /*
           * If the port ordering is top to bottom then the input port is the top port and the output port is the bottom port.
           * Else if it is right to left it is vice versa
           */

          nodeInputPortId = nodePortsOrdering === 'T-to-B' ? topPortId : bottomPortId;
          nodeOutputPortId = nodePortsOrdering === 'B-to-T' ? topPortId : bottomPortId;
        } // Return an object containing the IO ports of the node


        return {
          inputPortId: nodeInputPortId,
          outputPortId: nodeOutputPortId
        };
      }; // If at least one end of the edge has ports then we should determine the ports where the edge should be connected.


      if (sourceHasPorts || targetHasPorts) {
        var sourceNodeInputPortId, sourceNodeOutputPortId, targetNodeInputPortId, targetNodeOutputPortId; // If source node has ports set the variables dedicated for its IO ports

        if (sourceHasPorts) {
          var ioPorts = getIOPortIds(sourceNode);
          sourceNodeInputPortId = ioPorts.inputPortId;
          sourceNodeOutputPortId = ioPorts.outputPortId;
        } // If target node has ports set the variables dedicated for its IO ports


        if (targetHasPorts) {
          var ioPorts = getIOPortIds(targetNode);
          targetNodeInputPortId = ioPorts.inputPortId;
          targetNodeOutputPortId = ioPorts.outputPortId;
        }

        if (sbgnclass === 'consumption') {
          // A consumption edge should be connected to the input port of the target node which is supposed to be a process (any kind of)
          portsource = sourceNodeOutputPortId;
          porttarget = targetNodeInputPortId;
        } else if (sbgnclass === 'production') {
          // A production edge should be connected to the output port of the source node which is supposed to be a process (any kind of)
          // A modulation edge may have a logical operator as source node in this case the edge should be connected to the output port of it
          // The below assignment satisfy all of these condition
          if (groupID == 0 || groupID == undefined) {
            // groupID 0 for reversible reactions group 0
            portsource = sourceNodeOutputPortId;
            porttarget = targetNodeInputPortId;
          } else {
            //if reaction is reversible and edge belongs to group 1
            portsource = sourceNodeInputPortId;
          }
        } else if (elementUtilities.isModulationArcClass(sbgnclass) || elementUtilities.isAFArcClass(sbgnclass)) {
          portsource = sourceNodeOutputPortId;
        } else if (sbgnclass === 'logic arc') {
          var srcClass = sourceNode.data('class');
          var tgtClass = targetNode.data('class');
          var isSourceLogicalOp = srcClass === 'and' || srcClass === 'or' || srcClass === 'not';
          var isTargetLogicalOp = tgtClass === 'and' || tgtClass === 'or' || tgtClass === 'not';

          if (isSourceLogicalOp && isTargetLogicalOp) {
            // If both end are logical operators then the edge should be connected to the input port of the target and the output port of the input
            porttarget = targetNodeInputPortId;
            portsource = sourceNodeOutputPortId;
          } // If just one end of logical operator then the edge should be connected to the input port of the logical operator
          else if (isSourceLogicalOp) {
              portsource = sourceNodeInputPortId;
              porttarget = targetNodeOutputPortId;
            } else if (isTargetLogicalOp) {
              portsource = sourceNodeOutputPortId;
              porttarget = targetNodeInputPortId;
            }
        }
      } // The default portsource/porttarget are the source/target themselves. If they are not set use these defaults.
      // The portsource and porttarget are determined set them in data object.


      data.portsource = portsource || source;
      data.porttarget = porttarget || target;
      var eles = cy.add({
        group: "edges",
        data: data,
        css: css
      });
      var newEdge = eles[eles.length - 1];
      return newEdge;
    };

    elementUtilities.addProcessWithConvenientEdges = function (_source, _target, nodeParams) {
      // If source and target IDs are given get the elements by IDs
      var source = typeof _source === 'string' ? cy.getElementById(_source) : _source;
      var target = typeof _target === 'string' ? cy.getElementById(_target) : _target; // Process parent should be the closest common ancestor of the source and target nodes

      var processParent = cy.collection([source[0], target[0]]).commonAncestors().first(); // Process should be at the middle of the source and target nodes

      var x = (source.position('x') + target.position('x')) / 2;
      var y = (source.position('y') + target.position('y')) / 2; // Create the process with given/calculated variables

      var process = elementUtilities.addNode(x, y, nodeParams, undefined, processParent.id());
      var xdiff = source.position('x') - target.position('x');
      var ydiff = source.position('y') - target.position('y');

      if (Math.abs(xdiff) >= Math.abs(ydiff)) {
        if (xdiff < 0) elementUtilities.setPortsOrdering(process, 'L-to-R');else elementUtilities.setPortsOrdering(process, 'R-to-L');
      } else {
        if (ydiff < 0) elementUtilities.setPortsOrdering(process, 'T-to-B');else elementUtilities.setPortsOrdering(process, 'B-to-T');
      } // Create the edges one is between the process and the source node (which should be a consumption),
      // the other one is between the process and the target node (which should be a production).
      // For more information please refer to SBGN-PD reference card.


      var edgeBtwSrc = elementUtilities.addEdge(source.id(), process.id(), {
        "class": 'consumption',
        language: nodeParams.language
      });
      var edgeBtwTgt = elementUtilities.addEdge(process.id(), target.id(), {
        "class": 'production',
        language: nodeParams.language
      }); // Create a collection including the elements and to be returned

      var collection = cy.collection([process[0], edgeBtwSrc[0], edgeBtwTgt[0]]);
      return collection;
    };
    /*
     * This method assumes that param.nodesToMakeCompound contains at least one node
     * and all of the nodes including in it have the same parent. It creates a compound fot the given nodes an having the given type.
     */


    elementUtilities.createCompoundForGivenNodes = function (nodesToMakeCompound, compoundType) {
      var oldParentId = nodesToMakeCompound[0].data("parent");
      var language = nodesToMakeCompound[0].data("language"); // if nodesToMakeCompound contain both PD and AF nodes, then set language of compound as Unknown

      for (var i = 1; i < nodesToMakeCompound.length; i++) {
        if (nodesToMakeCompound[i] != language) {
          language = "Unknown";
          break;
        }
      } // The parent of new compound will be the old parent of the nodes to make compound. x, y and id parameters are not set.


      var newCompound = elementUtilities.addNode(undefined, undefined, {
        "class": compoundType,
        language: language
      }, undefined, oldParentId);
      var newCompoundId = newCompound.id();
      var newEles = elementUtilities.changeParent(nodesToMakeCompound, newCompoundId);
      newEles = newEles.union(newCompound);
      return newEles;
    };

    elementUtilities.createTranslationReaction = function (mRnaName, proteinName, processPosition, edgeLength) {
      var defaultProcessProperties = elementUtilities.getDefaultProperties("translation");
      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties("source and sink");
      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties("nucleic acid feature");
      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties("macromolecule");
      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;
      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;
      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;
      var processWidth = defaultProcessProperties.width || 50;
      var processHeight = defaultProcessProperties.height || 50;
      var processPosition = processPosition || elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var edgeLength = edgeLength || 60;
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, "L-to-R");
      processNode.data('justAdded', true);
      var xPosOfSourceAndSinkNode = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;
      var yPosOfSourceAndSinkNode = processPosition.y;
      var sourceAndSinkNode = elementUtilities.addNode(xPosOfSourceAndSinkNode, yPosOfSourceAndSinkNode, {
        "class": 'source and sink',
        language: 'PD'
      });
      sourceAndSinkNode.data('justAdded', true);
      var consumptionEdge = elementUtilities.addEdge(sourceAndSinkNode.id(), processNode.id(), {
        "class": 'consumption',
        language: 'PD'
      });
      consumptionEdge.data('justAdded', true);
      var xPosOfmRnaNode = processPosition.x;
      var yPosOfmRnaNode = processPosition.y - edgeLength - processHeight / 2 - nucleicAcidFeatureHeight / 2;
      var mRnaNode = elementUtilities.addNode(xPosOfmRnaNode, yPosOfmRnaNode, {
        "class": 'nucleic acid feature',
        language: 'PD'
      });
      mRnaNode.data('justAdded', true);
      mRnaNode.data('label', mRnaName);
      var infoboxObjectOfGene = {
        clazz: "unit of information",
        label: {
          text: 'ct:mRNA'
        },
        bbox: {
          w: 45,
          h: 15
        }
      };
      elementUtilities.addStateOrInfoBox(mRnaNode, infoboxObjectOfGene);
      var necessaryStimulationEdge = elementUtilities.addEdge(mRnaNode.id(), processNode.id(), {
        "class": 'necessary stimulation',
        language: 'PD'
      });
      necessaryStimulationEdge.data('justAdded', true);
      var xPosOfProteinNode = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;
      var yPostOfProteinNode = processPosition.y;
      var proteinNode = elementUtilities.addNode(xPosOfProteinNode, yPostOfProteinNode, {
        "class": 'macromolecule',
        language: 'PD'
      });
      proteinNode.data('justAdded', true);
      proteinNode.data('label', proteinName);
      var productionEdge = elementUtilities.addEdge(processNode.id(), proteinNode.id(), {
        "class": 'production',
        language: 'PD'
      });
      productionEdge.data('justAdded', true);
      cy.endBatch(); //filter the just added elememts to return them and remove just added mark

      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles; // Return the just added elements
    };

    elementUtilities.createTranscriptionReaction = function (geneName, mRnaName, processPosition, edgeLength) {
      var defaultProcessProperties = elementUtilities.getDefaultProperties("transcription");
      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties("source and sink");
      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties("nucleic acid feature");
      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;
      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;
      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;
      var processWidth = defaultProcessProperties.width || 50;
      var processHeight = defaultProcessProperties.height || 50;
      var processPosition = processPosition || elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var edgeLength = edgeLength || 60;
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, "L-to-R");
      processNode.data('justAdded', true);
      var xPosOfSourceAndSinkNode = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;
      var yPosOfSourceAndSinkNode = processPosition.y;
      var sourceAndSinkNode = elementUtilities.addNode(xPosOfSourceAndSinkNode, yPosOfSourceAndSinkNode, {
        "class": 'source and sink',
        language: 'PD'
      });
      sourceAndSinkNode.data('justAdded', true);
      var consumptionEdge = elementUtilities.addEdge(sourceAndSinkNode.id(), processNode.id(), {
        "class": 'consumption',
        language: 'PD'
      });
      consumptionEdge.data('justAdded', true);
      var xPosOfGeneNode = processPosition.x;
      var yPosOfGeneNode = processPosition.y - edgeLength - processHeight / 2 - nucleicAcidFeatureHeight / 2;
      var geneNode = elementUtilities.addNode(xPosOfGeneNode, yPosOfGeneNode, {
        "class": 'nucleic acid feature',
        language: 'PD'
      });
      geneNode.data('justAdded', true);
      geneNode.data('label', geneName);
      var infoboxObjectOfGene = {
        clazz: "unit of information",
        label: {
          text: 'ct:gene'
        },
        bbox: {
          w: 36,
          h: 15
        }
      };
      elementUtilities.addStateOrInfoBox(geneNode, infoboxObjectOfGene);
      var necessaryStimulationEdge = elementUtilities.addEdge(geneNode.id(), processNode.id(), {
        "class": 'necessary stimulation',
        language: 'PD'
      });
      necessaryStimulationEdge.data('justAdded', true);
      var xPosOfmRnaNode = processPosition.x + edgeLength + processWidth / 2 + nucleicAcidFeatureWidth / 2;
      var yPostOfmRnaNode = processPosition.y;
      var mRnaNode = elementUtilities.addNode(xPosOfmRnaNode, yPostOfmRnaNode, {
        "class": 'nucleic acid feature',
        language: 'PD'
      });
      mRnaNode.data('justAdded', true);
      mRnaNode.data('label', mRnaName);
      var infoboxObjectOfmRna = {
        clazz: "unit of information",
        label: {
          text: 'ct:mRNA'
        },
        bbox: {
          w: 45,
          h: 15
        }
      };
      elementUtilities.addStateOrInfoBox(mRnaNode, infoboxObjectOfmRna);
      var productionEdge = elementUtilities.addEdge(processNode.id(), mRnaNode.id(), {
        "class": 'production',
        language: 'PD'
      });
      productionEdge.data('justAdded', true);
      cy.endBatch(); //filter the just added elememts to return them and remove just added mark

      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles; // Return the just added elements
    };

    elementUtilities.rotate90 = function (point, center) {
      var relativeX = center.x - point.x;
      var relativeY = center.y - point.y;
      var relativeRotatedX = relativeY;
      var relativeRotatedY = -1 * relativeX;
      var resultX = relativeRotatedX + center.x;
      var resultY = relativeRotatedY + center.y;
      return {
        x: resultX,
        y: resultY
      };
    };

    elementUtilities.createTranslation = function (regulatorLabel, outputLabel, orientation) {
      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties("source and sink");
      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties("nucleic acid feature");
      var defaultMacromoleculePropeties = elementUtilities.getDefaultProperties("macromolecule");
      var defaultProcessProperties = elementUtilities.getDefaultProperties("process");
      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;
      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;
      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;
      var macromoleculeWidth = defaultMacromoleculePropeties.width || 50;
      var processWidth = defaultProcessProperties.width || 50;
      var processHeight = defaultProcessProperties.height || 50;
      var processPosition = elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var edgeLength = 30;
      var vertical = orientation === "vertical";
      var processPortsOrdering = vertical ? "T-to-B" : "L-to-R";
      var minInfoboxDimension = 15;
      var widthPerChar = 6;
      var regulatorInfoboxLabel = "ct:mRNA";
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);
      processNode.data('justAdded', true);
      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;
      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;
      var yPosOfInput = processPosition.y;
      var yPosOfOutput = processPosition.y;
      var nodePosition = {
        x: xPosOfInput,
        y: yPosOfInput
      };

      if (vertical) {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": 'source and sink',
        language: 'PD'
      });
      inputNode.data("justAdded", true);
      inputNode.data("label", label);
      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {
        "class": 'consumption',
        language: 'PD'
      });
      inputEdge.data("justAdded", true);
      nodePosition = {
        x: xPosOfOutput,
        y: yPosOfOutput
      };

      if (vertical) {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": "macromolecule",
        language: 'PD'
      });
      outputNode.data("justAdded", true);
      outputNode.data("label", outputLabel);
      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {
        "class": 'production',
        language: 'PD'
      });
      outputEdge.data("justAdded", true);
      var xPosOfRegulator = processPosition.x;
      var dimension = vertical ? nucleicAcidFeatureWidth : nucleicAcidFeatureHeight;
      var yPosOfRegulator = processPosition.y - (processHeight / 2 + dimension / 2 + edgeLength);
      nodePosition = {
        x: xPosOfRegulator,
        y: yPosOfRegulator
      };

      if (vertical) {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": "nucleic acid feature",
        language: 'PD'
      });
      regulatorNode.data('justAdded', true);
      regulatorNode.data('label', regulatorLabel);
      infoboxObject = {
        clazz: "unit of information",
        label: {
          text: regulatorInfoboxLabel
        },
        bbox: {
          w: Math.max(regulatorInfoboxLabel.length * widthPerChar, minInfoboxDimension),
          h: minInfoboxDimension
        }
      };
      elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);
      var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {
        "class": 'necessary stimulation',
        language: 'PD'
      });
      regulatorEdge.data('justAdded', true);
      cy.endBatch();
      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles;
    };

    elementUtilities.createTranscription = function (label, orientation) {
      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties("source and sink");
      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties("nucleic acid feature");
      var defaultProcessProperties = elementUtilities.getDefaultProperties("process");
      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;
      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;
      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;
      var processWidth = defaultProcessProperties.width || 50;
      var processHeight = defaultProcessProperties.height || 50;
      var processPosition = elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var edgeLength = 30;
      var vertical = orientation === "vertical";
      var processPortsOrdering = vertical ? "T-to-B" : "L-to-R";
      var minInfoboxDimension = 15;
      var widthPerChar = 6;
      var outputInfoboxLabel = "ct:mRNA";
      var regulatorInfoboxLabel = "ct:gene";
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);
      processNode.data('justAdded', true);
      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;
      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + nucleicAcidFeatureWidth / 2;
      var yPosOfInput = processPosition.y;
      var yPosOfOutput = processPosition.y;
      var nodePosition = {
        x: xPosOfInput,
        y: yPosOfInput
      };

      if (vertical) {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": 'source and sink',
        language: 'PD'
      });
      inputNode.data("justAdded", true);
      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {
        "class": 'consumption',
        language: 'PD'
      });
      inputEdge.data("justAdded", true);
      nodePosition = {
        x: xPosOfOutput,
        y: yPosOfOutput
      };

      if (vertical) {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": 'nucleic acid feature',
        language: 'PD'
      });
      outputNode.data("justAdded", true);
      outputNode.data("label", label);
      infoboxObject = {
        clazz: "unit of information",
        label: {
          text: outputInfoboxLabel
        },
        bbox: {
          w: Math.max(outputInfoboxLabel.length * widthPerChar, minInfoboxDimension),
          h: minInfoboxDimension
        }
      };
      elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);
      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {
        "class": 'production',
        language: 'PD'
      });
      outputEdge.data("justAdded", true);
      var xPosOfRegulator = processPosition.x;
      var dimension = vertical ? nucleicAcidFeatureWidth : nucleicAcidFeatureHeight;
      var yPosOfRegulator = processPosition.y - (processHeight / 2 + dimension / 2 + edgeLength);
      nodePosition = {
        x: xPosOfRegulator,
        y: yPosOfRegulator
      };

      if (vertical) {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": "nucleic acid feature",
        language: 'PD'
      });
      regulatorNode.data('justAdded', true);
      regulatorNode.data('label', label);
      infoboxObject = {
        clazz: "unit of information",
        label: {
          text: regulatorInfoboxLabel
        },
        bbox: {
          w: Math.max(regulatorInfoboxLabel.length * widthPerChar, minInfoboxDimension),
          h: minInfoboxDimension
        }
      };
      elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);
      var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {
        "class": 'necessary stimulation',
        language: 'PD'
      });
      regulatorEdge.data('justAdded', true);
      cy.endBatch();
      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles;
    };

    elementUtilities.createDegradation = function (macromolecule, orientation) {
      var macromoleculeName = macromolecule.name;
      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties("macromolecule");
      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;
      var defaultProcessProperties = elementUtilities.getDefaultProperties("catalytic");
      var processWidth = defaultProcessProperties.width || 50;
      var processPosition = elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var edgeLength = 30;
      var vertical = orientation === "vertical";
      var processPortsOrdering = vertical ? "T-to-B" : "L-to-R";
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);
      processNode.data('justAdded', true);
      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;
      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;
      var yPosOfInput = processPosition.y;
      var yPosOfOutput = processPosition.y;
      var nodePosition = {
        x: xPosOfInput,
        y: yPosOfInput
      };

      if (vertical) {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": 'macromolecule',
        language: 'PD'
      });
      inputNode.data("justAdded", true);
      inputNode.data("label", macromoleculeName);
      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {
        "class": 'consumption',
        language: 'PD'
      });
      inputEdge.data("justAdded", true);
      nodePosition = {
        x: xPosOfOutput,
        y: yPosOfOutput
      };

      if (vertical) {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": 'source and sink',
        language: 'PD'
      });
      outputNode.data("justAdded", true);
      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {
        "class": 'production',
        language: 'PD'
      });
      outputEdge.data("justAdded", true);
      cy.endBatch();
      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles;
    };

    elementUtilities.createComplexProteinFormation = function (proteinLabels, complexLabel, regulator, orientation, reverse) {
      var hasRegulator = regulator.name !== undefined;
      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties("macromolecule");
      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};
      var defaultProcessProperties = elementUtilities.getDefaultProperties("catalytic");
      var processWidth = defaultProcessProperties.width || 50;
      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;
      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;
      var processHeight = defaultProcessProperties.height || 50;
      var regulatorHeight = defaultRegulatorProperties.height || 50;
      var processPosition = elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var edgeLength = 30;
      var processPortsOrdering = orientation === "vertical" ? "T-to-B" : "L-to-R";
      var minInfoboxDimension = 20;
      var widthPerChar = 6;
      var tilingPaddingVertical = 15;
      var tilingPaddingHorizontal = 15;
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);
      processNode.data('justAdded', true);
      var offsetX = processWidth / 2 + edgeLength + macromoleculeWidth / 2;
      var xPosOfProtein = reverse ? processPosition.x + offsetX : processPosition.x - offsetX;
      var proteinCount = proteinLabels.length;
      var macromoleculeDimension = orientation === "vertical" ? macromoleculeWidth : macromoleculeHeight;
      var stepOffset = macromoleculeDimension + tilingPaddingVertical;
      var offsetY = (proteinCount - 1) / 2 * (macromoleculeDimension + tilingPaddingVertical);
      var horizontalOffsetX = (proteinCount - 1) / 2 * (macromoleculeDimension + tilingPaddingHorizontal);
      var yPosOfProtein = processPosition.y - offsetY;
      proteinLabels.forEach(function (label) {
        var nodePosition = {
          x: xPosOfProtein,
          y: yPosOfProtein
        };

        if (orientation === "vertical") {
          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
        }

        var node = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
          "class": "macromolecule",
          language: "PD"
        });
        node.data("label", label);
        node.data("justAdded", true);
        yPosOfProtein += stepOffset;
        var source = reverse ? processNode.id() : node.id();
        var target = reverse ? node.id() : processNode.id();
        var edgeClass = reverse ? "production" : "consumption";
        var edge = elementUtilities.addEdge(source, target, {
          "class": edgeClass,
          language: "PD"
        });
        edge.data("justAdded", true);
      });
      var complexPos = {
        x: processPosition.x + (reverse ? -1 : 1) * offsetX,
        y: processPosition.y
      };

      if (orientation === "vertical") {
        complexPos = elementUtilities.rotate90(complexPos, processPosition);
      }

      var complex = elementUtilities.addNode(complexPos.x, complexPos.y, {
        "class": "complex",
        language: "PD"
      });
      complex.data("label", complexLabel);
      complex.data("justAdded", true);
      var source = reverse ? complex.id() : processNode.id();
      var target = reverse ? processNode.id() : complex.id();
      var edgeClass = reverse ? "consumption" : "production";
      var complexEdge = elementUtilities.addEdge(source, target, {
        "class": edgeClass,
        language: "PD"
      });
      complexEdge.data("justAdded", true);

      if (orientation === "vertical") {
        xPosOfProtein = complex.position("x") - horizontalOffsetX;
        yPosOfProtein = complex.position("y");
      } else {
        xPosOfProtein = complex.position("x");
        yPosOfProtein = complex.position("y") - offsetY;
      }

      proteinLabels.forEach(function (label) {
        var nodePosition = {
          x: xPosOfProtein,
          y: yPosOfProtein
        };
        var node = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
          "class": "macromolecule",
          language: "PD"
        }, undefined, complex.id());
        node.data("label", label);
        node.data("justAdded", true);

        if (orientation === "vertical") {
          xPosOfProtein += stepOffset;
        } else {
          yPosOfProtein += stepOffset;
        }
      });

      if (hasRegulator) {
        var regulatorName = regulator.name;
        var regulatorType = regulator.type;
        var regulatorEdgeType = regulator.edgeType;
        var regulatorMultimer = regulator.multimer;
        var xPosOfRegulator = processPosition.x;
        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);
        nodePosition = {
          x: xPosOfRegulator,
          y: yPosOfRegulator
        };

        if (orientation === "vertical") {
          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
        }

        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
          "class": regulatorType,
          language: 'PD'
        });
        regulatorNode.data('justAdded', true);
        regulatorNode.data('label', regulatorName);

        if (regulatorMultimer.enabled) {
          elementUtilities.setMultimerStatus(regulatorNode, true);
          var cardinality = regulatorMultimer.cardinality;

          if (cardinality != '') {
            var infoboxLabel = "N:" + cardinality;
            infoboxObject = {
              clazz: "unit of information",
              label: {
                text: infoboxLabel
              },
              bbox: {
                w: infoboxLabel.length * widthPerChar,
                h: minInfoboxDimension
              }
            };
            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);
          }
        }

        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {
          "class": regulatorEdgeType,
          language: 'PD'
        });
        regulatorEdge.data('justAdded', true);
      }

      cy.endBatch();
      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles;
    };

    elementUtilities.createMultimerization = function (macromolecule, regulator, regulatorMultimer, orientation) {
      var hasRegulator = regulator.name !== undefined;
      var macromoleculeName = macromolecule.name;
      var macromoleculeMultimerCardinality = macromolecule.cardinality;
      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties("macromolecule");
      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};
      var defaultProcessProperties = elementUtilities.getDefaultProperties("catalytic");
      var processWidth = defaultProcessProperties.width || 50;
      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;
      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;
      var processHeight = defaultProcessProperties.height || 50;
      var regulatorHeight = defaultRegulatorProperties.height || 50;
      var processPosition = elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var edgeLength = 30;
      var processPortsOrdering = orientation === "vertical" ? "T-to-B" : "L-to-R";
      var minInfoboxDimension = 20;
      var widthPerChar = 6;
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;
      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;
      var yPosOfInput = processPosition.y;
      var yPosOfOutput = processPosition.y;
      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);
      processNode.data('justAdded', true);
      var nodePosition = {
        x: xPosOfInput,
        y: yPosOfInput
      };

      if (orientation === "vertical") {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": 'macromolecule',
        language: 'PD'
      });
      inputNode.data("justAdded", true);
      inputNode.data("label", macromoleculeName);
      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {
        "class": 'consumption',
        language: 'PD'
      });
      inputEdge.data("justAdded", true);
      var cardinality = macromoleculeMultimerCardinality;

      if (cardinality !== '') {
        inputEdge.data("cardinality", cardinality);
      }

      nodePosition = {
        x: xPosOfOutput,
        y: yPosOfOutput
      };

      if (orientation === "vertical") {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": 'macromolecule',
        language: 'PD'
      });
      outputNode.data("justAdded", true);
      outputNode.data("label", macromoleculeName);
      elementUtilities.setMultimerStatus(outputNode, true);

      if (cardinality !== '') {
        var infoboxLabel = "N:" + cardinality;
        infoboxObject = {
          clazz: "unit of information",
          label: {
            text: infoboxLabel
          },
          bbox: {
            w: infoboxLabel.length * widthPerChar,
            h: minInfoboxDimension
          }
        };
        elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);
      }

      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {
        "class": 'production',
        language: 'PD'
      });
      outputEdge.data("justAdded", true);

      if (hasRegulator) {
        var regulatorName = regulator.name;
        var regulatorType = regulator.type;
        var regulatorEdgeType = regulator.edgeType;
        var xPosOfRegulator = processPosition.x;
        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);
        nodePosition = {
          x: xPosOfRegulator,
          y: yPosOfRegulator
        };

        if (orientation === "vertical") {
          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
        }

        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
          "class": regulatorType,
          language: 'PD'
        });
        regulatorNode.data('justAdded', true);
        regulatorNode.data('label', regulatorName);

        if (regulatorMultimer.enabled) {
          elementUtilities.setMultimerStatus(regulatorNode, true);
          var _cardinality = regulatorMultimer.cardinality;

          if (_cardinality != '') {
            var _infoboxLabel = "N:" + _cardinality;

            infoboxObject = {
              clazz: "unit of information",
              label: {
                text: _infoboxLabel
              },
              bbox: {
                w: _infoboxLabel.length * widthPerChar,
                h: minInfoboxDimension
              }
            };
            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);
          }
        }

        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {
          "class": regulatorEdgeType,
          language: 'PD'
        });
        regulatorEdge.data('justAdded', true);
      }

      cy.endBatch();
      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles;
    };

    elementUtilities.createConversion = function (macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels) {
      var hasRegulator = regulator.name !== undefined;
      var macromoleculeName = macromolecule.name;
      var macromoleculeIsMultimer = macromolecule.multimer.enabled;
      var macromoleculeMultimerCardinality = macromolecule.multimer.cardinality;
      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties("macromolecule");
      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};
      var defaultProcessProperties = elementUtilities.getDefaultProperties("catalytic");
      var processWidth = defaultProcessProperties.width || 50;
      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;
      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;
      var processHeight = defaultProcessProperties.height || 50;
      var regulatorHeight = defaultRegulatorProperties.height || 50;
      var processPosition = elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var edgeLength = 30;
      var processPortsOrdering = orientation === "vertical" ? "T-to-B" : "L-to-R";
      var minInfoboxDimension = 20;
      var widthPerChar = 6;
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;
      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;
      var yPosOfInput = processPosition.y;
      var yPosOfOutput = processPosition.y;
      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);
      processNode.data('justAdded', true);
      var nodePosition = {
        x: xPosOfInput,
        y: yPosOfInput
      };

      if (orientation === "vertical") {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": 'macromolecule',
        language: 'PD'
      });
      inputNode.data("justAdded", true);
      inputNode.data("label", macromoleculeName);

      if (macromoleculeIsMultimer) {
        elementUtilities.setMultimerStatus(inputNode, true);
        var cardinality = macromoleculeMultimerCardinality;

        if (cardinality != '') {
          var infoboxLabel = "N:" + cardinality;
          infoboxObject = {
            clazz: "unit of information",
            label: {
              text: infoboxLabel
            },
            bbox: {
              w: infoboxLabel.length * widthPerChar,
              h: minInfoboxDimension
            }
          };
          elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);
        }
      }

      inputInfoboxLabels.forEach(function (label) {
        var inputInfoboxWidth = label.length > 0 ? Math.max(widthPerChar * label.length, minInfoboxDimension) : minInfoboxDimension;
        var infoboxObject = {
          clazz: "unit of information",
          label: {
            text: label
          },
          bbox: {
            w: inputInfoboxWidth,
            h: minInfoboxDimension
          },
          style: {
            "shape-name": "ellipse"
          }
        };
        elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);
      });
      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {
        "class": 'consumption',
        language: 'PD'
      });
      inputEdge.data("justAdded", true);
      nodePosition = {
        x: xPosOfOutput,
        y: yPosOfOutput
      };

      if (orientation === "vertical") {
        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
      }

      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
        "class": 'macromolecule',
        language: 'PD'
      });
      outputNode.data("justAdded", true);
      outputNode.data("label", macromoleculeName);

      if (macromoleculeIsMultimer) {
        elementUtilities.setMultimerStatus(outputNode, true);
        var _cardinality2 = macromoleculeMultimerCardinality;

        if (_cardinality2 != '') {
          var _infoboxLabel2 = "N:" + _cardinality2;

          infoboxObject = {
            clazz: "unit of information",
            label: {
              text: _infoboxLabel2
            },
            bbox: {
              w: _infoboxLabel2.length * widthPerChar,
              h: minInfoboxDimension
            }
          };
          elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);
        }
      }

      outputInfoboxLabels.forEach(function (label) {
        var outputInfoboxWidth = label.length > 0 ? Math.max(widthPerChar * label.length, minInfoboxDimension) : minInfoboxDimension;
        infoboxObject = {
          clazz: "unit of information",
          label: {
            text: label
          },
          bbox: {
            w: outputInfoboxWidth,
            h: minInfoboxDimension
          },
          style: {
            "shape-name": "ellipse"
          }
        };
        elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);
      });
      [inputNode, outputNode].forEach(function (node) {
        var width = elementUtilities.calculateMinWidth(node);
        elementUtilities.resizeNodes(node, width, macromoleculeHeight, false, true);
      });

      if (orientation === "horizontal") {
        var newInputXPos = processPosition.x - edgeLength - processWidth / 2 - inputNode.data('bbox').w / 2;
        inputNode.position('x', newInputXPos);
        var newOutputXPos = processPosition.x + edgeLength + processWidth / 2 + outputNode.data('bbox').w / 2;
        outputNode.position('x', newOutputXPos);
      } else {
        var newInputYPos = processPosition.y - edgeLength - processWidth / 2 - inputNode.data('bbox').h / 2;
        inputNode.position('y', newInputYPos);
        var newOutputYPos = processPosition.y + edgeLength + processWidth / 2 + outputNode.data('bbox').h / 2;
        outputNode.position('y', newOutputYPos);
      }

      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {
        "class": 'production',
        language: 'PD'
      });
      outputEdge.data("justAdded", true);

      if (hasRegulator) {
        var regulatorName = regulator.name;
        var regulatorType = regulator.type;
        var xPosOfRegulator = processPosition.x;
        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);
        nodePosition = {
          x: xPosOfRegulator,
          y: yPosOfRegulator
        };

        if (orientation === "vertical") {
          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);
        }

        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
          "class": regulatorType,
          language: 'PD'
        });
        regulatorNode.data('justAdded', true);
        regulatorNode.data('label', regulatorName);

        if (regulatorMultimer.enabled) {
          elementUtilities.setMultimerStatus(regulatorNode, true);
          var _cardinality3 = regulatorMultimer.cardinality;

          if (_cardinality3 != '') {
            var _infoboxLabel3 = "N:" + _cardinality3;

            infoboxObject = {
              clazz: "unit of information",
              label: {
                text: _infoboxLabel3
              },
              bbox: {
                w: _infoboxLabel3.length * widthPerChar,
                h: minInfoboxDimension
              }
            };
            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);
          }
        }

        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {
          "class": 'catalysis',
          language: 'PD'
        });
        regulatorEdge.data('justAdded', true);
      }

      cy.endBatch();
      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles;
    };

    elementUtilities.createMetabolicReaction = function (inputs, outputs, reversible, regulator, regulatorMultimer, orientation) {
      var rotate90 = function rotate90(point, center) {
        var relativeX = center.x - point.x;
        var relativeY = center.y - point.y;
        var relativeRotatedX = relativeY;
        var relativeRotatedY = -1 * relativeX;
        var resultX = relativeRotatedX + center.x;
        var resultY = relativeRotatedY + center.y;
        return {
          x: resultX,
          y: resultY
        };
      };

      var hasRegulator = regulator.name !== undefined;
      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties("simple chemical");
      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};
      var defaultProcessProperties = elementUtilities.getDefaultProperties("catalytic");
      var processWidth = defaultProcessProperties.width || 50;
      var processHeight = defaultProcessProperties.height || 50;
      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;
      var simpleChemicalWidth = defaultSimpleChemicalProperties.width || 35;
      var regulatorHeight = defaultRegulatorProperties.height || 50;
      var processPosition = elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var tilingPaddingVertical = 15;
      var tilingPaddingHorizontal = 15;
      var edgeLength = 30;
      var processLeftSideEdgeType = reversible ? "production" : "consumption";
      var processRightSideEdgeType = "production";
      var processPortsOrdering = orientation === "vertical" ? "T-to-B" : "L-to-R";
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - simpleChemicalWidth / 2;
      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + simpleChemicalWidth / 2;
      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);
      processNode.data('justAdded', true);
      var numOfInputNodes = inputs.length;
      var numOfOutputNodes = outputs.length;
      var yPosOfInput = processPosition.y - (numOfInputNodes - 1) / 2 * (simpleChemicalHeight + tilingPaddingVertical);
      inputs.forEach(function (data, index) {
        var nodeName = data.name;
        var nodeType = data.type;

        if (index === 0) {
          yPosOfInput = processPosition.y;
        } else if (index % 2 === 1) {
          yPosOfInput = processPosition.y - (simpleChemicalHeight + tilingPaddingVertical) * Math.ceil(index / 2);
        } else {
          yPosOfInput = processPosition.y + (simpleChemicalHeight + tilingPaddingVertical) * (index / 2);
        }

        var nodePosition = {
          x: xPosOfInput,
          y: yPosOfInput
        };

        if (orientation === "vertical") {
          nodePosition = rotate90(nodePosition, processPosition);
        }

        var newNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
          "class": nodeType.toLowerCase(),
          language: "PD"
        });
        newNode.data("justAdded", true);
        newNode.data("label", nodeName);
        var newEdge;

        if (reversible) {
          newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {
            "class": processLeftSideEdgeType,
            language: "PD"
          }, undefined, undefined, 1);
        } else {
          newEdge = elementUtilities.addEdge(newNode.id(), processNode.id(), {
            "class": processLeftSideEdgeType,
            language: "PD"
          });
        }

        newEdge.data("justAdded", true);
      });
      var yPosOfOutput = processPosition.y - (numOfOutputNodes - 1) / 2 * (simpleChemicalHeight + tilingPaddingVertical);
      outputs.forEach(function (data, index) {
        var nodeName = data.name;
        var nodeType = data.type;

        if (index === 0) {
          yPosOfOutput = processPosition.y;
        } else if (index % 2 === 1) {
          yPosOfOutput = processPosition.y - (simpleChemicalHeight + tilingPaddingVertical) * Math.ceil(index / 2);
        } else {
          yPosOfOutput = processPosition.y + (simpleChemicalHeight + tilingPaddingVertical) * (index / 2);
        }

        var nodePosition = {
          x: xPosOfOutput,
          y: yPosOfOutput
        };

        if (orientation === "vertical") {
          nodePosition = rotate90(nodePosition, processPosition);
        }

        var newNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {
          "class": nodeType.toLowerCase(),
          language: "PD"
        });
        newNode.data("justAdded", true);
        newNode.data("label", nodeName);
        var newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {
          "class": processRightSideEdgeType,
          language: "PD"
        }, undefined, undefined, 0);
        newEdge.data("justAdded", true);
      }); // add regulator node

      if (hasRegulator) {
        var regulatorName = regulator.name;
        var regulatorType = regulator.type;
        var xPosOfRegulator = processPosition.x;
        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);
        var _nodePosition = {
          x: xPosOfRegulator,
          y: yPosOfRegulator
        };

        if (orientation === "vertical") {
          _nodePosition = rotate90(_nodePosition, processPosition);
        }

        var regulatorNode = elementUtilities.addNode(_nodePosition.x, _nodePosition.y, {
          "class": regulatorType,
          language: 'PD'
        });
        regulatorNode.data('justAdded', true);
        regulatorNode.data('label', regulatorName);

        if (regulatorMultimer.enabled) {
          elementUtilities.setMultimerStatus(regulatorNode, true);
          var cardinality = regulatorMultimer.cardinality;

          if (cardinality != '') {
            var infoboxLabel = "N:" + cardinality;
            infoboxObject = {
              clazz: "unit of information",
              label: {
                text: infoboxLabel
              },
              bbox: {
                w: infoboxLabel.length * 6,
                h: 15
              }
            };
            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);
          }
        }

        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {
          "class": 'catalysis',
          language: 'PD'
        });
        regulatorEdge.data('justAdded', true);
      }

      cy.endBatch();
      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles;
    };

    elementUtilities.createMetabolicCatalyticActivity = function (inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength) {
      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties("macromolecule");
      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties("simple chemical");
      var defaultCatalystTypeProperties = elementUtilities.getDefaultProperties(catalystType);
      var defaultProcessProperties = elementUtilities.getDefaultProperties("catalytic");
      var processWidth = defaultProcessProperties.width || 50;
      var processHeight = defaultProcessProperties.height || 50;
      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;
      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;
      var macromoleculeHeight = defaultMacromoleculProperties.height || 50;
      var catalystHeight = defaultCatalystTypeProperties.height || 50;
      var processPosition = processPosition || elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var tilingPaddingVertical = tilingPaddingVertical || 15;
      var tilingPaddingHorizontal = tilingPaddingHorizontal || 15;
      var edgeLength = edgeLength || 60;
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;
      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;
      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, "L-to-R");
      processNode.data('justAdded', true);
      var numOfInputNodes = inputNodeList.length;
      var numOfOutputNodes = outputNodeList.length;
      var yPosOfInput = processPosition.y - (numOfInputNodes - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical); // add input side nodes

      for (var i = 0; i < numOfInputNodes; i++) {
        if (inputNodeList[i].type == "Simple Chemical") {
          var newNode = elementUtilities.addNode(xPosOfInput, yPosOfInput, {
            "class": 'simple chemical',
            language: 'PD'
          });
          yPosOfInput += simpleChemicalHeight + tilingPaddingVertical;
        } else {
          var newNode = elementUtilities.addNode(xPosOfInput, yPosOfInput, {
            "class": 'macromolecule',
            language: 'PD'
          }); //update the y position

          yPosOfInput += macromoleculeHeight + tilingPaddingVertical;
        }

        newNode.data('justAdded', true);
        newNode.data('label', inputNodeList[i].name);
        var newEdge = elementUtilities.addEdge(newNode.id(), processNode.id(), {
          "class": 'consumption',
          language: 'PD'
        });
        newEdge.data('justAdded', true);
      }

      var yPosOfOutput = processPosition.y - (numOfOutputNodes - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical); // add output side nodes

      for (var i = 0; i < numOfOutputNodes; i++) {
        if (outputNodeList[i].type == "Simple Chemical") {
          var newNode = elementUtilities.addNode(xPosOfOutput, yPosOfOutput, {
            "class": 'simple chemical',
            language: 'PD'
          });
          yPosOfOutput += simpleChemicalHeight + tilingPaddingVertical;
        } else {
          var newNode = elementUtilities.addNode(xPosOfOutput, yPosOfOutput, {
            "class": 'macromolecule',
            language: 'PD'
          }); //update the y position

          yPosOfOutput += macromoleculeHeight + tilingPaddingVertical;
        }

        newNode.data('justAdded', true);
        newNode.data('label', outputNodeList[i].name);
        var newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {
          "class": 'production',
          language: 'PD'
        });
        newEdge.data('justAdded', true);
      } // add catalyst node


      var xPosOfCatalyst = processPosition.x;
      var yPosOfCatalyst = processPosition.y - (processHeight + catalystHeight + tilingPaddingVertical);
      var catalystNode = elementUtilities.addNode(xPosOfCatalyst, yPosOfCatalyst, {
        "class": catalystType,
        language: 'PD'
      });
      catalystNode.data('justAdded', true);
      catalystNode.data('label', catalystName);
      var catalystEdge = elementUtilities.addEdge(catalystNode.id(), processNode.id(), {
        "class": 'catalysis',
        language: 'PD'
      });
      catalystEdge.data('justAdded', true);
      cy.endBatch(); //filter the just added elememts to return them and remove just added mark

      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles; // Return the just added elements
    };

    elementUtilities.createActivationReaction = function (proteinName, processPosition, edgeLength, reverse) {
      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties("macromolecule");
      var defaultProcessProperties = elementUtilities.getDefaultProperties("activation");
      var processWidth = defaultProcessProperties.width || 50;
      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;
      var processPosition = processPosition || elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var edgeLength = edgeLength || 60;
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;
      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;
      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {
        "class": "process",
        language: "PD"
      });
      elementUtilities.setPortsOrdering(processNode, "L-to-R");
      processNode.data('justAdded', true);
      var yPosition = processPosition.y;
      var inputNode = elementUtilities.addNode(xPosOfInput, yPosition, {
        "class": "macromolecule",
        language: "PD"
      });
      inputNode.data("justAdded", true);
      inputNode.data("label", proteinName);
      var infoboxObject = {
        clazz: "unit of information",
        label: {
          text: reverse ? "active" : "inactive"
        },
        style: {
          "shape-name": "ellipse"
        },
        bbox: {
          w: 36,
          h: 15
        }
      };
      elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);
      var outputNode = elementUtilities.addNode(xPosOfOutput, yPosition, {
        "class": "macromolecule",
        language: "PD"
      });
      outputNode.data("justAdded", true);
      outputNode.data("label", proteinName);
      infoboxObject = {
        clazz: "unit of information",
        label: {
          text: reverse ? "inactive" : "active"
        },
        style: {
          "shape-name": "ellipse"
        },
        bbox: {
          w: 36,
          h: 15
        }
      };
      elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);
      var inputSideEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {
        "class": "consumption",
        language: "PD"
      });
      inputSideEdge.data("justAdded", true);
      var outputSideEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {
        "class": "production",
        language: "PD"
      });
      outputSideEdge.data("justAdded", true);
      cy.endBatch(); //filter the just added elememts to return them and remove just added mark

      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles; // Return the just added elements
    };
    /*
     * Creates a template reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included
     * in the complex. Parameters are explained below.
     * templateType: The type of the template reaction. It may be 'association', 'dissociation', 'reversible' or 'irreversible'.
     * nodeList: The list of the names and types of molecules which will involve in the reaction.
     * complexName: The name of the complex in the reaction.
     * processPosition: The modal position of the process in the reaction. The default value is the center of the canvas.
     * tilingPaddingVertical: This option will be passed to the cose-bilkent layout with the same name. The default value is 15.
     * tilingPaddingHorizontal: This option will be passed to the cose-bilkent layout with the same name. The default value is 15.
     * edgeLength: The distance between the process and the macromolecules at the both sides.
     */


    elementUtilities.createTemplateReaction = function (templateType, nodeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam) {
      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties("macromolecule");
      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties("simple chemical");
      var defaultProcessProperties = elementUtilities.getDefaultProperties(templateType);
      var processWidth = defaultProcessProperties.width || 50;
      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;
      var macromoleculeHeight = defaultMacromoleculProperties.height || 50;
      var simpleChemicalWidth = defaultSimpleChemicalProperties.width || 35;
      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;
      var processPosition = processPosition || elementUtilities.convertToModelPosition({
        x: cy.width() / 2,
        y: cy.height() / 2
      });
      var nodeList = nodeList;
      var complexName = complexName;
      var numOfMolecules = nodeList.length;
      var tilingPaddingVertical = tilingPaddingVertical || 15;
      var tilingPaddingHorizontal = tilingPaddingHorizontal || 15;
      var edgeLength = edgeLength || 60;
      cy.startBatch();

      if (!elementUtilities.getMapType()) {
        elementUtilities.setMapType("PD");
      }

      var xPositionOfFreeMacromolecules;
      var xPositionOfInputMacromolecules;

      if (templateType === 'association') {
        xPositionOfFreeMacromolecules = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;
      } else if (templateType === 'dissociation') {
        xPositionOfFreeMacromolecules = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;
      } else {
        xPositionOfFreeMacromolecules = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;
        xPositionOfInputMacromolecules = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;
      } //Create the process in template type


      var process;

      if (templateType === 'reversible' || templateType === 'irreversible') {
        process = elementUtilities.addNode(processPosition.x, processPosition.y, {
          "class": 'process',
          language: 'PD'
        });
        elementUtilities.setPortsOrdering(process, 'L-to-R');
      } else {
        process = elementUtilities.addNode(processPosition.x, processPosition.y, {
          "class": templateType,
          language: 'PD'
        });
        elementUtilities.setPortsOrdering(process, 'L-to-R');
      }

      process.data('justAdded', true); //Define the starting y position

      var yPosition = processPosition.y - (numOfMolecules - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical); //Create the free molecules

      for (var i = 0; i < numOfMolecules; i++) {
        // node addition operation is determined by molecule type
        if (nodeList[i].type == "Simple Chemical") {
          var newNode = elementUtilities.addNode(xPositionOfFreeMacromolecules, yPosition, {
            "class": 'simple chemical',
            language: 'PD'
          }); //update the y position

          yPosition += simpleChemicalHeight + tilingPaddingVertical;
        } else {
          var newNode = elementUtilities.addNode(xPositionOfFreeMacromolecules, yPosition, {
            "class": 'macromolecule',
            language: 'PD'
          }); //update the y position

          yPosition += macromoleculeHeight + tilingPaddingVertical;
        }

        newNode.data('justAdded', true);
        newNode.data('label', nodeList[i].name); //create the edge connected to the new molecule

        var newEdge;

        if (templateType === 'association') {
          newEdge = elementUtilities.addEdge(newNode.id(), process.id(), {
            "class": 'consumption',
            language: 'PD'
          });
        } else if (templateType === 'dissociation') {
          newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {
            "class": 'production',
            language: 'PD'
          });
        } else {
          //Group right or top elements in group id 1
          if (templateType === "irreversible") {
            newEdge = elementUtilities.addEdge(newNode.id(), process.id(), {
              "class": "consumption",
              language: 'PD'
            });
          } else {
            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {
              "class": "production",
              language: 'PD'
            }, undefined, undefined, 1);
          }
        }

        newEdge.data('justAdded', true);
      }

      if (templateType === 'association' || templateType == 'dissociation') {
        //Create the complex including macromolecules inside of it
        //Temprorarily add it to the process position we will move it according to the last size of it
        var complex = elementUtilities.addNode(processPosition.x, processPosition.y, {
          "class": 'complex',
          language: 'PD'
        });
        complex.data('justAdded', true);
        complex.data('justAddedLayoutNode', true); //If a name is specified for the complex set its label accordingly

        if (complexName) {
          complex.data('label', complexName);
        } //create the edge connnected to the complex


        var edgeOfComplex;

        if (templateType === 'association') {
          edgeOfComplex = elementUtilities.addEdge(process.id(), complex.id(), {
            "class": 'production',
            language: 'PD'
          });
        } else {
          edgeOfComplex = elementUtilities.addEdge(complex.id(), process.id(), {
            "class": 'consumption',
            language: 'PD'
          });
        }

        edgeOfComplex.data('justAdded', true);

        for (var i = 0; i < numOfMolecules; i++) {
          // Add a molecule(dependent on it's type) not having a previously defined id and having the complex created in this reaction as parent
          if (nodeList[i].type == 'Simple Chemical') {
            var newNode = elementUtilities.addNode(complex.position('x'), complex.position('y'), {
              "class": 'simple chemical',
              language: 'PD'
            }, undefined, complex.id());
          } else {
            var newNode = elementUtilities.addNode(complex.position('x'), complex.position('y'), {
              "class": 'macromolecule',
              language: 'PD'
            }, undefined, complex.id());
          }

          newNode.data('justAdded', true);
          newNode.data('label', nodeList[i].name);
          newNode.data('justAddedLayoutNode', true);
        }
      } else {
        //Create the input macromolecules
        var numOfInputMacromolecules = complexName.length;
        yPosition = processPosition.y - (numOfInputMacromolecules - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical);

        for (var i = 0; i < numOfInputMacromolecules; i++) {
          if (complexName[i].type == 'Simple Chemical') {
            var newNode = elementUtilities.addNode(xPositionOfInputMacromolecules, yPosition, {
              "class": 'simple chemical',
              language: 'PD'
            });
            yPosition += simpleChemicalHeight + tilingPaddingVertical;
          } else {
            var newNode = elementUtilities.addNode(xPositionOfInputMacromolecules, yPosition, {
              "class": 'macromolecule',
              language: 'PD'
            });
            yPosition += macromoleculeHeight + tilingPaddingVertical;
          }

          newNode.data('justAdded', true);
          newNode.data('label', complexName[i].name); //create the edge connected to the new macromolecule

          var newEdge; //Group the left or bottom elements in group id 0 if reversible

          if (templateType === "irreversible") {
            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {
              "class": "production",
              language: 'PD'
            });
          } else {
            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {
              "class": "production",
              language: 'PD'
            }, undefined, undefined, 0);
          }

          newEdge.data('justAdded', true);
        }
      }

      cy.endBatch();
      var layoutNodes = cy.nodes('[justAddedLayoutNode]');
      layoutNodes.removeData('justAddedLayoutNode');
      var layout = layoutNodes.layout({
        name: layoutParam.name,
        randomize: false,
        fit: false,
        animate: false,
        tilingPaddingVertical: tilingPaddingVertical,
        tilingPaddingHorizontal: tilingPaddingHorizontal,
        stop: function stop() {
          //If it is a reversible reaction no need to re-position complexes
          if (templateType === 'reversible') return; //re-position the nodes inside the complex

          var supposedXPosition;
          var supposedYPosition = processPosition.y;

          if (templateType === 'association') {
            supposedXPosition = processPosition.x + edgeLength + processWidth / 2 + complex.outerWidth() / 2;
          } else {
            supposedXPosition = processPosition.x - edgeLength - processWidth / 2 - complex.outerWidth() / 2;
          }

          var positionDiffX = (supposedXPosition - complex.position('x')) / 2;
          var positionDiffY = (supposedYPosition - complex.position('y')) / 2;
          elementUtilities.moveNodes({
            x: positionDiffX,
            y: positionDiffY
          }, complex);
        }
      }); // Do this check for cytoscape.js backward compatibility

      if (layout && layout.run && templateType !== 'reversible' && templateType !== 'irreversible') {
        layout.run();
      } //filter the just added elememts to return them and remove just added mark


      var eles = cy.elements('[justAdded]');
      eles.removeData('justAdded');
      cy.elements().unselect();
      eles.select();
      return eles; // Return the just added elements
    };
    /*
     * Move the nodes to a new parent and change their position if possDiff params are set.
     */


    elementUtilities.changeParent = function (nodes, newParent, posDiffX, posDiffY) {
      var newParentId = newParent == undefined || typeof newParent === 'string' ? newParent : newParent.id();
      var movedEles = nodes.move({
        "parent": newParentId
      });

      if (typeof posDiffX != 'undefined' || typeof posDiffY != 'undefined') {
        elementUtilities.moveNodes({
          x: posDiffX,
          y: posDiffY
        }, nodes);
      }

      elementUtilities.maintainPointer(movedEles);
      return movedEles;
    };

    elementUtilities.updateInfoboxStyle = function (node, index, newProps) {
      var infoboxObj = node.data('statesandinfos')[index];
      $.extend(infoboxObj.style, newProps);
      cy.style().update();
    };

    elementUtilities.updateInfoboxObj = function (node, index, newProps) {
      var infoboxObj = node.data('statesandinfos')[index];
      $.extend(infoboxObj, newProps);
    }; // Resize given nodes if useAspectRatio is truthy one of width or height should not be set.


    elementUtilities.resizeNodes = function (nodes, width, height, useAspectRatio, preserveRelativePos) {
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var ratio = undefined;
        var eleMustBeSquare = elementUtilities.mustBeSquare(node.data('class'));

        if (preserveRelativePos === true) {
          var oldWidth = node.data("bbox").w;
          var oldHeight = node.data("bbox").h;
        } // Note that both width and height should not be set if useAspectRatio is truthy


        if (!node.isParent()) {
          if (width) {
            if (useAspectRatio || eleMustBeSquare) {
              ratio = width / node.width();
            }

            node.data("bbox").w = width;
          }

          if (height) {
            if (useAspectRatio || eleMustBeSquare) {
              ratio = height / node.height();
            }

            node.data("bbox").h = height;
          }

          if (ratio && !height) {
            node.data("bbox").h = node.height() * ratio;
          } else if (ratio && !width) {
            node.data("bbox").w = node.width() * ratio;
          }
        } else {
          node.data("minHeight", "" + height);
          node.data("minWidth", "" + width);
          node.data("minWidthBiasLeft", "50%");
          node.data("minWidthBiasRight", "50%");
          node.data("minHeightBiasTop", "50%");
          node.data("minHeightBiasBottom", "50%");
        }
        /*    if (preserveRelativePos === true) {
             var statesandinfos = node.data('statesandinfos');
             var topBottom = statesandinfos.filter(box => (box.anchorSide === "top" || box.anchorSide === "bottom"));
             var rightLeft = statesandinfos.filter(box => (box.anchorSide === "right" || box.anchorSide === "left"));
              topBottom.forEach(function(box){
               if (box.bbox.x < 0) {
                 box.bbox.x = 0;
               }
               else if (box.bbox.x > oldWidth) {
                 box.bbox.x = oldWidth;
               }
               box.bbox.x = node.data("bbox").w * box.bbox.x / oldWidth;
             });
              rightLeft.forEach(function(box){
               if (box.bbox.y < 0) {
                 box.bbox.y = 0;
               }
               else if (box.bbox.y > oldHeight) {
                 box.bbox.y = oldHeight;
               }
               box.bbox.y = node.data("bbox").h * box.bbox.y / oldHeight;
             });
           } */

      }
    };

    elementUtilities.calculateMinWidth = function (node) {
      var defaultWidth = this.getDefaultProperties(node.data('class')).width; // Label width calculation

      var style = node.style();
      var fontFamiliy = style['font-family'];
      var fontSize = style['font-size'];
      var labelText = style['label'];

      if (labelText === "" && node.data('label') && node.data('label') !== "") {
        labelText = node.data('label');
      }

      var labelWidth = elementUtilities.getWidthByContent(labelText, fontFamiliy, fontSize);
      var statesandinfos = node.data('statesandinfos'); //Top and bottom infoBoxes
      //var topInfoBoxes = statesandinfos.filter(box => (box.anchorSide === "top" || ((box.anchorSide === "right" || box.anchorSide === "left") && (box.bbox.y <= 12))));
      //var bottomInfoBoxes = statesandinfos.filter(box => (box.anchorSide === "bottom" || ((box.anchorSide === "right" || box.anchorSide === "left") && (box.bbox.y >= node.data('bbox').h - 12))));

      var unitGap = 5;
      var topIdealWidth = unitGap;
      var bottomIdealWidth = unitGap;
      var rightMaxWidth = 0;
      var leftMaxWidth = 0;
      statesandinfos.forEach(function (box) {
        if (box.anchorSide === "top") {
          topIdealWidth += box.bbox.w + unitGap;
        } else if (box.anchorSide === "bottom") {
          bottomIdealWidth += box.bbox.w + unitGap;
        } else if (box.anchorSide === "right") {
          rightMaxWidth = box.bbox.w > rightMaxWidth ? box.bbox.w : rightMaxWidth;
        } else {
          leftMaxWidth = box.bbox.w > leftMaxWidth ? box.bbox.w : leftMaxWidth;
        }
      });
      var middleWidth = labelWidth + 2 * Math.max(rightMaxWidth / 2, leftMaxWidth / 2);
      var compoundWidth = 0;

      if (node.isParent()) {
        compoundWidth = node.children().boundingBox().w;
      }

      return Math.max(middleWidth, defaultWidth / 2, topIdealWidth, bottomIdealWidth, compoundWidth);
    };

    elementUtilities.calculateMinHeight = function (node) {
      var statesandinfos = node.data('statesandinfos');
      var margin = 7;
      var unitGap = 5;
      var defaultHeight = this.getDefaultProperties(node.data('class')).height;
      var leftInfoBoxes = statesandinfos.filter(function (box) {
        return box.anchorSide === "left";
      });
      var leftHeight = unitGap;
      leftInfoBoxes.forEach(function (box) {
        leftHeight += box.bbox.h + unitGap;
      });
      var rightInfoBoxes = statesandinfos.filter(function (box) {
        return box.anchorSide === "right";
      });
      var rightHeight = unitGap;
      rightInfoBoxes.forEach(function (box) {
        rightHeight += box.bbox.h + unitGap;
      });
      var style = node.style();
      var labelText = style['label'].split("\n").filter(function (text) {
        return text !== '';
      });
      var fontSize = parseFloat(style['font-size'].substring(0, style['font-size'].length - 2));
      var totalHeight = labelText.length * fontSize + 2 * margin;
      var compoundHeight = 0;

      if (node.isParent()) {
        compoundHeight = node.children().boundingBox().h;
      }

      return Math.max(totalHeight, defaultHeight / 2, leftHeight, rightHeight, compoundHeight);
    };

    elementUtilities.isResizedToContent = function (node) {
      if (!node || !node.isNode() || !node.data('bbox')) {
        return false;
      } //var w = node.data('bbox').w;
      //var h = node.data('bbox').h;


      var w = node.width();
      var h = node.height();
      var minW = elementUtilities.calculateMinWidth(node);
      var minH = elementUtilities.calculateMinHeight(node);
      if (w === minW && h === minH) return true;else return false;
    }; // Section End
    // Add remove utilities
    // Relocates state and info boxes. This function is expected to be called after add/remove state and info boxes


    elementUtilities.relocateStateAndInfos = function (ele) {
      var stateAndInfos = ele.isNode && ele.isNode() ? ele.data('statesandinfos') : ele;
      var length = stateAndInfos.length;

      if (length == 0) {
        return;
      } else if (length == 1) {
        stateAndInfos[0].bbox.x = 0;
        stateAndInfos[0].bbox.y = -50;
      } else if (length == 2) {
        stateAndInfos[0].bbox.x = 0;
        stateAndInfos[0].bbox.y = -50;
        stateAndInfos[1].bbox.x = 0;
        stateAndInfos[1].bbox.y = 50;
      } else if (length == 3) {
        stateAndInfos[0].bbox.x = -25;
        stateAndInfos[0].bbox.y = -50;
        stateAndInfos[1].bbox.x = 25;
        stateAndInfos[1].bbox.y = -50;
        stateAndInfos[2].bbox.x = 0;
        stateAndInfos[2].bbox.y = 50;
      } else {
        stateAndInfos[0].bbox.x = -25;
        stateAndInfos[0].bbox.y = -50;
        stateAndInfos[1].bbox.x = 25;
        stateAndInfos[1].bbox.y = -50;
        stateAndInfos[2].bbox.x = -25;
        stateAndInfos[2].bbox.y = 50;
        stateAndInfos[3].bbox.x = 25;
        stateAndInfos[3].bbox.y = 50;
      }
    }; // Change state value or unit of information box of given nodes with given index.
    // Type parameter indicates whether to change value or variable, it is valid if the box at the given index is a state variable.
    // Value parameter is the new value to set.
    // This method returns the old value of the changed data (We assume that the old value of the changed data was the same for all nodes).
    // Each character assumed to occupy 8 unit
    // Each infobox can have at most 32 units of width


    elementUtilities.changeStateOrInfoBox = function (nodes, index, value, type) {
      var result;

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var sbgnclass = node.data('class');
        var stateAndInfos = node.data('statesandinfos');
        var box = stateAndInfos[index];
        var oldLength = box.bbox.w;
        var newLength = 0;
        var content = '';

        if (box.clazz == "state variable") {
          if (!result) {
            result = box.state[type];
          }

          box.state[type] = value;

          if (box.state["value"] !== undefined) {
            content += box.state["value"];
          }

          if (box.state["variable"] !== undefined && box.state["variable"].length > 0) {
            content += box.state["variable"] + "@";
          }
        } else if (box.clazz == "unit of information") {
          if (!result) {
            result = box.label.text;
          }

          content += value;
          box.label.text = value;
        }

        var min = sbgnclass === 'SIF macromolecule' || sbgnclass === 'SIF simple chemical' ? 15 : 12;
        var fontFamily = box.style['font-family'];
        var fontSize = box.style['font-size'];
        var borderWidth = box.style['border-width'];
        var opts = {
          min: min,
          max: 48,
          margin: borderWidth / 2 + 0.5
        };
        var previousWidth = box.bbox.w;
        box.bbox.w = elementUtilities.getWidthByContent(content, fontFamily, fontSize, opts);

        if (box.anchorSide == "top" || box.anchorSide == "bottom") {
          var unitLayout = node.data()["auxunitlayouts"][box.anchorSide];

          if (unitLayout.units[unitLayout.units.length - 1].id == box.id) {
            var borderWidth = node.data()['border-width'];
            var shiftAmount = (box.bbox.w - previousWidth) / 2 * 100 / (node.outerWidth() - borderWidth);

            if (shiftAmount >= 0) {
              if (box.bbox.x + shiftAmount <= 100) {
                box.bbox.x = box.bbox.x + shiftAmount;
              }
            }
            /*  else{
               var previousInfoBbox = {x : 0, w:0};
               if(unitLayout.units.length > 1){
                 previousInfoBbox= unitLayout.units[unitLayout.units.length-2].bbox;      
               }
                
               
               sbgnvizInstance.classes.AuxUnitLayout.setIdealGap(node, box.anchorSide);
               var idealGap = sbgnvizInstance.classes.AuxUnitLayout.getCurrentGap(box.anchorSide);
               var newPosition = previousInfoBbox.x + (previousInfoBbox.w/2 + idealGap + box.bbox.w/2)*100 / (node.outerWidth() - borderWidth);
               box.bbox.x = newPosition;
               
             } */

          }
        }
        /* if (box.anchorSide === "top" || box.anchorSide === "bottom") {
          box.bbox.x += (box.bbox.w - oldLength) / 2;
          var units = (node.data('auxunitlayouts')[box.anchorSide]).units;
          var shiftIndex = 0;
          for (var i = 0; i < units.length; i++) {
            if(units[i] === box){
              shiftIndex = i;
              break;
            }
          }
          for (var j = shiftIndex+1; j < units.length; j++) {
              units[j].bbox.x += (box.bbox.w - oldLength);
          }
        } */

      } //TODO find a way to elimate this redundancy to update info-box positions


      node.data('border-width', node.data('border-width'));
      return result;
    }; // Add a new state or info box to given nodes.
    // The box is represented by the parameter obj.
    // This method returns the index of the just added box.


    elementUtilities.addStateOrInfoBox = function (nodes, obj) {
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var locationObj;
        var defaultProps = elementUtilities.getDefaultProperties(node.data('class'));
        var infoboxProps = defaultProps[obj.clazz];
        var bbox = obj.bbox || {
          w: infoboxProps.width,
          h: infoboxProps.height
        };
        var style = elementUtilities.getDefaultInfoboxStyle(node.data('class'), obj.clazz);

        if (obj.style) {
          $.extend(style, obj.style);
        }

        if (obj.clazz == "unit of information") {
          locationObj = sbgnvizInstance.classes.UnitOfInformation.create(node, cy, obj.label.text, bbox, obj.location, obj.position, style, obj.index, obj.id);
        } else if (obj.clazz == "state variable") {
          locationObj = sbgnvizInstance.classes.StateVariable.create(node, cy, obj.state.value, obj.state.variable, bbox, obj.location, obj.position, style, obj.index, obj.id);
        }
      }

      return locationObj;
    }; // Remove the state or info boxes of the given nodes at given index.
    // Returns the removed box.


    elementUtilities.removeStateOrInfoBox = function (nodes, locationObj) {
      var obj;

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var stateAndInfos = node.data('statesandinfos');
        var unit = stateAndInfos[locationObj.index];
        var unitClass = sbgnvizInstance.classes.getAuxUnitClass(unit);
        obj = unitClass.remove(unit, cy);
      }

      return obj;
    }; //Tiles informations boxes for given anchorSides


    elementUtilities.fitUnits = function (node, locations) {
      var obj = [];
      node.data('statesandinfos').forEach(function (ele) {
        obj.push({
          x: ele.bbox.x,
          y: ele.bbox.y,
          anchorSide: ele.anchorSide
        });
      });
      sbgnvizInstance.classes.AuxUnitLayout.fitUnits(node, cy, locations);
      return obj;
    }; //Check which anchorsides fits


    elementUtilities.checkFit = function (node, location) {
      //if no location given, it checks all possible locations
      return sbgnvizInstance.classes.AuxUnitLayout.checkFit(node, cy, location);
    }; //Modify array of aux layout units


    elementUtilities.modifyUnits = function (node, unit, anchorSide) {
      sbgnvizInstance.classes.AuxUnitLayout.modifyUnits(node, unit, anchorSide, cy);
    }; // Set multimer status of the given nodes to the given status.


    elementUtilities.setMultimerStatus = function (nodes, status) {
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var sbgnclass = node.data('class');
        var isMultimer = node.data('class').endsWith(' multimer');

        if (status) {
          // Make multimer status true
          if (!isMultimer) {
            node.data('class', sbgnclass + ' multimer');
          }
        } else {
          // Make multimer status false
          if (isMultimer) {
            node.data('class', sbgnclass.replace(' multimer', ''));
          }
        }
      }
    }; // Change font properties of the given elements with given font data


    elementUtilities.changeFontProperties = function (eles, data) {
      for (var prop in data) {
        eles.data(prop, data[prop]);
      }
    }; // This function gets an edge, and ends of that edge (Optionally it may take just the classes of the edge as well) as parameters.
    // It may return 'valid' (that ends is valid for that edge), 'reverse' (that ends is not valid for that edge but they would be valid
    // if you reverse the source and target), 'invalid' (that ends are totally invalid for that edge).


    elementUtilities.validateArrowEnds = function (edge, source, target, isReplacement) {
      // if map type is Unknown -- no rules applied
      if (elementUtilities.getMapType() == "HybridAny" || elementUtilities.getMapType() == "HybridSbgn" || !elementUtilities.getMapType()) return "valid";
      var edgeclass = typeof edge === 'string' ? edge : edge.data('class');
      var sourceclass = source.data('class');
      var targetclass = target.data('class');
      var mapType = elementUtilities.getMapType();
      var edgeConstraints = elementUtilities[mapType].connectivityConstraints[edgeclass];

      if (mapType == "AF") {
        if (sourceclass.startsWith("BA")) // we have separate classes for each biological activity
          sourceclass = "biological activity"; // but same rule applies to all of them

        if (targetclass.startsWith("BA")) // we have separate classes for each biological activity
          targetclass = "biological activity"; // but same rule applies to all of them
      } else if (mapType == "PD") {
        sourceclass = sourceclass.replace(/\s*multimer$/, '');
        targetclass = targetclass.replace(/\s*multimer$/, '');
      } // given a node, acting as source or target, returns boolean wether or not it has too many edges already


      function hasTooManyEdges(node, sourceOrTarget) {
        var nodeclass = node.data('class');
        nodeclass = nodeclass.replace(/\s*multimer$/, '');
        if (nodeclass.startsWith("BA")) nodeclass = "biological activity";
        /*
          On the logic below:
           Current edge count (incoming or outgoing) of nodes should be strictly less 
          than the maximum allowed if we are adding an edge to the node. This way
          it will never exceed the max count.
          
          Edges can be added in two different ways. Either they are added directly or
          they are added by being replaced from another node, i.e disconnected from
          one and connected to another.
           We can detect if the edge being added is added from a replacement by checking
          whether the source stayed the same when checking edge counts of the source node,
          and whether the target stayed the same when checking edge counts of the
          target node.
           Current edge count of nodes can be allowed to be equal to the maximum in 
          cases where a replacement is made. But we should be careful that this
          replacement operation is not also an addition operation as described above.
        */

        var totalTooMany = true;
        var edgeTooMany = true;

        if (sourceOrTarget == "source") {
          var sameEdgeCountOut = node.outgoers('edge[class="' + edgeclass + '"]').size();
          var totalEdgeCountOut = node.outgoers('edge').size();
          var maxTotal = edgeConstraints[nodeclass].asSource.maxTotal;
          var maxEdge = edgeConstraints[nodeclass].asSource.maxEdge;
          var compareStrict = !(isReplacement && edge.source() === source);
          var withinLimits = !maxTotal || compareStrict && totalEdgeCountOut < maxTotal || !compareStrict && totalEdgeCountOut <= maxTotal;

          if (withinLimits) {
            totalTooMany = false;
          } // then check limits for this specific edge class


          withinLimits = !maxEdge || compareStrict && sameEdgeCountOut < maxEdge || !compareStrict && sameEdgeCountOut <= maxEdge;

          if (withinLimits) {
            edgeTooMany = false;
          } // if only one of the limits is reached then edge is invalid


          return totalTooMany || edgeTooMany;
        } else {
          // node is used as target
          var sameEdgeCountIn = node.incomers('edge[class="' + edgeclass + '"]').size();
          var totalEdgeCountIn = node.incomers('edge').size();
          var maxTotal = edgeConstraints[nodeclass].asTarget.maxTotal;
          var maxEdge = edgeConstraints[nodeclass].asTarget.maxEdge;
          var compareStrict = !(isReplacement && edge.target() === target);
          var withinLimits = !maxTotal || compareStrict && totalEdgeCountIn < maxTotal || !compareStrict && totalEdgeCountIn <= maxTotal;

          if (withinLimits) {
            totalTooMany = false;
          }

          withinLimits = !maxEdge || compareStrict && sameEdgeCountIn < maxEdge || !compareStrict && sameEdgeCountIn <= maxEdge;

          if (withinLimits) {
            edgeTooMany = false;
          }

          return totalTooMany || edgeTooMany;
        }
      }

      function isInComplex(node) {
        var parentClass = node.parent().data('class');
        return parentClass && parentClass.startsWith('complex');
      }

      if (isInComplex(source) || isInComplex(target)) {
        // subunits of a complex are no longer EPNs, no connection allowed
        return 'invalid';
      } // check nature of connection


      if (edgeConstraints[sourceclass].asSource.isAllowed && edgeConstraints[targetclass].asTarget.isAllowed) {
        // check amount of connections
        if (!hasTooManyEdges(source, "source") && !hasTooManyEdges(target, "target")) {
          return 'valid';
        }
      } // try to reverse


      if (edgeConstraints[targetclass].asSource.isAllowed && edgeConstraints[sourceclass].asTarget.isAllowed) {
        if (!hasTooManyEdges(target, "source") && !hasTooManyEdges(source, "target")) {
          return 'reverse';
        }
      }

      return 'invalid';
    };

    elementUtilities.deleteAndPerformLayout = function (eles, layoutparam) {
      var result = eles.remove();

      if (typeof layoutparam === 'function') {
        layoutparam(); // If layoutparam is a function execute it
      } else {
        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.
        // Do this check for cytoscape.js backward compatibility

        if (layout && layout.run) {
          layout.run();
        }
      }

      return result;
    };
    /*
     * Hide given eles and perform given layout afterward. Layout parameter may be layout options
     * or a function to call.
     */


    elementUtilities.hideAndPerformLayout = function (eles, layoutparam) {
      var result = cy.viewUtilities().hide(eles); // Hide given eles

      if (typeof layoutparam === 'function') {
        layoutparam(); // If layoutparam is a function execute it
      } else {
        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.
        // Do this check for cytoscape.js backward compatibility

        if (layout && layout.run) {
          layout.run();
        }
      }

      return result;
    };
    /*
     * Unhide given eles and perform given layout afterward. Layout parameter may be layout options
     * or a function to call.
     */


    elementUtilities.showAndPerformLayout = function (eles, layoutparam) {
      var result = cy.viewUtilities().show(eles); // Show given eles

      if (typeof layoutparam === 'function') {
        layoutparam(); // If layoutparam is a function execute it
      } else {
        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.
        // Do this check for cytoscape.js backward compatibility

        if (layout && layout.run) {
          layout.run();
        }
      }

      return result;
    };
    /*
     * Change style/css of given eles by setting getting property name to the given value/values (Note that valueMap parameter may be
     * a single string or an id to value map).
     */


    elementUtilities.changeCss = function (eles, name, valueMap) {
      if (_typeof(valueMap) === 'object') {
        cy.startBatch();

        for (var i = 0; i < eles.length; i++) {
          var ele = cy.getElementById(eles[i].id());
          ele.css(name, valueMap[ele.id()]); // valueMap is an id to value map use it in this way
        }

        cy.endBatch();
      } else {
        eles.css(name, valueMap); // valueMap is just a string set css('name') for all eles to this value
      }
    };
    /*
     * Change data of given eles by setting getting property name to the given value/values (Note that valueMap parameter may be
     * a single string or an id to value map).
     */


    elementUtilities.changeData = function (eles, name, valueMap) {
      if (_typeof(valueMap) === 'object') {
        cy.startBatch();

        for (var i = 0; i < eles.length; i++) {
          var ele = cy.getElementById(eles[i].id());
          ele.data(name, valueMap[ele.id()]); // valueMap is an id to value map use it in this way
        }

        cy.endBatch();
      } else {
        eles.data(name, valueMap); // valueMap is just a string set css('name') for all eles to this value
      }
    };

    elementUtilities.updateSetField = function (ele, fieldName, toDelete, toAdd, callback) {
      var set = ele.data(fieldName);

      if (!set) {
        return;
      }

      var updates = {};

      if (toDelete != null && set[toDelete]) {
        delete set[toDelete];
        updates.deleted = toDelete;
      }

      if (toAdd != null) {
        set[toAdd] = true;
        updates.added = toAdd;
      }

      if (callback && (updates['deleted'] != null || updates['added'] != null)) {
        callback();
      }

      return updates;
    };
    /*
     * Return the set of all nodes present under the given position
     * renderedPos must be a point defined relatively to cytoscape container
     * (like renderedPosition field of a node)
     */


    elementUtilities.getNodesAt = function (renderedPos) {
      var nodes = cy.nodes();
      var x = renderedPos.x;
      var y = renderedPos.y;
      var resultNodes = [];

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var renderedBbox = node.renderedBoundingBox({
          includeNodes: true,
          includeEdges: false,
          includeLabels: false,
          includeShadows: false
        });

        if (x >= renderedBbox.x1 && x <= renderedBbox.x2) {
          if (y >= renderedBbox.y1 && y <= renderedBbox.y2) {
            resultNodes.push(node);
          }
        }
      }

      return resultNodes;
    };

    elementUtilities.demultimerizeClass = function (sbgnclass) {
      return sbgnclass.replace(" multimer", "");
    };
    /**
     * @param mapType - type of the current map (PD, AF or Unknown)
     */


    elementUtilities.setMapType = function (mapType) {
      elementUtilities.mapType = mapType;
      return mapType;
    };
    /**
     * return - map type
     */


    elementUtilities.getMapType = function () {
      return elementUtilities.mapType;
    };
    /**
     * Resets map type
     */


    elementUtilities.resetMapType = function () {
      elementUtilities.mapType = undefined;
    };
    /**
     * Keep consistency of links to self inside the data() structure.
     * This is needed whenever a node changes parents, for example,
     * as it is destroyed and recreated. But the data() stays identical.
     * This creates inconsistencies for the pointers stored in data(),
     * as they now point to a deleted node.
     */


    elementUtilities.maintainPointer = function (eles) {
      eles.nodes().forEach(function (ele) {
        // restore background images
        ele.emit('data'); // skip nodes without any auxiliary units

        if (!ele.data('statesandinfos') || ele.data('statesandinfos').length == 0) {
          return;
        }

        for (var side in ele.data('auxunitlayouts')) {
          ele.data('auxunitlayouts')[side].parentNode = ele.id();
        }

        for (var i = 0; i < ele.data('statesandinfos').length; i++) {
          ele.data('statesandinfos')[i].parent = ele.id();
        }
      });
    };

    elementUtilities.anyHasBackgroundImage = function (eles) {
      var obj = elementUtilities.getBackgroundImageObjs(eles);
      if (obj === undefined) return false;else {
        for (var key in obj) {
          var value = obj[key];
          if (value && !$.isEmptyObject(value)) return true;
        }

        return false;
      }
    };

    elementUtilities.hasBackgroundImage = function (ele) {
      if (!ele.isNode() || !ele.data('background-image')) {
        return false;
      }

      var bg;

      if (typeof ele.data('background-image') === "string") {
        bg = ele.data('background-image').split(" ");
      } else if (Array.isArray(obj['background-image'])) {
        bg = ele.data('background-image');
      }

      if (!bg) return false;
      var cloneImg = 'data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E'; // If cloneImg is not the only image or there are multiple images there is a background image

      var onlyHasCloneMarkerAsBgImage = bg.length === 1 && bg.indexOf(cloneImg) === 0;
      if (bg.length > 1 || !onlyHasCloneMarkerAsBgImage) return true;
      return false;
    };

    elementUtilities.getBackgroundImageURL = function (eles) {
      if (!eles || eles.length < 1) return;
      var commonURL = "";

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        if (!ele.isNode() || !elementUtilities.hasBackgroundImage(ele)) return;
        var url = ele.data('background-image').split(" ").pop();
        if (!url || url.indexOf('http') !== 0 || commonURL !== "" && commonURL !== url) return;else if (commonURL === "") commonURL = url;
      }

      return commonURL;
    };

    elementUtilities.getBackgroundImageObjs = function (eles) {
      if (!eles || eles.length < 1) return;
      var list = {};

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var obj = getBgObj(ele);
        if (Object.keys(obj).length < 1) return;
        list[ele.data('id')] = obj;
      }

      return list;

      function getBgObj(ele) {
        if (ele.isNode() && elementUtilities.hasBackgroundImage(ele)) {
          var keys = ['background-image', 'background-fit', 'background-image-opacity', 'background-position-x', 'background-position-y', 'background-height', 'background-width'];
          var obj = {};
          keys.forEach(function (key) {
            var value;

            if (ele.data(key) && typeof ele.data(key) === "string") {
              value = ele.data(key).split(" ")[0];
            } else {
              value = ele.data(key);
            }

            obj[key] = value;
          });
          return obj;
        } else if (ele.isNode()) return {};
      }
    };

    elementUtilities.getBackgroundFitOptions = function (eles) {
      if (!eles || eles.length < 1) return;
      var commonFit = "";

      for (var i = 0; i < eles.length; i++) {
        var node = eles[i];
        if (!node.isNode()) return;
        var fit = getFitOption(node);
        if (!fit || commonFit !== "" && fit !== commonFit) return;else if (commonFit === "") commonFit = fit;
      }

      var options = '<option value="none">None</option>' + '<option value="fit">Fit</option>' + '<option value="cover">Cover</option>' + '<option value="contain">Contain</option>';
      var searchKey = 'value="' + commonFit + '"';
      var index = options.indexOf(searchKey) + searchKey.length;
      return options.substr(0, index) + ' selected' + options.substr(index);

      function getFitOption(node) {
        if (!elementUtilities.hasBackgroundImage(node)) return;
        var f = node.data('background-fit');
        var h = node.data('background-height');
        if (!f || !h) return;
        f = f.split(" ");
        h = h.split(" ");
        if (f[f.length - 1] === "none") return h[h.length - 1] === "auto" ? "none" : "fit";else return f[f.length - 1];
      }
    };

    elementUtilities.updateBackgroundImage = function (nodes, bgObj) {
      if (!nodes || nodes.length == 0 || !bgObj) return;

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var obj = bgObj[node.data('id')];
        if (!obj || $.isEmptyObject(obj)) continue;
        var imgs = node.data('background-image') ? node.data('background-image').split(" ") : [];
        var xPos = node.data('background-position-x') ? node.data('background-position-x').split(" ") : [];
        var yPos = node.data('background-position-y') ? node.data('background-position-y').split(" ") : [];
        var widths = node.data('background-width') ? node.data('background-width').split(" ") : [];
        var heights = node.data('background-height') ? node.data('background-height').split(" ") : [];
        var fits = node.data('background-fit') ? node.data('background-fit').split(" ") : [];
        var opacities = node.data('background-image-opacity') ? ("" + node.data('background-image-opacity')).split(" ") : [];
        var index = -1;
        if (typeof obj['background-image'] === "string") index = imgs.indexOf(obj['background-image']);else if (Array.isArray(obj['background-image'])) index = imgs.indexOf(obj['background-image'][0]);
        if (index < 0) continue;

        if (obj['background-image'] && imgs.length > index) {
          var tmp = imgs[index];
          imgs[index] = obj['background-image'];
          obj['background-image'] = tmp;
        }

        if (obj['background-fit'] && fits.length > index) {
          var tmp = fits[index];
          fits[index] = obj['background-fit'];
          obj['background-fit'] = tmp;
        }

        if (obj['background-width'] && widths.length > index) {
          var tmp = widths[index];
          widths[index] = obj['background-width'];
          obj['background-width'] = tmp;
        }

        if (obj['background-height'] && heights.length > index) {
          var tmp = heights[index];
          heights[index] = obj['background-height'];
          obj['background-height'] = tmp;
        }

        if (obj['background-position-x'] && xPos.length > index) {
          var tmp = xPos[index];
          xPos[index] = obj['background-position-x'];
          obj['background-position-x'] = tmp;
        }

        if (obj['background-position-y'] && yPos.length > index) {
          var tmp = yPos[index];
          yPos[index] = obj['background-position-y'];
          obj['background-position-y'] = tmp;
        }

        if (obj['background-image-opacity'] && opacities.length > index) {
          var tmp = opacities[index];
          opacities[index] = obj['background-image-opacity'];
          obj['background-image-opacity'] = tmp;
        }

        node.data('background-image', imgs.join(" "));
        node.data('background-position-x', xPos.join(" "));
        node.data('background-position-y', yPos.join(" "));
        node.data('background-width', widths.join(" "));
        node.data('background-height', heights.join(" "));
        node.data('background-fit', fits.join(" "));
        node.data('background-image-opacity', opacities.join(" "));
      }

      return bgObj;
    };

    elementUtilities.changeBackgroundImage = function (nodes, oldImg, newImg, firstTime, updateInfo, promptInvalidImage, validateURL) {
      if (!nodes || nodes.length == 0 || !oldImg || !newImg) return;
      elementUtilities.removeBackgroundImage(nodes, oldImg);

      for (var key in newImg) {
        newImg[key]['firstTime'] = firstTime;
      }

      elementUtilities.addBackgroundImage(nodes, newImg, updateInfo, promptInvalidImage, validateURL);
      return {
        nodes: nodes,
        oldImg: newImg,
        newImg: oldImg,
        firstTime: false,
        promptInvalidImage: promptInvalidImage,
        validateURL: validateURL
      };
    }; // Add a background image to given nodes.


    elementUtilities.addBackgroundImage = function (nodes, bgObj, updateInfo, promptInvalidImage, validateURL) {
      if (!nodes || nodes.length == 0 || !bgObj) return;

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var obj = bgObj[node.data('id')];
        if (!obj || $.isEmptyObject(obj)) continue; // Load the image from local, else just put the URL

        if (obj['fromFile']) loadBackgroundThenApply(node, obj); // Validity of given URL should be checked before applying it
        else if (obj['firstTime']) {
            if (typeof validateURL === 'function') validateURL(node, obj, applyBackground, promptInvalidImage);else checkGivenURL(node, obj);
          } else applyBackground(node, obj);
      }

      function loadBackgroundThenApply(node, bgObj) {
        var reader = new FileReader();
        var imgFile = bgObj['background-image']; // Check whether given file is an image file

        if (imgFile.type.indexOf("image") !== 0) {
          if (promptInvalidImage) promptInvalidImage("Invalid image file is given!");
          return;
        }

        reader.readAsDataURL(imgFile);

        reader.onload = function (e) {
          var img = reader.result;

          if (img) {
            bgObj['background-image'] = img;
            bgObj['fromFile'] = false;
            applyBackground(node, bgObj);
          } else {
            if (promptInvalidImage) promptInvalidImage("Given file could not be read!");
          }
        };
      }

      function checkGivenURL(node, bgObj) {
        var url = bgObj['background-image'];
        var extension = url.split(/[?#]/)[0].split(".").pop();
        var validExtensions = ["png", "svg", "jpg", "jpeg"];

        if (!validExtensions.includes(extension)) {
          if (typeof promptInvalidImage === 'function') promptInvalidImage("Invalid URL is given!");
          return;
        }

        $.ajax({
          url: url,
          type: 'GET',
          success: function success(result, status, xhr) {
            applyBackground(node, bgObj);
          },
          error: function error(xhr, status, _error) {
            if (promptInvalidImage) promptInvalidImage("Invalid URL is given!");
          }
        });
      }

      function applyBackground(node, bgObj) {
        if (elementUtilities.hasBackgroundImage(node)) return;
        var imgs = node.data('background-image') ? node.data('background-image').split(" ") : [];
        var xPos = node.data('background-position-x') ? node.data('background-position-x').split(" ") : [];
        var yPos = node.data('background-position-y') ? node.data('background-position-y').split(" ") : [];
        var widths = node.data('background-width') ? node.data('background-width').split(" ") : [];
        var heights = node.data('background-height') ? node.data('background-height').split(" ") : [];
        var fits = node.data('background-fit') ? node.data('background-fit').split(" ") : [];
        var opacities = node.data('background-image-opacity') ? ("" + node.data('background-image-opacity')).split(" ") : [];
        var indexToInsert = imgs.length; // insert to length-1

        if (elementUtilities.hasCloneMarker(imgs)) {
          indexToInsert--;
        }

        imgs.splice(indexToInsert, 0, bgObj['background-image']);
        fits.splice(indexToInsert, 0, bgObj['background-fit']);
        opacities.splice(indexToInsert, 0, bgObj['background-image-opacity']);
        xPos.splice(indexToInsert, 0, bgObj['background-position-x']);
        yPos.splice(indexToInsert, 0, bgObj['background-position-y']);
        widths.splice(indexToInsert, 0, bgObj['background-width']);
        heights.splice(indexToInsert, 0, bgObj['background-height']);
        node.data('background-image', imgs.join(" "));
        node.data('background-position-x', xPos.join(" "));
        node.data('background-position-y', yPos.join(" "));
        node.data('background-width', widths.join(" "));
        node.data('background-height', heights.join(" "));
        node.data('background-fit', fits.join(" "));
        node.data('background-image-opacity', opacities.join(" "));
        bgObj['firstTime'] = false;
        if (updateInfo) updateInfo();
      }
    };

    elementUtilities.hasCloneMarker = function (imgs) {
      var cloneImg = 'data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E';
      return imgs.indexOf(cloneImg) > -1;
    }; // Remove a background image from given nodes.


    elementUtilities.removeBackgroundImage = function (nodes, bgObj) {
      if (!nodes || nodes.length == 0 || !bgObj) return;

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var obj = bgObj[node.data('id')];
        if (!obj) continue;
        var imgs = node.data('background-image') ? node.data('background-image').split(" ") : [];
        var xPos = node.data('background-position-x') ? node.data('background-position-x').split(" ") : [];
        var yPos = node.data('background-position-y') ? node.data('background-position-y').split(" ") : [];
        var widths = node.data('background-width') ? node.data('background-width').split(" ") : [];
        var heights = node.data('background-height') ? node.data('background-height').split(" ") : [];
        var fits = node.data('background-fit') ? node.data('background-fit').split(" ") : [];
        var opacities = node.data('background-image-opacity') ? ("" + node.data('background-image-opacity')).split(" ") : [];
        var index = -1;
        if (typeof obj['background-image'] === "string") index = imgs.indexOf(obj['background-image'].split(" ")[0]);else if (Array.isArray(obj['background-image'])) index = imgs.indexOf(obj['background-image'][0]);

        if (index > -1) {
          imgs.splice(index, 1);
          fits.splice(index, 1);
          opacities.splice(index, 1);
          xPos.splice(index, 1);
          yPos.splice(index, 1);
          widths.splice(index, 1);
          heights.splice(index, 1);
        }

        node.data('background-image', imgs.join(" "));
        node.data('background-position-x', xPos.join(" "));
        node.data('background-position-y', yPos.join(" "));
        node.data('background-width', widths.join(" "));
        node.data('background-height', heights.join(" "));
        node.data('background-fit', fits.join(" "));
        node.data('background-image-opacity', opacities.join(" "));
        bgObj['firstTime'] = false;
      }
    };

    elementUtilities.reverseEdge = function (edge) {
      var oldSource = edge.source().id();
      var oldTarget = edge.target().id();
      var oldPortSource = edge.data("portsource");
      var oldPortTarget = edge.data("porttarget");
      var segmentPoints = edge.segmentPoints();
      var controlPoints = edge.controlPoints();
      edge.data().source = oldTarget;
      edge.data().target = oldSource;
      edge.data().portsource = oldPortTarget;
      edge.data().porttarget = oldPortSource;
      edge = edge.move({
        target: oldSource,
        source: oldTarget
      });

      if (Array.isArray(segmentPoints)) {
        segmentPoints.reverse();
        edge.data().bendPointPositions = segmentPoints;

        if (Array.isArray(controlPoints)) {
          controlPoints.reverse();
          edge.data().controlPointPositions = controlPoints;
        }

        var edgeEditing = cy.edgeEditing('get');
        edgeEditing.initAnchorPoints(edge);
      }

      return edge;
    };
  }

  return elementUtilitiesExtender;
};

/***/ }),

/***/ "./src/utilities/lib-utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/lib-utilities.js ***!
  \****************************************/
/***/ ((module) => {

/* 
 * Utility file to get and set the libraries to which sbgnviz is dependent from any file.
 */
var libUtilities = function libUtilities() {};

libUtilities.setLibs = function (libs) {
  this.libs = libs;
};

libUtilities.getLibs = function () {
  return this.libs;
};

module.exports = libUtilities;

/***/ }),

/***/ "./src/utilities/main-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/main-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var libs = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js").getLibs();
/*
 * The main utilities to be exposed directly.
 */


module.exports = function () {
  var elementUtilities, options, cy, sbgnvizInstance;

  function mainUtilities(param) {
    elementUtilities = param.elementUtilities;
    options = param.optionUtilities.getOptions();
    cy = param.sbgnvizInstanceUtilities.getCy();
    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();
  }

  ;
  /*
   * Adds a new node with the given class and at the given coordinates. Considers undoable option.
   */

  mainUtilities.addNode = function (x, y, nodeParams, id, parent, visibility) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    } // update map type


    if (_typeof(nodeParams) == 'object') {
      /* 
            if (!elementUtilities.getMapType())
              elementUtilities.setMapType(nodeParams.language);
            else if (elementUtilities.getMapType() != nodeParams.language)
              elementUtilities.setMapType("Unknown"); */
    }

    if (!options.undoable) {
      return elementUtilities.addNode(x, y, nodeParams, id, parent, visibility);
    } else {
      var param = {
        newNode: {
          x: x,
          y: y,
          "class": nodeParams,
          id: id,
          parent: parent,
          visibility: visibility
        }
      };
      cy.undoRedo()["do"]("addNode", param);
    }
  };
  /*
   * Adds a new edge with the given class and having the given source and target ids. Considers undoable option.
   */


  mainUtilities.addEdge = function (source, target, edgeParams, invalidEdgeCallback, id, visibility) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    } // update map type


    if (_typeof(edgeParams) == 'object') {
      /*  if (!elementUtilities.getMapType())
         elementUtilities.setMapType(edgeParams.language);
       else if (elementUtilities.getMapType() != edgeParams.language)
         elementUtilities.setMapType("HybridAny"); */
    } // Get the validation result


    var edgeclass = edgeParams["class"] ? edgeParams["class"] : edgeParams;
    var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(source), cy.getElementById(target)); // If validation result is 'invalid' cancel the operation

    if (validation === 'invalid') {
      if (typeof invalidEdgeCallback === "function") {
        invalidEdgeCallback();
      }

      return;
    } // If validation result is 'reverse' reverse the source-target pair before creating the edge


    if (validation === 'reverse') {
      var temp = source;
      source = target;
      target = temp;
    }

    if (!options.undoable) {
      return elementUtilities.addEdge(source, target, edgeParams, id, visibility);
    } else {
      var param = {
        newEdge: {
          source: source,
          target: target,
          "class": edgeParams,
          id: id,
          visibility: visibility
        }
      };
      var result = cy.undoRedo()["do"]("addEdge", param);
      return result.eles;
    }
  };
  /*
   * Adds a process with convenient edges. For more information please see 'https://github.com/iVis-at-Bilkent/newt/issues/9'.
   * Considers undoable option.
   */


  mainUtilities.addProcessWithConvenientEdges = function (_source, _target, processType) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    } // If source and target IDs are given get the elements by IDs


    var source = typeof _source === 'string' ? cy.getElementById(_source) : _source;
    var target = typeof _target === 'string' ? cy.getElementById(_target) : _target; // If source or target does not have an EPN class the operation is not valid

    if (!elementUtilities.isEPNClass(source) || !elementUtilities.isEPNClass(target)) {
      return;
    }

    if (!options.undoable) {
      return elementUtilities.addProcessWithConvenientEdges(_source, _target, processType);
    } else {
      var param = {
        source: _source,
        target: _target,
        processType: processType
      };
      cy.undoRedo()["do"]("addProcessWithConvenientEdges", param);
    }
  }; // convert collapsed compound nodes to simple nodes
  // and update port values of pasted nodes and edges


  var cloneCollapsedNodesAndPorts = function cloneCollapsedNodesAndPorts(elesBefore) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    cy.elements().unselect();
    var elesAfter = cy.elements();
    var elesDiff = elesAfter.diff(elesBefore).left; // shallow copy collapsed nodes - collapsed compounds become simple nodes
    // data related to collapsed nodes are removed from generated clones
    // related issue: https://github.com/iVis-at-Bilkent/newt/issues/145

    var collapsedNodes = elesDiff.filter('node.cy-expand-collapse-collapsed-node');
    collapsedNodes.connectedEdges().remove();
    collapsedNodes.removeClass('cy-expand-collapse-collapsed-node');
    collapsedNodes.removeData('collapsedChildren');
    collapsedNodes.removeData('position-before-collapse size-before-collapse');
    collapsedNodes.removeData('expandcollapseRenderedCueSize expandcollapseRenderedStartX expandcollapseRenderedStartY'); // cloning ports

    elesDiff.nodes().forEach(function (_node) {
      if (_node.data("ports").length == 2) {
        var oldPortName0 = _node.data("ports")[0].id;

        var oldPortName1 = _node.data("ports")[1].id;

        _node.data("ports")[0].id = _node.id() + ".1";
        _node.data("ports")[1].id = _node.id() + ".2";

        _node.outgoers().edges().forEach(function (_edge) {
          if (_edge.data("portsource") == oldPortName0) {
            _edge.data("portsource", _node.data("ports")[0].id);
          } else if (_edge.data("portsource") == oldPortName1) {
            _edge.data("portsource", _node.data("ports")[1].id);
          } else {
            _edge.data("portsource", _node.id());
          }
        });

        _node.incomers().edges().forEach(function (_edge) {
          if (_edge.data("porttarget") == oldPortName0) {
            _edge.data("porttarget", _node.data("ports")[0].id);
          } else if (_edge.data("porttarget") == oldPortName1) {
            _edge.data("porttarget", _node.data("ports")[1].id);
          } else {
            _edge.data("porttarget", _node.id());
          }
        });
      } else {
        _node.outgoers().edges().forEach(function (_edge) {
          _edge.data("portsource", _node.id());
        });

        _node.incomers().edges().forEach(function (_edge) {
          _edge.data("porttarget", _node.id());
        });
      }
    });
    elesDiff.select();
  };
  /*
   * Clone given elements. Considers undoable option. Requires cytoscape-clipboard extension.
   */


  mainUtilities.cloneElements = function (eles, pasteAtMouseLoc) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (eles.length === 0) {
      return;
    }

    this.copyElements(eles);
    this.pasteElements(pasteAtMouseLoc);
  };
  /*
   * Copy given elements to clipboard. Requires cytoscape-clipboard extension.
   */


  mainUtilities.copyElements = function (eles) {
    cy.clipboard().copy(eles);
  };
  /*
   * Paste the elements copied to clipboard. Considers undoable option. Requires cytoscape-clipboard extension.
   */


  mainUtilities.pasteElements = function (pasteAtMouseLoc) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    var elesBefore = cy.elements();

    if (options.undoable) {
      cy.undoRedo()["do"]("paste", {
        pasteAtMouseLoc: pasteAtMouseLoc
      });
    } else {
      cy.clipboard().paste();
    }

    cloneCollapsedNodesAndPorts(elesBefore);
    cy.nodes(":selected").emit('data');
  };
  /*
   * Aligns given nodes in given horizontal and vertical order.
   * Horizontal and vertical parameters may be 'none' or undefined.
   * alignTo parameter indicates the leading node.
   * Requrires cytoscape-grid-guide extension and considers undoable option.
   */


  mainUtilities.align = function (nodes, horizontal, vertical, alignTo) {
    if (nodes.length === 0) {
      return;
    }

    if (options.undoable) {
      cy.undoRedo()["do"]("align", {
        nodes: nodes,
        horizontal: horizontal,
        vertical: vertical,
        alignTo: alignTo
      });
    } else {
      nodes.align(horizontal, vertical, alignTo);
    }

    if (cy.edges(":selected").length == 1) {
      cy.edges().unselect();
    }
  };
  /*
   * Create compound for given nodes. compoundType may be 'complex' or 'compartment'.
   * This method considers undoable option.
   */


  mainUtilities.createCompoundForGivenNodes = function (_nodes, compoundType) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    var nodes = _nodes;
    /*
     * Eleminate the nodes which cannot have a parent with given compound type
     */

    nodes = _nodes.filter(function (element, i) {
      if (typeof element === "number") {
        element = i;
      }

      var sbgnclass = element.data("class");
      return elementUtilities.isValidParent(sbgnclass, compoundType, element);
    });
    nodes = elementUtilities.getTopMostNodes(nodes); // All elements should have the same parent and the common parent should not be a 'complex'
    // if compoundType is 'compartent'
    // because the old common parent will be the parent of the new compartment after this operation and
    // 'complexes' cannot include 'compartments'

    if (nodes.length == 0 || !elementUtilities.allHaveTheSameParent(nodes) || (compoundType === 'compartment' || compoundType == 'submap') && nodes.parent().data('class') && nodes.parent().data('class').startsWith('complex')) {
      return;
    }

    if (cy.undoRedo()) {
      var param = {
        compoundType: compoundType,
        nodesToMakeCompound: nodes
      };
      cy.undoRedo()["do"]("createCompoundForGivenNodes", param);
    } else {
      elementUtilities.createCompoundForGivenNodes(nodes, compoundType);
    }
  };
  /*
   * Move the nodes to a new parent and change their position if possDiff params are set.
   * Considers undoable option and checks if the operation is valid.
   */


  mainUtilities.changeParent = function (nodes, _newParent, posDiffX, posDiffY) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    var newParent = typeof _newParent === 'string' ? cy.getElementById(_newParent) : _newParent; // New parent is supposed to be one of the root, a complex or a compartment

    if (newParent && !newParent.data("class").startsWith("complex") && newParent.data("class") != "compartment" && newParent.data("class") != "submap") {
      return;
    }
    /*
     * Eleminate the nodes which cannot have the newParent as their parent
     */


    nodes = nodes.filter(function (element, i) {
      if (typeof element === "number") {
        element = i;
      }

      var sbgnclass = element.data("class");
      return elementUtilities.isValidParent(sbgnclass, newParent, element);
    }); // Discard the nodes whose parent is already newParent.
    // Discard the newParent itself if it is among the nodes

    nodes = nodes.filter(function (ele, i) {
      if (typeof ele === "number") {
        ele = i;
      } // Discard the newParent if it is among the nodes


      if (newParent && ele.id() === newParent.id()) {
        return false;
      } // Discard the nodes whose parent is already newParent


      if (!newParent) {
        return ele.data('parent') != null;
      }

      return ele.data('parent') !== newParent.id();
    }); // If some nodes are ancestor of new parent eleminate them

    if (newParent) {
      nodes = nodes.difference(newParent.ancestors());
    } // If all nodes are eleminated return directly


    if (nodes.length === 0) {
      return;
    } // Just move the top most nodes


    nodes = elementUtilities.getTopMostNodes(nodes);
    var parentId = newParent ? newParent.id() : null;

    if (options.undoable) {
      var param = {
        firstTime: true,
        parentData: parentId,
        // It keeps the newParentId (Just an id for each nodes for the first time)
        nodes: nodes,
        posDiffX: posDiffX,
        posDiffY: posDiffY,
        // This is needed because the changeParent function called is not from elementUtilities
        // but from the undoRedo extension directly, so maintaining pointer is not automatically done.
        callback: elementUtilities.maintainPointer
      };
      cy.undoRedo()["do"]("changeParent", param); // This action is registered by undoRedo extension
    } else {
      elementUtilities.changeParent(nodes, parentId, posDiffX, posDiffY);
    }
  };
  /*
   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included
   * in the complex. Considers undoable option. For more information see the same function in elementUtilities
   */


  mainUtilities.createTranslationReaction = function (mRnaName, proteinName, processPosition, edgeLength) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createTranslationReaction(mRnaName, proteinName, processPosition, edgeLength);
    } else {
      var param = {
        mRnaName: mRnaName,
        proteinName: proteinName,
        processPosition: processPosition,
        edgeLength: edgeLength
      };
      cy.undoRedo()["do"]("createTranslationReaction", param);
    }
  };
  /*
   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included
   * in the complex. Considers undoable option. For more information see the same function in elementUtilities
   */


  mainUtilities.createTranscriptionReaction = function (geneName, mRnaName, processPosition, edgeLength) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createTranscriptionReaction(geneName, mRnaName, processPosition, edgeLength);
    } else {
      var param = {
        geneName: geneName,
        mRnaName: mRnaName,
        processPosition: processPosition,
        edgeLength: edgeLength
      };
      cy.undoRedo()["do"]("createTranscriptionReaction", param);
    }
  };

  mainUtilities.createTranslation = function (regulatorLabel, outputLabel, orientation) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createTranslation(regulatorLabel, outputLabel, orientation);
    } else {
      var param = {
        regulatorLabel: regulatorLabel,
        outputLabel: outputLabel,
        orientation: orientation
      };
      cy.undoRedo()["do"]("createTranslation", param);
    }
  };

  mainUtilities.createTranscription = function (label, orientation) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createTranscription(label, orientation);
    } else {
      var param = {
        label: label,
        orientation: orientation
      };
      cy.undoRedo()["do"]("createTranscription", param);
    }
  };

  mainUtilities.createDegradation = function (macromolecule, orientation) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createDegradation(macromolecule, orientation);
    } else {
      var param = {
        macromolecule: macromolecule,
        orientation: orientation
      };
      cy.undoRedo()["do"]("createDegradation", param);
    }
  };

  mainUtilities.createComplexProteinFormation = function (proteinLabels, complexLabel, regulator, orientation, reverse) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createComplexProteinFormation(proteinLabels, complexLabel, regulator, orientation, reverse);
    } else {
      var param = {
        proteinLabels: proteinLabels,
        complexLabel: complexLabel,
        regulator: regulator,
        orientation: orientation,
        reverse: reverse
      };
      cy.undoRedo()["do"]("createComplexProteinFormation", param);
    }
  };

  mainUtilities.createMultimerization = function (macromolecule, regulator, regulatorMultimer, orientation) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createMultimerization(macromolecule, regulator, regulatorMultimer, orientation);
    } else {
      var param = {
        macromolecule: macromolecule,
        regulator: regulator,
        regulatorMultimer: regulatorMultimer,
        orientation: orientation
      };
      cy.undoRedo()["do"]("createMultimerization", param);
    }
  };

  mainUtilities.createConversion = function (macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createConversion(macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels);
    } else {
      var param = {
        macromolecule: macromolecule,
        regulator: regulator,
        regulatorMultimer: regulatorMultimer,
        orientation: orientation,
        inputInfoboxLabels: inputInfoboxLabels,
        outputInfoboxLabels: outputInfoboxLabels
      };
      cy.undoRedo()["do"]("createConversion", param);
    }
  };

  mainUtilities.createMetabolicReaction = function (inputs, outputs, reversible, regulator, regulatorMultimer, orientation) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createMetabolicReaction(inputs, outputs, reversible, regulator, regulatorMultimer, orientation);
    } else {
      var param = {
        inputs: inputs,
        outputs: outputs,
        reversible: reversible,
        regulator: regulator,
        regulatorMultimer: regulatorMultimer,
        orientation: orientation
      };
      cy.undoRedo()["do"]("createMetabolicReaction", param);
    }
  };
  /*
   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included
   * in the complex. Considers undoable option. For more information see the same function in elementUtilities
   */


  mainUtilities.createMetabolicCatalyticActivity = function (inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createMetabolicCatalyticActivity(inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength);
    } else {
      var param = {
        inputNodeList: inputNodeList,
        outputNodeList: outputNodeList,
        catalystName: catalystName,
        catalystType: catalystType,
        processPosition: processPosition,
        tilingPaddingVertical: tilingPaddingVertical,
        tilingPaddingHorizontal: tilingPaddingHorizontal,
        edgeLength: edgeLength
      };
      cy.undoRedo()["do"]("createMetabolicCatalyticActivity", param);
    }
  };
  /*
   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included
   * in the complex. Considers undoable option. For more information see the same function in elementUtilities
   */


  mainUtilities.createActivationReaction = function (proteinName, processPosition, edgeLength, reverse) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.createActivationReaction(proteinName, processPosition, edgeLength, reverse);
    } else {
      var param = {
        proteinName: proteinName,
        processPosition: processPosition,
        edgeLength: edgeLength,
        reverse: reverse
      };
      cy.undoRedo()["do"]("createActivationReaction", param);
    }
  };
  /*
   * Creates a template reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included
   * in the complex. Considers undoable option. For more information see the same function in elementUtilities
   */


  mainUtilities.createTemplateReaction = function (templateType, macromoleculeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    }

    if (!options.undoable) {
      if (templateType === "reversible") {
        elementUtilities.setMapType("HybridAny");
      }

      elementUtilities.createTemplateReaction(templateType, macromoleculeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam);
    } else {
      var param = {
        templateType: templateType,
        macromoleculeList: macromoleculeList,
        complexName: complexName,
        processPosition: processPosition,
        tilingPaddingVertical: tilingPaddingVertical,
        tilingPaddingHorizontal: tilingPaddingHorizontal,
        edgeLength: edgeLength,
        layoutParam: layoutParam
      };

      if (templateType === "reversible") {
        var actions = [];
        actions.push({
          name: "changeMapType",
          param: {
            mapType: "HybridAny",
            callback: function callback() {}
          }
        });
        actions.push({
          name: "createTemplateReaction",
          param: param
        });
        cy.undoRedo()["do"]("batch", actions);
      } else {
        cy.undoRedo()["do"]("createTemplateReaction", param);
      }
    }
  };
  /*
   * Resize given nodes if useAspectRatio is truthy one of width or height should not be set.
   * Considers undoable option.
   */


  mainUtilities.resizeNodes = function (nodes, width, height, useAspectRatio, preserveRelativePos) {
    if (nodes.length === 0) {
      return;
    }

    if (options.undoable) {
      var param = {
        nodes: nodes,
        width: width,
        height: height,
        useAspectRatio: useAspectRatio,
        performOperation: true,
        preserveRelativePos: preserveRelativePos
      };
      cy.undoRedo()["do"]("resizeNodes", param);
    } else {
      elementUtilities.resizeNodes(nodes, width, height, useAspectRatio);
      cy.style().update();
    }
  };
  /*
   * Resize given nodes if useAspectRatio is truthy one of width or height should not be set.
   * Considers undoable option.
   */


  mainUtilities.resizeNodesToContent = function (nodes, useAspectRatio) {
    if (nodes.length === 0) {
      return;
    }

    if (options.undoable) {
      var actions = [];
      nodes.forEach(function (node) {
        var width = elementUtilities.calculateMinWidth(node);
        var height = elementUtilities.calculateMinHeight(node);
        actions.push({
          name: "resizeNodes",
          param: {
            nodes: node,
            width: width,
            height: height,
            useAspectRatio: useAspectRatio,
            performOperation: true,
            preserveRelativePos: true
          }
        });
        var stateAndInfos = node.data('statesandinfos');
        var length = stateAndInfos.length;

        if (length != 0) {
          var param = {
            node: node,
            locations: ["top", "right", "bottom", "left"]
          };
          actions.push({
            name: "fitUnits",
            param: param
          });
        }
      });
      cy.undoRedo()["do"]("batch", actions);
      cy.style().update();
      return actions;
    } else {
      nodes.forEach(function (node) {
        var width = elementUtilities.calculateMinWidth(node);
        var height = elementUtilities.calculateMinHeight(node);
        elementUtilities.resizeNodes(node, width, height, useAspectRatio, true);
      });
    }

    cy.style().update();
  };
  /*
   * Changes the label of the given nodes to the given label. Considers undoable option.
   */


  mainUtilities.changeNodeLabel = function (nodes, label) {
    if (nodes.length === 0) {
      return;
    }

    if (!options.undoable) {
      nodes.data('label', label);
    } else {
      var param = {
        nodes: nodes,
        label: label,
        firstTime: true
      };
      cy.undoRedo()["do"]("changeNodeLabel", param);
    }

    cy.style().update();
  };
  /*
   * Change font properties for given nodes use the given font data.
   * Considers undoable option.
   */


  mainUtilities.changeFontProperties = function (eles, data) {
    if (eles.length === 0) {
      return;
    }

    if (options.undoable) {
      var param = {
        eles: eles,
        data: data,
        firstTime: true
      };
      cy.undoRedo()["do"]("changeFontProperties", param);
    } else {
      elementUtilities.changeFontProperties(eles, data);
    }

    cy.style().update();
  };
  /*
   * Change state value or unit of information box of given nodes with given index.
   * Considers undoable option.
   * For more information about the parameters see elementUtilities.changeStateOrInfoBox
   */


  mainUtilities.changeStateOrInfoBox = function (nodes, index, value, type) {
    if (nodes.length === 0) {
      return;
    }

    if (options.undoable) {
      var param = {
        index: index,
        value: value,
        type: type,
        nodes: nodes
      };
      cy.undoRedo()["do"]("changeStateOrInfoBox", param);
    } else {
      return elementUtilities.changeStateOrInfoBox(nodes, index, value, type);
    }

    cy.style().update();
  }; // Add a new state or info box to given nodes.
  // The box is represented by the parameter obj.
  // Considers undoable option.


  mainUtilities.addStateOrInfoBox = function (nodes, obj) {
    if (nodes.length === 0) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.addStateOrInfoBox(nodes, obj);
    } else {
      var param = {
        obj: obj,
        nodes: nodes
      };
      cy.undoRedo()["do"]("addStateOrInfoBox", param);
    }

    cy.style().update();
  }; // Remove the state or info boxes of the given nodes at given index.
  // Considers undoable option.


  mainUtilities.removeStateOrInfoBox = function (nodes, index) {
    if (nodes.length === 0) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.removeStateOrInfoBox(nodes, {
        index: index
      });
    } else {
      var param = {
        locationObj: {
          index: index
        },
        nodes: nodes
      };
      cy.undoRedo()["do"]("removeStateOrInfoBox", param);
    }

    cy.style().update();
  }; //Arrange information boxes
  //If force check is true, it rearranges all information boxes


  mainUtilities.fitUnits = function (node, locations) {
    if (node.data('auxunitlayouts') === undefined || node.data('statesandinfos').length <= 0) {
      return;
    }

    if (locations === undefined || locations.length <= 0) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.fitUnits(node, locations);
    } else {
      var param = {
        node: node,
        locations: locations
      };
      cy.undoRedo()["do"]("fitUnits", param);
    }

    cy.style().update();
  };
  /*
   * Set multimer status of the given nodes to the given status.
   * Considers undoable option.
   */


  mainUtilities.setMultimerStatus = function (nodes, status) {
    if (nodes.length === 0) {
      return;
    }

    if (options.undoable) {
      var param = {
        status: status,
        nodes: nodes,
        firstTime: true
      };
      cy.undoRedo()["do"]("setMultimerStatus", param);
    } else {
      elementUtilities.setMultimerStatus(nodes, status);
    }

    cy.style().update();
  };
  /**
   * Redraw clone markers on given nodes without considering undo.
   * See https://github.com/iVis-at-Bilkent/newt/issues/574 
   */


  mainUtilities.redrawCloneMarkers = function (nodes) {
    elementUtilities.setCloneMarkerStatus(nodes, true);
  };
  /*
   * Set clone marker status of given nodes to the given status.
   * Considers undoable option.
   */


  mainUtilities.setCloneMarkerStatus = function (nodes, status) {
    if (nodes.length === 0) {
      return;
    }

    if (options.undoable) {
      var param = {
        status: status,
        nodes: nodes,
        firstTime: true
      };
      cy.undoRedo()["do"]("setCloneMarkerStatus", param);
    } else {
      elementUtilities.setCloneMarkerStatus(nodes, status);
    }

    cy.style().update();
  };
  /*
   * Change style/css of given eles by setting getting property name to the given given value/values (Note that valueMap parameter may be
   * a single string or an id to value map). Considers undoable option.
   */


  mainUtilities.changeCss = function (eles, name, valueMap) {
    if (eles.length === 0) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.changeCss(eles, name, valueMap);
    } else {
      var param = {
        eles: eles,
        valueMap: valueMap,
        name: name
      };
      cy.undoRedo()["do"]("changeCss", param);
    }

    cy.style().update();
  };
  /*
   * Change data of given eles by setting getting property name to the given given value/values (Note that valueMap parameter may be
   * a single string or an id to value map). Considers undoable option.
   */


  mainUtilities.changeData = function (eles, name, valueMap) {
    if (eles.length === 0) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.changeData(eles, name, valueMap);
    } else {
      var param = {
        eles: eles,
        valueMap: valueMap,
        name: name
      };
      cy.undoRedo()["do"]("changeData", param);
    }

    cy.style().update();
  };

  mainUtilities.updateSetField = function (ele, fieldName, toDelete, toAdd, callback) {
    if (!options.undoable) {
      elementUtilities.changeData(ele, fieldName, toDelete, toAdd, callback);
    } else {
      var param = {
        ele: ele,
        fieldName: fieldName,
        toDelete: toDelete,
        toAdd: toAdd,
        callback: callback
      };
      cy.undoRedo()["do"]("updateSetField", param);
    }
  };

  mainUtilities.setDefaultProperty = function (_class, name, value) {
    if (!options.undoable) {
      var propMap = {};
      propMap[name] = value;
      elementUtilities.setDefaultProperties(_class, propMap);
    } else {
      var param = {
        "class": _class,
        name: name,
        value: value
      };
      cy.undoRedo()["do"]("setDefaultProperty", param);
    }
  };

  mainUtilities.updateInfoboxStyle = function (node, index, newProps) {
    if (!options.undoable) {
      elementUtilities.updateInfoboxStyle(node, index, newProps);
    } else {
      var param = {
        node: node,
        index: index,
        newProps: newProps
      };
      cy.undoRedo()["do"]("updateInfoboxStyle", param);
    }

    cy.style().update();
  };

  mainUtilities.updateInfoboxObj = function (node, index, newProps) {
    if (!options.undoable) {
      elementUtilities.updateInfoboxObj(node, index, newProps);
    } else {
      var param = {
        node: node,
        index: index,
        newProps: newProps
      };
      cy.undoRedo()["do"]("updateInfoboxObj", param);
    }

    cy.style().update();
  };

  mainUtilities.deleteAndPerformLayout = function (eles, layoutparam) {
    var nodes = eles.nodes(); // Ensure that nodes list just include nodes

    var allNodes = cy.nodes(":visible");
    var nodesToKeep = elementUtilities.extendRemainingNodes(nodes, allNodes);
    var nodesToRemove = allNodes.not(nodesToKeep);

    if (nodesToRemove.length === 0) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.deleteAndPerformLayout(nodesToRemove, layoutparam);
    } else {
      var param = {
        eles: nodesToRemove,
        layoutparam: layoutparam,
        firstTime: true
      };
      cy.undoRedo()["do"]("deleteAndPerformLayout", param);
    }
  };
  /*
   * Hides given eles (the ones which are selected) and perform given layout afterward. Layout parameter may be layout options
   * or a function to call. Requires viewUtilities extension and considers undoable option.
   */


  mainUtilities.hideAndPerformLayout = function (eles, layoutparam) {
    var nodes = eles.nodes(); // Ensure that nodes list just include nodes

    var allNodes = cy.nodes(":visible");
    var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);
    var nodesToHide = allNodes.not(nodesToShow);

    if (nodesToHide.length === 0) {
      return;
    }

    if (!options.undoable) {
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);
      elementUtilities.hideAndPerformLayout(nodesToHide, layoutparam);
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      sbgnvizInstance.thickenBorder(nodesWithHiddenNeighbor);
    } else {
      var param = {
        eles: nodesToHide,
        layoutparam: layoutparam,
        firstTime: true
      };
      var ur = cy.undoRedo();
      ur.action("thickenBorder", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);
      ur.action("thinBorder", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);
      var actions = [];
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes().intersection(nodesToHide);
      actions.push({
        name: "thinBorder",
        param: nodesWithHiddenNeighbor
      });
      actions.push({
        name: "hideAndPerformLayout",
        param: param
      });
      nodesWithHiddenNeighbor = nodesToHide.neighborhood(":visible").nodes().difference(nodesToHide).difference(cy.nodes("[thickBorder]"));
      actions.push({
        name: "thickenBorder",
        param: nodesWithHiddenNeighbor
      });
      cy.undoRedo()["do"]("batch", actions);
    }
  };
  /*
   * Shows all elements (the ones which are hidden if any) and perform given layout afterward. Layout parameter may be layout options
   * or a function to call. Requires viewUtilities extension and considers undoable option.
   */


  mainUtilities.showAllAndPerformLayout = function (layoutparam) {
    var hiddenEles = cy.elements(':hidden');

    if (hiddenEles.length === 0) {
      return;
    }

    if (!options.undoable) {
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);
      elementUtilities.showAndPerformLayout(hiddenEles, layoutparam);
    } else {
      var param = {
        eles: hiddenEles,
        layoutparam: layoutparam,
        firstTime: true
      };
      var ur = cy.undoRedo();
      ur.action("thickenBorder", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);
      ur.action("thinBorder", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);
      var actions = [];
      var nodesWithHiddenNeighbor = cy.nodes("[thickBorder]");
      actions.push({
        name: "thinBorder",
        param: nodesWithHiddenNeighbor
      });
      actions.push({
        name: "showAndPerformLayout",
        param: param
      });
      cy.undoRedo()["do"]("batch", actions);
    }
  };
  /*
   * Unhide given eles (the ones which are hidden if any) and perform given layout afterward. Layout parameter may be layout options
   * or a function to call. Requires viewUtilities extension and considers undoable option.
   */


  mainUtilities.showAndPerformLayout = function (mainEle, eles, layoutparam) {
    var hiddenEles = eles.filter(':hidden');

    if (hiddenEles.length === 0) {
      return;
    }

    mainUtilities.closeUpElements(mainEle, hiddenEles.nodes());

    if (!options.undoable) {
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);
      elementUtilities.showAndPerformLayout(hiddenEles, layoutparam);
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      sbgnvizInstance.thickenBorder(nodesWithHiddenNeighbor);
    } else {
      var param = {
        eles: hiddenEles,
        layoutparam: layoutparam,
        firstTime: true
      };
      var ur = cy.undoRedo();
      ur.action("thickenBorder", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);
      ur.action("thinBorder", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);
      var actions = [];
      var nodesToThinBorder = hiddenEles.neighborhood(":visible").nodes("[thickBorder]").difference(cy.edges(":hidden").difference(hiddenEles.edges().union(hiddenEles.nodes().connectedEdges())).connectedNodes());
      actions.push({
        name: "thinBorder",
        param: nodesToThinBorder
      });
      actions.push({
        name: "showAndPerformLayout",
        param: param
      });
      var nodesToThickenBorder = hiddenEles.nodes().edgesWith(cy.nodes(":hidden").difference(hiddenEles.nodes())).connectedNodes().intersection(hiddenEles.nodes());
      actions.push({
        name: "thickenBorder",
        param: nodesToThickenBorder
      });
      cy.undoRedo()["do"]("batch", actions);
    }
  };
  /*
  * Takes the hidden elements close to the nodes whose neighbors will be shown
  * */


  mainUtilities.closeUpElements = function (mainEle, hiddenEles) {
    var leftX = Number.MAX_VALUE;
    var rightX = Number.MIN_VALUE;
    var topY = Number.MAX_VALUE;
    var bottomY = Number.MIN_VALUE; // Check the x and y limits of all hidden elements and store them in the variables above

    hiddenEles.forEach(function (ele) {
      if (ele.data('class') != 'compartment' && ele.data('class') != 'complex') {
        var halfWidth = ele.outerWidth() / 2;
        var halfHeight = ele.outerHeight() / 2;
        if (ele.position("x") - halfWidth < leftX) leftX = ele.position("x") - halfWidth;
        if (ele.position("x") + halfWidth > rightX) rightX = ele.position("x") + halfWidth;
        if (ele.position("y") - halfHeight < topY) topY = ele.position("y") - halfHeight;
        if (ele.position("y") + halfHeight > topY) bottomY = ele.position("y") + halfHeight;
      }
    }); //The coordinates of the old center containing the hidden nodes

    var oldCenterX = (leftX + rightX) / 2;
    var oldCenterY = (topY + bottomY) / 2; //Here we calculate two parameters which define the area in which the hidden elements are placed initially

    var minHorizontalParam = mainEle.outerWidth() / 2 + (rightX - leftX) / 2;
    var maxHorizontalParam = mainEle.outerWidth() + (rightX - leftX) / 2;
    var minVerticalParam = mainEle.outerHeight() / 2 + (bottomY - topY) / 2;
    var maxVerticalParam = mainEle.outerHeight() + (bottomY - topY) / 2; //Quadrants is an object of the form {first:"obtained", second:"free", third:"free", fourth:"obtained"}
    // which holds which quadrant are free (that's where hidden nodes will be brought)

    var quadrants = mainUtilities.checkOccupiedQuadrants(mainEle, hiddenEles);
    var freeQuadrants = [];

    for (var property in quadrants) {
      if (quadrants[property] === "free") freeQuadrants.push(property);
    } //Can take values 1 and -1 and are used to place the hidden nodes in the random quadrant


    var horizontalMult;
    var verticalMult;

    if (freeQuadrants.length > 0) {
      if (freeQuadrants.length === 3) {
        if (freeQuadrants.includes('first') && freeQuadrants.includes('second') && freeQuadrants.includes('third')) {
          horizontalMult = -1;
          verticalMult = -1;
        } else if (freeQuadrants.includes('first') && freeQuadrants.includes('second') && freeQuadrants.includes('fourth')) {
          horizontalMult = 1;
          verticalMult = -1;
        } else if (freeQuadrants.includes('first') && freeQuadrants.includes('third') && freeQuadrants.includes('fourth')) {
          horizontalMult = 1;
          verticalMult = 1;
        } else if (freeQuadrants.includes('second') && freeQuadrants.includes('third') && freeQuadrants.includes('fourth')) {
          horizontalMult = -1;
          verticalMult = 1;
        }
      } else {
        //Randomly picks one quadrant from the free quadrants
        var randomQuadrant = freeQuadrants[Math.floor(Math.random() * freeQuadrants.length)];

        if (randomQuadrant === "first") {
          horizontalMult = 1;
          verticalMult = -1;
        } else if (randomQuadrant === "second") {
          horizontalMult = -1;
          verticalMult = -1;
        } else if (randomQuadrant === "third") {
          horizontalMult = -1;
          verticalMult = 1;
        } else if (randomQuadrant === "fourth") {
          horizontalMult = 1;
          verticalMult = 1;
        }
      }
    } else {
      horizontalMult = 0;
      verticalMult = 0;
    } // If the horizontalMult is 0 it means that no quadrant is free, so we randomly choose a quadrant


    var horizontalParam = mainUtilities.generateRandom(minHorizontalParam, maxHorizontalParam, horizontalMult);
    var verticalParam = mainUtilities.generateRandom(minVerticalParam, maxVerticalParam, verticalMult); //The coordinates of the center where the hidden nodes will be transfered

    var newCenterX = mainEle.position("x") + horizontalParam;
    var newCenterY = mainEle.position("y") + verticalParam;
    var xdiff = newCenterX - oldCenterX;
    var ydiff = newCenterY - oldCenterY; //Change the position of hidden elements

    hiddenEles.forEach(function (ele) {
      var newx = ele.position("x") + xdiff;
      var newy = ele.position("y") + ydiff;
      ele.position("x", newx);
      ele.position("y", newy);
    });
  };
  /*
   * Generates a number between 2 nr and multimplies it with 1 or -1
   * */


  mainUtilities.generateRandom = function (min, max, mult) {
    var val = [-1, 1];
    if (mult === 0) mult = val[Math.floor(Math.random() * val.length)];
    return (Math.floor(Math.random() * (max - min + 1)) + min) * mult;
  };
  /*
   * This function makes sure that the random number lies in free quadrant
   * */


  mainUtilities.checkOccupiedQuadrants = function (mainEle, hiddenEles) {
    if (elementUtilities.getMapType() == 'PD') {
      var visibleNeighborEles = mainEle.neighborhood().difference(hiddenEles).nodes();
      var visibleNeighborsOfNeighbors = visibleNeighborEles.neighborhood().difference(hiddenEles).difference(mainEle).nodes();
      var visibleEles = visibleNeighborEles.union(visibleNeighborsOfNeighbors);
    } else var visibleEles = mainEle.neighborhood().difference(hiddenEles).nodes();

    var occupiedQuadrants = {
      first: "free",
      second: "free",
      third: "free",
      fourth: "free"
    };
    visibleEles.forEach(function (ele) {
      if (ele.data('class') != 'compartment' && ele.data('class') != 'complex') {
        if (ele.position("x") < mainEle.position("x") && ele.position("y") < mainEle.position("y")) occupiedQuadrants.second = "occupied";else if (ele.position("x") > mainEle.position("x") && ele.position("y") < mainEle.position("y")) occupiedQuadrants.first = "occupied";else if (ele.position("x") < mainEle.position("x") && ele.position("y") > mainEle.position("y")) occupiedQuadrants.third = "occupied";else if (ele.position("x") > mainEle.position("x") && ele.position("y") > mainEle.position("y")) occupiedQuadrants.fourth = "occupied";
      }
    });
    return occupiedQuadrants;
  }; // Overrides highlightProcesses from SBGNVIZ - do not highlight any nodes when the map type is AF


  mainUtilities.highlightProcesses = function (_nodes) {
    if (elementUtilities.getMapType() == "AF") return;
    sbgnvizInstance.highlightProcesses(_nodes);
  };
  /**
   * Resets map type to undefined
   */


  mainUtilities.resetMapType = function () {
    elementUtilities.resetMapType();
  };
  /**
   * return : map type
   */


  mainUtilities.getMapType = function () {
    return elementUtilities.getMapType();
  };

  mainUtilities.addBackgroundImage = function (nodes, bgObj, updateInfo, promptInvalidImage, validateURL) {
    if (nodes.length === 0 || !bgObj) {
      return;
    }

    bgObj['firstTime'] = true;

    if (options.undoable) {
      var param = {
        bgObj: bgObj,
        nodes: nodes,
        updateInfo: updateInfo,
        promptInvalidImage: promptInvalidImage,
        validateURL: validateURL
      };
      cy.undoRedo()["do"]("addBackgroundImage", param);
    } else {
      elementUtilities.addBackgroundImage(nodes, bgObj, updateInfo, promptInvalidImage, validateURL);
    }

    cy.style().update();
  };

  mainUtilities.removeBackgroundImage = function (nodes, bgObj) {
    if (nodes.length === 0 || !bgObj) {
      return;
    }

    bgObj['firstTime'] = true;

    if (options.undoable) {
      var param = {
        bgObj: bgObj,
        nodes: nodes
      };
      cy.undoRedo()["do"]("removeBackgroundImage", param);
    } else {
      elementUtilities.removeBackgroundImage(nodes, bgObj);
    }

    cy.style().update();
  };

  mainUtilities.updateBackgroundImage = function (nodes, bgObj) {
    if (nodes.length === 0 || !bgObj) {
      return;
    }

    if (options.undoable) {
      var param = {
        bgObj: bgObj,
        nodes: nodes
      };
      cy.undoRedo()["do"]("updateBackgroundImage", param);
    } else {
      elementUtilities.updateBackgroundImage(nodes, bgObj);
    }

    cy.style().update();
  };

  mainUtilities.changeBackgroundImage = function (nodes, oldImg, newImg, updateInfo, promptInvalidImage, validateURL) {
    if (nodes.length === 0 || !oldImg || !newImg) {
      return;
    }

    if (options.undoable) {
      var param = {
        oldImg: oldImg,
        newImg: newImg,
        nodes: nodes,
        firstTime: true,
        updateInfo: updateInfo,
        promptInvalidImage: promptInvalidImage,
        validateURL: validateURL
      };
      cy.undoRedo()["do"]("changeBackgroundImage", param);
    } else {
      elementUtilities.changeBackgroundImage(nodes, oldImg, newImg, true, updateInfo, promptInvalidImage, validateURL);
    }

    cy.style().update();
  };

  return mainUtilities;
};

/***/ }),

/***/ "./src/utilities/option-utilities-factory.js":
/*!***************************************************!*\
  !*** ./src/utilities/option-utilities-factory.js ***!
  \***************************************************/
/***/ ((module) => {

/*
 *  Extend default options and get current options by using this file
 */
module.exports = function () {
  // default options
  var defaults = {
    // The path of core library images when sbgnviz is required from npm and the index html
    // file and node_modules are under the same folder then using the default value is fine
    imgPath: 'node_modules/sbgnviz/src/img',
    // Whether to fit labels to nodes
    fitLabelsToNodes: function fitLabelsToNodes() {
      return false;
    },
    fitLabelsToInfoboxes: function fitLabelsToInfoboxes() {
      return false;
    },
    // dynamic label size it may be 'small', 'regular', 'large'
    dynamicLabelSize: function dynamicLabelSize() {
      return 'regular';
    },
    // Whether to infer nesting on load 
    inferNestingOnLoad: function inferNestingOnLoad() {
      return false;
    },
    // percentage used to calculate compound paddings
    compoundPadding: function compoundPadding() {
      return 10;
    },
    // The selector of the component containing the sbgn network
    networkContainerSelector: '#sbgn-network-container',
    // Whether the actions are undoable, requires cytoscape-undo-redo extension
    undoable: true,
    // Whether to have undoable drag feature in undo/redo extension. This options will be passed to undo/redo extension
    undoableDrag: true
  };

  var optionUtilities = function optionUtilities() {}; // Extend the defaults options with the user options


  optionUtilities.extendOptions = function (options) {
    var result = {};

    for (var prop in defaults) {
      result[prop] = defaults[prop];
    }

    for (var prop in options) {
      result[prop] = options[prop];
    }

    optionUtilities.options = result;
    return options;
  };

  optionUtilities.getOptions = function () {
    return optionUtilities.options;
  };

  return optionUtilities;
};

/***/ }),

/***/ "./src/utilities/register-undo-redo-actions-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/register-undo-redo-actions-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var libs = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js").getLibs();

var $ = libs.jQuery;

module.exports = function () {
  var undoRedoActionFunctions, options, cy;

  var registerUndoRedoActions = function registerUndoRedoActions(param) {
    undoRedoActionFunctions = param.undoRedoActionFunctions;
    options = param.optionUtilities.getOptions();
    cy = param.sbgnvizInstanceUtilities.getCy();

    if (!options.undoable) {
      return;
    } // create undo-redo instance


    var ur = cy.undoRedo({
      undoableDrag: options.undoableDrag
    }); // register add remove actions

    ur.action("addNode", undoRedoActionFunctions.addNode, undoRedoActionFunctions.deleteElesSimple);
    ur.action("deleteElesSimple", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);
    ur.action("addEdge", undoRedoActionFunctions.addEdge, undoRedoActionFunctions.deleteElesSimple);
    ur.action("addProcessWithConvenientEdges", undoRedoActionFunctions.addProcessWithConvenientEdges, undoRedoActionFunctions.deleteElesSimple);
    ur.action("deleteElesSmart", undoRedoActionFunctions.deleteElesSmart, undoRedoActionFunctions.restoreEles);
    ur.action("createCompoundForGivenNodes", undoRedoActionFunctions.createCompoundForGivenNodes, undoRedoActionFunctions.createCompoundForGivenNodes); // register general actions

    ur.action("resizeNodes", undoRedoActionFunctions.resizeNodes, undoRedoActionFunctions.resizeNodes);
    ur.action("changeNodeLabel", undoRedoActionFunctions.changeNodeLabel, undoRedoActionFunctions.changeNodeLabel);
    ur.action("changeData", undoRedoActionFunctions.changeData, undoRedoActionFunctions.changeData);
    ur.action("updateSetField", undoRedoActionFunctions.updateSetField, undoRedoActionFunctions.updateSetField);
    ur.action("changeCss", undoRedoActionFunctions.changeCss, undoRedoActionFunctions.changeCss);
    ur.action("changeBendPoints", undoRedoActionFunctions.changeBendPoints, undoRedoActionFunctions.changeBendPoints);
    ur.action("changeFontProperties", undoRedoActionFunctions.changeFontProperties, undoRedoActionFunctions.changeFontProperties);
    ur.action("showAndPerformLayout", undoRedoActionFunctions.showAndPerformLayout, undoRedoActionFunctions.undoShowAndPerformLayout);
    ur.action("hideAndPerformLayout", undoRedoActionFunctions.hideAndPerformLayout, undoRedoActionFunctions.undoHideAndPerformLayout);
    ur.action("deleteAndPerformLayout", undoRedoActionFunctions.deleteAndPerformLayout, undoRedoActionFunctions.undoDeleteAndPerformLayout);
    ur.action("applySIFTopologyGrouping", undoRedoActionFunctions.applySIFTopologyGrouping, undoRedoActionFunctions.applySIFTopologyGrouping); // register SBGN actions

    ur.action("addStateOrInfoBox", undoRedoActionFunctions.addStateOrInfoBox, undoRedoActionFunctions.removeStateOrInfoBox);
    ur.action("changeStateOrInfoBox", undoRedoActionFunctions.changeStateOrInfoBox, undoRedoActionFunctions.changeStateOrInfoBox);
    ur.action("setMultimerStatus", undoRedoActionFunctions.setMultimerStatus, undoRedoActionFunctions.setMultimerStatus);
    ur.action("setCloneMarkerStatus", undoRedoActionFunctions.setCloneMarkerStatus, undoRedoActionFunctions.setCloneMarkerStatus);
    ur.action("removeStateOrInfoBox", undoRedoActionFunctions.removeStateOrInfoBox, undoRedoActionFunctions.addStateOrInfoBox);
    ur.action("fitUnits", undoRedoActionFunctions.fitUnits, undoRedoActionFunctions.restoreUnits);
    ur.action("addBackgroundImage", undoRedoActionFunctions.addBackgroundImage, undoRedoActionFunctions.removeBackgroundImage);
    ur.action("removeBackgroundImage", undoRedoActionFunctions.removeBackgroundImage, undoRedoActionFunctions.addBackgroundImage);
    ur.action("updateBackgroundImage", undoRedoActionFunctions.updateBackgroundImage, undoRedoActionFunctions.updateBackgroundImage);
    ur.action("changeBackgroundImage", undoRedoActionFunctions.changeBackgroundImage, undoRedoActionFunctions.changeBackgroundImage);
    ur.action("updateInfoboxStyle", undoRedoActionFunctions.updateInfoboxStyle, undoRedoActionFunctions.updateInfoboxStyle);
    ur.action("updateInfoboxObj", undoRedoActionFunctions.updateInfoboxObj, undoRedoActionFunctions.updateInfoboxObj); // register easy creation actions

    ur.action("createTemplateReaction", undoRedoActionFunctions.createTemplateReaction, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createActivationReaction", undoRedoActionFunctions.createActivationReaction, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createMetabolicCatalyticActivity", undoRedoActionFunctions.createMetabolicCatalyticActivity, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createMetabolicReaction", undoRedoActionFunctions.createMetabolicReaction, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createConversion", undoRedoActionFunctions.createConversion, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createMultimerization", undoRedoActionFunctions.createMultimerization, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createComplexProteinFormation", undoRedoActionFunctions.createComplexProteinFormation, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createDegradation", undoRedoActionFunctions.createDegradation, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createTranscription", undoRedoActionFunctions.createTranscription, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createTranslation", undoRedoActionFunctions.createTranslation, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createTranscriptionReaction", undoRedoActionFunctions.createTranscriptionReaction, undoRedoActionFunctions.deleteElesSimple);
    ur.action("createTranslationReaction", undoRedoActionFunctions.createTranslationReaction, undoRedoActionFunctions.deleteElesSimple);
    ur.action("setDefaultProperty", undoRedoActionFunctions.setDefaultProperty, undoRedoActionFunctions.setDefaultProperty);
    ur.action("convertIntoReversibleReaction", undoRedoActionFunctions.convertIntoReversibleReaction, undoRedoActionFunctions.convertIntoReversibleReaction);
    ur.action("moveEdge", undoRedoActionFunctions.moveEdge, undoRedoActionFunctions.moveEdge);
    ur.action("fixError", undoRedoActionFunctions.fixError, undoRedoActionFunctions.unfixError);
    ur.action("cloneHighDegreeNode", undoRedoActionFunctions.cloneHighDegreeNode, undoRedoActionFunctions.unCloneHighDegreeNode);
    ur.action("changeMapType", undoRedoActionFunctions.changeMapType, undoRedoActionFunctions.changeMapType);
    ur.action("setCompoundPadding", undoRedoActionFunctions.setCompoundPadding, undoRedoActionFunctions.setCompoundPadding);
  };

  return registerUndoRedoActions;
};

/***/ }),

/***/ "./src/utilities/sbgnviz-instance-utilities-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/sbgnviz-instance-utilities-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var libs = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js").getLibs();

module.exports = function () {
  var instance;

  function sbgnvizInstanceUtilities(options) {
    instance = libs.sbgnviz(options);
    return instance;
  }

  sbgnvizInstanceUtilities.getInstance = function () {
    return instance;
  };

  sbgnvizInstanceUtilities.getCy = function () {
    return this.getInstance().getCy();
  };

  return sbgnvizInstanceUtilities;
};

/***/ }),

/***/ "./src/utilities/topology-grouping-factory.js":
/*!****************************************************!*\
  !*** ./src/utilities/topology-grouping-factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isEqual = __webpack_require__(/*! lodash.isequal */ "./node_modules/lodash.isequal/index.js");

module.exports = function () {
  var cy, elementUtilities;
  var groupCompoundType, metaEdgeIdentifier, lockGraphTopology, shouldApply;
  var DEFAULT_GROUP_COMPOUND_TYPE = 'topology group';
  var EDGE_STYLE_NAMES = ['line-color', 'width'];

  function topologyGrouping(param, props) {
    cy = param.sbgnvizInstanceUtilities.getCy();
    elementUtilities = param.elementUtilities;
    groupCompoundType = props.groupCompoundType || DEFAULT_GROUP_COMPOUND_TYPE;
    metaEdgeIdentifier = props.metaEdgeIdentifier;
    lockGraphTopology = props.lockGraphTopology;
    shouldApply = props.shouldApply || true;
    topologyGrouping.applied = false;
    initMetaStyleMap();
  }

  topologyGrouping.apply = function () {
    if (topologyGrouping.applied || !evalOpt(shouldApply)) {
      return;
    }

    var list = cy.nodes().map(function (node) {
      return [node];
    }); // determine node groups by their topology

    var groups = getNodeGroups(list); // apply grouping in cy level

    var metaEdges = topologyGrouping.getMetaEdges();
    var compounds = topologyGrouping.getGroupCompounds();
    applyGrouping(groups, metaEdges, compounds);
    topologyGrouping.applied = true;

    if (lockGraphTopology) {
      elementUtilities.lockGraphTopology();
    }

    return groups;
  };

  topologyGrouping.unapply = function () {
    if (!topologyGrouping.applied) {
      return;
    }

    var metaEdges = topologyGrouping.getMetaEdges();
    metaEdges.forEach(function (edge) {
      var toRestore = edge.data('tg-to-restore');
      edge.remove();
      toRestore.restore();
      EDGE_STYLE_NAMES.forEach(function (name) {
        var oldVal = topologyGrouping.metaStyleMap[name][edge.id()];
        var newVal = edge.data(name);

        if (oldVal !== newVal) {
          toRestore.data(name, newVal);
        }
      });
    });
    initMetaStyleMap();
    var parents = topologyGrouping.getGroupCompounds();
    elementUtilities.changeParent(parents.children(), null);
    parents.remove();
    topologyGrouping.applied = false;

    if (lockGraphTopology) {
      elementUtilities.unlockGraphTopology();
    }
  };

  topologyGrouping.getMetaEdges = function () {
    var metaEdges = cy.edges('[' + metaEdgeIdentifier + ']');
    return metaEdges;
  };

  topologyGrouping.getGroupCompounds = function () {
    var className = groupCompoundType;
    return cy.nodes('[class="' + className + '"]');
  };

  topologyGrouping.clearAppliedFlag = function () {
    topologyGrouping.applied = false;
  };

  topologyGrouping.setAppliedFlag = function (applied) {
    topologyGrouping.applied = applied;
  };

  topologyGrouping.toggleAppliedFlag = function () {
    topologyGrouping.applied = !topologyGrouping.applied;
  };

  function initMetaStyleMap() {
    topologyGrouping.metaStyleMap = {};
    EDGE_STYLE_NAMES.forEach(function (name) {
      topologyGrouping.metaStyleMap[name] = {};
    });
  }

  function evalOpt(opt) {
    if (typeof opt === 'function') {
      return opt();
    }

    return opt;
  }

  function getNodeGroups(list) {
    if (list.length <= 1) {
      return list;
    }

    var halves = getHalves(list);
    var firstPart = getNodeGroups(halves[0]);
    var secondPart = getNodeGroups(halves[1]); // merge the halves

    var groups = mergeGroups(firstPart, secondPart);
    return groups;
  }

  function getParentOrSelf(node) {
    var parent = node.parent();
    return parent.size() > 0 ? parent : node;
  }

  function calcGroupingKey(edge) {
    var srcId = getParentOrSelf(edge.source()).id();
    var tgtId = getParentOrSelf(edge.target()).id();
    var edgeType = getEdgeType(edge);
    return [edgeType, srcId, tgtId].join('-');
  }

  function addToMapChain(map, key, val) {
    if (!map[key]) {
      map[key] = cy.collection();
    }

    map[key] = map[key].add(val);
  }

  function applyGrouping(groups, metaEdges, groupCompounds) {
    var compounds;

    if (groupCompounds.length > 0) {
      compounds = groupCompounds;
    } else {
      groups.forEach(function (group) {
        createGroupCompound(group);
      });
      compounds = topologyGrouping.getGroupCompounds();
    }

    var childrenEdges = compounds.children().connectedEdges();
    var edgesMap = [];
    childrenEdges.forEach(function (edge) {
      var key = calcGroupingKey(edge);
      addToMapChain(edgesMap, key, edge);
      edge.remove();
    });

    if (metaEdges.length > 0) {
      Object.keys(edgesMap).forEach(function (key) {
        var edges = edgesMap[key];
        var temp = edges[0];
        var metaEdge = metaEdges.filter(function (edge) {
          return edge.source().id() === getParentOrSelf(temp.source()).id() && edge.target().id() === getParentOrSelf(temp.target()).id();
        })[0];
        metaEdge.data('tg-to-restore', edges);
        edges.remove();
      });
    } else {
      Object.keys(edgesMap).forEach(function (key) {
        createMetaEdgeFor(edgesMap[key]);
      });
    }
  }

  function createGroupCompound(group) {
    if (group.length < 2) {
      return;
    }

    var collection = cy.collection();
    group.forEach(function (node) {
      collection = collection.add(node);
    });
    elementUtilities.createCompoundForGivenNodes(collection, groupCompoundType);
  }

  function createMetaEdgeFor(edges) {
    var srcId = getParentOrSelf(edges.source()).id();
    var tgtId = getParentOrSelf(edges.target()).id();
    var type = edges.data('class');
    cy.remove(edges);
    var metaEdge = elementUtilities.addEdge(srcId, tgtId, type);
    metaEdge.data('tg-to-restore', edges);
    metaEdge.data(metaEdgeIdentifier, true);
    EDGE_STYLE_NAMES.forEach(function (styleName) {
      edges.forEach(function (edge) {
        topologyGrouping.metaStyleMap[styleName][edge.id()] = edge.data(styleName);
      });
      var commonVal = elementUtilities.getCommonProperty(edges, styleName, 'data');

      if (commonVal) {
        metaEdge.data(styleName, commonVal);
      }
    });
    return metaEdge;
  }

  function mergeGroups(groups1, groups2) {
    // notMergedGrs will include members of groups1 that are not merged
    // mergedGrs will include the merged members from 2 groups
    var notMergedGrs = [],
        mergedGrs = [];
    groups1.forEach(function (gr1) {
      var merged = false;
      mergedGrs.concat(groups2).forEach(function (gr2, index2) {
        // if groups should be merged merge them, remove gr2 from where it
        // comes from and push the merge result to mergedGrs
        if (shouldMerge(gr1, gr2)) {
          var mergedGr = gr1.concat(gr2);

          if (index2 >= mergedGrs.length) {
            removeAt(groups2, index2 - mergedGrs.length);
          } else {
            removeAt(mergedGrs, index2);
          } // mark as merged and break the loop


          mergedGrs.push(mergedGr);
          merged = true;
          return;
        }
      }); // if gr1 is not merged push it to notMergedGrs

      if (!merged) {
        notMergedGrs.push(gr1);
      }
    }); // the groups that comes from groups2 but not merged are still included
    // in groups2 add them to the result together with mergedGrs and notMergedGrs

    return notMergedGrs.concat(mergedGrs, groups2);
  }

  function shouldMerge(group1, group2) {
    // using first elements is enough to decide whether to merge
    var node1 = group1[0];
    var node2 = group2[0];

    if (node1.edges().length !== node2.edges().length) {
      return false;
    }

    var getUndirectedEdges = function getUndirectedEdges(node) {
      var edges = node.connectedEdges().filter(isUndirectedEdge);
      return edges;
    }; // undirected edges of node1 and node2 respectively


    var undir1 = getUndirectedEdges(node1);
    var undir2 = getUndirectedEdges(node2);
    var in1 = node1.incomers().edges().not(undir1);
    var in2 = node2.incomers().edges().not(undir2);
    var out1 = node1.outgoers().edges().not(undir1);
    var out2 = node2.outgoers().edges().not(undir2);
    return compareEdgeGroup(in1, in2, node1, node2) && compareEdgeGroup(out1, out2, node1, node2) && compareEdgeGroup(undir1, undir2, node1, node2);
  } // decide if 2 edge groups contains set of edges with similar content (type,
  // source,target) relative to their nodes where gr1 are edges of node1 and gr2 are edges of
  // node2


  function compareEdgeGroup(gr1, gr2, node1, node2) {
    var id1 = node1.id();
    var id2 = node2.id();
    var map1 = fillIdToTypeSetMap(gr1, node1);
    var map2 = fillIdToTypeSetMap(gr2, node2);

    if (Object.keys(map1).length !== Object.keys(map2).length) {
      return;
    }

    var failed = false;
    Object.keys(map1).forEach(function (key) {
      // if already failed just return
      if (failed) {
        return;
      } // if key is id2 use id1 instead because comparison is relative to nodes


      var otherKey = key == id2 ? id1 : key; // check if the sets have the same content
      // if check fails return false

      if (!isEqual(map1[key], map2[otherKey])) {
        failed = true;
      }
    }); // if check passes for each key return true

    return !failed;
  }

  function fillIdToTypeSetMap(edgeGroup, node) {
    var map = {};
    var nodeId = node.id();
    edgeGroup.forEach(function (edge) {
      var srcId = edge.data('source');
      var tgtId = edge.data('target');
      var edgeId = edge.id();
      var otherEnd = nodeId === tgtId ? srcId : tgtId;

      function addToRelatedSet(sideStr, value) {
        if (!map[sideStr]) {
          map[sideStr] = new Set();
        }

        map[sideStr].add(value);
      }

      var edgeType = getEdgeType(edge);
      addToRelatedSet(otherEnd, edgeType);
    });
    return map;
  }

  function getEdgeType(edge) {
    return edge.data('class');
  }

  function isUndirectedEdge(edge) {
    return elementUtilities.isUndirectedEdge(edge);
  } // get halves of a list. It is assumed that list size is at least 2.


  function getHalves(list) {
    var s = list.length;
    var halfIndex = Math.floor(s / 2);
    var firstHalf = list.slice(0, halfIndex);
    var secondHalf = list.slice(halfIndex, s);
    return [firstHalf, secondHalf];
  }

  function removeAt(arr, index) {
    arr.splice(index, 1);
  }

  return topologyGrouping;
};

/***/ }),

/***/ "./src/utilities/ur-action-functions-extender-factory.js":
/*!***************************************************************!*\
  !*** ./src/utilities/ur-action-functions-extender-factory.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Extends sbgnviz.undoRedoActionFunctions
var libs = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js").getLibs();

module.exports = function () {
  var sbgnvizInstance, undoRedoActionFunctions, elementUtilities, cy, topologyGrouping;

  function undoRedoActionFunctionsExtender(param) {
    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();
    cy = param.sbgnvizInstanceUtilities.getCy();
    undoRedoActionFunctions = sbgnvizInstance.undoRedoActionFunctions;
    elementUtilities = param.elementUtilities;
    topologyGrouping = param.sifTopologyGrouping;
    extend();
  } // Extends undoRedoActionFunctions with chise specific features


  function extend() {
    undoRedoActionFunctions.applySIFTopologyGrouping = function (param) {
      var oldEles, newEles;

      if (param.firstTime) {
        oldEles = cy.elements();

        if (param.apply) {
          topologyGrouping.apply();
        } else {
          topologyGrouping.unapply();
        }

        newEles = cy.elements();
      } else {
        oldEles = param.oldEles;
        newEles = param.newEles;

        if (elementUtilities.isGraphTopologyLocked()) {
          elementUtilities.unlockGraphTopology();
        } else {
          elementUtilities.lockGraphTopology();
        }

        oldEles.remove();
        newEles.restore();
        topologyGrouping.toggleAppliedFlag();
      }

      var result = {
        oldEles: newEles,
        newEles: oldEles
      };
      return result;
    }; // Section Start
    // add/remove action functions


    undoRedoActionFunctions.addNode = function (param) {
      var result;

      if (param.firstTime) {
        var newNode = param.newNode;
        result = elementUtilities.addNode(newNode.x, newNode.y, newNode["class"], newNode.id, newNode.parent, newNode.visibility);
      } else {
        result = elementUtilities.restoreEles(param);
      }

      return {
        eles: result
      };
    };

    undoRedoActionFunctions.addEdge = function (param) {
      var result;

      if (param.firstTime) {
        var newEdge = param.newEdge;
        result = elementUtilities.addEdge(newEdge.source, newEdge.target, newEdge["class"], newEdge.id, newEdge.visibility);
      } else {
        result = elementUtilities.restoreEles(param);
      }

      return {
        eles: result
      };
    };

    undoRedoActionFunctions.addProcessWithConvenientEdges = function (param) {
      var result;

      if (param.firstTime) {
        result = elementUtilities.addProcessWithConvenientEdges(param.source, param.target, param.processType);
      } else {
        result = elementUtilities.restoreEles(param);
      }

      return {
        eles: result
      };
    };

    undoRedoActionFunctions.createCompoundForGivenNodes = function (param) {
      var result = {};

      if (param.firstTime) {
        // Nodes to make compound, their descendants and edges connected to them will be removed during createCompoundForGivenNodes operation
        // (internally by eles.move() operation), so mark them as removed eles for undo operation.
        var nodesToMakeCompound = param.nodesToMakeCompound;
        var removedEles = nodesToMakeCompound.union(nodesToMakeCompound.descendants());
        removedEles = removedEles.union(removedEles.connectedEdges());
        result.removedEles = removedEles; // Assume that all nodes to make compound have the same parent

        var oldParentId = nodesToMakeCompound[0].data("parent"); // The parent of new compound will be the old parent of the nodes to make compound
        // New eles includes new compound and the moved eles and will be used in undo operation.

        result.newEles = elementUtilities.createCompoundForGivenNodes(nodesToMakeCompound, param.compoundType);
      } else {
        result.removedEles = param.newEles.remove();
        result.newEles = param.removedEles.restore();
        elementUtilities.maintainPointer(result.newEles);
      }

      return result;
    }; // Section End
    // add/remove action functions
    // Section Start
    // easy creation action functions


    undoRedoActionFunctions.createTemplateReaction = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createTemplateReaction(param.templateType, param.macromoleculeList, param.complexName, param.processPosition, param.tilingPaddingVertical, param.tilingPaddingHorizontal, param.edgeLength, param.layoutParam);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createActivationReaction = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createActivationReaction(param.proteinName, param.processPosition, param.edgeLength, param.reverse);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createTranslation = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createTranslation(param.regulatorLabel, param.outputLabel, param.orientation);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createTranscription = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createTranscription(param.label, param.orientation);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createDegradation = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createDegradation(param.macromolecule, param.orientation);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createComplexProteinFormation = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createComplexProteinFormation(param.proteinLabels, param.complexLabel, param.regulator, param.orientation, param.reverse);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createMultimerization = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createMultimerization(param.macromolecule, param.regulator, param.regulatorMultimer, param.orientation);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createConversion = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createConversion(param.macromolecule, param.regulator, param.regulatorMultimer, param.orientation, param.inputInfoboxLabels, param.outputInfoboxLabels);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createMetabolicReaction = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createMetabolicReaction(param.inputs, param.outputs, param.reversible, param.regulator, param.regulatorMultimer, param.orientation);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createMetabolicCatalyticActivity = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createMetabolicCatalyticActivity(param.inputNodeList, param.outputNodeList, param.catalystName, param.catalystType, param.processPosition, param.tilingPaddingVertical, param.tilingPaddingHorizontal, param.edgeLength);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createTranscriptionReaction = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createTranscriptionReaction(param.geneName, param.mRnaName, param.processPosition, param.edgeLength);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    };

    undoRedoActionFunctions.createTranslationReaction = function (param) {
      var firstTime = param.firstTime;
      var eles;

      if (firstTime) {
        eles = elementUtilities.createTranslationReaction(param.mRnaName, param.proteinName, param.processPosition, param.edgeLength);
      } else {
        eles = param;
        cy.add(eles);
        cy.elements().unselect();
        eles.select();
      }

      return {
        eles: eles
      };
    }; // Section End
    // easy creation action functions
    // Section Start
    // general action functions


    undoRedoActionFunctions.getNodePositions = function () {
      var positions = {};
      var nodes = cy.nodes();
      nodes.each(function (ele, i) {
        if (typeof ele === "number") {
          ele = i;
        }

        positions[ele.id()] = {
          x: ele.position("x"),
          y: ele.position("y")
        };
      });
      return positions;
    };

    undoRedoActionFunctions.returnToPositions = function (positions) {
      var currentPositions = {};
      cy.nodes().positions(function (ele, i) {
        if (typeof ele === "number") {
          ele = i;
        }

        currentPositions[ele.id()] = {
          x: ele.position("x"),
          y: ele.position("y")
        };
        var pos = positions[ele.id()];
        return {
          x: pos.x,
          y: pos.y
        };
      });
      return currentPositions;
    };

    undoRedoActionFunctions.resizeNodes = function (param) {
      var result = {
        performOperation: true
      };
      var nodes = param.nodes;
      result.sizeMap = {};
      result.useAspectRatio = false;
      result.preserveRelativePos = param.preserveRelativePos;

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];

        if (node.isParent()) {
          result.sizeMap[node.id()] = {
            w: node.data("minWidth") || 0,
            h: node.data("minHeight") || 0,
            biasL: node.data("minWidthBiasLeft") || 0,
            biasR: node.data("minWidthBiasRight") || 0,
            biasT: node.data("minHeightBiasTop") || 0,
            biasB: node.data("minHeightBiasBottom") || 0 // w: node.css("minWidth") != 0?  node.data("minWidth") : node.children().boundingBox().w,
            //h: node.css("min-height") != 0?  node.data("minHeight") : node.children().boundingBox().h

          };
        } else {
          result.sizeMap[node.id()] = {
            w: node.width(),
            h: node.height()
          };
        }
      }

      result.nodes = nodes;

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];

        if (param.performOperation) {
          if (param.sizeMap) {
            /* if (param.preserveRelativePos === true) {
              var oldWidth = node.data("bbox").w;
              var oldHeight = node.data("bbox").h;
            } */
            if (node.isParent()) {
              node.data("minHeight", param.sizeMap[node.id()].h);
              node.data("minWidth", param.sizeMap[node.id()].w);
              node.data("minWidthBiasLeft", param.sizeMap[node.id()].biasL);
              node.data("minWidthBiasRight", param.sizeMap[node.id()].biasR);
              node.data("minHeightBiasTop", param.sizeMap[node.id()].biasT);
              node.data("minHeightBiasBottom", param.sizeMap[node.id()].biasB);
            } else {
              node.data("bbox").w = param.sizeMap[node.id()].w;
              node.data("bbox").h = param.sizeMap[node.id()].h;
            }
            /* if (param.preserveRelativePos === true) {
              var statesandinfos = node.data('statesandinfos');
              var topBottom = statesandinfos.filter(box => (box.anchorSide === "top" || box.anchorSide === "bottom"));
              var rightLeft = statesandinfos.filter(box => (box.anchorSide === "right" || box.anchorSide === "left"));
               topBottom.forEach(function(box){
                if (box.bbox.x < 0) {
                  box.bbox.x = 0;
                }
                else if (box.bbox.x > oldWidth) {
                  box.bbox.x = oldWidth;
                }
                box.bbox.x = node.data("bbox").w * box.bbox.x / oldWidth;
              });
               rightLeft.forEach(function(box){
                if (box.bbox.y < 0) {
                  box.bbox.y = 0;
                }
                else if (box.bbox.y > oldHeight) {
                  box.bbox.y = oldHeight;
                }
                box.bbox.y = node.data("bbox").h * box.bbox.y / oldHeight;
              });
            } */

          } else {
            elementUtilities.resizeNodes(param.nodes, param.width, param.height, param.useAspectRatio, param.preserveRelativePos);
          }
        }
      }

      cy.style().update();
      return result;
    };

    undoRedoActionFunctions.changeNodeLabel = function (param) {
      var result = {};
      var nodes = param.nodes;
      result.nodes = nodes;
      result.label = {};

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        result.label[node.id()] = node._private.data.label;
      }

      if (param.firstTime) {
        nodes.data('label', param.label);
      } else {
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          node._private.data.label = param.label[node.id()];
        }
      }

      return result;
    };

    undoRedoActionFunctions.updateInfoboxStyle = function (param) {
      var result = {};
      var style = param.node.data('statesandinfos')[param.index].style;
      result.newProps = $.extend({}, style);
      result.node = param.node;
      result.index = param.index;
      elementUtilities.updateInfoboxStyle(param.node, param.index, param.newProps);
      return result;
    };

    undoRedoActionFunctions.updateInfoboxObj = function (param) {
      var result = {};
      var obj = param.node.data('statesandinfos')[param.index];
      result.newProps = $.extend({}, obj);
      result.node = param.node;
      result.index = param.index;
      elementUtilities.updateInfoboxObj(param.node, param.index, param.newProps);
      return result;
    };

    undoRedoActionFunctions.changeData = function (param) {
      var result = {};
      var eles = param.eles;
      result.name = param.name;
      result.valueMap = {};
      result.eles = eles;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        result.valueMap[ele.id()] = ele.data(param.name);
      }

      elementUtilities.changeData(param.eles, param.name, param.valueMap);
      return result;
    };

    undoRedoActionFunctions.updateSetField = function (param) {
      var updates = elementUtilities.updateSetField(param.ele, param.fieldName, param.toDelete, param.toAdd, param.callback);
      var result = {
        ele: param.ele,
        fieldName: param.fieldName,
        callback: param.callback,
        toDelete: updates.added,
        toAdd: updates.deleted
      };
      return result;
    };

    undoRedoActionFunctions.changeCss = function (param) {
      var result = {};
      var eles = param.eles;
      result.name = param.name;
      result.valueMap = {};
      result.eles = eles;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        result.valueMap[ele.id()] = ele.css(param.name);
      }

      elementUtilities.changeCss(param.eles, param.name, param.valueMap);
      return result;
    };

    undoRedoActionFunctions.changeFontProperties = function (param) {
      var result = {};
      var eles = param.eles;
      result.data = {};
      result.eles = eles;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        result.data[ele.id()] = {};
        var data = param.firstTime ? param.data : param.data[ele.id()];

        for (var prop in data) {
          result.data[ele.id()][prop] = ele.data(prop);
        }
      }

      if (param.firstTime) {
        elementUtilities.changeFontProperties(eles, data);
      } else {
        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          elementUtilities.changeFontProperties(ele, data);
        }
      }

      return result;
    };
    /*
     * Show eles and perform layout.
     */


    undoRedoActionFunctions.showAndPerformLayout = function (param) {
      var eles = param.eles;
      var result = {};
      result.positions = undoRedoActionFunctions.getNodePositions();

      if (param.firstTime) {
        result.eles = elementUtilities.showAndPerformLayout(param.eles, param.layoutparam);
      } else {
        result.eles = cy.viewUtilities().show(eles); // Show given eles

        undoRedoActionFunctions.returnToPositions(param.positions);
      }

      return result;
    };

    undoRedoActionFunctions.undoShowAndPerformLayout = function (param) {
      var eles = param.eles;
      var result = {};
      result.positions = undoRedoActionFunctions.getNodePositions();
      result.eles = cy.viewUtilities().hide(eles); // Hide previously unhidden eles;

      undoRedoActionFunctions.returnToPositions(param.positions);
      return result;
    };
    /*
     * Hide eles and perform layout.
     */


    undoRedoActionFunctions.hideAndPerformLayout = function (param) {
      var eles = param.eles;
      var result = {};
      result.positions = undoRedoActionFunctions.getNodePositions();

      if (param.firstTime) {
        result.eles = elementUtilities.hideAndPerformLayout(param.eles, param.layoutparam);
      } else {
        result.eles = cy.viewUtilities().hide(eles); // Hide given eles

        undoRedoActionFunctions.returnToPositions(param.positions);
      }

      return result;
    };

    undoRedoActionFunctions.undoHideAndPerformLayout = function (param) {
      var eles = param.eles;
      var result = {};
      result.positions = undoRedoActionFunctions.getNodePositions();
      result.eles = cy.viewUtilities().show(eles); // Show previously hidden eles

      undoRedoActionFunctions.returnToPositions(param.positions);
      return result;
    };
    /*
     * Delete eles and perform layout.
     */


    undoRedoActionFunctions.deleteAndPerformLayout = function (param) {
      var eles = param.eles;
      var result = {};
      result.positions = undoRedoActionFunctions.getNodePositions();

      if (param.firstTime) {
        result.eles = elementUtilities.deleteAndPerformLayout(param.eles, param.layoutparam);
      } else {
        result.eles = eles.remove();
        undoRedoActionFunctions.returnToPositions(param.positions);
      }

      return result;
    };

    undoRedoActionFunctions.undoDeleteAndPerformLayout = function (param) {
      var eles = param.eles;
      var result = {};
      result.positions = undoRedoActionFunctions.getNodePositions();
      result.eles = elementUtilities.restoreEles(eles);
      undoRedoActionFunctions.returnToPositions(param.positions);
      return result;
    }; // Section End
    // general action functions
    // Section Start
    // sbgn action functions


    undoRedoActionFunctions.changeStateOrInfoBox = function (param) {
      var result = {};
      result.type = param.type;
      result.nodes = param.nodes;
      result.index = param.index;
      var data = param.data;
      var tempData = elementUtilities.saveUnits(param.nodes);
      result.value = elementUtilities.changeStateOrInfoBox(param.nodes, param.index, param.value, param.type);
      /* var locations = elementUtilities.checkFit(param.nodes);
      if (locations !== undefined && locations.length > 0) {
        elementUtilities.fitUnits(param.nodes, locations);
      } */

      if (data !== undefined) {
        elementUtilities.restoreUnits(param.nodes, data);
      }

      cy.forceRender();
      result.data = tempData;
      return result;
    };

    undoRedoActionFunctions.addStateOrInfoBox = function (param) {
      var obj = param.obj;
      var nodes = param.nodes;
      var data = param.data;
      var tempData = elementUtilities.saveUnits(nodes);
      var locationObj = elementUtilities.addStateOrInfoBox(nodes, obj);
      /*  var locations = elementUtilities.checkFit(nodes);
       if (locations !== undefined && locations.length > 0) {
         elementUtilities.fitUnits(nodes, locations);
       } */

      if (data !== undefined) {
        elementUtilities.restoreUnits(nodes, data);
      }

      cy.forceRender();
      var result = {
        nodes: nodes,
        locationObj: locationObj,
        obj: obj,
        data: tempData
      };
      return result;
    };

    undoRedoActionFunctions.removeStateOrInfoBox = function (param) {
      var locationObj = param.locationObj;
      var nodes = param.nodes;
      var data = param.data;
      var tempData = elementUtilities.saveUnits(nodes);
      var obj = elementUtilities.removeStateOrInfoBox(nodes, locationObj);

      if (data !== undefined) {
        elementUtilities.restoreUnits(nodes, data);
      }

      cy.forceRender();
      var result = {
        nodes: nodes,
        obj: obj,
        data: tempData
      };
      return result;
    };

    undoRedoActionFunctions.fitUnits = function (param) {
      var node = param.node;
      var locations = param.locations;
      var obj = elementUtilities.fitUnits(node, locations);
      cy.forceRender();
      var result = {
        node: node,
        obj: obj,
        locations: locations
      };
      return result;
    };

    undoRedoActionFunctions.restoreUnits = function (param) {
      var node = param.node;
      var locations = param.locations;
      var obj = param.obj;
      var index = 0;
      node.data('statesandinfos').forEach(function (ele) {
        var box = obj[index++];
        ele.bbox.x = box.x;
        ele.bbox.y = box.y;
        var oldSide = ele.anchorSide;
        ele.anchorSide = box.anchorSide;
        elementUtilities.modifyUnits(node, ele, oldSide);
      });
      cy.forceRender();
      var result = {
        node: node,
        locations: locations
      };
      return result;
    };

    undoRedoActionFunctions.setMultimerStatus = function (param) {
      var firstTime = param.firstTime;
      var nodes = param.nodes;
      var status = param.status;
      var resultStatus = {};

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var isMultimer = node.data('class').endsWith(' multimer');
        resultStatus[node.id()] = isMultimer;
      } // If this is the first time change the status of all nodes at once.
      // If not change status of each seperately to the values mapped to their id.


      if (firstTime) {
        elementUtilities.setMultimerStatus(nodes, status);
      } else {
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          elementUtilities.setMultimerStatus(node, status[node.id()]);
        }
      } //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {
      //    $('#inspector-is-multimer').attr("checked", !$('#inspector-is-multimer').attr("checked"));
      //  }


      var result = {
        status: resultStatus,
        nodes: nodes
      };
      return result;
    };

    undoRedoActionFunctions.setCloneMarkerStatus = function (param) {
      var nodes = param.nodes;
      var status = param.status;
      var firstTime = param.firstTime;
      var resultStatus = {};

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        resultStatus[node.id()] = node.data('clonemarker');
        var currentStatus = firstTime ? status : status[node.id()];
        elementUtilities.setCloneMarkerStatus(node, currentStatus);
      } //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {
      //    $('#inspector-is-clone-marker').attr("checked", !$('#inspector-is-clone-marker').attr("checked"));
      //  }


      var result = {
        status: resultStatus,
        nodes: nodes
      };
      return result;
    }; // param: {class: sbgnclass, name: propertyName, value: value}


    undoRedoActionFunctions.setDefaultProperty = function (param) {
      var sbgnclass = param["class"];
      var name = param.name;
      var value = param.value;
      var classDefaults = elementUtilities.getDefaultProperties(sbgnclass);
      var result = {
        "class": sbgnclass,
        name: name,
        value: classDefaults.hasOwnProperty(name) ? classDefaults[name] : undefined
      };
      var propMap = {};
      propMap[name] = value;
      elementUtilities.setDefaultProperties(sbgnclass, propMap);
      return result;
    };

    undoRedoActionFunctions.addBackgroundImage = function (param) {
      var bgObj = param.bgObj;
      var nodes = param.nodes;
      var updateInfo = param.updateInfo;
      var promptInvalidImage = param.promptInvalidImage;
      var validateURL = param.validateURL;
      elementUtilities.addBackgroundImage(nodes, bgObj, updateInfo, promptInvalidImage, validateURL);
      cy.forceRender();
      var result = {
        nodes: nodes,
        bgObj: bgObj,
        updateInfo: updateInfo,
        promptInvalidImage: promptInvalidImage,
        validateURL: validateURL
      };
      return result;
    };

    undoRedoActionFunctions.removeBackgroundImage = function (param) {
      var bgObj = param.bgObj;
      var nodes = param.nodes;
      elementUtilities.removeBackgroundImage(nodes, bgObj);
      cy.forceRender();
      var result = {
        nodes: nodes,
        bgObj: bgObj
      };
      return result;
    };

    undoRedoActionFunctions.updateBackgroundImage = function (param) {
      var bgObj = param.bgObj;
      var nodes = param.nodes;
      var oldBgObj = elementUtilities.updateBackgroundImage(nodes, bgObj);
      cy.forceRender();
      var result = {
        nodes: nodes,
        bgObj: oldBgObj
      };
      return result;
    };

    undoRedoActionFunctions.changeBackgroundImage = function (param) {
      var oldImg = param.oldImg;
      var newImg = param.newImg;
      var nodes = param.nodes;
      var firstTime = param.firstTime;
      var updateInfo = param.updateInfo;
      var promptInvalidImage = param.promptInvalidImage;
      var validateURL = param.validateURL;
      var result = elementUtilities.changeBackgroundImage(nodes, oldImg, newImg, firstTime, updateInfo, promptInvalidImage, validateURL);
      cy.forceRender();
      return result;
    }; // Section End
    // sbgn action functions


    undoRedoActionFunctions.convertIntoReversibleReaction = function (param) {
      var collection = cy.collection();
      var mapType = elementUtilities.getMapType();
      elementUtilities.setMapType(param.mapType);
      $('#map-type').val(param.mapType);
      param.collection.forEach(function (edge) {
        var sourceNode = edge._private.data.source;
        var targetNode = edge._private.data.target;
        edge.move({
          source: targetNode,
          target: sourceNode
        });
        var convertedEdge = cy.getElementById(edge.id());

        if (convertedEdge.data("cyedgebendeditingDistances")) {
          var distance = convertedEdge.data("cyedgebendeditingDistances");
          distance = distance.map(function (element) {
            return -1 * element;
          });
          convertedEdge.data("cyedgebendeditingDistances", distance.reverse());
          var weight = convertedEdge.data("cyedgebendeditingWeights");
          weight = weight.map(function (element) {
            return 1 - element;
          });
          convertedEdge.data("cyedgebendeditingWeights", weight.reverse());
        }

        if (convertedEdge.data("cyedgecontroleditingDistances")) {
          var _distance = convertedEdge.data("cyedgecontroleditingDistances");

          _distance = _distance.map(function (element) {
            return -1 * element;
          });
          convertedEdge.data("cyedgecontroleditingDistances", _distance.reverse());

          var _weight = convertedEdge.data("cyedgecontroleditingWeigths");

          _weight = _weight.map(function (element) {
            return 1 - element;
          });
          convertedEdge.data("cyedgecontroleditingWeigths", _weight.reverse());
        }

        if (convertedEdge._private.data["class"] === "consumption") {
          convertedEdge._private.data["class"] = "production";
          convertedEdge._private.data.portsource = targetNode + ".1";
          convertedEdge._private.data.porttarget = sourceNode;
        } else if (convertedEdge._private.data["class"] === "production") {
          convertedEdge._private.data["class"] = "consumption";
          convertedEdge._private.data.portsource = targetNode;
          convertedEdge._private.data.porttarget = sourceNode + ".1";
        }

        collection = collection.add(convertedEdge);
        cy.style().update();
      });
      var result = {
        collection: collection,
        mapType: mapType,
        processId: param.processId
      };
      return result;
    };

    undoRedoActionFunctions.moveEdge = function (param) {
      var result = {};
      var edge = param.edge;
      result.name = param.name;
      result.source = edge.source().id();
      result.target = edge.target().id();
      result.portsource = edge.data("portsource");
      result.porttarget = edge.data("porttarget");
      elementUtilities.changeData(edge, 'source', param.source);
      elementUtilities.changeData(edge, 'target', param.target);
      elementUtilities.changeData(edge, 'portsource', param.portsource);
      elementUtilities.changeData(edge, 'porttarget', param.porttarget);
      edge = edge.move({
        target: param.target,
        source: param.source
      });
      result.edge = edge;
      return result;
    };

    undoRedoActionFunctions.fixError = function (param) {
      var errorCode = param.errorCode;
      var result = {};
      result.errorCode = errorCode;

      if (errorCode == "pd10101" || errorCode == 'pd10102') {
        result.edge = elementUtilities.reverseEdge(param.edge);
        return result;
      } else if (errorCode == "pd10103" || errorCode == 'pd10107') {
        param.newNodes.forEach(function (newNode) {
          elementUtilities.addNode(newNode.x, newNode.y, newNode["class"], newNode.id, undefined);
        });
        param.newEdges.forEach(function (newEdge) {
          elementUtilities.addEdge(newEdge.source, newEdge.target, newEdge["class"]);
        });
        param.oldEdges.forEach(function (oldEdge) {
          cy.elements().unselect(); //return 

          oldEdge.remove();
        });
        param.node.remove();
        return param;
      } else if (errorCode == "pd10105" || errorCode == 'pd10106') {
        result.edge = elementUtilities.reverseEdge(param.edge);
        return result;
      } else if (errorCode == "pd10140") {
        param.node.remove();
        return param;
      } else if (errorCode == "pd10104") {
        param.edges.forEach(function (edge) {
          edge.remove();
        });
        param.nodes.forEach(function (node) {
          node.remove();
        });
        return param;
      } else if (errorCode == "pd10108") {
        param.edges.forEach(function (edge) {
          edge.remove();
        });
        param.nodes.forEach(function (node) {
          node.remove();
        });
        return param;
      } else if (errorCode == "pd10111") {
        param.edges.forEach(function (edge) {
          edge.remove();
        });
        return param;
      } else if (errorCode == "pd10126") {
        param.edges.forEach(function (edge) {
          edge.remove();
        });
        param.nodes.forEach(function (node) {
          node.remove();
        });
        return param;
      } else if (errorCode == "pd10109" || errorCode == "pd10124") {
        result.newSource = param.edge.data().source;
        result.newTarget = param.edge.data().target;
        result.portsource = param.edge.data().portsource;
        var clonedEdge = param.edge.clone();
        var edgeParams = {
          "class": clonedEdge.data()["class"],
          language: clonedEdge.data().language
        };
        clonedEdge.data().source = param.newSource;
        clonedEdge.data().target = param.newTarget;
        cy.remove(param.edge);
        result.edge = elementUtilities.addEdge(param.newSource, param.newTarget, edgeParams, clonedEdge.data().id);
        return result;
      } else if (errorCode == "pd10112") {
        param.callback = elementUtilities.maintainPointer; // If this is first time we should move the node to its new parent and relocate it by given posDiff params
        // else we should remove the moved eles and restore the eles to restore

        if (param.firstTime) {
          var newParentId = param.parentData == undefined ? null : param.parentData; // These eles includes the nodes and their connected edges and will be removed in nodes.move().
          // They should be restored in undo

          var withDescendant = param.nodes.union(param.nodes.descendants());
          result.elesToRestore = withDescendant.union(withDescendant.connectedEdges()); // These are the eles created by nodes.move(), they should be removed in undo.

          result.movedEles = param.nodes.move({
            "parent": newParentId
          });
          var posDiff = {
            x: param.posDiffX,
            y: param.posDiffY
          };
          elementUtilities.moveNodes(posDiff, result.movedEles);
        } else {
          result.elesToRestore = param.movedEles.remove();
          result.movedEles = param.elesToRestore.restore();
        }

        if (param.callback) {
          result.callback = param.callback; // keep the provided callback so it can be reused after undo/redo

          param.callback(result.movedEles); // apply the callback on newly created elements
        }

        return result;
      } else if (errorCode == "pd10125") {
        result.edge = param.edge.remove();
        result.newEdge = {};
        var edgeclass = param.newEdge.edgeParams["class"] ? param.newEdge.edgeParams["class"] : param.newEdge.edgeParams;
        var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(param.newEdge.source), cy.getElementById(param.newEdge.target));

        if (validation === 'reverse') {
          var temp = param.newEdge.source;
          param.newEdge.source = param.newEdge.target;
          param.newEdge.target = temp;
        }

        result.newEdge.id = elementUtilities.addEdge(param.newEdge.source, param.newEdge.target, param.newEdge.edgeParams).id();
        result.newEdge.source = param.newEdge.source;
        result.newEdge.target = param.newEdge.target;
        result.newEdge.edgeParams = param.newEdge.edgeParams;
        return result;
      } else if (errorCode == "pd10142") {
        result.edge = param.edge.remove();
        result.newEdge = {};
        var edgeclass = param.newEdge.edgeParams["class"] ? param.newEdge.edgeParams["class"] : param.newEdge.edgeParams;
        var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(param.newEdge.source), cy.getElementById(param.newEdge.target));

        if (validation === 'reverse') {
          var temp = param.newEdge.source;
          param.newEdge.source = param.newEdge.target;
          param.newEdge.target = temp;
        }

        result.newEdge.id = elementUtilities.addEdge(param.newEdge.source, param.newEdge.target, param.newEdge.edgeParams).id();
        result.newEdge.source = param.newEdge.source;
        result.newEdge.target = param.newEdge.target;
        result.newEdge.edgeParams = param.newEdge.edgeParams;
        return result;
      } else {
        result.newSource = param.edge.source().id();
        result.newTarget = param.edge.target().id();
        result.porttarget = param.edge.data("porttarget");
        result.edge = param.edge.move({
          target: param.newTarget,
          source: param.newSource
        });
        elementUtilities.changeData(result.edge, 'porttarget', param.porttarget);
        return result;
      }
    };

    undoRedoActionFunctions.unfixError = function (param) {
      var errorCode = param.errorCode;
      var result = {};
      result.errorCode = errorCode;

      if (errorCode == "pd10101" || errorCode == 'pd10102') {
        result.edge = elementUtilities.reverseEdge(param.edge);
        return result;
      } else if (errorCode == "pd10103" || errorCode == 'pd10107') {
        param.newNodes.forEach(function (newNode) {
          cy.remove(cy.$('#' + newNode.id));
        });
        param.node.restore();
        param.oldEdges.forEach(function (oldEdge) {
          oldEdge.restore();
        });
        cy.animate({
          duration: 100,
          easing: 'ease',
          fit: {
            eles: {},
            padding: 20
          },
          complete: function complete() {}
        });
        return param;
      } else if (errorCode == "pd10105" || errorCode == 'pd10106') {
        result.edge = elementUtilities.reverseEdge(param.edge);
        return result;
      } else if (errorCode == "pd10140") {
        param.node.restore();
        cy.animate({
          duration: 100,
          easing: 'ease',
          fit: {
            eles: {},
            padding: 20
          },
          complete: function complete() {}
        });
        return param;
      } else if (errorCode == "pd10104") {
        param.nodes.forEach(function (node) {
          node.restore();
        });
        param.edges.forEach(function (edge) {
          edge.restore();
        });
        return param;
      } else if (errorCode == "pd10108") {
        param.nodes.forEach(function (node) {
          node.restore();
        });
        param.edges.forEach(function (edge) {
          edge.restore();
        });
        return param;
      } else if (errorCode == "pd10111") {
        param.edges.forEach(function (edge) {
          edge.restore();
        });
        return param;
      } else if (errorCode == "pd10126") {
        param.nodes.forEach(function (node) {
          node.restore();
        });
        param.edges.forEach(function (edge) {
          edge.restore();
        });
        return param;
      } else if (errorCode == "pd10109" || errorCode == "pd10124") {
        result.newSource = param.edge.source().id();
        result.newTarget = param.edge.target().id();
        result.portsource = param.portsource;
        result.edge = param.edge.move({
          target: param.newTarget,
          source: param.newSource
        });
        elementUtilities.changeData(result.edge, 'portsource', param.portsource);
        return result;
      } else if (errorCode == "pd10112") {
        // If this is first time we should move the node to its new parent and relocate it by given posDiff params
        // else we should remove the moved eles and restore the eles to restore
        if (param.firstTime) {
          var newParentId = param.parentData == undefined ? null : param.parentData; // These eles includes the nodes and their connected edges and will be removed in nodes.move().
          // They should be restored in undo

          var withDescendant = param.nodes.union(param.nodes.descendants());
          result.elesToRestore = withDescendant.union(withDescendant.connectedEdges()); // These are the eles created by nodes.move(), they should be removed in undo.

          result.movedEles = param.nodes.move({
            "parent": newParentId
          });
          var posDiff = {
            x: param.posDiffX,
            y: param.posDiffY
          };
          elementUtilities.moveNodes(posDiff, result.movedEles);
        } else {
          result.elesToRestore = param.movedEles.remove();
          result.movedEles = param.elesToRestore.restore();
        }

        if (param.callback) {
          result.callback = param.callback; // keep the provided callback so it can be reused after undo/redo

          param.callback(result.movedEles); // apply the callback on newly created elements
        }

        return result;
      } else if (errorCode == "pd10125") {
        cy.$('#' + param.newEdge.id).remove();
        param.edge = param.edge.restore();
        return param;
      } else if (errorCode == "pd10142") {
        cy.$('#' + param.newEdge.id).remove();
        param.edge = param.edge.restore();
        return param;
      } else {
        result.newSource = param.edge.source().id();
        result.newTarget = param.edge.target().id();
        result.porttarget = param.edge.data("porttarget");
        result.edge = param.edge.move({
          target: param.newTarget,
          source: param.newSource
        });
        elementUtilities.changeData(result.edge, 'porttarget', param.porttarget);
        return result;
      }
    };

    undoRedoActionFunctions.cloneHighDegreeNode = function (node) {
      var result = {};
      var oldX = node.position().x;
      var oldY = node.position().y;

      var claculateNewClonePosition = function claculateNewClonePosition(sourceEndPointX, sourceEndPointY, targetEndPointX, targetEndPointY, desiredDistance, direction) {
        var distance = Math.sqrt(Math.pow(targetEndPointY - sourceEndPointY, 2) + Math.pow(targetEndPointX - sourceEndPointX, 2));
        var ratio = desiredDistance / distance;
        var result = {};

        if (direction == "source") {
          result.cx = (1 - ratio) * sourceEndPointX + ratio * targetEndPointX;
          result.cy = (1 - ratio) * sourceEndPointY + ratio * targetEndPointY;
        } else {
          result.cx = (1 - ratio) * targetEndPointX + ratio * sourceEndPointX;
          result.cy = (1 - ratio) * targetEndPointY + ratio * sourceEndPointY;
        }

        return result;
      };

      var edges = node.connectedEdges();
      var desiredDistance = (node.height() > node.width() ? node.height() : node.width()) * 0.1;

      for (var i = 1; i < edges.length; i++) {
        var edge = edges[i];
        var index = i;
        var edgeClone = edge.clone();
        var startPosition = edge.source().id() == node.id() ? "source" : "target";
        var newPosition = claculateNewClonePosition(edge.sourceEndpoint().x, edge.sourceEndpoint().y, edge.targetEndpoint().x, edge.targetEndpoint().y, desiredDistance, startPosition);
        var newNodeId = node.id() + 'clone-' + index; //edgeClone.data().id = edgeClone.data().id+ "-"+newNodeId;

        if (edge.source().id() == node.id()) {
          edgeClone.data().source = newNodeId;
          edgeClone.data().portsource = newNodeId;
        } else {
          edgeClone.data().target = newNodeId;
          edgeClone.data().porttarget = newNodeId;
        }

        var newNode = node.clone();
        newNode.data().id = newNodeId;
        cy.add(newNode);
        edge.remove();
        cy.add(edgeClone);
        newNode.position({
          x: newPosition.cx,
          y: newPosition.cy
        });
        elementUtilities.setCloneMarkerStatus(newNode, true);
      }

      var newPosition = claculateNewClonePosition(edges[0].sourceEndpoint().x, edges[0].sourceEndpoint().y, edges[0].targetEndpoint().x, edges[0].targetEndpoint().y, desiredDistance, edges[0].source().id() == node.id() ? "source" : "target");
      var cloneEdge = edges[0].clone(); //cloneEdge.data().id = cloneEdge.data().id+ "-"+node.id()+'clone-0';

      edges[0].remove();
      cy.add(cloneEdge);
      elementUtilities.setCloneMarkerStatus(node, true);
      node.position({
        x: newPosition.cx,
        y: newPosition.cy
      });
      result.oldX = oldX;
      result.oldY = oldY;
      result.node = node;
      result.numberOfEdges = edges.length;
      return result;
    };

    undoRedoActionFunctions.unCloneHighDegreeNode = function (param) {
      var node = param.node;
      elementUtilities.setCloneMarkerStatus(node, false);
      node.position({
        x: param.oldX,
        y: param.oldY
      });

      for (var i = 1; i < param.numberOfEdges; i++) {
        var cloneId = node.id() + 'clone-' + i;
        var clone = cy.$("#" + cloneId);
        var cloneEdge = clone.connectedEdges()[0];
        var edge = cloneEdge.clone();

        if (edge.data().source == cloneId) {
          edge.data().source = node.id();
          edge.data().portsource = node.id();
        } else {
          edge.data().target = node.id();
          edge.data().porttarget = node.id();
        }

        cloneEdge.remove();
        clone.remove();
        cy.add(edge);
      }

      return node;
    };

    undoRedoActionFunctions.changeMapType = function (param) {
      var result = {};
      var currentMapType = elementUtilities.getMapType();
      elementUtilities.setMapType(param.mapType);
      result.mapType = currentMapType;
      result.callback = param.callback;
      param.callback();
      return result;
    };
  }

  return undoRedoActionFunctionsExtender;
};

/***/ }),

/***/ "./node_modules/lodash.isequal/index.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash.isequal/index.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    asyncTag = '[object AsyncFunction]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    nullTag = '[object Null]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    proxyTag = '[object Proxy]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    undefinedTag = '[object Undefined]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = isEqual;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,